
#ifndef DRIVERS_ET1100_H_
#define DRIVERS_ET1100_H_

#include "port/typedef_port.h"
#include "port/peripheral_port.hpp"

#include <string.h>
#include "esc_soes.h"

#define MAX_READ_SIZE   			128

#define ESC_CMD_NOP     			0x00
#define ESC_CMD_READ    			0x02
#define ESC_CMD_READWS  			0x03
#define ESC_CMD_WRITE   			0x04


#define ESC_TERM        			0xff
#define ESC_NEXT        			0x00

#define ESCREG_PDI_CONTROL         	0x0140
#define ESCREG_ESC_CONFIG          	0x0141

#define DC_SYNC_OUT                	0x04
#define ESCREG_CYCLIC_UNIT_CONTROL 	0x0980

#define SYNC_OUT_UNIT_CONTROL_MASK 	0x01
#define SYNC_OUT_ECAT_CONTROL      	0x00
#define SYNC_OUT_PDI_CONTROL       	0x01

#define ESCREG_SYNC0_CYCLE_TIME    	0x09A0
#define ESCREG_SYNC_START_TIME     	0x0990

// measured with 21MHz SPI PDI
#define SYNC_START_OFFSET     		2342840

#define GPIO_ECAT_RESET    			1 	 /* specific function to hold ESC reset on startup
                              	  	  	  * when emulating EEPROM
                              	  	  	  */

#define DELAY_1_uS      160   	// todo tweak to used clock speed


class ET1100
{
	public:
		ET1100(
				Port::SPIComm 	&spi,
				Port::CS 		&cs,
				Port::EXIT 		&spiIrq,
				Port::EXIT 		&sync0,
				Port::EXIT 		&sync1,
				Port::TIM		&tim,
				Port::GPIO		&eepromLoaded
				);
		virtual ~ET1100();

		void 		EscInit(const esc_cfg_t * config);
		uint32_t 	EscEnableDC();

		void 		EscAddress (uint16_t address, uint8_t command);
		void 		EscRead (uint16_t address, void *buf, uint16_t len);
		void 		EscWrite (uint16_t address, void *buf, uint16_t len);

		void 		EscInterruptEnable (uint32_t mask);
		void 		EscInterruptDisable (uint32_t mask);

	private:
		Port::SPIComm 	&spi_;
		Port::CS 		&cs_;
		Port::EXIT		&spiIrq_;
		Port::EXIT		&sync0_;
		Port::EXIT		&sync1_;
		Port::TIM		&tim_;
		Port::GPIO		&eepromLoaded_;

		uint8_t 		spiTxData_[4];
		uint8_t 		spiRxData_[4];

		uint8_t 		read_termination_[MAX_READ_SIZE] = { 0 };
};

#endif

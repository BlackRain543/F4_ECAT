#include "esc_soes.h"
#include "ecat_slv.h"
#include "utypes.h"

#include "cia402/cia402.h"
#include "app/ecat_app.h"
#include "hw/dwt.h"

//#include "esc_irq.h"
//#include "pdo_override.h"
//#include "usart.h"

/* CANopen Object Dictionary */
_Objects    Obj;

/* Application hook declaration */
void ecatapp(void);
uint16_t check_dc_handler(void);

/* CiA402 hooks declarations */
void app_cia402_init(void);
void app_cia402_mc(void);

/* SOES configuration */
static esc_cfg_t config =
{
    .user_arg = "et1100",
    .use_interrupt 				= 1,
    .watchdog_cnt 				= INT32_MAX,
    .set_defaults_hook 			= NULL,
    .pre_state_change_hook 		= NULL,
    .post_state_change_hook 	= NULL,
    .application_hook 			= ecatapp,
    .safeoutput_override 		= NULL,
    .pre_object_download_hook 	= NULL,
    .post_object_download_hook 	= NULL,

    .rxpdo_override 			= NULL,
    .txpdo_override 			= NULL,

    .esc_hw_interrupt_enable 	= ESC_interrupt_enable,
    .esc_hw_interrupt_disable 	= ESC_interrupt_disable,

    .esc_hw_eep_handler 		= NULL,
    .esc_check_dc_handler 		= check_dc_handler,
};

/* CiA402 motion control configuration */
cia402_axis_t cia402axis =
{
    .init_od_hook 			= app_cia402_init,
    .motion_control_hook 	= app_cia402_mc,
};


void ecatapp_init(void)
{
    ecat_slv_init(&config);
    cia402_init(&cia402axis);

//	init_override();
}

uint16_t check_dc_handler (void)
{
    // minimum watchdog value is 1 ms, in nanoseconds
    #define MIN_WATCHDOG_VALUE_NS      1000000

    /* Indicate we run DC */
    ESCvar.dcsync = 1;
    /* Fetch the sync counter limit (SDO10F1) */
    ESCvar.synccounterlimit = Obj.ErrorSettings.SyncErrorCounterLimit;

    uint32_t sync0cycleTime = ESC_enable_DC();
    Obj.Sync_Manager_2_Parameters.CycleTime = sync0cycleTime;

    // Obj.Sync_Manager_3_Parameters.CycleTime = sync0cycleTime;
    // calculate watchdog value as 2 x SYNC0 cycle time
    int watchdog_value = 2 * sync0cycleTime;
    if (watchdog_value < MIN_WATCHDOG_VALUE_NS)
    {
        watchdog_value = MIN_WATCHDOG_VALUE_NS;
    }
    APP_setwatchdog(watchdog_value);

    return 0;
}

void ecatapp()
{
    cia402_state_machine(&cia402axis, Obj.Control_Word);
}

void app_cia402_init(void)
{
    /* Match CiA 402 objects to used CoE Object Dictionary implementation */
    cia402axis.statusword = &Obj.Status_Word;
    cia402axis.ALstatus = &ESCvar.ALstatus;
}


void app_cia402_mc()
{
    // TODO motion control here
    Obj.Position_actual = Obj.Target_position; // dummy loopback

    // csp is the only supported mode for now
    *(cia402axis.statusword) |= CIA402_STATUSWORD_CSP_DRIVE_FOLLOWS_COMMAND;
}

void cb_get_inputs()
{
    /* SOES reqires this function but nothing to do here in CiA402 app */
    Obj.CounterOut = actual_value;
}


void cb_set_outputs()
{
    /* SOES reqires this function but nothing to do here in CiA402 app */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
}

// SYNC0
static uint8_t sync0_irq_flag = 0;

void EXTI0_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
        sync0_irq_flag = 1;
    }
}

// SYNC1
static uint8_t sync1_irq_flag = 0;

void EXTI1_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
        sync1_irq_flag = 1;
    }
}

// PDI
static uint8_t pdi_irq_flag = 0;

void EXTI9_5_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
        sync0_irq_flag = 1;
    }
}


void ecatapp_loop(void)
{
    // stack in mixed mode
    if (sync0_irq_flag)
    {
        ESC_updateALevent();
        DIG_process (DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
        sync0_irq_flag = 0;
    }

    if (sync1_irq_flag)
    {
        ESC_updateALevent();
        DIG_process (DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
        sync1_irq_flag = 0;
    }


    if (pdi_irq_flag)
    {
        ESC_updateALevent();
        if (ESCvar.dcsync)
        {
            DIG_process (DIG_PROCESS_OUTPUTS_FLAG);
        }
        else
        {
            DIG_process (DIG_PROCESS_OUTPUTS_FLAG | DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
        }
        pdi_irq_flag = 0;
    }
    else
    {
//		ecat_slv_worker(
//				ESCREG_ALEVENT_CONTROL
//				| ESCREG_ALEVENT_SMCHANGE
//				| ESCREG_ALEVENT_SM0
//				| ESCREG_ALEVENT_SM1
//				);

        ecat_slv_poll();
        DIG_process(DIG_PROCESS_WD_FLAG);
    }
}

uint32_t ecatapp_benchmark_us()
{
    // benchmark start
    stopwatch_t st;
    stopwatch_start(&st);

    ecatapp_loop();

    // benchmark stop
    volatile uint32_t elapsed_us = stopwatch_now_us(&st);

    static volatile uint32_t hiscore = 0;

    if (elapsed_us > hiscore)
    {
        hiscore = elapsed_us;
    }

    return elapsed_us;
}

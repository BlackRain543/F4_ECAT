#include <drivers/lan9252.h>

LAN9252::LAN9252(
		Port::SPIComm 	&spi,
		Port::CS 		&cs,
		Port::EXIT 		&spiIrq,
		Port::EXIT 		&sync0,
		Port::EXIT 		&sync1,
		Port::TIM		&tim
		)
: spi_(spi),
  cs_(cs),
  spiIrq_(spiIrq),
  sync0_(sync0),
  sync1_(sync1),
  tim_(tim)
{


}

LAN9252::~LAN9252()
{

}

/* Init */
void LAN9252::EscInit (const esc_cfg_t * config)
{
   uint32_t value;

   /*
    * Reset the ecat core here due to evb-lan9252-digio not having any GPIO
    * for that purpose.
    */
   WriteReg(ESC_RESET_CTRL_REG,ESC_RESET_CTRL_RST);
   do
   {
      value = Read(ESC_CSR_CMD_REG);
   } while(value & ESC_RESET_CTRL_RST);
}

/* lan9252 singel write */
void LAN9252::WriteReg(uint16_t address, uint32_t val)
{
	spiTxData_[0] = ESC_CMD_SERIAL_WRITE;
	spiTxData_[1] = ((address >> 8) & 0xFF);
	spiTxData_[2] = (address & 0xFF);
	spiTxData_[3] = (val & 0xFF);
	spiTxData_[4] = ((val >> 8)  & 0xFF);
	spiTxData_[5] = ((val >> 16) & 0xFF);
	spiTxData_[6] = ((val >> 24) & 0xFF);

	cs_.Select();
	spi_.Transmit(spiTxData_, 7);
    cs_.Release();
}

/* lan9252 single read */
uint32_t LAN9252::Read(uint32_t address)
{
	spiTxData_[0] = ESC_CMD_FAST_READ;
	spiTxData_[1] = ((address >> 8) & 0xFF);
	spiTxData_[2] = (address & 0xFF);
	spiTxData_[3] = ESC_CMD_FAST_READ_DUMMY;

	cs_.Select();
	spi_.TransmitReceive(spiTxData_, spiRxData_, 4);
	cs_.Release();

	regVal_ = (spiRxData_[3] << 24) |  (spiRxData_[2] << 16) | (spiRxData_[1] << 8) | spiRxData_[0];

	return regVal_;
}

/* ESC read CSR function */
void LAN9252::EscReadCsr(uint16_t address, void *buf, uint16_t len)
{
	uint32_t value;

	value = (ESC_CSR_CMD_READ | ESC_CSR_CMD_SIZE(len) | address);
	WriteReg(ESC_CSR_CMD_REG, value);

	do
	{
	  value = Read(ESC_CSR_CMD_REG);
	} while(value & ESC_CSR_CMD_BUSY);

	value = Read(ESC_CSR_DATA_REG);
	memcpy(buf, (uint8_t *)&value, len);
}

/* ESC write CSR function */
void LAN9252::EscWriteCsr(uint16_t address, void *buf, uint16_t len)
{
	uint32_t value;

	memcpy((uint8_t*)&value, buf,len);
	WriteReg(ESC_CSR_DATA_REG, value);

	value = ESC_CSR_CMD_WRITE;
	value |= (uint32_t)ESC_CSR_CMD_SIZE(len);
	value |= address;
	WriteReg(ESC_CSR_CMD_REG, value);

	do
	{
	  value = Read(ESC_CSR_CMD_REG);
	} while(value & ESC_CSR_CMD_BUSY);
}

/* ESC read process data ram function */
void LAN9252::EscReadPram (uint16_t address, void *buf, uint16_t len)
{
	uint32_t value;
	uint8_t *temp_buf = (uint8_t *)buf;
	uint16_t byte_offset = 0;
	uint8_t fifo_cnt, first_byte_position, temp_len;


	value = ESC_PRAM_CMD_ABORT;
	WriteReg(ESC_PRAM_RD_CMD_REG, value);

	do
	{
	  value = Read(ESC_PRAM_RD_CMD_REG);
	}while(value & ESC_PRAM_CMD_BUSY);

	value = (uint32_t)(ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address));
	WriteReg(ESC_PRAM_RD_ADDR_LEN_REG, value);

	value = ESC_PRAM_CMD_BUSY;
	WriteReg(ESC_PRAM_RD_CMD_REG, value);

	do
	{
	  value = Read(ESC_PRAM_RD_CMD_REG);
	}while((value & ESC_PRAM_CMD_AVAIL) == 0);

	/* Fifo count */
	fifo_cnt = (uint8_t)ESC_PRAM_CMD_CNT(value);

	/* Read first value from FIFO */
	value = Read(ESC_PRAM_RD_FIFO_REG);
	fifo_cnt--;

	/* Find out first byte position and adjust the copy from that
	* according to LAN9252 datasheet and MicroChip SDK code
	*/
	first_byte_position = (address & 0x03);
	temp_len = ((4 - first_byte_position) > len) ? (uint8_t)len : (uint8_t)(4 - first_byte_position);

	memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
	len = (uint16_t)(len - temp_len);
	byte_offset = (uint16_t)(byte_offset + temp_len);

    /* Select device. */
	cs_.Select();
	/* Send command and address for fifo read */
	spiTxData_[0] = ESC_CMD_FAST_READ;
	spiTxData_[1] = ((ESC_PRAM_RD_FIFO_REG >> 8) & 0xFF);
	spiTxData_[2] = (ESC_PRAM_RD_FIFO_REG & 0xFF);
	spiTxData_[3] = ESC_CMD_FAST_READ_DUMMY;
	spi_.Transmit(spiTxData_, 4);

	/* Continue reading until we have read len */
	while(len > 0)
	{
		temp_len = (len > 4) ? 4: len;
		/* Always read 4 byte */
		spi_.Receive((temp_buf + byte_offset), sizeof(uint32_t));

		fifo_cnt--;
		len -= temp_len;
		byte_offset += temp_len;
	}
	/* Un-select device. */
	cs_.Release();
}

/* ESC write process data ram function */
void LAN9252::EscWritePram (uint16_t address, void *buf, uint16_t len)
{
   uint32_t value;
   uint16_t byte_offset = 0;
   uint8_t  *temp_buf = (uint8_t *)buf;
   uint8_t  fifo_cnt, first_byte_position, temp_len;


   value = ESC_PRAM_CMD_ABORT;
   WriteReg(ESC_PRAM_WR_CMD_REG, value);

   do
   {
      value = Read(ESC_PRAM_WR_CMD_REG);
   }while(value & ESC_PRAM_CMD_BUSY);

   value = (uint32_t)(ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address));
   WriteReg(ESC_PRAM_WR_ADDR_LEN_REG, value);

   value = ESC_PRAM_CMD_BUSY;
   WriteReg(ESC_PRAM_WR_CMD_REG, value);

   do
   {
      value = Read(ESC_PRAM_WR_CMD_REG);
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);

   /* Fifo count */
   fifo_cnt = (uint8_t)ESC_PRAM_CMD_CNT(value);

   /*
    * Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet
    */
   first_byte_position = (address & 0x03);
   temp_len = ((4 - first_byte_position) > len) ? (uint8_t)len : (uint8_t)(4 - first_byte_position);

   memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);

   /* Write first value from FIFO */
   WriteReg(ESC_PRAM_WR_FIFO_REG, value);

   len -= temp_len;
   byte_offset += temp_len;
   fifo_cnt--;

   /* Select device. */
   cs_.Select();
   /* Send command and address for incrementing write */
   spiTxData_[0] = ESC_CMD_SERIAL_WRITE;
   spiTxData_[1] = ((ESC_PRAM_WR_FIFO_REG >> 8) & 0xFF);
   spiTxData_[2] = (ESC_PRAM_WR_FIFO_REG & 0xFF);
   spi_.Transmit(spiTxData_, 3);

   /* Continue reading until we have read len */
   while(len > 0)
   {
      temp_len = (len > 4) ? 4 : len;
      value = 0;
      memcpy((uint8_t *)&value, (temp_buf + byte_offset), temp_len);
      /* Always write 4 byte */
      spi_.Transmit((uint8_t *)&value, sizeof(value));

      fifo_cnt--;
      len -= temp_len;
      byte_offset += temp_len;
   }
   /* Un-select device. */
   cs_.Release();
}

/** ESC read function used by the Slave stack.
 *
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void LAN9252::EscRead (uint16_t address, void *buf, uint16_t len)
{
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
   {
      EscReadPram(address, buf, len);
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;

      while(len > 0)
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;

         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size and MicroChip SDK code
          */

         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
         {
            size = 1;
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
         {
            size = (size & BIT(0)) ? 1 : 2;
         }
         /* size 3 not valid */
         else if (size == 3)
         {
            size = 1;
         }
         /* else size is kept AS IS */
         EscReadCsr(address, temp_buf, size);

         /* next address */
         len = (uint16_t)(len - size);
         temp_buf = (uint8_t *)(temp_buf + size);
         address = (uint16_t)(address + size);
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   EscReadCsr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
   ESCvar.ALevent = etohs (ESCvar.ALevent);

}

/** ESC write function used by the Slave stack.
 *
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void LAN9252::EscWrite (uint16_t address, void *buf, uint16_t len)
{
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
   {
      EscWritePram(address, buf, len);
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;

      while(len > 0)
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size  and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
         {
            size = 1;
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
         {
            size = (size & BIT(0)) ? 1 : 2;
         }
         /* size 3 not valid */
         else if (size == 3)
         {
            size = 1;
         }
         /* else size is kept AS IS */
         EscWriteCsr(address, temp_buf, size);

         /* next address */
         len = (uint16_t)(len - size);
         temp_buf = (uint8_t *)(temp_buf + size);
         address = (uint16_t)(address + size);
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   EscReadCsr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent, sizeof(ESCvar.ALevent));
   ESCvar.ALevent = etohs (ESCvar.ALevent);
}




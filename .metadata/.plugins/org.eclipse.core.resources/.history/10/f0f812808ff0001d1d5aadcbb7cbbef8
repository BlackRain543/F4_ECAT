#include "common_inc.h"

//#include "arm_math.h"



//LED::LED led0(led0_gpio);
//LED::LED led1(led1_gpio);
//LED::LED led2(led2_gpio);
//LED::LED led3(led3_gpio);

uint16_t adc1Data[2] = {};
uint16_t adc2Data[2] = {};

uint32_t dacData[2] = {1024,2048};

extern TIM_HandleTypeDef htim2;
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern DAC_HandleTypeDef hdac;

#include "esc_soes.h"


/*#include "ecat_slv.h"
#include "options.h"

static uint8_t sync0_irq_flag = 0;
static uint8_t pdi_irq_flag = 0;

#define ESC_updateALevent() et1100.EscRead(ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));

void soes()
{
	// 1.Hardware Start
//	uint16_t TXPDOsize = SM3_sml;
//	uint16_t RXPDOsize = SM2_sml;

//	esc_reset();
//	ESC_init();
	msDelay(200);

	while ((ESCvar.DLstatus & 0x0001) == 0)
	{
		 et1100.EscRead(ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus, sizeof (ESCvar.DLstatus));
		 ESCvar.DLstatus = etohs (ESCvar.DLstatus);
	}

	// reset ESC to init state
	ESC_ALstatus (ESCinit);

	// 2.Software Start
	while ((ESCvar.DLstatus & 0x0001) == 0)
	{
	   et1100.EscRead(ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus, sizeof (ESCvar.DLstatus));
	   ESCvar.DLstatus = etohs (ESCvar.DLstatus);
	}

	// reset ESC to init state
	ESC_ALstatus (ESCinit);
	ESC_ALerror (ALERR_NONE);
	ESC_stopmbx ();
	ESC_stopinput ();
	ESC_stopoutput ();

	// 3.Application Loop
	if (sync0_irq_flag)
	{
		ESC_updateALevent();
		DIG_process (DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
		sync0_irq_flag = 0;
	}
	if (pdi_irq_flag)
	{
		ESC_updateALevent();
		if (ESCvar.dcsync)
		{
			DIG_process (DIG_PROCESS_OUTPUTS_FLAG);
		} else
		{
			DIG_process (DIG_PROCESS_OUTPUTS_FLAG | DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
		}
		pdi_irq_flag = 0;
	}
	else
	{
		 ecat_slv_worker(
				 ESCREG_ALEVENT_CONTROL
				 | ESCREG_ALEVENT_SMCHANGE
				 | ESCREG_ALEVENT_SM0
				 | ESCREG_ALEVENT_SM1
				 );
		ecat_slv_poll();
		DIG_process(DIG_PROCESS_WD_FLAG);
	}
}*/

void MainCpp()
{

	HAL_TIM_Base_Start_IT(&htim2);

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1Data, 1);
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc2Data, 1);

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &dacData[0], 1, DAC_ALIGN_12B_R);
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &dacData[1], 1, DAC_ALIGN_12B_R);


//	MainEtherCAT();

	uint16_t addr = 0x0005;
	uint8_t data = 0x00;

	for(;;)
	{
		et1100.EscRead(addr, &data, sizeof(data));
//		et1100.EscAddress(tx, ESC_CMD_READ);

		msDelay(1);
	}


}

//	led0.SetMode(LED::MODE_ONCE_FLASH);
//	led1.SetMode(LED::MODE_TWICE_FLASH);
//	led2.SetMode(LED::MODE_TRIPLE_FLASH);
//	led3.SetMode(LED::MODE_QUADRA_FLASH);

//		if(in0_gpio.ReadPin() == GPIO_PIN_SET)
//			led0.Display();
//		if(in1_gpio.ReadPin() == GPIO_PIN_SET)
//			led1.Display();
//		if(in2_gpio.ReadPin() == GPIO_PIN_SET)
//			led2.Display();
//		if(in3_gpio.ReadPin() == GPIO_PIN_SET)
//			led3.Display();

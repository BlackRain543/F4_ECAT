
#ifndef DRIVERS_LAN9252_H_
#define DRIVERS_LAN9252_H_

#include "port/typedef_port.h"
#include "port/peripheral_port.hpp"

#include "esc_soes.h"
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

#define BIT(x)                   (1U << (x))

#define ESC_CMD_SERIAL_WRITE     0x02
#define ESC_CMD_SERIAL_READ      0x03
#define ESC_CMD_FAST_READ        0x0B
#define ESC_CMD_RESET_SQI        0xFF

#define ESC_CMD_FAST_READ_DUMMY  1
#define ESC_CMD_ADDR_INC         BIT(6)

#define ESC_PRAM_RD_FIFO_REG     0x000
#define ESC_PRAM_WR_FIFO_REG     0x020
#define ESC_PRAM_RD_ADDR_LEN_REG 0x308
#define ESC_PRAM_RD_CMD_REG      0x30C
#define ESC_PRAM_WR_ADDR_LEN_REG 0x310
#define ESC_PRAM_WR_CMD_REG      0x314

#define ESC_PRAM_CMD_BUSY        BIT(31)
#define ESC_PRAM_CMD_ABORT       BIT(30)

#define ESC_PRAM_CMD_CNT(x)      ((x >> 8) & 0x1F)
#define ESC_PRAM_CMD_AVAIL       BIT(0)

#define ESC_PRAM_SIZE(x)         ((x) << 16)
#define ESC_PRAM_ADDR(x)         ((x) << 0)

#define ESC_CSR_DATA_REG         0x300
#define ESC_CSR_CMD_REG          0x304

#define ESC_CSR_CMD_BUSY         BIT(31)
#define ESC_CSR_CMD_READ         (BIT(31) | BIT(30))
#define ESC_CSR_CMD_WRITE        BIT(31)
#define ESC_CSR_CMD_SIZE(x)      (x << 16)

#define ESC_RESET_CTRL_REG       0x1F8
#define ESC_RESET_CTRL_RST       BIT(6)

class LAN9252
{
	public:
		LAN9252(
				Port::SPIComm 	&spi,
				Port::CS 		&cs,
				Port::EXIT 		&spiIrq,
				Port::EXIT 		&sync0,
				Port::EXIT 		&sync1,
				Port::TIM		&tim
				);
		virtual ~LAN9252();

		constexpr static int lan9252 = -1;

		void 		EscInit(const esc_cfg_t * config);
		void 		WriteReg(uint16_t address, uint32_t val);
		uint32_t	ReadReg(uint32_t address);

		void 		EscReadCsr(uint16_t address, void *buf, uint16_t len);
		void 		EscWriteCsr(uint16_t address, void *buf, uint16_t len);

		void 		EscReadPram (uint16_t address, void *buf, uint16_t len);
		void 		EscWritePram (uint16_t address, void *buf, uint16_t len);

		void		EscRead(uint16_t address, void *buf, uint16_t len);
		void		EscWrite(uint16_t address, void *buf, uint16_t len);

	private:
		Port::SPIComm 	&spi_;
		Port::CS 		&cs_;
		Port::EXIT		&spiIrq_;
		Port::EXIT		&sync0_;
		Port::EXIT		&sync1_;
		Port::TIM		&tim_;

		uint8_t 		spiTxData_[7];
		uint8_t 		spiRxData_[4];

		uint32_t 		regVal_;
};

#endif

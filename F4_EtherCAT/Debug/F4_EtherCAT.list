
F4_EtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b67c  0800b67c  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b67c  0800b67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b684  0800b684  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800b690  0800b690  0001b690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800b69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000205a8  2**0
                  CONTENTS
 10 .bss          000008dc  200005a8  200005a8  000205a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e84  20000e84  000205a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038397  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005aac  00000000  00000000  0005896f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  0005e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018e0  00000000  00000000  0005fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002975f  00000000  00000000  000616f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e42  00000000  00000000  0008ae57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4a02  00000000  00000000  000b0c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019569b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007290  00000000  00000000  001956f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a8 	.word	0x200005a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac38 	.word	0x0800ac38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005ac 	.word	0x200005ac
 80001c4:	0800ac38 	.word	0x0800ac38

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 ff3a 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81a 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fac8 	bl	8000a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f98c 	bl	80007fc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004e4:	f000 f9b8 	bl	8000858 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004e8:	f000 f9ec 	bl	80008c4 <MX_SPI2_Init>
  MX_DAC_Init();
 80004ec:	f000 f952 	bl	8000794 <MX_DAC_Init>
  MX_ADC1_Init();
 80004f0:	f000 f878 	bl	80005e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004f4:	f000 f8c8 	bl	8000688 <MX_ADC2_Init>
  MX_CAN1_Init();
 80004f8:	f000 f918 	bl	800072c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 fa64 	bl	80009c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000500:	f000 fa8c 	bl	8000a1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000504:	f000 fa14 	bl	8000930 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MainCpp();
 8000508:	f009 fec5 	bl	800a296 <MainCpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x3c>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f00a fa76 	bl	800aa10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 ff1d 	bl	80023d4 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a0:	f000 fb68 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f97e 	bl	80028c4 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 fb51 	bl	8000c74 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0x98>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_ADC1_Init+0x9c>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x98>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x98>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_ADC1_Init+0xa0>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x98>)
 8000646:	f000 fef3 	bl	8001430 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 fb10 	bl	8000c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000654:	2307      	movs	r3, #7
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x98>)
 8000666:	f000 ff27 	bl	80014b8 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 fb00 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000858 	.word	0x20000858
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001

08000688 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_ADC2_Init+0x98>)
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <MX_ADC2_Init+0x9c>)
 800069e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC2_Init+0x98>)
 80006a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ADC2_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC2_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC2_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC2_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_ADC2_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_ADC2_Init+0x98>)
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <MX_ADC2_Init+0xa0>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_ADC2_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_ADC2_Init+0x98>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_ADC2_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_ADC2_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_ADC2_Init+0x98>)
 80006ea:	f000 fea1 	bl	8001430 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 fabe 	bl	8000c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006f8:	2306      	movs	r3, #6
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_ADC2_Init+0x98>)
 800070a:	f000 fed5 	bl	80014b8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 faae 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200007bc 	.word	0x200007bc
 8000724:	40012100 	.word	0x40012100
 8000728:	0f000001 	.word	0x0f000001

0800072c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_CAN1_Init+0x60>)
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_CAN1_Init+0x64>)
 8000734:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_CAN1_Init+0x60>)
 8000738:	2210      	movs	r2, #16
 800073a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_CAN1_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_CAN1_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_CAN1_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_CAN1_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_CAN1_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_CAN1_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_CAN1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_CAN1_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_CAN1_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_CAN1_Init+0x60>)
 800077a:	f001 f8bb 	bl	80018f4 <HAL_CAN_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fa76 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200009dc 	.word	0x200009dc
 8000790:	40006400 	.word	0x40006400

08000794 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_DAC_Init+0x60>)
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_DAC_Init+0x64>)
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_DAC_Init+0x60>)
 80007aa:	f001 fa84 	bl	8001cb6 <HAL_DAC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007b4:	f000 fa5e 	bl	8000c74 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <MX_DAC_Init+0x60>)
 80007c8:	f001 fa97 	bl	8001cfa <HAL_DAC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007d2:	f000 fa4f 	bl	8000c74 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2210      	movs	r2, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_DAC_Init+0x60>)
 80007de:	f001 fa8c 	bl	8001cfa <HAL_DAC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 fa44 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200008e4 	.word	0x200008e4
 80007f8:	40007400 	.word	0x40007400

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_I2C1_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x50>)
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_I2C1_Init+0x58>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_I2C1_Init+0x50>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C1_Init+0x50>)
 800083a:	f001 fc87 	bl	800214c <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 fa16 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000804 	.word	0x20000804
 8000850:	40005400 	.word	0x40005400
 8000854:	000186a0 	.word	0x000186a0

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI1_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_SPI1_Init+0x64>)
 80008aa:	f002 fa07 	bl	8002cbc <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f9de 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200008f8 	.word	0x200008f8
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI2_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI2_Init+0x64>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI2_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI2_Init+0x64>)
 8000916:	f002 f9d1 	bl	8002cbc <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f9a8 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000764 	.word	0x20000764
 800092c:	40003800 	.word	0x40003800

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM2_Init+0x94>)
 800094e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000952:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_TIM2_Init+0x94>)
 8000956:	2227      	movs	r2, #39	; 0x27
 8000958:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM2_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_TIM2_Init+0x94>)
 8000962:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_TIM2_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_TIM2_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_TIM2_Init+0x94>)
 8000976:	f002 fc97 	bl	80032a8 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000980:	f000 f978 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_TIM2_Init+0x94>)
 8000992:	f002 fcd8 	bl	8003346 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800099c:	f000 f96a 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_TIM2_Init+0x94>)
 80009ae:	f002 fecb 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f95c 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000950 	.word	0x20000950

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f002 ff1e 	bl	8003840 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f933 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200008a0 	.word	0x200008a0
 8000a18:	40011000 	.word	0x40011000

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f002 fef4 	bl	8003840 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f909 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000998 	.word	0x20000998
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a74      	ldr	r2, [pc, #464]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b72      	ldr	r3, [pc, #456]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b6e      	ldr	r3, [pc, #440]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a6d      	ldr	r2, [pc, #436]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b6b      	ldr	r3, [pc, #428]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a66      	ldr	r2, [pc, #408]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b60      	ldr	r3, [pc, #384]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a5f      	ldr	r2, [pc, #380]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b5d      	ldr	r3, [pc, #372]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a58      	ldr	r2, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_CTRL_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f242 0130 	movw	r1, #8240	; 0x2030
 8000b18:	4852      	ldr	r0, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000b1a:	f001 fad9 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f647 1103 	movw	r1, #30979	; 0x7903
 8000b24:	4850      	ldr	r0, [pc, #320]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000b26:	f001 fad3 	bl	80020d0 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b30:	484e      	ldr	r0, [pc, #312]	; (8000c6c <MX_GPIO_Init+0x1fc>)
 8000b32:	f001 facd 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_LOADED_GPIO_Port, EEPROM_LOADED_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	484d      	ldr	r0, [pc, #308]	; (8000c70 <MX_GPIO_Init+0x200>)
 8000b3c:	f001 fac8 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = RS485_CTRL_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4842      	ldr	r0, [pc, #264]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000b5a:	f001 f91d 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000b5e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	483c      	ldr	r0, [pc, #240]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000b74:	f001 f910 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC0_Pin SYNC1_Pin SPI2_IRQ_Pin */
  GPIO_InitStruct.Pin = SYNC0_Pin|SYNC1_Pin|SPI2_IRQ_Pin;
 8000b78:	f240 1303 	movw	r3, #259	; 0x103
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MX_GPIO_Init+0x1fc>)
 8000b90:	f001 f902 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin;
 8000b94:	2330      	movs	r3, #48	; 0x30
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482e      	ldr	r0, [pc, #184]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000bac:	f001 f8f4 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin LED0_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000bb0:	f647 1303 	movw	r3, #30979	; 0x7903
 8000bb4:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000bca:	f001 f8e5 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8000bce:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000be4:	f001 f8d8 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN7_Pin */
  GPIO_InitStruct.Pin = IN7_Pin;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN7_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000bfe:	f001 f8cb 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN6_Pin IN7C7_Pin IN4_Pin IN3_Pin
                           IN2_Pin IN1_Pin IN0_Pin */
  GPIO_InitStruct.Pin = IN6_Pin|IN7C7_Pin|IN4_Pin|IN3_Pin
 8000c02:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c06:	617b      	str	r3, [r7, #20]
                          |IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000c18:	f001 f8be 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_GPIO_Init+0x1fc>)
 8000c36:	f001 f8af 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_LOADED_Pin */
  GPIO_InitStruct.Pin = EEPROM_LOADED_Pin;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_LOADED_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_GPIO_Init+0x200>)
 8000c52:	f001 f8a1 	bl	8001d98 <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_ADC_MspInit+0xd8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481c      	ldr	r0, [pc, #112]	; (8000db0 <HAL_ADC_MspInit+0xe0>)
 8000d3e:	f001 f82b 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d42:	e02c      	b.n	8000d9e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_ADC_MspInit+0xe4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d127      	bne.n	8000d9e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_ADC_MspInit+0xdc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_ADC_MspInit+0xe0>)
 8000d9a:	f000 fffd 	bl	8001d98 <HAL_GPIO_Init>
}
 8000d9e:	bf00      	nop
 8000da0:	3730      	adds	r7, #48	; 0x30
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012000 	.word	0x40012000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40012100 	.word	0x40012100

08000db8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_CAN_MspInit+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12c      	bne.n	8000e34 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_CAN_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e24:	2309      	movs	r3, #9
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_CAN_MspInit+0x8c>)
 8000e30:	f000 ffb2 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40006400 	.word	0x40006400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_DAC_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d127      	bne.n	8000eba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_DAC_MspInit+0x80>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ea2:	2330      	movs	r3, #48	; 0x30
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_DAC_MspInit+0x84>)
 8000eb6:	f000 ff6f 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40007400 	.word	0x40007400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_I2C_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	23c0      	movs	r3, #192	; 0xc0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HAL_I2C_MspInit+0x8c>)
 8000f2a:	f000 ff35 	bl	8001d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_I2C_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a41      	ldr	r2, [pc, #260]	; (8001084 <HAL_SPI_MspInit+0x124>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12c      	bne.n	8000fdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a3f      	ldr	r2, [pc, #252]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a38      	ldr	r2, [pc, #224]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fba:	2338      	movs	r3, #56	; 0x38
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <HAL_SPI_MspInit+0x12c>)
 8000fd6:	f000 fedf 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fda:	e04f      	b.n	800107c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <HAL_SPI_MspInit+0x130>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d14a      	bne.n	800107c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <HAL_SPI_MspInit+0x128>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_SPI_MspInit+0x128>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103a:	230c      	movs	r3, #12
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <HAL_SPI_MspInit+0x134>)
 8001056:	f000 fe9f 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800106c:	2305      	movs	r3, #5
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x12c>)
 8001078:	f000 fe8e 	bl	8001d98 <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	; 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013000 	.word	0x40013000
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400
 8001090:	40003800 	.word	0x40003800
 8001094:	40020800 	.word	0x40020800

08001098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a8:	d10d      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <HAL_UART_MspInit+0xe8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12d      	bne.n	8001156 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_UART_MspInit+0xec>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_UART_MspInit+0xec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <HAL_UART_MspInit+0xf0>)
 8001150:	f000 fe22 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001154:	e030      	b.n	80011b8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_UART_MspInit+0xf4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d12b      	bne.n	80011b8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0xec>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_UART_MspInit+0xec>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_UART_MspInit+0xec>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001198:	230c      	movs	r3, #12
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a8:	2307      	movs	r3, #7
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_MspInit+0xf0>)
 80011b4:	f000 fdf0 	bl	8001d98 <HAL_GPIO_Init>
}
 80011b8:	bf00      	nop
 80011ba:	3730      	adds	r7, #48	; 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40004400 	.word	0x40004400

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f8e8 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_kill>:

int _kill(int pid, int sig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800123e:	f009 fb9f 	bl	800a980 <__errno>
 8001242:	4603      	mov	r3, r0
 8001244:	2216      	movs	r2, #22
 8001246:	601a      	str	r2, [r3, #0]
	return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_exit>:

void _exit (int status)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffe7 	bl	8001234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001266:	e7fe      	b.n	8001266 <_exit+0x12>

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f009 fb72 	bl	800a980 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20020000 	.word	0x20020000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200005c4 	.word	0x200005c4
 80012d0:	20000e88 	.word	0x20000e88

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fe:	490e      	ldr	r1, [pc, #56]	; (8001338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001314:	4c0b      	ldr	r4, [pc, #44]	; (8001344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001322:	f7ff ffd7 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f009 fb31 	bl	800a98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff f8d1 	bl	80004d0 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200005a8 	.word	0x200005a8
  ldr r2, =_sidata
 800133c:	0800b69c 	.word	0x0800b69c
  ldr r2, =_sbss
 8001340:	200005a8 	.word	0x200005a8
  ldr r4, =_ebss
 8001344:	20000e84 	.word	0x20000e84

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 fc6b 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	200f      	movs	r0, #15
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fc7e 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fc75 	bl	8001c9e <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 fc4b 	bl	8001c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	20000a04 	.word	0x20000a04

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000a04 	.word	0x20000a04

08001430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e033      	b.n	80014ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fc3e 	bl	8000cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f93a 	bl	80016fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
 800149e:	e001      	b.n	80014a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1c>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e105      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x228>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d925      	bls.n	8001530 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68d9      	ldr	r1, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	3b1e      	subs	r3, #30
 80014fa:	2207      	movs	r2, #7
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43da      	mvns	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	400a      	ands	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68d9      	ldr	r1, [r3, #12]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	4603      	mov	r3, r0
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4403      	add	r3, r0
 8001522:	3b1e      	subs	r3, #30
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	e022      	b.n	8001576 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	2207      	movs	r2, #7
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	400a      	ands	r2, r1
 8001552:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6919      	ldr	r1, [r3, #16]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4403      	add	r3, r0
 800156c:	409a      	lsls	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d824      	bhi.n	80015c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b05      	subs	r3, #5
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b05      	subs	r3, #5
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
 80015c6:	e04c      	b.n	8001662 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b0c      	cmp	r3, #12
 80015ce:	d824      	bhi.n	800161a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b23      	subs	r3, #35	; 0x23
 80015e2:	221f      	movs	r2, #31
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b23      	subs	r3, #35	; 0x23
 800160c:	fa00 f203 	lsl.w	r2, r0, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
 8001618:	e023      	b.n	8001662 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b41      	subs	r3, #65	; 0x41
 800162c:	221f      	movs	r2, #31
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b41      	subs	r3, #65	; 0x41
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_ADC_ConfigChannel+0x234>)
 8001664:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <HAL_ADC_ConfigChannel+0x238>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d109      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1cc>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b12      	cmp	r3, #18
 8001676:	d105      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_ADC_ConfigChannel+0x238>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d123      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x21e>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b10      	cmp	r3, #16
 8001694:	d003      	beq.n	800169e <HAL_ADC_ConfigChannel+0x1e6>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b11      	cmp	r3, #17
 800169c:	d11b      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d111      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_ADC_ConfigChannel+0x23c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_ADC_ConfigChannel+0x240>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	0c9a      	lsrs	r2, r3, #18
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40012300 	.word	0x40012300
 80016f0:	40012000 	.word	0x40012000
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83

080016fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <ADC_Init+0x1f0>)
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	431a      	orrs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	021a      	lsls	r2, r3, #8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <ADC_Init+0x1f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e00f      	b.n	80017fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0202 	bic.w	r2, r2, #2
 8001808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
 8001814:	005a      	lsls	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01b      	beq.n	8001860 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001836:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001846:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	3b01      	subs	r3, #1
 8001854:	035a      	lsls	r2, r3, #13
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e007      	b.n	8001870 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	3b01      	subs	r3, #1
 800188c:	051a      	lsls	r2, r3, #20
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b2:	025a      	lsls	r2, r3, #9
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6899      	ldr	r1, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	029a      	lsls	r2, r3, #10
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40012300 	.word	0x40012300
 80018f0:	0f000001 	.word	0x0f000001

080018f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0ed      	b.n	8001ae2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fa50 	bl	8000db8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001928:	f7ff fd76 	bl	8001418 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192e:	e012      	b.n	8001956 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001930:	f7ff fd72 	bl	8001418 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d90b      	bls.n	8001956 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0c5      	b.n	8001ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0e5      	beq.n	8001930 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0202 	bic.w	r2, r2, #2
 8001972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001974:	f7ff fd50 	bl	8001418 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197a:	e012      	b.n	80019a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800197c:	f7ff fd4c 	bl	8001418 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d90b      	bls.n	80019a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e09f      	b.n	8001ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e5      	bne.n	800197c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e007      	b.n	80019da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7e5b      	ldrb	r3, [r3, #25]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e9b      	ldrb	r3, [r3, #26]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d108      	bne.n	8001a1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e007      	b.n	8001a2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0220 	bic.w	r2, r2, #32
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7edb      	ldrb	r3, [r3, #27]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0210 	bic.w	r2, r2, #16
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e007      	b.n	8001a58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0210 	orr.w	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7f1b      	ldrb	r3, [r3, #28]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d108      	bne.n	8001a72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0208 	orr.w	r2, r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0208 	bic.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7f5b      	ldrb	r3, [r3, #29]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0204 	orr.w	r2, r2, #4
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0204 	bic.w	r2, r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	ea42 0103 	orr.w	r1, r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	1e5a      	subs	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	; (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f7ff ff8e 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff47 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff5c 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff8e 	bl	8001ba4 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffb0 	bl	8001c0c <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e014      	b.n	8001cf2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff f8b5 	bl	8000e48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	795b      	ldrb	r3, [r3, #5]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_DAC_ConfigChannel+0x18>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e03c      	b.n	8001d8c <HAL_DAC_ConfigChannel+0x92>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6819      	ldr	r1, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	22c0      	movs	r2, #192	; 0xc0
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e16b      	b.n	800208c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 815a 	bne.w	8002086 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d005      	beq.n	8001dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d130      	bne.n	8001e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d017      	beq.n	8001e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d123      	bne.n	8001edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	69b9      	ldr	r1, [r7, #24]
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80b4 	beq.w	8002086 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_GPIO_Init+0x30c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a5b      	ldr	r2, [pc, #364]	; (80020a8 <HAL_GPIO_Init+0x310>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_GPIO_Init+0x314>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <HAL_GPIO_Init+0x226>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_GPIO_Init+0x318>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x222>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <HAL_GPIO_Init+0x31c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x21e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_GPIO_Init+0x320>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	; (80020bc <HAL_GPIO_Init+0x324>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x328>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x32c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_GPIO_Init+0x330>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x20a>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e00e      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <HAL_GPIO_Init+0x310>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_GPIO_Init+0x334>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002002:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_GPIO_Init+0x334>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_GPIO_Init+0x334>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_GPIO_Init+0x334>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_GPIO_Init+0x334>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <HAL_GPIO_Init+0x334>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_GPIO_Init+0x334>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_GPIO_Init+0x334>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f ae90 	bls.w	8001db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f806 	bl	8002134 <HAL_GPIO_EXTI_Callback>
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e12b      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe feac 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b0:	f000 fd5c 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_I2C_Init+0x274>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d807      	bhi.n	80021d0 <HAL_I2C_Init+0x84>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_I2C_Init+0x278>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e006      	b.n	80021de <HAL_I2C_Init+0x92>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a7d      	ldr	r2, [pc, #500]	; (80023c8 <HAL_I2C_Init+0x27c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e7      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a78      	ldr	r2, [pc, #480]	; (80023cc <HAL_I2C_Init+0x280>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d802      	bhi.n	8002220 <HAL_I2C_Init+0xd4>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	e009      	b.n	8002234 <HAL_I2C_Init+0xe8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_I2C_Init+0x284>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	495c      	ldr	r1, [pc, #368]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002250:	428b      	cmp	r3, r1
 8002252:	d819      	bhi.n	8002288 <HAL_I2C_Init+0x13c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e59      	subs	r1, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002268:	400b      	ands	r3, r1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_Init+0x138>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e59      	subs	r1, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fbb1 f3f3 	udiv	r3, r1, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	e051      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002284:	2304      	movs	r3, #4
 8002286:	e04f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_I2C_Init+0x168>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e012      	b.n	80022da <HAL_I2C_Init+0x18e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x196>
 80022de:	2301      	movs	r3, #1
 80022e0:	e022      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <HAL_I2C_Init+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e58      	subs	r0, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6911      	ldr	r1, [r2, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000186a0 	.word	0x000186a0
 80023c4:	001e847f 	.word	0x001e847f
 80023c8:	003d08ff 	.word	0x003d08ff
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e264      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4ba0      	ldr	r3, [pc, #640]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e23f      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x74>
 800243a:	4b91      	ldr	r3, [pc, #580]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a83      	ldr	r2, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a80      	ldr	r2, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe ffc4 	bl	8001418 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe ffc0 	bl	8001418 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e204      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xc0>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe ffb0 	bl	8001418 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe ffac 	bl	8001418 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1f0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1c4      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe ff65 	bl	8001418 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe ff61 	bl	8001418 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1a5      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4940      	ldr	r1, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe ff44 	bl	8001418 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002594:	f7fe ff40 	bl	8001418 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e184      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe ff24 	bl	8001418 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe ff20 	bl	8001418 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e164      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x200>
 80025f2:	e015      	b.n	8002620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe ff0d 	bl	8001418 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe ff09 	bl	8001418 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e14d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a0 	beq.w	800276e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe fecf 	bl	8001418 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e011      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
 800268c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7fe fec2 	bl	8001418 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e106      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
 80026b6:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a80      	ldr	r2, [pc, #512]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026cc:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a7a      	ldr	r2, [pc, #488]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026e6:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a74      	ldr	r2, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a71      	ldr	r2, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fe87 	bl	8001418 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fe83 	bl	8001418 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0c5      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x33a>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fe71 	bl	8001418 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fe6d 	bl	8001418 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0af      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 809b 	beq.w	80028ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d05c      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d141      	bne.n	8002810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fe41 	bl	8001418 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fe3d 	bl	8001418 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e081      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fe16 	bl	8001418 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fe12 	bl	8001418 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e056      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 800280e:	e04e      	b.n	80028ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fdff 	bl	8001418 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fdfb 	bl	8001418 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03f      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x44a>
 800283c:	e037      	b.n	80028ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e032      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d028      	beq.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d121      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d11a      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002880:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40007000 	.word	0x40007000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470060 	.word	0x42470060

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fd30 	bl	8001418 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fd2c 	bl	8001418 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fc90 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	0800ac50 	.word	0x0800ac50
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa8:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	f200 80bd 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac2:	e0b7      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ac6:	60bb      	str	r3, [r7, #8]
       break;
 8002ac8:	e0b7      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e0b4      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04d      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0800 	and.w	r8, r2, r0
 8002afe:	ea03 0901 	and.w	r9, r3, r1
 8002b02:	4640      	mov	r0, r8
 8002b04:	4649      	mov	r1, r9
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b14:	0142      	lsls	r2, r0, #5
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b1e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	018b      	lsls	r3, r1, #6
 8002b2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b30:	0182      	lsls	r2, r0, #6
 8002b32:	1a12      	subs	r2, r2, r0
 8002b34:	eb63 0301 	sbc.w	r3, r3, r1
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	00d9      	lsls	r1, r3, #3
 8002b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b46:	00d0      	lsls	r0, r2, #3
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	eb12 0208 	adds.w	r2, r2, r8
 8002b50:	eb43 0309 	adc.w	r3, r3, r9
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f04f 0100 	mov.w	r1, #0
 8002b5c:	0259      	lsls	r1, r3, #9
 8002b5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b62:	0250      	lsls	r0, r2, #9
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f7fd fb30 	bl	80001d8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e04a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	ea02 0400 	and.w	r4, r2, r0
 8002b9a:	ea03 0501 	and.w	r5, r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	014b      	lsls	r3, r1, #5
 8002bac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bb0:	0142      	lsls	r2, r0, #5
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	1b00      	subs	r0, r0, r4
 8002bb8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	018b      	lsls	r3, r1, #6
 8002bc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bca:	0182      	lsls	r2, r0, #6
 8002bcc:	1a12      	subs	r2, r2, r0
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	00d9      	lsls	r1, r3, #3
 8002bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002be0:	00d0      	lsls	r0, r2, #3
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	1912      	adds	r2, r2, r4
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0299      	lsls	r1, r3, #10
 8002bf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bfa:	0290      	lsls	r0, r2, #10
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	f7fd fae4 	bl	80001d8 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	60bb      	str	r3, [r7, #8]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c36:	60bb      	str	r3, [r7, #8]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	0800ac60 	.word	0x0800ac60

08002c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c98:	f7ff ffdc 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	0800ac60 	.word	0x0800ac60

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07b      	b.n	8002dc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cde:	d009      	beq.n	8002cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
 8002ce6:	e005      	b.n	8002cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f926 	bl	8000f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0104 	and.w	r1, r3, #4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	f003 0210 	and.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08c      	sub	sp, #48	; 0x30
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x26>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e18a      	b.n	800310a <HAL_SPI_TransmitReceive+0x33c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dfc:	f7fe fb0c 	bl	8001418 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d00f      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0x70>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e24:	d107      	bne.n	8002e36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_SPI_TransmitReceive+0x68>
 8002e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d003      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e3c:	e15b      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x82>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x82>
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e56:	e14e      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d003      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2205      	movs	r2, #5
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	887a      	ldrh	r2, [r7, #2]
 8002e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d007      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec8:	d178      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x10a>
 8002ed2:	8b7b      	ldrh	r3, [r7, #26]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d166      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	1c9a      	adds	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efc:	e053      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d11b      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x176>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_SPI_TransmitReceive+0x176>
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d113      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	881a      	ldrh	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d119      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x1b8>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	b292      	uxth	r2, r2
 8002f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f82:	2301      	movs	r3, #1
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f86:	f7fe fa47 	bl	8001418 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d807      	bhi.n	8002fa6 <HAL_SPI_TransmitReceive+0x1d8>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d003      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fa4:	e0a7      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1a6      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x130>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1a1      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x130>
 8002fba:	e07c      	b.n	80030b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_SPI_TransmitReceive+0x1fc>
 8002fc4:	8b7b      	ldrh	r3, [r7, #26]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d16b      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff0:	e057      	b.n	80030a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11c      	bne.n	800303a <HAL_SPI_TransmitReceive+0x26c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d017      	beq.n	800303a <HAL_SPI_TransmitReceive+0x26c>
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d114      	bne.n	800303a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d119      	bne.n	800307c <HAL_SPI_TransmitReceive+0x2ae>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d014      	beq.n	800307c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003078:	2301      	movs	r3, #1
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800307c:	f7fe f9cc 	bl	8001418 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003088:	429a      	cmp	r2, r3
 800308a:	d803      	bhi.n	8003094 <HAL_SPI_TransmitReceive+0x2c6>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d102      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2cc>
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030a0:	e029      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1a2      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x224>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d19d      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f8b2 	bl	8003224 <SPI_EndRxTxTransaction>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030d2:	e010      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	e000      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800310a:	4618      	mov	r0, r3
 800310c:	3730      	adds	r7, #48	; 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003124:	f7fe f978 	bl	8001418 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	4413      	add	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003134:	f7fe f970 	bl	8001418 <HAL_GetTick>
 8003138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	0d1b      	lsrs	r3, r3, #20
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314a:	e054      	b.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d050      	beq.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003154:	f7fe f960 	bl	8001418 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	429a      	cmp	r2, r3
 8003162:	d902      	bls.n	800316a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d13d      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003182:	d111      	bne.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318c:	d004      	beq.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d107      	bne.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	d10f      	bne.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e017      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d19b      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000000 	.word	0x20000000

08003224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <SPI_EndRxTxTransaction+0x7c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <SPI_EndRxTxTransaction+0x80>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0d5b      	lsrs	r3, r3, #21
 800323c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324e:	d112      	bne.n	8003276 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff ff5a 	bl	8003114 <SPI_WaitFlagStateUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e00f      	b.n	8003296 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d0f2      	beq.n	8003276 <SPI_EndRxTxTransaction+0x52>
 8003290:	e000      	b.n	8003294 <SPI_EndRxTxTransaction+0x70>
        break;
 8003292:	bf00      	nop
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000
 80032a4:	165e9f81 	.word	0x165e9f81

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fee2 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 f8f4 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_TIM_ConfigClockSource+0x1c>
 800335e:	2302      	movs	r3, #2
 8003360:	e0b4      	b.n	80034cc <HAL_TIM_ConfigClockSource+0x186>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003380:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003388:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	d03e      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xd4>
 800339c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a0:	f200 8087 	bhi.w	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	f000 8086 	beq.w	80034b8 <HAL_TIM_ConfigClockSource+0x172>
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d87f      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033b2:	2b70      	cmp	r3, #112	; 0x70
 80033b4:	d01a      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xa6>
 80033b6:	2b70      	cmp	r3, #112	; 0x70
 80033b8:	d87b      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033ba:	2b60      	cmp	r3, #96	; 0x60
 80033bc:	d050      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x11a>
 80033be:	2b60      	cmp	r3, #96	; 0x60
 80033c0:	d877      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033c2:	2b50      	cmp	r3, #80	; 0x50
 80033c4:	d03c      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0xfa>
 80033c6:	2b50      	cmp	r3, #80	; 0x50
 80033c8:	d873      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d058      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x13a>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d86f      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033d2:	2b30      	cmp	r3, #48	; 0x30
 80033d4:	d064      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15a>
 80033d6:	2b30      	cmp	r3, #48	; 0x30
 80033d8:	d86b      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d060      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15a>
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d867      	bhi.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d05c      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15a>
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d05a      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x15a>
 80033ea:	e062      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f000 f984 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800340e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
      break;
 8003418:	e04f      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f000 f96d 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343c:	609a      	str	r2, [r3, #8]
      break;
 800343e:	e03c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f8e1 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2150      	movs	r1, #80	; 0x50
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f93a 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 800345e:	e02c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f900 	bl	8003672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2160      	movs	r1, #96	; 0x60
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f92a 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 800347e:	e01c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	461a      	mov	r2, r3
 800348e:	f000 f8c1 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f91a 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 800349e:	e00c      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 f911 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80034b0:	e003      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a40      	ldr	r2, [pc, #256]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d00f      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <TIM_Base_SetConfig+0x118>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3c      	ldr	r2, [pc, #240]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d027      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <TIM_Base_SetConfig+0x118>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d023      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <TIM_Base_SetConfig+0x11c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <TIM_Base_SetConfig+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <TIM_Base_SetConfig+0x128>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <TIM_Base_SetConfig+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <TIM_Base_SetConfig+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <TIM_Base_SetConfig+0x138>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <TIM_Base_SetConfig+0x13c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <TIM_Base_SetConfig+0x114>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0xf8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0x124>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40010400 	.word	0x40010400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800
 8003608:	40001800 	.word	0x40001800
 800360c:	40001c00 	.word	0x40001c00
 8003610:	40002000 	.word	0x40002000

08003614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 030a 	bic.w	r3, r3, #10
 8003650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	031b      	lsls	r3, r3, #12
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 0307 	orr.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	431a      	orrs	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e05a      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d01d      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40010400 	.word	0x40010400
 8003838:	40014000 	.word	0x40014000
 800383c:	40001800 	.word	0x40001800

08003840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e03f      	b.n	80038d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fc36 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f829 	bl	80038dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	b09f      	sub	sp, #124	; 0x7c
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	68d9      	ldr	r1, [r3, #12]
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	431a      	orrs	r2, r3
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	431a      	orrs	r2, r3
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003920:	f021 010c 	bic.w	r1, r1, #12
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800392a:	430b      	orrs	r3, r1
 800392c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	ea40 0301 	orr.w	r3, r0, r1
 8003944:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4bc5      	ldr	r3, [pc, #788]	; (8003c60 <UART_SetConfig+0x384>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d004      	beq.n	800395a <UART_SetConfig+0x7e>
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4bc3      	ldr	r3, [pc, #780]	; (8003c64 <UART_SetConfig+0x388>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d103      	bne.n	8003962 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800395a:	f7ff f99b 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 800395e:	6778      	str	r0, [r7, #116]	; 0x74
 8003960:	e002      	b.n	8003968 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003962:	f7ff f983 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8003966:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	f040 80b6 	bne.w	8003ae0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	461c      	mov	r4, r3
 8003978:	f04f 0500 	mov.w	r5, #0
 800397c:	4622      	mov	r2, r4
 800397e:	462b      	mov	r3, r5
 8003980:	1891      	adds	r1, r2, r2
 8003982:	6439      	str	r1, [r7, #64]	; 0x40
 8003984:	415b      	adcs	r3, r3
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
 8003988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800398c:	1912      	adds	r2, r2, r4
 800398e:	eb45 0303 	adc.w	r3, r5, r3
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	00d9      	lsls	r1, r3, #3
 800399c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a0:	00d0      	lsls	r0, r2, #3
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	1911      	adds	r1, r2, r4
 80039a8:	6639      	str	r1, [r7, #96]	; 0x60
 80039aa:	416b      	adcs	r3, r5
 80039ac:	667b      	str	r3, [r7, #100]	; 0x64
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80039bc:	415b      	adcs	r3, r3
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039c8:	f7fc fc06 	bl	80001d8 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4ba5      	ldr	r3, [pc, #660]	; (8003c68 <UART_SetConfig+0x38c>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011e      	lsls	r6, r3, #4
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	461c      	mov	r4, r3
 80039de:	f04f 0500 	mov.w	r5, #0
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	1891      	adds	r1, r2, r2
 80039e8:	6339      	str	r1, [r7, #48]	; 0x30
 80039ea:	415b      	adcs	r3, r3
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
 80039ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039f2:	1912      	adds	r2, r2, r4
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	00d9      	lsls	r1, r3, #3
 8003a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a06:	00d0      	lsls	r0, r2, #3
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	1911      	adds	r1, r2, r4
 8003a0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a10:	416b      	adcs	r3, r5
 8003a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	1891      	adds	r1, r2, r2
 8003a20:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a22:	415b      	adcs	r3, r3
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a2e:	f7fc fbd3 	bl	80001d8 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4b8c      	ldr	r3, [pc, #560]	; (8003c68 <UART_SetConfig+0x38c>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a87      	ldr	r2, [pc, #540]	; (8003c68 <UART_SetConfig+0x38c>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a58:	441e      	add	r6, r3
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	1894      	adds	r4, r2, r2
 8003a68:	623c      	str	r4, [r7, #32]
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a72:	1812      	adds	r2, r2, r0
 8003a74:	eb41 0303 	adc.w	r3, r1, r3
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	f04f 0500 	mov.w	r5, #0
 8003a80:	00dd      	lsls	r5, r3, #3
 8003a82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a86:	00d4      	lsls	r4, r2, #3
 8003a88:	4622      	mov	r2, r4
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	1814      	adds	r4, r2, r0
 8003a8e:	653c      	str	r4, [r7, #80]	; 0x50
 8003a90:	414b      	adcs	r3, r1
 8003a92:	657b      	str	r3, [r7, #84]	; 0x54
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	1891      	adds	r1, r2, r2
 8003aa0:	61b9      	str	r1, [r7, #24]
 8003aa2:	415b      	adcs	r3, r3
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003aae:	f7fc fb93 	bl	80001d8 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <UART_SetConfig+0x38c>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a67      	ldr	r2, [pc, #412]	; (8003c68 <UART_SetConfig+0x38c>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4432      	add	r2, r6
 8003adc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ade:	e0b9      	b.n	8003c54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	f04f 0500 	mov.w	r5, #0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	6139      	str	r1, [r7, #16]
 8003af0:	415b      	adcs	r3, r3
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003af8:	1912      	adds	r2, r2, r4
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	00d9      	lsls	r1, r3, #3
 8003b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0c:	00d0      	lsls	r0, r2, #3
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	eb12 0804 	adds.w	r8, r2, r4
 8003b16:	eb43 0905 	adc.w	r9, r3, r5
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	008b      	lsls	r3, r1, #2
 8003b2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b32:	0082      	lsls	r2, r0, #2
 8003b34:	4640      	mov	r0, r8
 8003b36:	4649      	mov	r1, r9
 8003b38:	f7fc fb4e 	bl	80001d8 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <UART_SetConfig+0x38c>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011e      	lsls	r6, r3, #4
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1894      	adds	r4, r2, r2
 8003b58:	60bc      	str	r4, [r7, #8]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b62:	1812      	adds	r2, r2, r0
 8003b64:	eb41 0303 	adc.w	r3, r1, r3
 8003b68:	f04f 0400 	mov.w	r4, #0
 8003b6c:	f04f 0500 	mov.w	r5, #0
 8003b70:	00dd      	lsls	r5, r3, #3
 8003b72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b76:	00d4      	lsls	r4, r2, #3
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	1814      	adds	r4, r2, r0
 8003b7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b80:	414b      	adcs	r3, r1
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	008b      	lsls	r3, r1, #2
 8003b98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b9c:	0082      	lsls	r2, r0, #2
 8003b9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ba2:	f7fc fb19 	bl	80001d8 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <UART_SetConfig+0x38c>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	; 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	3332      	adds	r3, #50	; 0x32
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <UART_SetConfig+0x38c>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bca:	441e      	add	r6, r3
 8003bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	1894      	adds	r4, r2, r2
 8003bda:	603c      	str	r4, [r7, #0]
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be4:	1812      	adds	r2, r2, r0
 8003be6:	eb41 0303 	adc.w	r3, r1, r3
 8003bea:	f04f 0400 	mov.w	r4, #0
 8003bee:	f04f 0500 	mov.w	r5, #0
 8003bf2:	00dd      	lsls	r5, r3, #3
 8003bf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bf8:	00d4      	lsls	r4, r2, #3
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	eb12 0a00 	adds.w	sl, r2, r0
 8003c02:	eb43 0b01 	adc.w	fp, r3, r1
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	008b      	lsls	r3, r1, #2
 8003c1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c1e:	0082      	lsls	r2, r0, #2
 8003c20:	4650      	mov	r0, sl
 8003c22:	4659      	mov	r1, fp
 8003c24:	f7fc fad8 	bl	80001d8 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <UART_SetConfig+0x38c>)
 8003c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2164      	movs	r1, #100	; 0x64
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	; 0x32
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <UART_SetConfig+0x38c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4432      	add	r2, r6
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	377c      	adds	r7, #124	; 0x7c
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40011000 	.word	0x40011000
 8003c64:	40011400 	.word	0x40011400
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{ 
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	80fb      	strh	r3, [r7, #6]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <APPL_StartMailboxHandler>:
           the transition by calling ECAT_StateChange.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <APPL_StartInputHandler>:
            the state transition immediately, in that case the application need to be complete 
            the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) EL9800 1*/
    sDOOutputs.bLED1 = 0;
 8003cdc:	4a32      	ldr	r2, [pc, #200]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003cde:	7893      	ldrb	r3, [r2, #2]
 8003ce0:	f36f 0300 	bfc	r3, #0, #1
 8003ce4:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED2 = 0;
 8003ce6:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003ce8:	7893      	ldrb	r3, [r2, #2]
 8003cea:	f36f 0341 	bfc	r3, #1, #1
 8003cee:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED3 = 0;
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003cf2:	7893      	ldrb	r3, [r2, #2]
 8003cf4:	f36f 0382 	bfc	r3, #2, #1
 8003cf8:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED4 = 0;
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003cfc:	7893      	ldrb	r3, [r2, #2]
 8003cfe:	f36f 03c3 	bfc	r3, #3, #1
 8003d02:	7093      	strb	r3, [r2, #2]
#if _STM32_IO8
    sDOOutputs.bLED5 = 0;
 8003d04:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d06:	7893      	ldrb	r3, [r2, #2]
 8003d08:	f36f 1304 	bfc	r3, #4, #1
 8003d0c:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED7 = 0;
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d10:	7893      	ldrb	r3, [r2, #2]
 8003d12:	f36f 1386 	bfc	r3, #6, #1
 8003d16:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED6 = 0;
 8003d18:	4a23      	ldr	r2, [pc, #140]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d1a:	7893      	ldrb	r3, [r2, #2]
 8003d1c:	f36f 1345 	bfc	r3, #5, #1
 8003d20:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED8 = 0;
 8003d22:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d24:	7893      	ldrb	r3, [r2, #2]
 8003d26:	f36f 13c7 	bfc	r3, #7, #1
 8003d2a:	7093      	strb	r3, [r2, #2]
#endif
    
    LED_1                        = sDOOutputs.bLED1;
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d2e:	789b      	ldrb	r3, [r3, #2]
 8003d30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <APPL_StopOutputHandler+0xd4>)
 8003d38:	601a      	str	r2, [r3, #0]
    LED_2                        = sDOOutputs.bLED2;
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d3c:	789b      	ldrb	r3, [r3, #2]
 8003d3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <APPL_StopOutputHandler+0xd8>)
 8003d46:	601a      	str	r2, [r3, #0]
    LED_3                        = sDOOutputs.bLED3;
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d4a:	789b      	ldrb	r3, [r3, #2]
 8003d4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <APPL_StopOutputHandler+0xdc>)
 8003d54:	601a      	str	r2, [r3, #0]
    LED_4                        = sDOOutputs.bLED4;
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d58:	789b      	ldrb	r3, [r3, #2]
 8003d5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <APPL_StopOutputHandler+0xe0>)
 8003d62:	601a      	str	r2, [r3, #0]
#if _STM32_IO8
    LED_5                        = sDOOutputs.bLED5;
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d66:	789b      	ldrb	r3, [r3, #2]
 8003d68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <APPL_StopOutputHandler+0xe4>)
 8003d70:	601a      	str	r2, [r3, #0]
    LED_7                        = sDOOutputs.bLED7;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <APPL_StopOutputHandler+0xe8>)
 8003d7e:	601a      	str	r2, [r3, #0]
    LED_6                        = sDOOutputs.bLED6;
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d82:	789b      	ldrb	r3, [r3, #2]
 8003d84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <APPL_StopOutputHandler+0xec>)
 8003d8c:	601a      	str	r2, [r3, #0]
    LED_8                        = sDOOutputs.bLED8;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <APPL_StopOutputHandler+0xd0>)
 8003d90:	789b      	ldrb	r3, [r3, #2]
 8003d92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <APPL_StopOutputHandler+0xf0>)
 8003d9a:	601a      	str	r2, [r3, #0]
#endif
/*ECATCHANGE_END(V5.11) EL9800 1*/
    return ALSTATUSCODE_NOERROR;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	2000009c 	.word	0x2000009c
 8003dac:	424082b8 	.word	0x424082b8
 8003db0:	424082b4 	.word	0x424082b4
 8003db4:	424082b0 	.word	0x424082b0
 8003db8:	424082ac 	.word	0x424082ac
 8003dbc:	42408284 	.word	0x42408284
 8003dc0:	42410294 	.word	0x42410294
 8003dc4:	42408280 	.word	0x42408280
 8003dc8:	42410290 	.word	0x42410290

08003dcc <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16* pInputSize,UINT16* pOutputSize)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
#if COE_SUPPORTED
    UINT16 result = ALSTATUSCODE_NOERROR;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	83fb      	strh	r3, [r7, #30]
    UINT16 PDOAssignEntryCnt = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	83bb      	strh	r3, [r7, #28]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	837b      	strh	r3, [r7, #26]
    UINT16 InputSize = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	833b      	strh	r3, [r7, #24]
    UINT16 OutputSize = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	82fb      	strh	r3, [r7, #22]

    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	83bb      	strh	r3, [r7, #28]
 8003dfa:	e039      	b.n	8003e70 <APPL_GenerateMapping+0xa4>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 8003dfc:	8bbb      	ldrh	r3, [r7, #28]
 8003dfe:	4a4b      	ldr	r2, [pc, #300]	; (8003f2c <APPL_GenerateMapping+0x160>)
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	885b      	ldrh	r3, [r3, #2]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fe38 	bl	8007a7c <OBJ_GetObjectHandle>
 8003e0c:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d025      	beq.n	8003e60 <APPL_GenerateMapping+0x94>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	837b      	strh	r3, [r7, #26]
 8003e20:	e019      	b.n	8003e56 <APPL_GenerateMapping+0x8a>
            {
			//				result = *(UINT8 *)pPDO->pVarPtr;
			//				result=(OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3);
                pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	699c      	ldr	r4, [r3, #24]
 8003e26:	8b7b      	ldrh	r3, [r7, #26]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	6939      	ldr	r1, [r7, #16]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f004 f8a3 	bl	8007f7c <OBJ_GetEntryOffset>
 8003e36:	4603      	mov	r3, r0
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4423      	add	r3, r4
 8003e3e:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	8afb      	ldrh	r3, [r7, #22]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	82fb      	strh	r3, [r7, #22]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8003e50:	8b7b      	ldrh	r3, [r7, #26]
 8003e52:	3301      	adds	r3, #1
 8003e54:	837b      	strh	r3, [r7, #26]
 8003e56:	8b7a      	ldrh	r2, [r7, #26]
 8003e58:	89fb      	ldrh	r3, [r7, #14]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3e1      	bcc.n	8003e22 <APPL_GenerateMapping+0x56>
 8003e5e:	e004      	b.n	8003e6a <APPL_GenerateMapping+0x9e>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	82fb      	strh	r3, [r7, #22]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 8003e64:	2325      	movs	r3, #37	; 0x25
 8003e66:	83fb      	strh	r3, [r7, #30]
            break;
 8003e68:	e007      	b.n	8003e7a <APPL_GenerateMapping+0xae>
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8003e6a:	8bbb      	ldrh	r3, [r7, #28]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	83bb      	strh	r3, [r7, #28]
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <APPL_GenerateMapping+0x160>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	8bba      	ldrh	r2, [r7, #28]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3c0      	bcc.n	8003dfc <APPL_GenerateMapping+0x30>
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	10db      	asrs	r3, r3, #3
 8003e80:	82fb      	strh	r3, [r7, #22]

    if(result == 0)
 8003e82:	8bfb      	ldrh	r3, [r7, #30]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d141      	bne.n	8003f0c <APPL_GenerateMapping+0x140>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	83bb      	strh	r3, [r7, #28]
 8003e8c:	e039      	b.n	8003f02 <APPL_GenerateMapping+0x136>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8003e8e:	8bbb      	ldrh	r3, [r7, #28]
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <APPL_GenerateMapping+0x164>)
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	885b      	ldrh	r3, [r3, #2]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f003 fdef 	bl	8007a7c <OBJ_GetObjectHandle>
 8003e9e:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d025      	beq.n	8003ef2 <APPL_GenerateMapping+0x126>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	837b      	strh	r3, [r7, #26]
 8003eb2:	e019      	b.n	8003ee8 <APPL_GenerateMapping+0x11c>
                {
                    pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	699c      	ldr	r4, [r3, #24]
 8003eb8:	8b7b      	ldrh	r3, [r7, #26]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	6939      	ldr	r1, [r7, #16]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 f85a 	bl	8007f7c <OBJ_GetEntryOffset>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	4423      	add	r3, r4
 8003ed0:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	8b3b      	ldrh	r3, [r7, #24]
 8003ede:	4413      	add	r3, r2
 8003ee0:	833b      	strh	r3, [r7, #24]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8003ee2:	8b7b      	ldrh	r3, [r7, #26]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	837b      	strh	r3, [r7, #26]
 8003ee8:	8b7a      	ldrh	r2, [r7, #26]
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d3e1      	bcc.n	8003eb4 <APPL_GenerateMapping+0xe8>
 8003ef0:	e004      	b.n	8003efc <APPL_GenerateMapping+0x130>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	833b      	strh	r3, [r7, #24]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8003ef6:	2324      	movs	r3, #36	; 0x24
 8003ef8:	83fb      	strh	r3, [r7, #30]
                break;
 8003efa:	e007      	b.n	8003f0c <APPL_GenerateMapping+0x140>
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8003efc:	8bbb      	ldrh	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	83bb      	strh	r3, [r7, #28]
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <APPL_GenerateMapping+0x164>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	8bba      	ldrh	r2, [r7, #28]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3c0      	bcc.n	8003e8e <APPL_GenerateMapping+0xc2>
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 8003f0c:	8b3b      	ldrh	r3, [r7, #24]
 8003f0e:	3307      	adds	r3, #7
 8003f10:	10db      	asrs	r3, r3, #3
 8003f12:	833b      	strh	r3, [r7, #24]

    *pInputSize = InputSize;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8b3a      	ldrh	r2, [r7, #24]
 8003f18:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	8afa      	ldrh	r2, [r7, #22]
 8003f1e:	801a      	strh	r2, [r3, #0]
    return result;
 8003f20:	8bfb      	ldrh	r3, [r7, #30]
    *pInputSize = 6;
    *pOutputSize = 2;
    return ALSTATUSCODE_NOERROR;
#endif

}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000084 	.word	0x20000084
 8003f30:	20000088 	.word	0x20000088

08003f34 <APPL_InputMapping>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
#pragma interrupt_level 1
#endif
void APPL_InputMapping(UINT16* pData)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    UINT16 j = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	81fb      	strh	r3, [r7, #14]
    UINT16 *pTmpData = (UINT16 *)pData;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60bb      	str	r3, [r7, #8]

    /* we go through all entries of the TxPDO Assign object to get the assigned TxPDOs */
   for (j = 0; j < sTxPDOassign.u16SubIndex0; j++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	81fb      	strh	r3, [r7, #14]
 8003f48:	e023      	b.n	8003f92 <APPL_InputMapping+0x5e>
   {
      switch (sTxPDOassign.aEntries[j])
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <APPL_InputMapping+0x78>)
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	885b      	ldrh	r3, [r3, #2]
 8003f54:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8003f58:	d004      	beq.n	8003f64 <APPL_InputMapping+0x30>
 8003f5a:	f641 2202 	movw	r2, #6658	; 0x1a02
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <APPL_InputMapping+0x3e>
 8003f62:	e013      	b.n	8003f8c <APPL_InputMapping+0x58>
      {
      /* TxPDO 1 */
      case 0x1A00:
         *pTmpData++ = SWAPWORD(((UINT16 *) &sDIInputs)[1]);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	60ba      	str	r2, [r7, #8]
 8003f6a:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <APPL_InputMapping+0x7c>)
 8003f6c:	8852      	ldrh	r2, [r2, #2]
 8003f6e:	801a      	strh	r2, [r3, #0]
         break;
 8003f70:	e00c      	b.n	8003f8c <APPL_InputMapping+0x58>
      /* TxPDO 3 */
      case 0x1A02:
         *pTmpData++ = SWAPWORD(((UINT16 *) &sAIInputs)[1]);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1c9a      	adds	r2, r3, #2
 8003f76:	60ba      	str	r2, [r7, #8]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <APPL_InputMapping+0x80>)
 8003f7a:	8852      	ldrh	r2, [r2, #2]
 8003f7c:	801a      	strh	r2, [r3, #0]
         *pTmpData++ = SWAPWORD(((UINT16 *) &sAIInputs)[2]);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	60ba      	str	r2, [r7, #8]
 8003f84:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <APPL_InputMapping+0x80>)
 8003f86:	8892      	ldrh	r2, [r2, #4]
 8003f88:	801a      	strh	r2, [r3, #0]
         break;
 8003f8a:	bf00      	nop
   for (j = 0; j < sTxPDOassign.u16SubIndex0; j++)
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	81fb      	strh	r3, [r7, #14]
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <APPL_InputMapping+0x78>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	89fa      	ldrh	r2, [r7, #14]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d3d6      	bcc.n	8003f4a <APPL_InputMapping+0x16>
      }
   }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000088 	.word	0x20000088
 8003fb0:	20000090 	.word	0x20000090
 8003fb4:	20000094 	.word	0x20000094

08003fb8 <APPL_OutputMapping>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
#pragma interrupt_level 1
#endif
void APPL_OutputMapping(UINT16* pData)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
    UINT16 j = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	81fb      	strh	r3, [r7, #14]
    UINT16 *pTmpData = (UINT16 *)pData;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* we go through all entries of the RxPDO Assign object to get the assigned RxPDOs */
    for (j = 0; j < sRxPDOassign.u16SubIndex0; j++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	81fb      	strh	r3, [r7, #14]
 8003fcc:	e013      	b.n	8003ff6 <APPL_OutputMapping+0x3e>
    {
        switch (sRxPDOassign.aEntries[j])
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <APPL_OutputMapping+0x58>)
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	885b      	ldrh	r3, [r3, #2]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f241 6301 	movw	r3, #5633	; 0x1601
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d106      	bne.n	8003ff0 <APPL_OutputMapping+0x38>
        {
        /* RxPDO 2 */
        case 0x1601:
            ((UINT16 *) &sDOOutputs)[1] = SWAPWORD(*pTmpData++);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	60ba      	str	r2, [r7, #8]
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <APPL_OutputMapping+0x5c>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	8013      	strh	r3, [r2, #0]
            break;
 8003fee:	bf00      	nop
    for (j = 0; j < sRxPDOassign.u16SubIndex0; j++)
 8003ff0:	89fb      	ldrh	r3, [r7, #14]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	81fb      	strh	r3, [r7, #14]
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <APPL_OutputMapping+0x58>)
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	89fa      	ldrh	r2, [r7, #14]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3e6      	bcc.n	8003fce <APPL_OutputMapping+0x16>
        }
    }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000084 	.word	0x20000084
 8004014:	2000009e 	.word	0x2000009e

08004018 <APPL_Application>:
/**
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_Application(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0

#if _STM32_IO4
    UINT16 analogValue;
#endif

    LED_1                        = sDOOutputs.bLED1;
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <APPL_Application+0x180>)
 800401e:	789b      	ldrb	r3, [r3, #2]
 8004020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b5d      	ldr	r3, [pc, #372]	; (800419c <APPL_Application+0x184>)
 8004028:	601a      	str	r2, [r3, #0]
    LED_2                        = sDOOutputs.bLED2;
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <APPL_Application+0x180>)
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b5a      	ldr	r3, [pc, #360]	; (80041a0 <APPL_Application+0x188>)
 8004036:	601a      	str	r2, [r3, #0]
    LED_3                        = sDOOutputs.bLED3;
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <APPL_Application+0x180>)
 800403a:	789b      	ldrb	r3, [r3, #2]
 800403c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <APPL_Application+0x18c>)
 8004044:	601a      	str	r2, [r3, #0]
    LED_4                        = sDOOutputs.bLED4;
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <APPL_Application+0x180>)
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	4b55      	ldr	r3, [pc, #340]	; (80041a8 <APPL_Application+0x190>)
 8004052:	601a      	str	r2, [r3, #0]
#if _STM32_IO8
    LED_5                        = sDOOutputs.bLED5;
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <APPL_Application+0x180>)
 8004056:	789b      	ldrb	r3, [r3, #2]
 8004058:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <APPL_Application+0x194>)
 8004060:	601a      	str	r2, [r3, #0]
    LED_7                        = sDOOutputs.bLED7;
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <APPL_Application+0x180>)
 8004064:	789b      	ldrb	r3, [r3, #2]
 8004066:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <APPL_Application+0x198>)
 800406e:	601a      	str	r2, [r3, #0]
    LED_6                        = sDOOutputs.bLED6;
 8004070:	4b49      	ldr	r3, [pc, #292]	; (8004198 <APPL_Application+0x180>)
 8004072:	789b      	ldrb	r3, [r3, #2]
 8004074:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b4e      	ldr	r3, [pc, #312]	; (80041b4 <APPL_Application+0x19c>)
 800407c:	601a      	str	r2, [r3, #0]
    LED_8                        = sDOOutputs.bLED8;
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <APPL_Application+0x180>)
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <APPL_Application+0x1a0>)
 800408a:	601a      	str	r2, [r3, #0]
#endif

	if(sDOOutputs.bLED1)
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <APPL_Application+0x180>)
 800408e:	789b      	ldrb	r3, [r3, #2]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <APPL_Application+0x90>
	{
//			GPIO_SetBits(GPIOB,GPIO_Pin_14);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800409a:	2201      	movs	r2, #1
 800409c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040a0:	4846      	ldr	r0, [pc, #280]	; (80041bc <APPL_Application+0x1a4>)
 80040a2:	f7fe f815 	bl	80020d0 <HAL_GPIO_WritePin>
 80040a6:	e005      	b.n	80040b4 <APPL_Application+0x9c>
	}
	else
	{
//		GPIO_ResetBits(GPIOB,GPIO_Pin_14);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040ae:	4843      	ldr	r0, [pc, #268]	; (80041bc <APPL_Application+0x1a4>)
 80040b0:	f7fe f80e 	bl	80020d0 <HAL_GPIO_WritePin>
	}
	
	
    sDIInputs.bSwitch1    = SWITCH_1;
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <APPL_Application+0x1a8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	b2d9      	uxtb	r1, r3
 80040be:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <APPL_Application+0x1ac>)
 80040c0:	7893      	ldrb	r3, [r2, #2]
 80040c2:	f361 0300 	bfi	r3, r1, #0, #1
 80040c6:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch2    = SWITCH_2;
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <APPL_Application+0x1b0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	b2d9      	uxtb	r1, r3
 80040d2:	4a3c      	ldr	r2, [pc, #240]	; (80041c4 <APPL_Application+0x1ac>)
 80040d4:	7893      	ldrb	r3, [r2, #2]
 80040d6:	f361 0341 	bfi	r3, r1, #1, #1
 80040da:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch3    = SWITCH_3;
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <APPL_Application+0x1b4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	b2d9      	uxtb	r1, r3
 80040e6:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <APPL_Application+0x1ac>)
 80040e8:	7893      	ldrb	r3, [r2, #2]
 80040ea:	f361 0382 	bfi	r3, r1, #2, #1
 80040ee:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch4    = SWITCH_4;
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <APPL_Application+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	b2d9      	uxtb	r1, r3
 80040fa:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <APPL_Application+0x1ac>)
 80040fc:	7893      	ldrb	r3, [r2, #2]
 80040fe:	f361 03c3 	bfi	r3, r1, #3, #1
 8004102:	7093      	strb	r3, [r2, #2]
#if _STM32_IO8
    sDIInputs.bSwitch5    = SWITCH_5;
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <APPL_Application+0x1bc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	b2d9      	uxtb	r1, r3
 800410e:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <APPL_Application+0x1ac>)
 8004110:	7893      	ldrb	r3, [r2, #2]
 8004112:	f361 1304 	bfi	r3, r1, #4, #1
 8004116:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch6    = SWITCH_6;
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <APPL_Application+0x1c0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	b2d9      	uxtb	r1, r3
 8004122:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <APPL_Application+0x1ac>)
 8004124:	7893      	ldrb	r3, [r2, #2]
 8004126:	f361 1345 	bfi	r3, r1, #5, #1
 800412a:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch7    = SWITCH_7;
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <APPL_Application+0x1c4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <APPL_Application+0x1ac>)
 8004138:	7893      	ldrb	r3, [r2, #2]
 800413a:	f361 1386 	bfi	r3, r1, #6, #1
 800413e:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch8    = SWITCH_8;
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <APPL_Application+0x1c8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	b2d9      	uxtb	r1, r3
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <APPL_Application+0x1ac>)
 800414c:	7893      	ldrb	r3, [r2, #2]
 800414e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004152:	7093      	strb	r3, [r2, #2]
//		while(!(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==SET));
					
//	sAIInputs.i16Analoginput  = uhADCxConvertedValue;

    /* we toggle the TxPDO Toggle after updating the data of the corresponding TxPDO */
    sAIInputs.bTxPDOToggle ^= 1;
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <APPL_Application+0x1cc>)
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2d9      	uxtb	r1, r3
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <APPL_Application+0x1cc>)
 8004166:	78d3      	ldrb	r3, [r2, #3]
 8004168:	f361 13c7 	bfi	r3, r1, #7, #1
 800416c:	70d3      	strb	r3, [r2, #3]

    /* we simulate a problem of the analog input, if the Switch4 is on in this example,
       in this case the TxPDO State has to set to indicate the problem to the master */
    if ( sDIInputs.bSwitch4 )
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <APPL_Application+0x1ac>)
 8004170:	789b      	ldrb	r3, [r3, #2]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <APPL_Application+0x170>
        sAIInputs.bTxPDOState = 1;
 800417c:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <APPL_Application+0x1cc>)
 800417e:	78d3      	ldrb	r3, [r2, #3]
 8004180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004184:	70d3      	strb	r3, [r2, #3]
    else
        sAIInputs.bTxPDOState = 0;
}
 8004186:	e004      	b.n	8004192 <APPL_Application+0x17a>
        sAIInputs.bTxPDOState = 0;
 8004188:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <APPL_Application+0x1cc>)
 800418a:	78d3      	ldrb	r3, [r2, #3]
 800418c:	f36f 1386 	bfc	r3, #6, #1
 8004190:	70d3      	strb	r3, [r2, #3]
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000009c 	.word	0x2000009c
 800419c:	424082b8 	.word	0x424082b8
 80041a0:	424082b4 	.word	0x424082b4
 80041a4:	424082b0 	.word	0x424082b0
 80041a8:	424082ac 	.word	0x424082ac
 80041ac:	42408284 	.word	0x42408284
 80041b0:	42410294 	.word	0x42410294
 80041b4:	42408280 	.word	0x42408280
 80041b8:	42410290 	.word	0x42410290
 80041bc:	40020400 	.word	0x40020400
 80041c0:	42410230 	.word	0x42410230
 80041c4:	20000090 	.word	0x20000090
 80041c8:	4241022c 	.word	0x4241022c
 80041cc:	42410228 	.word	0x42410228
 80041d0:	42410224 	.word	0x42410224
 80041d4:	42410220 	.word	0x42410220
 80041d8:	4241021c 	.word	0x4241021c
 80041dc:	42410218 	.word	0x42410218
 80041e0:	4240823c 	.word	0x4240823c
 80041e4:	20000094 	.word	0x20000094

080041e8 <ReadObject0x1802>:
 \return    ABORTIDX_XXX

 \brief     Handles SDO read requests to TxPDO Parameter
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 ReadObject0x1802( UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60ba      	str	r2, [r7, #8]
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	4603      	mov	r3, r0
 80041f4:	81fb      	strh	r3, [r7, #14]
 80041f6:	460b      	mov	r3, r1
 80041f8:	737b      	strb	r3, [r7, #13]

    if(bCompleteAccess)
 80041fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <ReadObject0x1802+0x1e>
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8004202:	2305      	movs	r3, #5
 8004204:	e038      	b.n	8004278 <ReadObject0x1802+0x90>

    if(subindex == 0)
 8004206:	7b7b      	ldrb	r3, [r7, #13]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <ReadObject0x1802+0x2e>
    {
        *pData = TxPDO1802Subindex0;
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <ReadObject0x1802+0x98>)
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e02f      	b.n	8004276 <ReadObject0x1802+0x8e>
    }
    else if(subindex == 6)
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	2b06      	cmp	r3, #6
 800421a:	d108      	bne.n	800422e <ReadObject0x1802+0x46>
    {
        /*clear destination buffer (no excluded TxPDO set)*/
        if(dataSize > 0)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d029      	beq.n	8004276 <ReadObject0x1802+0x8e>
            MBXMEMSET(pData,0x00,dataSize);
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	2100      	movs	r1, #0
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f006 fbf2 	bl	800aa10 <memset>
 800422c:	e023      	b.n	8004276 <ReadObject0x1802+0x8e>
    }
    else if(subindex == 7)
 800422e:	7b7b      	ldrb	r3, [r7, #13]
 8004230:	2b07      	cmp	r3, #7
 8004232:	d10d      	bne.n	8004250 <ReadObject0x1802+0x68>
    {
        /*min size is one Byte*/
        UINT8 *pu8Data = (UINT8*)pData;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	613b      	str	r3, [r7, #16]
        
        //Reset Buffer
        *pu8Data = 0; 
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

        *pu8Data = sAIInputs.bTxPDOState;
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <ReadObject0x1802+0x9c>)
 8004240:	78db      	ldrb	r3, [r3, #3]
 8004242:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e012      	b.n	8004276 <ReadObject0x1802+0x8e>
    }
    else if(subindex == 9)
 8004250:	7b7b      	ldrb	r3, [r7, #13]
 8004252:	2b09      	cmp	r3, #9
 8004254:	d10d      	bne.n	8004272 <ReadObject0x1802+0x8a>
    {
        /*min size is one Byte*/
        UINT8 *pu8Data = (UINT8*)pData;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	617b      	str	r3, [r7, #20]
        
        //Reset Buffer
        *pu8Data = 0; 
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]

        *pu8Data = sAIInputs.bTxPDOToggle;
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <ReadObject0x1802+0x9c>)
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e001      	b.n	8004276 <ReadObject0x1802+0x8e>
    }
    else
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8004272:	2311      	movs	r3, #17
 8004274:	e000      	b.n	8004278 <ReadObject0x1802+0x90>

    return 0;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000034 	.word	0x20000034
 8004284:	20000094 	.word	0x20000094

08004288 <MainEtherCAT>:

int MainEtherCAT(void)
#else
void MainEtherCAT(void)
#endif
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
    /* initialize the Hardware and the EtherCAT Slave Controller */
    HW_Init();
 800428c:	f000 f906 	bl	800449c <HW_Init>

    MainInit();
 8004290:	f000 fedc 	bl	800504c <MainInit>

    bRunApplication = TRUE;
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <MainEtherCAT+0x28>)
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
    do
    {
        MainLoop();
 800429a:	f000 fef9 	bl	8005090 <MainLoop>

    } while (bRunApplication == TRUE);
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <MainEtherCAT+0x28>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d0f9      	beq.n	800429a <MainEtherCAT+0x12>

    HW_Release();
 80042a6:	f000 f92d 	bl	8004504 <HW_Release>
#if _STM32_IO8
    return 0;
 80042aa:	2300      	movs	r3, #0
#endif
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000a1c 	.word	0x20000a1c

080042b4 <__NVIC_EnableIRQ>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	db0b      	blt.n	80042de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	4907      	ldr	r1, [pc, #28]	; (80042ec <__NVIC_EnableIRQ+0x38>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2001      	movs	r0, #1
 80042d6:	fa00 f202 	lsl.w	r2, r0, r2
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000e100 	.word	0xe000e100

080042f0 <__NVIC_DisableIRQ>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db12      	blt.n	8004328 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	490a      	ldr	r1, [pc, #40]	; (8004334 <__NVIC_DisableIRQ+0x44>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2001      	movs	r0, #1
 8004312:	fa00 f202 	lsl.w	r2, r0, r2
 8004316:	3320      	adds	r3, #32
 8004318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800431c:	f3bf 8f4f 	dsb	sy
}
 8004320:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004322:	f3bf 8f6f 	isb	sy
}
 8004326:	bf00      	nop
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100

08004338 <WR_CMD>:

#define	SELECT_SPI		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET)
#define DESELECT_SPI	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET)

uint8_t WR_CMD (uint8_t cmd)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af02      	add	r7, sp, #8
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]

	SELECT_SPI;
 8004346:	2200      	movs	r2, #0
 8004348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800434c:	4808      	ldr	r0, [pc, #32]	; (8004370 <WR_CMD+0x38>)
 800434e:	f7fd febf 	bl	80020d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&cmd, (uint8_t *)&rxData, 1, 100);
 8004352:	f107 020f 	add.w	r2, r7, #15
 8004356:	1df9      	adds	r1, r7, #7
 8004358:	2364      	movs	r3, #100	; 0x64
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2301      	movs	r3, #1
 800435e:	4805      	ldr	r0, [pc, #20]	; (8004374 <WR_CMD+0x3c>)
 8004360:	f7fe fd35 	bl	8002dce <HAL_SPI_TransmitReceive>
//	DESELECT_SPI;

	return rxData;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40020400 	.word	0x40020400
 8004374:	20000764 	.word	0x20000764

08004378 <GetInterruptRegister>:

        The first two bytes of an access to the EtherCAT ASIC always deliver the AL_Event register (0x220).
        It will be saved in the global "EscALEvent"
*////////////////////////////////////////////////////////////////////////////////////////
static void GetInterruptRegister(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800437c:	b672      	cpsid	i
}
 800437e:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif

    /* select the SPI */
    SELECT_SPI;
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004386:	4809      	ldr	r0, [pc, #36]	; (80043ac <GetInterruptRegister+0x34>)
 8004388:	f7fd fea2 	bl	80020d0 <HAL_GPIO_WritePin>

	 HW_EscReadIsr((MEM_ADDR *)&EscALEvent.Word, 0x220, 2);
 800438c:	2202      	movs	r2, #2
 800438e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004392:	4807      	ldr	r0, [pc, #28]	; (80043b0 <GetInterruptRegister+0x38>)
 8004394:	f000 f906 	bl	80045a4 <HW_EscReadIsr>
	/* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */

	DESELECT_SPI;
 8004398:	2201      	movs	r2, #1
 800439a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <GetInterruptRegister+0x34>)
 80043a0:	f7fd fe96 	bl	80020d0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80043a4:	b662      	cpsie	i
}
 80043a6:	bf00      	nop
#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif

}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40020400 	.word	0x40020400
 80043b0:	20000a08 	.word	0x20000a08

080043b4 <ISR_GetInterruptRegister>:
*////////////////////////////////////////////////////////////////////////////////////////
#if !INTERRUPTS_SUPPORTED
#define ISR_GetInterruptRegister GetInterruptRegister
#else
static void ISR_GetInterruptRegister(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
    /* SPI should be deactivated to interrupt a possible transmission */
    DESELECT_SPI;
 80043b8:	2201      	movs	r2, #1
 80043ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043be:	480b      	ldr	r0, [pc, #44]	; (80043ec <ISR_GetInterruptRegister+0x38>)
 80043c0:	f7fd fe86 	bl	80020d0 <HAL_GPIO_WritePin>

    /* select the SPI */
    SELECT_SPI;
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ca:	4808      	ldr	r0, [pc, #32]	; (80043ec <ISR_GetInterruptRegister+0x38>)
 80043cc:	f7fd fe80 	bl	80020d0 <HAL_GPIO_WritePin>

    HW_EscReadIsr((MEM_ADDR *)&EscALEvent.Word, 0x220, 2);
 80043d0:	2202      	movs	r2, #2
 80043d2:	f44f 7108 	mov.w	r1, #544	; 0x220
 80043d6:	4806      	ldr	r0, [pc, #24]	; (80043f0 <ISR_GetInterruptRegister+0x3c>)
 80043d8:	f000 f8e4 	bl	80045a4 <HW_EscReadIsr>

	/* 	if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
		done here */

    DESELECT_SPI;
 80043dc:	2201      	movs	r2, #1
 80043de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043e2:	4802      	ldr	r0, [pc, #8]	; (80043ec <ISR_GetInterruptRegister+0x38>)
 80043e4:	f7fd fe74 	bl	80020d0 <HAL_GPIO_WritePin>
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40020400 	.word	0x40020400
 80043f0:	20000a08 	.word	0x20000a08

080043f4 <AddressingEsc>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief The function addresses the EtherCAT ASIC via SPI for a following SPI access.
*////////////////////////////////////////////////////////////////////////////////////////
static void AddressingEsc( UINT16 Address, UINT8 Command )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	460a      	mov	r2, r1
 80043fe:	80fb      	strh	r3, [r7, #6]
 8004400:	4613      	mov	r3, r2
 8004402:	717b      	strb	r3, [r7, #5]
    UBYTETOWORD tmp;

    VARVOLATILE UINT8 dummy;

    tmp.Word = ( Address << 3 ) | Command;
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	b21a      	sxth	r2, r3
 800440a:	797b      	ldrb	r3, [r7, #5]
 800440c:	b21b      	sxth	r3, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	b21b      	sxth	r3, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	81bb      	strh	r3, [r7, #12]
    /* select the SPI */
    SELECT_SPI;
 8004416:	2200      	movs	r2, #0
 8004418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800441c:	4809      	ldr	r0, [pc, #36]	; (8004444 <AddressingEsc+0x50>)
 800441e:	f7fd fe57 	bl	80020d0 <HAL_GPIO_WritePin>


    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
       the transmission shall be started */
    /* send the first address/command byte to the ESC */
	dummy = 	WR_CMD(tmp.Byte[1]);
 8004422:	7b7b      	ldrb	r3, [r7, #13]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff87 	bl	8004338 <WR_CMD>
 800442a:	4603      	mov	r3, r0
 800442c:	72fb      	strb	r3, [r7, #11]

    /* send the second address/command byte to the ESC */

	dummy =	WR_CMD(tmp.Byte[0]);
 800442e:	7b3b      	ldrb	r3, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff81 	bl	8004338 <WR_CMD>
 8004436:	4603      	mov	r3, r0
 8004438:	72fb      	strb	r3, [r7, #11]

    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40020400 	.word	0x40020400

08004448 <ISR_AddressingEsc>:

#if !INTERRUPTS_SUPPORTED
#define ISR_AddressingEsc AddressingEsc
#else
static void ISR_AddressingEsc( UINT16 Address, UINT8 Command )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	460a      	mov	r2, r1
 8004452:	80fb      	strh	r3, [r7, #6]
 8004454:	4613      	mov	r3, r2
 8004456:	717b      	strb	r3, [r7, #5]
    VARVOLATILE UINT8 dummy;

    UBYTETOWORD tmp;
    tmp.Word = ( Address << 3 ) | Command;
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	b21a      	sxth	r2, r3
 800445e:	797b      	ldrb	r3, [r7, #5]
 8004460:	b21b      	sxth	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b21b      	sxth	r3, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	81bb      	strh	r3, [r7, #12]

    /* select the SPI */
    SELECT_SPI;
 800446a:	2200      	movs	r2, #0
 800446c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004470:	4809      	ldr	r0, [pc, #36]	; (8004498 <ISR_AddressingEsc+0x50>)
 8004472:	f7fd fe2d 	bl	80020d0 <HAL_GPIO_WritePin>

    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
      the transmission shall be started */

    /* send the first address/command byte to the ESC */
	dummy = WR_CMD(tmp.Byte[1]);
 8004476:	7b7b      	ldrb	r3, [r7, #13]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff5d 	bl	8004338 <WR_CMD>
 800447e:	4603      	mov	r3, r0
 8004480:	73fb      	strb	r3, [r7, #15]

   /* send the second address/command byte to the ESC */

	dummy = WR_CMD(tmp.Byte[0]);
 8004482:	7b3b      	ldrb	r3, [r7, #12]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff57 	bl	8004338 <WR_CMD>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40020400 	.word	0x40020400

0800449c <HW_Init>:
\return     0 if initialization was successful

 \brief    This function intialize the Process Data Interface (PDI) and the host controller.
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 HW_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
/*initialize ADC configration*/
//	ADC_Configuration();

	do
    {
        intMask = 0x93;
 80044a2:	2393      	movs	r3, #147	; 0x93
 80044a4:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	2202      	movs	r2, #2
 80044aa:	f44f 7101 	mov.w	r1, #516	; 0x204
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8ac 	bl	800460c <HW_EscWrite>
        intMask = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 80044b8:	1dbb      	adds	r3, r7, #6
 80044ba:	2202      	movs	r2, #2
 80044bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f83b 	bl	800453c <HW_EscRead>

    } while (intMask != 0x93);
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b93      	cmp	r3, #147	; 0x93
 80044ca:	d1ea      	bne.n	80044a2 <HW_Init+0x6>

	intMask = 0x00;
 80044cc:	2300      	movs	r3, #0
 80044ce:	80fb      	strh	r3, [r7, #6]

    HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 80044d0:	1dbb      	adds	r3, r7, #6
 80044d2:	2204      	movs	r2, #4
 80044d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f897 	bl	800460c <HW_EscWrite>

#if AL_EVENT_ENABLED
    INIT_ESC_INT;
    ENABLE_ESC_INT();
 80044de:	2017      	movs	r0, #23
 80044e0:	f7ff fee8 	bl	80042b4 <__NVIC_EnableIRQ>

#if DC_SUPPORTED&& _STM32_IO8
    INIT_SYNC0_INT
    INIT_SYNC1_INT

    ENABLE_SYNC0_INT;
 80044e4:	2006      	movs	r0, #6
 80044e6:	f7ff fee5 	bl	80042b4 <__NVIC_EnableIRQ>
    ENABLE_SYNC1_INT;
 80044ea:	2007      	movs	r0, #7
 80044ec:	f7ff fee2 	bl	80042b4 <__NVIC_EnableIRQ>
#endif

    INIT_ECAT_TIMER;
    START_ECAT_TIMER;
 80044f0:	201c      	movs	r0, #28
 80044f2:	f7ff fedf 	bl	80042b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80044f6:	b662      	cpsie	i
}
 80044f8:	bf00      	nop
    ENABLE_GLOBAL_INT;
#endif



    return 0;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HW_Release>:
/**
 \brief    This function shall be implemented if hardware resources need to be release
        when the sample application stops
*////////////////////////////////////////////////////////////////////////////////////////
void HW_Release(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0

}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HW_GetALEventRegister>:
 \return    first two Bytes of ALEvent register (0x220)

 \brief  This function gets the current content of ALEvent register
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 HW_GetALEventRegister(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
    GetInterruptRegister();
 8004518:	f7ff ff2e 	bl	8004378 <GetInterruptRegister>
    return EscALEvent.Word;
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <HW_GetALEventRegister+0x10>)
 800451e:	881b      	ldrh	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000a08 	.word	0x20000a08

08004528 <HW_GetALEventRegister_Isr>:
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif

UINT16 HW_GetALEventRegister_Isr(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
     ISR_GetInterruptRegister();
 800452c:	f7ff ff42 	bl	80043b4 <ISR_GetInterruptRegister>
    return EscALEvent.Word;
 8004530:	4b01      	ldr	r3, [pc, #4]	; (8004538 <HW_GetALEventRegister_Isr+0x10>)
 8004532:	881b      	ldrh	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000a08 	.word	0x20000a08

0800453c <HW_EscRead>:
 \param Len            Access size in Bytes.

 \brief  This function operates the SPI read access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscRead( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	803b      	strh	r3, [r7, #0]
    /* HBu 24.01.06: if the SPI will be read by an interrupt routine too the
                     mailbox reading may be interrupted but an interrupted
                     reading will remain in a SPI transmission fault that will
                     reset the internal Sync Manager status. Therefore the reading
                     will be divided in 1-byte reads with disabled interrupt */
    UINT16 i = Len;
 800454c:	883b      	ldrh	r3, [r7, #0]
 800454e:	81fb      	strh	r3, [r7, #14]
    UINT8 *pTmpData = (UINT8 *)pData;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60bb      	str	r3, [r7, #8]

    /* loop for all bytes to be read */
    while ( i-- > 0 )
 8004554:	e019      	b.n	800458a <HW_EscRead+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8004556:	b672      	cpsid	i
}
 8004558:	bf00      	nop
           in that case the status flag will indicate an error because
           the reading operation was interrupted without setting the last
           sent byte to 0xFF */
        DISABLE_AL_EVENT_INT;
#endif
         AddressingEsc( Address, ESC_RD );
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	2102      	movs	r1, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff48 	bl	80043f4 <AddressingEsc>

        /* when reading the last byte the DI pin shall be 1 */
			*pTmpData++= WR_CMD(0xFF);
 8004564:	68bc      	ldr	r4, [r7, #8]
 8004566:	1c63      	adds	r3, r4, #1
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	20ff      	movs	r0, #255	; 0xff
 800456c:	f7ff fee4 	bl	8004338 <WR_CMD>
 8004570:	4603      	mov	r3, r0
 8004572:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004574:	b662      	cpsie	i
}
 8004576:	bf00      	nop
   #if AL_EVENT_ENABLED
        ENABLE_AL_EVENT_INT;
#endif
        /* there has to be at least 15 ns + CLK/2 after the transmission is finished
           before the SPI1_SEL signal shall be 1 */
        DESELECT_SPI;
 8004578:	2201      	movs	r2, #1
 800457a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800457e:	4808      	ldr	r0, [pc, #32]	; (80045a0 <HW_EscRead+0x64>)
 8004580:	f7fd fda6 	bl	80020d0 <HAL_GPIO_WritePin>
        /* next address */
        Address++;
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	3301      	adds	r3, #1
 8004588:	807b      	strh	r3, [r7, #2]
    while ( i-- > 0 )
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	1e5a      	subs	r2, r3, #1
 800458e:	81fa      	strh	r2, [r7, #14]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e0      	bne.n	8004556 <HW_EscRead+0x1a>
//        /* reset transmission flag */
//        SPI1_IF = 0;
    }
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop
 80045a0:	40020400 	.word	0x40020400

080045a4 <HW_EscReadIsr>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif
void HW_EscReadIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
 80045b0:	4613      	mov	r3, r2
 80045b2:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 80045b4:	883b      	ldrh	r3, [r7, #0]
 80045b6:	81fb      	strh	r3, [r7, #14]
    UINT8 data = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	737b      	strb	r3, [r7, #13]

    UINT8 *pTmpData = (UINT8 *)pData;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60bb      	str	r3, [r7, #8]

    /* send the address and command to the ESC */
     ISR_AddressingEsc( Address, ESC_RD );
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff3f 	bl	8004448 <ISR_AddressingEsc>
    /* loop for all bytes to be read */
    while ( i-- > 0 )
 80045ca:	e00d      	b.n	80045e8 <HW_EscReadIsr+0x44>
    {
        if ( i == 0 )
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HW_EscReadIsr+0x32>
        {
            /* when reading the last byte the DI pin shall be 1 */
            data = 0xFF;
 80045d2:	23ff      	movs	r3, #255	; 0xff
 80045d4:	737b      	strb	r3, [r7, #13]
        }

		*pTmpData++= WR_CMD(data);
 80045d6:	68bc      	ldr	r4, [r7, #8]
 80045d8:	1c63      	adds	r3, r4, #1
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	7b7b      	ldrb	r3, [r7, #13]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff feaa 	bl	8004338 <WR_CMD>
 80045e4:	4603      	mov	r3, r0
 80045e6:	7023      	strb	r3, [r4, #0]
    while ( i-- > 0 )
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	81fa      	strh	r2, [r7, #14]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ec      	bne.n	80045cc <HW_EscReadIsr+0x28>
    }

    /* there has to be at least 15 ns + CLK/2 after the transmission is finished
       before the SPI1_SEL signal shall be 1 */
    DESELECT_SPI;
 80045f2:	2201      	movs	r2, #1
 80045f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <HW_EscReadIsr+0x64>)
 80045fa:	f7fd fd69 	bl	80020d0 <HAL_GPIO_WritePin>
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	bf00      	nop
 8004608:	40020400 	.word	0x40020400

0800460c <HW_EscWrite>:
 \param Len            Access size in Bytes.

  \brief  This function operates the SPI write access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscWrite( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 800461c:	883b      	ldrh	r3, [r7, #0]
 800461e:	82fb      	strh	r3, [r7, #22]
    VARVOLATILE UINT8 dummy;

    UINT8 *pTmpData = (UINT8 *)pData;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	613b      	str	r3, [r7, #16]

    /* loop for all bytes to be written */
    while ( i-- > 0 )
 8004624:	e01a      	b.n	800465c <HW_EscWrite+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8004626:	b672      	cpsid	i
}
 8004628:	bf00      	nop
        /* the reading of data from the ESC can be interrupted by the
           AL Event ISR, so every byte will be written separate */
        DISABLE_AL_EVENT_INT;
#endif
        /* HBu 24.01.06: wrong parameter ESC_RD */
         AddressingEsc( Address, ESC_WR );
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	2104      	movs	r1, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fee0 	bl	80043f4 <AddressingEsc>

        /* enable the ESC interrupt to get the AL Event ISR the chance to interrupt */
        /* SPI1_BUF must be read, otherwise the module will not transfer the next received data from SPIxSR to SPIxRXB.*/
			dummy= WR_CMD(*pTmpData++);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	613a      	str	r2, [r7, #16]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fe7b 	bl	8004338 <WR_CMD>
 8004642:	4603      	mov	r3, r0
 8004644:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8004646:	b662      	cpsie	i
}
 8004648:	bf00      	nop

    #if AL_EVENT_ENABLED
        ENABLE_AL_EVENT_INT;
#endif

        DESELECT_SPI;
 800464a:	2201      	movs	r2, #1
 800464c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <HW_EscWrite+0x64>)
 8004652:	f7fd fd3d 	bl	80020d0 <HAL_GPIO_WritePin>
        /* next address */
        Address++;
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	3301      	adds	r3, #1
 800465a:	807b      	strh	r3, [r7, #2]
    while ( i-- > 0 )
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	82fa      	strh	r2, [r7, #22]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1df      	bne.n	8004626 <HW_EscWrite+0x1a>
    }
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40020400 	.word	0x40020400

08004674 <HW_EscWriteIsr>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif
void HW_EscWriteIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 8004684:	883b      	ldrh	r3, [r7, #0]
 8004686:	82fb      	strh	r3, [r7, #22]
    VARVOLATILE UINT16 dummy;
    UINT8 *pTmpData = (UINT8 *)pData;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	613b      	str	r3, [r7, #16]

    /* send the address and command to the ESC */
     ISR_AddressingEsc( Address, ESC_WR );
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	2104      	movs	r1, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fed9 	bl	8004448 <ISR_AddressingEsc>
    /* loop for all bytes to be written */
    while ( i-- > 0 )
 8004696:	e00a      	b.n	80046ae <HW_EscWriteIsr+0x3a>
    {
        /* start transmission */
			dummy= WR_CMD(*pTmpData);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fe4b 	bl	8004338 <WR_CMD>
 80046a2:	4603      	mov	r3, r0
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	81fb      	strh	r3, [r7, #14]
      /* increment data pointer */
        pTmpData++;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
    while ( i-- > 0 )
 80046ae:	8afb      	ldrh	r3, [r7, #22]
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	82fa      	strh	r2, [r7, #22]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ef      	bne.n	8004698 <HW_EscWriteIsr+0x24>
    }

    /* there has to be at least 15 ns + CLK/2 after the transmission is finished
       before the SPI1_SEL signal shall be 1 */
    DESELECT_SPI;
 80046b8:	2201      	movs	r2, #1
 80046ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046be:	4803      	ldr	r0, [pc, #12]	; (80046cc <HW_EscWriteIsr+0x58>)
 80046c0:	f7fd fd06 	bl	80020d0 <HAL_GPIO_WritePin>
}
 80046c4:	bf00      	nop
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40020400 	.word	0x40020400

080046d0 <EXTI9_5_IRQHandler>:
//void HWISR_EcatIsr(void)
void EcatIsr(void)
#else
void EcatIsr(void)		//void __attribute__ ((__interrupt__, no_auto_psv)) EscIsr(void)
#endif
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0

     PDI_Isr();
 80046d4:	f000 fb46 	bl	8004d64 <PDI_Isr>

    /* reset the interrupt flag */
		ACK_ESC_INT;
 80046d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80046dc:	f7fd fd12 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <EXTI0_IRQHandler>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC0
*////////////////////////////////////////////////////////////////////////////////////////

void Sync0Isr(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
    Sync0_Isr();
 80046e8:	f000 fbe4 	bl	8004eb4 <Sync0_Isr>
    /* reset the interrupt flag */

    ACK_SYNC0_INT;
 80046ec:	2001      	movs	r0, #1
 80046ee:	f7fd fd09 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <EXTI1_IRQHandler>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC1
*////////////////////////////////////////////////////////////////////////////////////////

void Sync1Isr(void)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	af00      	add	r7, sp, #0
			Sync1_Isr();
 80046fa:	f000 fc85 	bl	8005008 <Sync1_Isr>
			/* reset the interrupt flag */

			ACK_SYNC1_INT;
 80046fe:	2002      	movs	r0, #2
 8004700:	f7fd fd00 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <TIM2_IRQHandler>:
#endif

#if _STM32_IO8 && ECAT_TIMER_INT
// Timer 2 ISR (0.1ms)
void TimerIsr(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
			DISABLE_ESC_INT();
 800470c:	2017      	movs	r0, #23
 800470e:	f7ff fdef 	bl	80042f0 <__NVIC_DisableIRQ>

		  ECAT_CheckTimer();
 8004712:	f000 fa8f 	bl	8004c34 <ECAT_CheckTimer>

			ECAT_TIMER_ACK_INT;
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <TIM2_IRQHandler+0x24>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800471e:	611a      	str	r2, [r3, #16]

			ENABLE_ESC_INT();
 8004720:	2017      	movs	r0, #23
 8004722:	f7ff fdc7 	bl	80042b4 <__NVIC_EnableIRQ>
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000950 	.word	0x20000950

08004730 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <COE_GetObjectDictionary+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	200005cc 	.word	0x200005cc

08004748 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 800474e:	4b34      	ldr	r3, [pc, #208]	; (8004820 <COE_ObjInit+0xd8>)
 8004750:	2220      	movs	r2, #32
 8004752:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 8004754:	4b32      	ldr	r3, [pc, #200]	; (8004820 <COE_ObjInit+0xd8>)
 8004756:	2200      	movs	r2, #0
 8004758:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <COE_ObjInit+0xd8>)
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
    /* only for DC Mode important: the subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the outputs are put to the hardware to allow the
        master a very exactly calculation of delay times*/
    sSyncManOutPar.u32ShiftTime     = 0;
 8004760:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <COE_ObjInit+0xd8>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <COE_ObjInit+0xd8>)
 8004768:	f244 021f 	movw	r2, #16415	; 0x401f
 800476c:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <COE_ObjInit+0xd8>)
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <COE_ObjInit+0xdc>)
 8004772:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <COE_ObjInit+0xd8>)
 8004776:	2200      	movs	r2, #0
 8004778:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <COE_ObjInit+0xd8>)
 800477c:	2200      	movs	r2, #0
 800477e:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <COE_ObjInit+0xd8>)
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <COE_ObjInit+0xd8>)
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_START(V5.11) ECAT4*/
    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <COE_ObjInit+0xe0>)
 8004790:	2220      	movs	r2, #32
 8004792:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <COE_ObjInit+0xe0>)
 8004796:	2200      	movs	r2, #0
 8004798:	805a      	strh	r2, [r3, #2]

    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <COE_ObjInit+0xd8>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <COE_ObjInit+0xe0>)
 80047a0:	6053      	str	r3, [r2, #4]
    /* only for DC Mode important: subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the inputs are got to the hardware to allow the
        master a very exactly calculation of delay times,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManInPar.u32ShiftTime     = 0;
 80047a2:	4b21      	ldr	r3, [pc, #132]	; (8004828 <COE_ObjInit+0xe0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <COE_ObjInit+0xd8>)
 80047aa:	899a      	ldrh	r2, [r3, #12]
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <COE_ObjInit+0xe0>)
 80047ae:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <COE_ObjInit+0xe0>)
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <COE_ObjInit+0xdc>)
 80047b4:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <COE_ObjInit+0xe0>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <COE_ObjInit+0xe0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <COE_ObjInit+0xe0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	621a      	str	r2, [r3, #32]

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 80047c8:	4b17      	ldr	r3, [pc, #92]	; (8004828 <COE_ObjInit+0xe0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 80047d0:	4b16      	ldr	r3, [pc, #88]	; (800482c <COE_ObjInit+0xe4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 80047d6:	f000 f931 	bl	8004a3c <COE_ObjDictionaryInit>
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <COE_ObjInit+0xa0>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 80047e4:	f000 f8e8 	bl	80049b8 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <COE_ObjInit+0xe8>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <COE_ObjInit+0xec>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <COE_ObjInit+0xf0>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <COE_ObjInit+0xf4>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <COE_ObjInit+0xf8>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <COE_ObjInit+0xfc>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <COE_ObjInit+0x100>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <COE_ObjInit+0x104>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000ddc 	.word	0x20000ddc
 8004824:	0007a120 	.word	0x0007a120
 8004828:	20000d98 	.word	0x20000d98
 800482c:	20000e20 	.word	0x20000e20
 8004830:	20000e40 	.word	0x20000e40
 8004834:	20000e41 	.word	0x20000e41
 8004838:	20000e72 	.word	0x20000e72
 800483c:	20000e74 	.word	0x20000e74
 8004840:	20000e50 	.word	0x20000e50
 8004844:	20000e2c 	.word	0x20000e2c
 8004848:	20000e3c 	.word	0x20000e3c
 800484c:	20000e54 	.word	0x20000e54

08004850 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d062      	beq.n	8004924 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <COE_AddObjectToDic+0xe4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 8004866:	4a33      	ldr	r2, [pc, #204]	; (8004934 <COE_AddObjectToDic+0xe4>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 800486c:	4b31      	ldr	r3, [pc, #196]	; (8004934 <COE_AddObjectToDic+0xe4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <COE_AddObjectToDic+0xe4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
            return 0;
 800487c:	2300      	movs	r3, #0
 800487e:	e052      	b.n	8004926 <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <COE_AddObjectToDic+0xe4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	891a      	ldrh	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	891b      	ldrh	r3, [r3, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d90f      	bls.n	80048ae <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <COE_AddObjectToDic+0xe4>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 800489c:	4b25      	ldr	r3, [pc, #148]	; (8004934 <COE_AddObjectToDic+0xe4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <COE_AddObjectToDic+0xe4>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
            return 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e03b      	b.n	8004926 <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 80048ae:	4b21      	ldr	r3, [pc, #132]	; (8004934 <COE_AddObjectToDic+0xe4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 80048b4:	e033      	b.n	800491e <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	891a      	ldrh	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	891b      	ldrh	r3, [r3, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d101      	bne.n	80048c6 <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02f      	b.n	8004926 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	891a      	ldrh	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	891b      	ldrh	r3, [r3, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d913      	bls.n	80048fa <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]

                    return 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e015      	b.n	8004926 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
                    return 0;
 8004914:	2300      	movs	r3, #0
 8004916:	e006      	b.n	8004926 <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c8      	bne.n	80048b6 <COE_AddObjectToDic+0x66>
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8004924:	2301      	movs	r3, #1
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	200005cc 	.word	0x200005cc

08004938 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <COE_RemoveDicEntry+0x7c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 8004948:	e02a      	b.n	80049a0 <COE_RemoveDicEntry+0x68>
    {
        if(pDicEntry->Index == index)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	891b      	ldrh	r3, [r3, #8]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	429a      	cmp	r2, r3
 8004952:	d122      	bne.n	800499a <COE_RemoveDicEntry+0x62>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <COE_RemoveDicEntry+0x34>
                pPrevEntry->pNext = pNextEntry;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]

            if(pNextEntry != NULL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <COE_RemoveDicEntry+0x40>
                pNextEntry->pPrev = pPrevEntry;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	601a      	str	r2, [r3, #0]

            pDicEntry->pPrev = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	891a      	ldrh	r2, [r3, #8]
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <COE_RemoveDicEntry+0x7c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	891b      	ldrh	r3, [r3, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d10a      	bne.n	80049a8 <COE_RemoveDicEntry+0x70>
            {
                ObjDicList = pNextEntry;
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <COE_RemoveDicEntry+0x7c>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6013      	str	r3, [r2, #0]
            }
            return;
 8004998:	e006      	b.n	80049a8 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	617b      	str	r3, [r7, #20]
    while(pDicEntry != NULL)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1d1      	bne.n	800494a <COE_RemoveDicEntry+0x12>
 80049a6:	e000      	b.n	80049aa <COE_RemoveDicEntry+0x72>
            return;
 80049a8:	bf00      	nop
    }
}
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	200005cc 	.word	0x200005cc

080049b8 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <COE_ClearObjDictionary+0x3c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 80049c8:	e009      	b.n	80049de <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	891b      	ldrh	r3, [r3, #8]
 80049ce:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 80049d6:	887b      	ldrh	r3, [r7, #2]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ffad 	bl	8004938 <COE_RemoveDicEntry>
    while(pObjEntry != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f2      	bne.n	80049ca <COE_ClearObjDictionary+0x12>
    }
    ObjDicList = NULL;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <COE_ClearObjDictionary+0x3c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200005cc 	.word	0x200005cc

080049f8 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 8004a08:	e00c      	b.n	8004a24 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f7ff ff20 	bl	8004850 <COE_AddObjectToDic>
 8004a10:	4603      	mov	r3, r0
 8004a12:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <AddObjectsToObjDictionary+0x26>
            return result;
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	e009      	b.n	8004a32 <AddObjectsToObjDictionary+0x3a>

        pEntry++;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3328      	adds	r3, #40	; 0x28
 8004a22:	60bb      	str	r3, [r7, #8]
    while(pEntry->Index != 0xFFFF)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	891b      	ldrh	r3, [r3, #8]
 8004a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d1ec      	bne.n	8004a0a <AddObjectsToObjDictionary+0x12>
    }

    return result;
 8004a30:	89fb      	ldrh	r3, [r7, #14]

}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <COE_ObjDictionaryInit+0x38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8004a4c:	480a      	ldr	r0, [pc, #40]	; (8004a78 <COE_ObjDictionaryInit+0x3c>)
 8004a4e:	f7ff ffd3 	bl	80049f8 <AddObjectsToObjDictionary>
 8004a52:	4603      	mov	r3, r0
 8004a54:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <COE_ObjDictionaryInit+0x24>
        return result;
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	e005      	b.n	8004a6c <COE_ObjDictionaryInit+0x30>
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8004a60:	4806      	ldr	r0, [pc, #24]	; (8004a7c <COE_ObjDictionaryInit+0x40>)
 8004a62:	f7ff ffc9 	bl	80049f8 <AddObjectsToObjDictionary>
 8004a66:	4603      	mov	r3, r0
 8004a68:	80fb      	strh	r3, [r7, #6]
    }

    return result;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200005cc 	.word	0x200005cc
 8004a78:	20000370 	.word	0x20000370
 8004a7c:	20000104 	.word	0x20000104

08004a80 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	71fb      	strb	r3, [r7, #7]
    if(pSdoPendFunc != NULL)
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <COE_Main+0xb8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04e      	beq.n	8004b30 <COE_Main+0xb0>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <COE_Main+0xb8>)
 8004a94:	681c      	ldr	r4, [r3, #0]
 8004a96:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <COE_Main+0xbc>)
 8004a98:	8818      	ldrh	r0, [r3, #0]
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <COE_Main+0xc0>)
 8004a9c:	7819      	ldrb	r1, [r3, #0]
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <COE_Main+0xc4>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <COE_Main+0xc8>)
 8004aa4:	681d      	ldr	r5, [r3, #0]
 8004aa6:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <COE_Main+0xcc>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462b      	mov	r3, r5
 8004aae:	47a0      	blx	r4
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d03a      	beq.n	8004b30 <COE_Main+0xb0>
        {
            switch(u8PendingSdo)
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <COE_Main+0xd0>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	dc21      	bgt.n	8004b06 <COE_Main+0x86>
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	da16      	bge.n	8004af4 <COE_Main+0x74>
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d00d      	beq.n	8004ae6 <COE_Main+0x66>
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d11b      	bne.n	8004b06 <COE_Main+0x86>
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <COE_Main+0xd4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <COE_Main+0x66>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <COE_Main+0xd4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f005 ff82 	bl	800a9e4 <free>
                        pSdoSegData = NULL;
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <COE_Main+0xd4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f005 f927 	bl	8009d40 <SDOS_SdoRes>
                break;
 8004af2:	e008      	b.n	8004b06 <COE_Main+0x86>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <COE_Main+0xc4>)
 8004af6:	6819      	ldr	r1, [r3, #0]
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <COE_Main+0xc8>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 f91e 	bl	8009d40 <SDOS_SdoRes>
                    break;
 8004b04:	bf00      	nop

            }

            u8PendingSdo = 0;
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <COE_Main+0xd0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <COE_Main+0xbc>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <COE_Main+0xc0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <COE_Main+0xc4>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <COE_Main+0xc8>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <COE_Main+0xcc>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <COE_Main+0xb8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bdb0      	pop	{r4, r5, r7, pc}
 8004b38:	20000e3c 	.word	0x20000e3c
 8004b3c:	20000e72 	.word	0x20000e72
 8004b40:	20000e74 	.word	0x20000e74
 8004b44:	20000e50 	.word	0x20000e50
 8004b48:	20000e2c 	.word	0x20000e2c
 8004b4c:	20000e41 	.word	0x20000e41
 8004b50:	20000e40 	.word	0x20000e40
 8004b54:	20000e54 	.word	0x20000e54

08004b58 <__NVIC_EnableIRQ>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db0b      	blt.n	8004b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f003 021f 	and.w	r2, r3, #31
 8004b70:	4907      	ldr	r1, [pc, #28]	; (8004b90 <__NVIC_EnableIRQ+0x38>)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2001      	movs	r0, #1
 8004b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000e100 	.word	0xe000e100

08004b94 <__NVIC_DisableIRQ>:
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db12      	blt.n	8004bcc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <__NVIC_DisableIRQ+0x44>)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bba:	3320      	adds	r3, #32
 8004bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bc0:	f3bf 8f4f 	dsb	sy
}
 8004bc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bc6:	f3bf 8f6f 	isb	sy
}
 8004bca:	bf00      	nop
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <PDO_InputMapping>:
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
    APPL_InputMapping((UINT16*)aPdInputData);
 8004be0:	4806      	ldr	r0, [pc, #24]	; (8004bfc <PDO_InputMapping+0x20>)
 8004be2:	f7ff f9a7 	bl	8003f34 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <PDO_InputMapping+0x24>)
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <PDO_InputMapping+0x28>)
 8004bec:	8812      	ldrh	r2, [r2, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4802      	ldr	r0, [pc, #8]	; (8004bfc <PDO_InputMapping+0x20>)
 8004bf2:	f7ff fd3f 	bl	8004674 <HW_EscWriteIsr>
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000a68 	.word	0x20000a68
 8004c00:	20000b00 	.word	0x20000b00
 8004c04:	20000ae8 	.word	0x20000ae8

08004c08 <PDO_OutputMapping>:
\brief    This function will copies the outputs from the ESC memory to the local memory
          to the hardware. This function is only called in case of an SM2 
          (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <PDO_OutputMapping+0x20>)
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <PDO_OutputMapping+0x24>)
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <PDO_OutputMapping+0x28>)
 8004c18:	f7ff fcc4 	bl	80045a4 <HW_EscReadIsr>

    APPL_OutputMapping((UINT16*) aPdOutputData);
 8004c1c:	4804      	ldr	r0, [pc, #16]	; (8004c30 <PDO_OutputMapping+0x28>)
 8004c1e:	f7ff f9cb 	bl	8003fb8 <APPL_OutputMapping>
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000ad0 	.word	0x20000ad0
 8004c2c:	20000ac2 	.word	0x20000ac2
 8004c30:	20000a20 	.word	0x20000a20

08004c34 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <ECAT_CheckTimer+0x44>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <ECAT_CheckTimer+0x48>)
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <ECAT_CheckTimer+0x48>)
 8004c4a:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <ECAT_CheckTimer+0x4c>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <ECAT_CheckTimer+0x3c>
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <ECAT_CheckTimer+0x50>)
 8004c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dd08      	ble.n	8004c70 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <ECAT_CheckTimer+0x50>)
 8004c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b21a      	sxth	r2, r3
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <ECAT_CheckTimer+0x50>)
 8004c6e:	801a      	strh	r2, [r3, #0]
    }



     DC_CheckWatchdog();
 8004c70:	f001 ffc6 	bl	8006c00 <DC_CheckWatchdog>
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000ddc 	.word	0x20000ddc
 8004c7c:	20000ab4 	.word	0x20000ab4
 8004c80:	20000ae6 	.word	0x20000ae6
 8004c84:	20000af0 	.word	0x20000af0

08004c88 <HandleBusCycleCalculation>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief    This function is called from the PDI_Isr and is used to calculate the bus cycle time 
  *////////////////////////////////////////////////////////////////////////////////////////
void HandleBusCycleCalculation(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
    /*calculate the cycle time if device is in SM Sync mode and Cycle time was not calculated yet*/
    if ( !bDcSyncActive && bEscIntEnabled)
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HandleBusCycleCalculation+0xbc>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d150      	bne.n	8004d38 <HandleBusCycleCalculation+0xb0>
 8004c96:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HandleBusCycleCalculation+0xc0>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d04c      	beq.n	8004d38 <HandleBusCycleCalculation+0xb0>
    {
        BOOL bTiggerCalcCycleTime = FALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]

        if(sSyncManOutPar.u16GetCycleTime == 1)
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HandleBusCycleCalculation+0xc4>)
 8004ca4:	8b9b      	ldrh	r3, [r3, #28]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HandleBusCycleCalculation+0x26>
            bTiggerCalcCycleTime = TRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        if(bTiggerCalcCycleTime)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d017      	beq.n	8004ce4 <HandleBusCycleCalculation+0x5c>
        {
            /*get bus cycle time triggered */
            sSyncManOutPar.u32CycleTime = 0;
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HandleBusCycleCalculation+0xc4>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	605a      	str	r2, [r3, #4]
            sSyncManOutPar.u16GetCycleTime = 0;
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HandleBusCycleCalculation+0xc4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	839a      	strh	r2, [r3, #28]

            sSyncManInPar.u32CycleTime  = 0;
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HandleBusCycleCalculation+0xc8>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	605a      	str	r2, [r3, #4]
            sSyncManInPar.u16GetCycleTime = 0;
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HandleBusCycleCalculation+0xc8>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	839a      	strh	r2, [r3, #28]
            
            u16BusCycleCntMs = 0;
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HandleBusCycleCalculation+0xcc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	801a      	strh	r2, [r3, #0]
            bCycleTimeMeasurementStarted = TRUE;
 8004cd2:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <HandleBusCycleCalculation+0xd0>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
            StartTimerCnt = (UINT32) HW_GetTimer();
 8004cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HandleBusCycleCalculation+0xd4>)
 8004ce0:	6013      	str	r3, [r2, #0]
/*ECATCHANGE_END(V5.11) ECAT3*/
            /* CiA402 Motion controller cycle time is only set if DC Synchronisation is active*/
            }
        }
    }
}
 8004ce2:	e029      	b.n	8004d38 <HandleBusCycleCalculation+0xb0>
            if(bCycleTimeMeasurementStarted == TRUE)
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HandleBusCycleCalculation+0xd0>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d125      	bne.n	8004d38 <HandleBusCycleCalculation+0xb0>
                UINT32 CurTimerCnt = (UINT32)HW_GetTimer();
 8004cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	60bb      	str	r3, [r7, #8]
                UINT32 CalcCycleTime = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	607b      	str	r3, [r7, #4]
                CalcCycleTime = (UINT32)u16BusCycleCntMs * 1000000 + (((INT32)(CurTimerCnt-StartTimerCnt))*1000000/ECAT_TIMER_INC_P_MS);    //get elapsed cycle time in ns
 8004cf8:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <HandleBusCycleCalculation+0xcc>)
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HandleBusCycleCalculation+0xd8>)
 8004d00:	fb03 f302 	mul.w	r3, r3, r2
 8004d04:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <HandleBusCycleCalculation+0xd4>)
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	1a8a      	subs	r2, r1, r2
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d12:	fb02 f201 	mul.w	r2, r2, r1
 8004d16:	4413      	add	r3, r2
 8004d18:	607b      	str	r3, [r7, #4]
                sSyncManOutPar.u32CycleTime = CalcCycleTime;
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HandleBusCycleCalculation+0xc4>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6053      	str	r3, [r2, #4]
                sSyncManInPar.u32CycleTime  = CalcCycleTime;
 8004d20:	4a0b      	ldr	r2, [pc, #44]	; (8004d50 <HandleBusCycleCalculation+0xc8>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6053      	str	r3, [r2, #4]
                u16BusCycleCntMs = 0;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HandleBusCycleCalculation+0xcc>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	801a      	strh	r2, [r3, #0]
                StartTimerCnt = 0;
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HandleBusCycleCalculation+0xd4>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
                bCycleTimeMeasurementStarted = FALSE;
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HandleBusCycleCalculation+0xd0>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000af2 	.word	0x20000af2
 8004d48:	20000af9 	.word	0x20000af9
 8004d4c:	20000ddc 	.word	0x20000ddc
 8004d50:	20000d98 	.word	0x20000d98
 8004d54:	20000ab4 	.word	0x20000ab4
 8004d58:	20000a10 	.word	0x20000a10
 8004d5c:	20000a0c 	.word	0x20000a0c
 8004d60:	000f4240 	.word	0x000f4240

08004d64 <PDI_Isr>:
/*ECATCHANGE_END(V5.11) ECAT6*/

void PDI_Isr(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 8004d6a:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <PDI_Isr+0x120>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8084 	beq.w	8004e7c <PDI_Isr+0x118>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8004d74:	f7ff fbd8 	bl	8004528 <HW_GetALEventRegister_Isr>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d034      	beq.n	8004df0 <PDI_Isr+0x8c>
        {
            if(bDcRunning && bDcSyncActive)
 8004d86:	4b40      	ldr	r3, [pc, #256]	; (8004e88 <PDI_Isr+0x124>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <PDI_Isr+0x38>
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <PDI_Isr+0x128>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8004d96:	4b3e      	ldr	r3, [pc, #248]	; (8004e90 <PDI_Isr+0x12c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <PDI_Isr+0x130>)
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <PDI_Isr+0x4c>
                sSyncManOutPar.u16SmEventMissedCounter--;
 8004da4:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <PDI_Isr+0x130>)
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <PDI_Isr+0x130>)
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28


/*ECATCHANGE_START(V5.11) ECAT6*/
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8004db0:	f7ff ff6a 	bl	8004c88 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT6*/

        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8004db4:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <PDI_Isr+0x134>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8004dba:	4b38      	ldr	r3, [pc, #224]	; (8004e9c <PDI_Isr+0x138>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <PDI_Isr+0x64>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8004dc2:	f7ff ff21 	bl	8004c08 <PDO_OutputMapping>
 8004dc6:	e013      	b.n	8004df0 <PDI_Isr+0x8c>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8004dc8:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <PDI_Isr+0x13c>)
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4834      	ldr	r0, [pc, #208]	; (8004ea4 <PDI_Isr+0x140>)
 8004dd2:	f7ff fbe7 	bl	80045a4 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8004dd6:	4b32      	ldr	r3, [pc, #200]	; (8004ea0 <PDI_Isr+0x13c>)
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <PDI_Isr+0x144>)
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b02      	subs	r3, #2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2202      	movs	r2, #2
 8004de8:	4619      	mov	r1, r3
 8004dea:	482e      	ldr	r0, [pc, #184]	; (8004ea4 <PDI_Isr+0x140>)
 8004dec:	f7ff fbda 	bl	80045a4 <HW_EscReadIsr>
        }
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if (( ALEvent & PROCESS_INPUT_EVENT ) && (nPdOutputSize == 0))
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <PDI_Isr+0xa2>
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <PDI_Isr+0x144>)
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <PDI_Isr+0xa2>
        {
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8004e02:	f7ff ff41 	bl	8004c88 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT4*/

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <PDI_Isr+0x130>)
 8004e08:	885b      	ldrh	r3, [r3, #2]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <PDI_Isr+0xae>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8004e0e:	f000 f99d 	bl	800514c <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <PDI_Isr+0x148>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <PDI_Isr+0xca>
/*ECATCHANGE_START(V5.11) ESM7*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <PDI_Isr+0x14c>)
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <PDI_Isr+0xc6>
 8004e22:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <PDI_Isr+0x14c>)
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	2b22      	cmp	r3, #34	; 0x22
 8004e28:	d101      	bne.n	8004e2e <PDI_Isr+0xca>
/*ECATCHANGE_END(V5.11) ESM7*/
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8004e2a:	f7ff fed7 	bl	8004bdc <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8004e2e:	f7ff fb7b 	bl	8004528 <HW_GetALEventRegister_Isr>
 8004e32:	4603      	mov	r3, r0
 8004e34:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01d      	beq.n	8004e7c <PDI_Isr+0x118>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <PDI_Isr+0x130>)
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	3301      	adds	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <PDI_Isr+0x130>)
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <PDI_Isr+0x130>)
 8004e4e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <PDI_Isr+0x14c>)
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8004e54:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <PDI_Isr+0x13c>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4811      	ldr	r0, [pc, #68]	; (8004ea4 <PDI_Isr+0x140>)
 8004e5e:	f7ff fba1 	bl	80045a4 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <PDI_Isr+0x13c>)
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <PDI_Isr+0x144>)
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b02      	subs	r3, #2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2202      	movs	r2, #2
 8004e74:	4619      	mov	r1, r3
 8004e76:	480b      	ldr	r0, [pc, #44]	; (8004ea4 <PDI_Isr+0x140>)
 8004e78:	f7ff fb94 	bl	80045a4 <HW_EscReadIsr>
    }
    } //if(bEscIntEnabled)
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000af9 	.word	0x20000af9
 8004e88:	20000ada 	.word	0x20000ada
 8004e8c:	20000af2 	.word	0x20000af2
 8004e90:	20000afc 	.word	0x20000afc
 8004e94:	20000ddc 	.word	0x20000ddc
 8004e98:	20000aee 	.word	0x20000aee
 8004e9c:	20000af3 	.word	0x20000af3
 8004ea0:	20000ad0 	.word	0x20000ad0
 8004ea4:	20000ac8 	.word	0x20000ac8
 8004ea8:	20000ac2 	.word	0x20000ac2
 8004eac:	20000af8 	.word	0x20000af8
 8004eb0:	20000d98 	.word	0x20000d98

08004eb4 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 8004eba:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <Sync0_Isr+0x11c>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8004ec0:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <Sync0_Isr+0x120>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d07f      	beq.n	8004fc8 <Sync0_Isr+0x114>
    {

        if ( bEcatInputUpdateRunning )
 8004ec8:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <Sync0_Isr+0x124>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <Sync0_Isr+0x28>
        {
            LatchInputSync0Counter++;
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <Sync0_Isr+0x128>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <Sync0_Isr+0x128>)
 8004eda:	801a      	strh	r2, [r3, #0]
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if(u16SmSync0Value > 0)
 8004edc:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <Sync0_Isr+0x12c>)
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d04e      	beq.n	8004f82 <Sync0_Isr+0xce>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <Sync0_Isr+0x130>)
 8004ee6:	881a      	ldrh	r2, [r3, #0]
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <Sync0_Isr+0x12c>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d923      	bls.n	8004f38 <Sync0_Isr+0x84>
           {
              /*ECATCHANGE_START(V5.11) COE3*/
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <Sync0_Isr+0x134>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <Sync0_Isr+0x5c>
 8004ef8:	4b3c      	ldr	r3, [pc, #240]	; (8004fec <Sync0_Isr+0x138>)
 8004efa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <Sync0_Isr+0x13c>)
 8004efe:	891b      	ldrh	r3, [r3, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d805      	bhi.n	8004f10 <Sync0_Isr+0x5c>
              {
                 /*ECATCHANGE_END(V5.11) COE3*/
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8004f04:	4b39      	ldr	r3, [pc, #228]	; (8004fec <Sync0_Isr+0x138>)
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3303      	adds	r3, #3
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	4b37      	ldr	r3, [pc, #220]	; (8004fec <Sync0_Isr+0x138>)
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
              }

/*ECATCHANGE_START(V5.11) COE3*/
           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8004f10:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <Sync0_Isr+0x140>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00f      	beq.n	8004f38 <Sync0_Isr+0x84>
 8004f18:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <Sync0_Isr+0x134>)
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <Sync0_Isr+0x84>
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <Sync0_Isr+0x144>)
 8004f22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <Sync0_Isr+0x13c>)
 8004f26:	891b      	ldrh	r3, [r3, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d805      	bhi.n	8004f38 <Sync0_Isr+0x84>
           {
/*ECATCHANGE_END(V5.11) COE3*/
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8004f2c:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <Sync0_Isr+0x144>)
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	3303      	adds	r3, #3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <Sync0_Isr+0x144>)
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 8004f38:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <Sync0_Isr+0x134>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11a      	bne.n	8004f76 <Sync0_Isr+0xc2>
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <Sync0_Isr+0x140>)
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d016      	beq.n	8004f76 <Sync0_Isr+0xc2>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8004f48:	f7ff faee 	bl	8004528 <HW_GetALEventRegister_Isr>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <Sync0_Isr+0xb4>
              {
                 /* no input data was read by the master, increment the sm missed counter*/
                 u16SmSync0Counter++;
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <Sync0_Isr+0x130>)
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <Sync0_Isr+0x130>)
 8004f64:	801a      	strh	r2, [r3, #0]
           {
 8004f66:	e00c      	b.n	8004f82 <Sync0_Isr+0xce>
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <Sync0_Isr+0x130>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <Sync0_Isr+0x144>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
           {
 8004f74:	e005      	b.n	8004f82 <Sync0_Isr+0xce>

              }
           }
           else
           {
              u16SmSync0Counter++;
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <Sync0_Isr+0x130>)
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <Sync0_Isr+0x130>)
 8004f80:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled
/*ECATCHANGE_END(V5.11) ECAT4*/


        if(!bEscIntEnabled && bEcatOutputUpdateRunning)
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <Sync0_Isr+0x148>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <Sync0_Isr+0xe2>
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <Sync0_Isr+0x14c>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <Sync0_Isr+0xe2>
        {
            /* Output mapping was not done by the PDI ISR */
            PDO_OutputMapping();
 8004f92:	f7ff fe39 	bl	8004c08 <PDO_OutputMapping>
        }

        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8004f96:	f000 f8d9 	bl	800514c <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <Sync0_Isr+0x124>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d012      	beq.n	8004fc8 <Sync0_Isr+0x114>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <Sync0_Isr+0x150>)
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <Sync0_Isr+0x114>
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <Sync0_Isr+0x150>)
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <Sync0_Isr+0x128>)
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d108      	bne.n	8004fc8 <Sync0_Isr+0x114>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8004fb6:	f7ff fe11 	bl	8004bdc <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <Sync0_Isr+0x150>)
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <Sync0_Isr+0x114>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <Sync0_Isr+0x128>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	801a      	strh	r2, [r3, #0]
            }
        }

    }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000ac6 	.word	0x20000ac6
 8004fd4:	20000af2 	.word	0x20000af2
 8004fd8:	20000af8 	.word	0x20000af8
 8004fdc:	20000acc 	.word	0x20000acc
 8004fe0:	20000aea 	.word	0x20000aea
 8004fe4:	20000afc 	.word	0x20000afc
 8004fe8:	20000ac2 	.word	0x20000ac2
 8004fec:	20000ddc 	.word	0x20000ddc
 8004ff0:	20000528 	.word	0x20000528
 8004ff4:	20000ae8 	.word	0x20000ae8
 8004ff8:	20000d98 	.word	0x20000d98
 8004ffc:	20000af9 	.word	0x20000af9
 8005000:	20000af3 	.word	0x20000af3
 8005004:	20000ae4 	.word	0x20000ae4

08005008 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <Sync1_Isr+0x30>)
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <Sync1_Isr+0x34>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <Sync1_Isr+0x38>)
 800501c:	885b      	ldrh	r3, [r3, #2]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d105      	bne.n	800502e <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <Sync1_Isr+0x3c>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 800502a:	f7ff fdd7 	bl	8004bdc <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <Sync1_Isr+0x40>)
 8005030:	2200      	movs	r2, #0
 8005032:	801a      	strh	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000af4 	.word	0x20000af4
 800503c:	20000af8 	.word	0x20000af8
 8005040:	20000d98 	.word	0x20000d98
 8005044:	20000ae4 	.word	0x20000ae4
 8005048:	20000acc 	.word	0x20000acc

0800504c <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	80fb      	strh	r3, [r7, #6]
    SET_EEPROM_PTR
#endif
/*ECATCHANGE_END(V5.11) EEPROM1*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 8005056:	f001 feb3 	bl	8006dc0 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 800505a:	f7ff fb75 	bl	8004748 <COE_ObjInit>


    /*Timer initialization*/
    u16BusCycleCntMs = 0;
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <MainInit+0x34>)
 8005060:	2200      	movs	r2, #0
 8005062:	801a      	strh	r2, [r3, #0]
    StartTimerCnt = 0;
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <MainInit+0x38>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    bCycleTimeMeasurementStarted = FALSE;
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <MainInit+0x3c>)
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]

    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <MainInit+0x40>)
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]

/*Application Init need to be called from the application layer*/
     return Error;
 8005076:	88fb      	ldrh	r3, [r7, #6]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000ab4 	.word	0x20000ab4
 8005084:	20000a0c 	.word	0x20000a0c
 8005088:	20000a10 	.word	0x20000a10
 800508c:	200005d0 	.word	0x200005d0

08005090 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 8005096:	4b26      	ldr	r3, [pc, #152]	; (8005130 <MainLoop+0xa0>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d043      	beq.n	8005126 <MainLoop+0x96>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <MainLoop+0xa4>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
        if (
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <MainLoop+0x1e>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <MainLoop+0xa8>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d134      	bne.n	8005118 <MainLoop+0x88>
          && !bDcSyncActive                                               /* DC-Synchronous */
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <MainLoop+0xac>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d130      	bne.n	8005118 <MainLoop+0x88>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 80050b6:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <MainLoop+0xa4>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11e      	bne.n	80050fc <MainLoop+0x6c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 80050be:	f7ff fa29 	bl	8004514 <HW_GetALEventRegister>
 80050c2:	4603      	mov	r3, r0
 80050c4:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <MainLoop+0x54>
                {
                    /* set the flag for the state machine behaviour */
                    bEcatFirstOutputsReceived = TRUE;
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <MainLoop+0xa8>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <MainLoop+0xb0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <MainLoop+0x6c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 80050de:	f7ff fd93 	bl	8004c08 <PDO_OutputMapping>
 80050e2:	e00b      	b.n	80050fc <MainLoop+0x6c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 80050e4:	4b17      	ldr	r3, [pc, #92]	; (8005144 <MainLoop+0xb4>)
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <MainLoop+0x6c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <MainLoop+0x6c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <MainLoop+0xa8>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
 80050fc:	2017      	movs	r0, #23
 80050fe:	f7ff fd49 	bl	8004b94 <__NVIC_DisableIRQ>
            ECAT_Application();
 8005102:	f000 f823 	bl	800514c <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <MainLoop+0xb8>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MainLoop+0x82>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 800510e:	f7ff fd65 	bl	8004bdc <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
 8005112:	2017      	movs	r0, #23
 8005114:	f7ff fd20 	bl	8004b58 <__NVIC_EnableIRQ>

            }
        }
#endif
        /* call EtherCAT functions */
        ECAT_Main();
 8005118:	f001 fefc 	bl	8006f14 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 800511c:	f7ff fcb0 	bl	8004a80 <COE_Main>
       CheckIfEcatError();
 8005120:	f001 fdfc 	bl	8006d1c <CheckIfEcatError>
 8005124:	e000      	b.n	8005128 <MainLoop+0x98>
        return;
 8005126:	bf00      	nop

}
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200005d0 	.word	0x200005d0
 8005134:	20000af9 	.word	0x20000af9
 8005138:	20000aee 	.word	0x20000aee
 800513c:	20000af2 	.word	0x20000af2
 8005140:	20000af3 	.word	0x20000af3
 8005144:	20000ac2 	.word	0x20000ac2
 8005148:	20000af8 	.word	0x20000af8

0800514c <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
    {
        APPL_Application();
 8005150:	f7fe ff62 	bl	8004018 <APPL_Application>
    }
/* PDO Input mapping is called from the specific trigger ISR */
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}

08005158 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <COE_Init+0x1c>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <COE_Init+0x20>)
 8005164:	2200      	movs	r2, #0
 8005166:	801a      	strh	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000ab8 	.word	0x20000ab8
 8005178:	20000e48 	.word	0x20000e48

0800517c <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	88db      	ldrh	r3, [r3, #6]
 800518c:	0b1b      	lsrs	r3, r3, #12
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	2b07      	cmp	r3, #7
 8005194:	d821      	bhi.n	80051da <COE_ServiceInd+0x5e>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <COE_ServiceInd+0x20>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051d5 	.word	0x080051d5
 80051b8:	080051c9 	.word	0x080051c9
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f004 fb0b 	bl	80097d8 <SDOS_SdoInd>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
        break;
 80051c6:	e00b      	b.n	80051e0 <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f004 fe47 	bl	8009e5c <SDOS_SdoInfoInd>
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 80051d2:	e005      	b.n	80051e0 <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 80051d4:	2304      	movs	r3, #4
 80051d6:	73fb      	strb	r3, [r7, #15]
        break;
 80051d8:	e002      	b.n	80051e0 <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 80051da:	2305      	movs	r3, #5
 80051dc:	73fb      	strb	r3, [r7, #15]
        break;
 80051de:	bf00      	nop
    }
    return result;
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <COE_ContinueInd>:
*////////////////////////////////////////////////////////////////////////////////////////

/*ECATCHANGE_START(V5.11) COE4*/
UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
/*ECATCHANGE_END(V5.11) COE4*/
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <COE_ContinueInd+0x54>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <COE_ContinueInd+0x54>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2100      	movs	r1, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f002 fa66 	bl	80076d4 <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <COE_ContinueInd+0x54>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e012      	b.n	8005236 <COE_ContinueInd+0x4a>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 8005210:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005214:	f005 fbde 	bl	800a9d4 <malloc>
 8005218:	4603      	mov	r3, r0
 800521a:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
/*ECATCHANGE_START(V5.11) COE4*/
        if (pMbx == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <COE_ContinueInd+0x3a>
        {
            return MBXERR_NOMOREMEMORY;
 8005222:	2307      	movs	r3, #7
 8005224:	e008      	b.n	8005238 <COE_ContinueInd+0x4c>
        }
        else
/*ECATCHANGE_END(V5.11) COE4*/
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8005226:	220e      	movs	r2, #14
 8005228:	4906      	ldr	r1, [pc, #24]	; (8005244 <COE_ContinueInd+0x58>)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f005 fbe2 	bl	800a9f4 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f004 fe13 	bl	8009e5c <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000ab8 	.word	0x20000ab8
 8005244:	20000e5c 	.word	0x20000e5c

08005248 <__NVIC_EnableIRQ>:
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	db0b      	blt.n	8005272 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	4907      	ldr	r1, [pc, #28]	; (8005280 <__NVIC_EnableIRQ+0x38>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2001      	movs	r0, #1
 800526a:	fa00 f202 	lsl.w	r2, r0, r2
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e100 	.word	0xe000e100

08005284 <__NVIC_DisableIRQ>:
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db12      	blt.n	80052bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	490a      	ldr	r1, [pc, #40]	; (80052c8 <__NVIC_DisableIRQ+0x44>)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2001      	movs	r0, #1
 80052a6:	fa00 f202 	lsl.w	r2, r0, r2
 80052aa:	3320      	adds	r3, #32
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80052b0:	f3bf 8f4f 	dsb	sy
}
 80052b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052b6:	f3bf 8f6f 	isb	sy
}
 80052ba:	bf00      	nop
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100

080052cc <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80052d6:	f107 030e 	add.w	r3, r7, #14
 80052da:	2202      	movs	r2, #2
 80052dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f92b 	bl	800453c <HW_EscRead>
    
    mask &= intMask;
 80052e6:	89fa      	ldrh	r2, [r7, #14]
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 80052f0:	2017      	movs	r0, #23
 80052f2:	f7ff ffc7 	bl	8005284 <__NVIC_DisableIRQ>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80052f6:	f107 030e 	add.w	r3, r7, #14
 80052fa:	2202      	movs	r2, #2
 80052fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff f983 	bl	800460c <HW_EscWrite>
    ENABLE_ESC_INT();
 8005306:	2017      	movs	r0, #23
 8005308:	f7ff ff9e 	bl	8005248 <__NVIC_EnableIRQ>
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 800531e:	f107 030e 	add.w	r3, r7, #14
 8005322:	2202      	movs	r2, #2
 8005324:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff f907 	bl	800453c <HW_EscRead>
    
    mask |= intMask;
 800532e:	89fa      	ldrh	r2, [r7, #14]
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	4313      	orrs	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8005338:	2017      	movs	r0, #23
 800533a:	f7ff ffa3 	bl	8005284 <__NVIC_DisableIRQ>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 800533e:	f107 030e 	add.w	r3, r7, #14
 8005342:	2202      	movs	r2, #2
 8005344:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff f95f 	bl	800460c <HW_EscWrite>
    ENABLE_ESC_INT();
 800534e:	2017      	movs	r0, #23
 8005350:	f7ff ff7a 	bl	8005248 <__NVIC_EnableIRQ>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
    {
       UINT16 TmpVar = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	80fb      	strh	r3, [r7, #6]
       //read EEPROM loaded information
       HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8005366:	1dbb      	adds	r3, r7, #6
 8005368:	2202      	movs	r2, #2
 800536a:	f240 5102 	movw	r1, #1282	; 0x502
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff f8e4 	bl	800453c <HW_EscRead>
       TmpVar = SWAPWORD(TmpVar);
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	80fb      	strh	r3, [r7, #6]

       if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537e:	2b00      	cmp	r3, #0
 8005380:	dc04      	bgt.n	800538c <UpdateEEPROMLoadedState+0x30>
          || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005388:	2b00      	cmp	r3, #0
 800538a:	dd03      	ble.n	8005394 <UpdateEEPROMLoadedState+0x38>
       {
          EepromLoaded = FALSE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <UpdateEEPROMLoadedState+0x48>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <UpdateEEPROMLoadedState+0x40>
       }
       else
       {
          EepromLoaded = TRUE;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <UpdateEEPROMLoadedState+0x48>)
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
       }
    }
}
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	200005d4 	.word	0x200005d4

080053a8 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2208      	movs	r2, #8
 80053c0:	4619      	mov	r1, r3
 80053c2:	4804      	ldr	r0, [pc, #16]	; (80053d4 <GetSyncMan+0x2c>)
 80053c4:	f7ff f8ba 	bl	800453c <HW_EscRead>


    return &SyncManInfo;
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <GetSyncMan+0x2c>)
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000adc 	.word	0x20000adc

080053d8 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = SM_SETTING_PDI_DISABLE;
 80053e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e6:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f603 0306 	addw	r3, r3, #2054	; 0x806
 80053f4:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 80053f6:	89f9      	ldrh	r1, [r7, #14]
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	2202      	movs	r2, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f904 	bl	800460c <HW_EscWrite>
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadWord(smStatus, Offset);
 8005404:	89f9      	ldrh	r1, [r7, #14]
 8005406:	f107 030c 	add.w	r3, r7, #12
 800540a:	2202      	movs	r2, #2
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff f895 	bl	800453c <HW_EscRead>
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 8005412:	89bb      	ldrh	r3, [r7, #12]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f2      	beq.n	8005404 <DisableSyncManChannel+0x2c>
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = 0x0000;
 8005432:	2300      	movs	r3, #0
 8005434:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	b29b      	uxth	r3, r3
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	b29b      	uxth	r3, r3
 800543e:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8005442:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 8005444:	89f9      	ldrh	r1, [r7, #14]
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	2202      	movs	r2, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff f8dd 	bl	800460c <HW_EscWrite>
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadWord(smStatus,Offset);
 8005452:	89f9      	ldrh	r1, [r7, #14]
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	2202      	movs	r2, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f86e 	bl	800453c <HW_EscRead>

    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8005460:	89bb      	ldrh	r3, [r7, #12]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f2      	bne.n	8005452 <EnableSyncManChannel+0x2a>
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	827b      	strh	r3, [r7, #18]

    //Check if max address defines are within the available ESC address range
    if((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 800548e:	4ba9      	ldr	r3, [pc, #676]	; (8005734 <CheckSmSettings+0x2bc>)
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8005496:	4293      	cmp	r3, r2
 8005498:	d911      	bls.n	80054be <CheckSmSettings+0x46>
        ||(nMaxEscAddress < MAX_PD_READ_ADDRESS)
 800549a:	4ba6      	ldr	r3, [pc, #664]	; (8005734 <CheckSmSettings+0x2bc>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d90b      	bls.n	80054be <CheckSmSettings+0x46>
/*ECATCHANGE_START(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 80054a6:	4ba3      	ldr	r3, [pc, #652]	; (8005734 <CheckSmSettings+0x2bc>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d905      	bls.n	80054be <CheckSmSettings+0x46>
/*ECATCHANGE_END(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 80054b2:	4ba0      	ldr	r3, [pc, #640]	; (8005734 <CheckSmSettings+0x2bc>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d801      	bhi.n	80054c2 <CheckSmSettings+0x4a>
    {
        /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
        It may be also required to adapt the SM settings in the ESI file*/

        return ALSTATUSCODE_NOVALIDFIRMWARE;
 80054be:	2314      	movs	r3, #20
 80054c0:	e1c2      	b.n	8005848 <CheckSmSettings+0x3d0>
    }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 80054c2:	2000      	movs	r0, #0
 80054c4:	f7ff ff70 	bl	80053a8 <GetSyncMan>
 80054c8:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	885b      	ldrh	r3, [r3, #2]
 80054ce:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80054d6:	8abb      	ldrh	r3, [r7, #20]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dd01      	ble.n	80054e4 <CheckSmSettings+0x6c>
        return ALSTATUSCODE_INVALIDSMCFG;
 80054e0:	2317      	movs	r3, #23
 80054e2:	e1b1      	b.n	8005848 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 80054e4:	8a7b      	ldrh	r3, [r7, #18]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dd01      	ble.n	80054f2 <CheckSmSettings+0x7a>
        return ALSTATUSCODE_INVALIDSMCFG;
 80054ee:	2317      	movs	r3, #23
 80054f0:	e1aa      	b.n	8005848 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88db      	ldrh	r3, [r3, #6]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <CheckSmSettings+0x8c>
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80054fe:	2316      	movs	r3, #22
 8005500:	75bb      	strb	r3, [r7, #22]
 8005502:	e02b      	b.n	800555c <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	889b      	ldrh	r3, [r3, #4]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b04      	cmp	r3, #4
 800550e:	d002      	beq.n	8005516 <CheckSmSettings+0x9e>
       /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8005510:	2316      	movs	r3, #22
 8005512:	75bb      	strb	r3, [r7, #22]
 8005514:	e022      	b.n	800555c <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	889b      	ldrh	r3, [r3, #4]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <CheckSmSettings+0xb0>
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8005522:	2316      	movs	r3, #22
 8005524:	75bb      	strb	r3, [r7, #22]
 8005526:	e019      	b.n	800555c <CheckSmSettings+0xe4>
    else if ( SMLength < MIN_MBX_SIZE )
 8005528:	8abb      	ldrh	r3, [r7, #20]
 800552a:	2b21      	cmp	r3, #33	; 0x21
 800552c:	d802      	bhi.n	8005534 <CheckSmSettings+0xbc>
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800552e:	2316      	movs	r3, #22
 8005530:	75bb      	strb	r3, [r7, #22]
 8005532:	e013      	b.n	800555c <CheckSmSettings+0xe4>
    else if ( SMLength > MAX_MBX_SIZE )
 8005534:	8abb      	ldrh	r3, [r7, #20]
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d902      	bls.n	8005542 <CheckSmSettings+0xca>
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800553c:	2316      	movs	r3, #22
 800553e:	75bb      	strb	r3, [r7, #22]
 8005540:	e00c      	b.n	800555c <CheckSmSettings+0xe4>
     else if ( SMAddress < MIN_MBX_WRITE_ADDRESS )
 8005542:	8a7b      	ldrh	r3, [r7, #18]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d202      	bcs.n	8005550 <CheckSmSettings+0xd8>
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800554a:	2316      	movs	r3, #22
 800554c:	75bb      	strb	r3, [r7, #22]
 800554e:	e005      	b.n	800555c <CheckSmSettings+0xe4>
    else if ( SMAddress > MAX_MBX_WRITE_ADDRESS)
 8005550:	8a7b      	ldrh	r3, [r7, #18]
 8005552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005556:	d301      	bcc.n	800555c <CheckSmSettings+0xe4>
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8005558:	2316      	movs	r3, #22
 800555a:	75bb      	strb	r3, [r7, #22]


    if ( result == 0 )
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d14c      	bne.n	80055fc <CheckSmSettings+0x184>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8005562:	2001      	movs	r0, #1
 8005564:	f7ff ff20 	bl	80053a8 <GetSyncMan>
 8005568:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	885b      	ldrh	r3, [r3, #2]
 800556e:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 8005576:	8abb      	ldrh	r3, [r7, #20]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	dd01      	ble.n	8005584 <CheckSmSettings+0x10c>
        return ALSTATUSCODE_INVALIDSMCFG;
 8005580:	2317      	movs	r3, #23
 8005582:	e161      	b.n	8005848 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 8005584:	8a7b      	ldrh	r3, [r7, #18]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd01      	ble.n	8005592 <CheckSmSettings+0x11a>
        return ALSTATUSCODE_INVALIDSMCFG;
 800558e:	2317      	movs	r3, #23
 8005590:	e15a      	b.n	8005848 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

      if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88db      	ldrh	r3, [r3, #6]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <CheckSmSettings+0x12c>
            /* send mailbox is not enabled */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800559e:	2316      	movs	r3, #22
 80055a0:	75bb      	strb	r3, [r7, #22]
 80055a2:	e02b      	b.n	80055fc <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	889b      	ldrh	r3, [r3, #4]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <CheckSmSettings+0x13e>
           /* receive mailbox is not readable by the master*/
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055b0:	2316      	movs	r3, #22
 80055b2:	75bb      	strb	r3, [r7, #22]
 80055b4:	e022      	b.n	80055fc <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	889b      	ldrh	r3, [r3, #4]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <CheckSmSettings+0x150>
            /* receive mailbox is not in one buffer mode */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055c2:	2316      	movs	r3, #22
 80055c4:	75bb      	strb	r3, [r7, #22]
 80055c6:	e019      	b.n	80055fc <CheckSmSettings+0x184>
        else if ( SMLength < MIN_MBX_SIZE )
 80055c8:	8abb      	ldrh	r3, [r7, #20]
 80055ca:	2b21      	cmp	r3, #33	; 0x21
 80055cc:	d802      	bhi.n	80055d4 <CheckSmSettings+0x15c>
            /* send mailbox size is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055ce:	2316      	movs	r3, #22
 80055d0:	75bb      	strb	r3, [r7, #22]
 80055d2:	e013      	b.n	80055fc <CheckSmSettings+0x184>
        else if ( SMLength > MAX_MBX_SIZE )
 80055d4:	8abb      	ldrh	r3, [r7, #20]
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d902      	bls.n	80055e2 <CheckSmSettings+0x16a>
            /* send mailbox size is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055dc:	2316      	movs	r3, #22
 80055de:	75bb      	strb	r3, [r7, #22]
 80055e0:	e00c      	b.n	80055fc <CheckSmSettings+0x184>
         else if ( SMAddress < MIN_MBX_READ_ADDRESS )
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	d202      	bcs.n	80055f0 <CheckSmSettings+0x178>
            /* send mailbox address is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055ea:	2316      	movs	r3, #22
 80055ec:	75bb      	strb	r3, [r7, #22]
 80055ee:	e005      	b.n	80055fc <CheckSmSettings+0x184>
        else if ( SMAddress > MAX_MBX_READ_ADDRESS )
 80055f0:	8a7b      	ldrh	r3, [r7, #18]
 80055f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055f6:	d301      	bcc.n	80055fc <CheckSmSettings+0x184>
            /* send mailbox address is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80055f8:	2316      	movs	r3, #22
 80055fa:	75bb      	strb	r3, [r7, #22]

    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 80055fc:	7dbb      	ldrb	r3, [r7, #22]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d177      	bne.n	80056f2 <CheckSmSettings+0x27a>
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d974      	bls.n	80056f2 <CheckSmSettings+0x27a>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8005608:	4b4b      	ldr	r3, [pc, #300]	; (8005738 <CheckSmSettings+0x2c0>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 800560e:	2003      	movs	r0, #3
 8005610:	f7ff feca 	bl	80053a8 <GetSyncMan>
 8005614:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	885b      	ldrh	r3, [r3, #2]
 800561a:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 8005622:	8abb      	ldrh	r3, [r7, #20]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	dd01      	ble.n	8005630 <CheckSmSettings+0x1b8>
        return ALSTATUSCODE_INVALIDSMCFG;
 800562c:	2317      	movs	r3, #23
 800562e:	e10b      	b.n	8005848 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 8005630:	8a7b      	ldrh	r3, [r7, #18]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd01      	ble.n	800563e <CheckSmSettings+0x1c6>
        return ALSTATUSCODE_INVALIDSMCFG;
 800563a:	2317      	movs	r3, #23
 800563c:	e104      	b.n	8005848 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

        if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88db      	ldrh	r3, [r3, #6]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <CheckSmSettings+0x1de>
 800564a:	8abb      	ldrh	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <CheckSmSettings+0x1de>
            /* the SM3 size is 0 and the SM3 is active */
            result = SYNCMANCHSETTINGS+1;
 8005650:	2304      	movs	r3, #4
 8005652:	75bb      	strb	r3, [r7, #22]
 8005654:	e048      	b.n	80056e8 <CheckSmSettings+0x270>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88db      	ldrh	r3, [r3, #6]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d039      	beq.n	80056d6 <CheckSmSettings+0x25e>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
            if ( SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 8005662:	4b36      	ldr	r3, [pc, #216]	; (800573c <CheckSmSettings+0x2c4>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	8aba      	ldrh	r2, [r7, #20]
 8005668:	429a      	cmp	r2, r3
 800566a:	d106      	bne.n	800567a <CheckSmSettings+0x202>
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <CheckSmSettings+0x2c4>)
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <CheckSmSettings+0x202>
 8005674:	8abb      	ldrh	r3, [r7, #20]
 8005676:	2b44      	cmp	r3, #68	; 0x44
 8005678:	d902      	bls.n	8005680 <CheckSmSettings+0x208>
                /* sizes don't match */
                result = SYNCMANCHSIZE+1;
 800567a:	2303      	movs	r3, #3
 800567c:	75bb      	strb	r3, [r7, #22]
 800567e:	e033      	b.n	80056e8 <CheckSmSettings+0x270>
            else
                /* sizes matches */
            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	889b      	ldrh	r3, [r3, #4]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <CheckSmSettings+0x258>
            {
                /* settings match */
                if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_READ_ADDRESS )&&( SMAddress <= MAX_PD_READ_ADDRESS ) )
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <CheckSmSettings+0x2c8>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d107      	bne.n	80056a4 <CheckSmSettings+0x22c>
 8005694:	8a7b      	ldrh	r3, [r7, #18]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d303      	bcc.n	80056a4 <CheckSmSettings+0x22c>
 800569c:	8a7b      	ldrh	r3, [r7, #18]
 800569e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a2:	d308      	bcc.n	80056b6 <CheckSmSettings+0x23e>
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
 80056a4:	4b26      	ldr	r3, [pc, #152]	; (8005740 <CheckSmSettings+0x2c8>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d00e      	beq.n	80056ca <CheckSmSettings+0x252>
 80056ac:	4b25      	ldr	r3, [pc, #148]	; (8005744 <CheckSmSettings+0x2cc>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	8a7a      	ldrh	r2, [r7, #18]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d109      	bne.n	80056ca <CheckSmSettings+0x252>
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	889b      	ldrh	r3, [r3, #4]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <CheckSmSettings+0x270>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
 80056c2:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <CheckSmSettings+0x2c0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80056c8:	e00e      	b.n	80056e8 <CheckSmSettings+0x270>
                }
                else
                    /* input address is out of the allowed area or has changed in SAFEOP or OP */
                    result = SYNCMANCHADDRESS+1;
 80056ca:	2302      	movs	r3, #2
 80056cc:	75bb      	strb	r3, [r7, #22]
 80056ce:	e00b      	b.n	80056e8 <CheckSmSettings+0x270>
            }
            else
                /* input settings do not match */
                result = SYNCMANCHSETTINGS+1;
 80056d0:	2304      	movs	r3, #4
 80056d2:	75bb      	strb	r3, [r7, #22]
 80056d4:	e008      	b.n	80056e8 <CheckSmSettings+0x270>
        }
        else if ( SMLength != 0 || nPdInputSize != 0 )
 80056d6:	8abb      	ldrh	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <CheckSmSettings+0x26c>
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <CheckSmSettings+0x2c4>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <CheckSmSettings+0x270>
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 80056e4:	2303      	movs	r3, #3
 80056e6:	75bb      	strb	r3, [r7, #22]



        if ( result != 0 )
 80056e8:	7dbb      	ldrb	r3, [r7, #22]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <CheckSmSettings+0x27a>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 80056ee:	231e      	movs	r3, #30
 80056f0:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if ( result == 0 && maxChannel > PROCESS_DATA_OUT )
 80056f2:	7dbb      	ldrb	r3, [r7, #22]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 808f 	bne.w	8005818 <CheckSmSettings+0x3a0>
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f240 808b 	bls.w	8005818 <CheckSmSettings+0x3a0>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8005702:	2002      	movs	r0, #2
 8005704:	f7ff fe50 	bl	80053a8 <GetSyncMan>
 8005708:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	885b      	ldrh	r3, [r3, #2]
 800570e:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 8005716:	8abb      	ldrh	r3, [r7, #20]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	dd01      	ble.n	8005724 <CheckSmSettings+0x2ac>
        return ALSTATUSCODE_INVALIDSMCFG;
 8005720:	2317      	movs	r3, #23
 8005722:	e091      	b.n	8005848 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 8005724:	8a7b      	ldrh	r3, [r7, #18]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd0c      	ble.n	8005748 <CheckSmSettings+0x2d0>
        return ALSTATUSCODE_INVALIDSMCFG;
 800572e:	2317      	movs	r3, #23
 8005730:	e08a      	b.n	8005848 <CheckSmSettings+0x3d0>
 8005732:	bf00      	nop
 8005734:	20000aec 	.word	0x20000aec
 8005738:	20000abc 	.word	0x20000abc
 800573c:	20000ae8 	.word	0x20000ae8
 8005740:	20000ac1 	.word	0x20000ac1
 8005744:	20000b00 	.word	0x20000b00
/* ECATCHANGE_END(V5.11) HW2*/

    if ( (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88db      	ldrh	r3, [r3, #6]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <CheckSmSettings+0x2e8>
 8005754:	8abb      	ldrh	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <CheckSmSettings+0x2e8>
            /* the SM2 size is 0 and the SM2 is active */
            result = SYNCMANCHSETTINGS+1;
 800575a:	2304      	movs	r3, #4
 800575c:	75bb      	strb	r3, [r7, #22]
 800575e:	e056      	b.n	800580e <CheckSmSettings+0x396>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88db      	ldrh	r3, [r3, #6]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d047      	beq.n	80057fc <CheckSmSettings+0x384>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 800576c:	4b38      	ldr	r3, [pc, #224]	; (8005850 <CheckSmSettings+0x3d8>)
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	8aba      	ldrh	r2, [r7, #20]
 8005772:	429a      	cmp	r2, r3
 8005774:	d13f      	bne.n	80057f6 <CheckSmSettings+0x37e>
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <CheckSmSettings+0x3d8>)
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03b      	beq.n	80057f6 <CheckSmSettings+0x37e>
 800577e:	8abb      	ldrh	r3, [r7, #20]
 8005780:	2b44      	cmp	r3, #68	; 0x44
 8005782:	d838      	bhi.n	80057f6 <CheckSmSettings+0x37e>

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	889b      	ldrh	r3, [r3, #4]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b04      	cmp	r3, #4
 800578e:	d12e      	bne.n	80057ee <CheckSmSettings+0x376>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8005790:	4b30      	ldr	r3, [pc, #192]	; (8005854 <CheckSmSettings+0x3dc>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d107      	bne.n	80057a8 <CheckSmSettings+0x330>
 8005798:	8a7b      	ldrh	r3, [r7, #18]
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579e:	d303      	bcc.n	80057a8 <CheckSmSettings+0x330>
 80057a0:	8a7b      	ldrh	r3, [r7, #18]
 80057a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057a6:	d308      	bcc.n	80057ba <CheckSmSettings+0x342>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 80057a8:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <CheckSmSettings+0x3dc>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d01b      	beq.n	80057e8 <CheckSmSettings+0x370>
 80057b0:	4b29      	ldr	r3, [pc, #164]	; (8005858 <CheckSmSettings+0x3e0>)
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	8a7a      	ldrh	r2, [r7, #18]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d116      	bne.n	80057e8 <CheckSmSettings+0x370>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	889b      	ldrh	r3, [r3, #4]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <CheckSmSettings+0x356>
                            {
                                bWdTrigger = TRUE;
 80057c6:	4b25      	ldr	r3, [pc, #148]	; (800585c <CheckSmSettings+0x3e4>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e002      	b.n	80057d4 <CheckSmSettings+0x35c>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 80057ce:	4b23      	ldr	r3, [pc, #140]	; (800585c <CheckSmSettings+0x3e4>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	889b      	ldrh	r3, [r3, #4]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <CheckSmSettings+0x37c>
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 80057e0:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <CheckSmSettings+0x3e8>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80057e6:	e005      	b.n	80057f4 <CheckSmSettings+0x37c>
                        }
                    }
                    else
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS+1;
 80057e8:	2302      	movs	r3, #2
 80057ea:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80057ec:	e00f      	b.n	800580e <CheckSmSettings+0x396>
                }
                else
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
 80057ee:	2304      	movs	r3, #4
 80057f0:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80057f2:	e00c      	b.n	800580e <CheckSmSettings+0x396>
 80057f4:	e00b      	b.n	800580e <CheckSmSettings+0x396>
            }
            else
                /* output sizes don't match */
                result = SYNCMANCHSIZE+1;
 80057f6:	2303      	movs	r3, #3
 80057f8:	75bb      	strb	r3, [r7, #22]
 80057fa:	e008      	b.n	800580e <CheckSmSettings+0x396>
        }
        else if ( SMLength != 0 || nPdOutputSize != 0 )
 80057fc:	8abb      	ldrh	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <CheckSmSettings+0x392>
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <CheckSmSettings+0x3d8>)
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <CheckSmSettings+0x396>
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 800580a:	2303      	movs	r3, #3
 800580c:	75bb      	strb	r3, [r7, #22]

        if ( result != 0 )
 800580e:	7dbb      	ldrb	r3, [r7, #22]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <CheckSmSettings+0x3a0>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 8005814:	231d      	movs	r3, #29
 8005816:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <CheckSmSettings+0x3ce>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	75fb      	strb	r3, [r7, #23]
 8005822:	e00b      	b.n	800583c <CheckSmSettings+0x3c4>
        {
/*ECATCHANGE_START(V5.11) HW1*/
            pSyncMan = GetSyncMan(i);
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fdbe 	bl	80053a8 <GetSyncMan>
 800582c:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88da      	ldrh	r2, [r3, #6]
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <CheckSmSettings+0x3ec>)
 8005834:	801a      	strh	r2, [r3, #0]
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	3301      	adds	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <CheckSmSettings+0x3f0>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	7dfa      	ldrb	r2, [r7, #23]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3ee      	bcc.n	8005824 <CheckSmSettings+0x3ac>
        }
    }
    return result;
 8005846:	7dbb      	ldrb	r3, [r7, #22]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000ac2 	.word	0x20000ac2
 8005854:	20000ac1 	.word	0x20000ac1
 8005858:	20000ad0 	.word	0x20000ad0
 800585c:	20000afa 	.word	0x20000afa
 8005860:	20000abc 	.word	0x20000abc
 8005864:	200005d2 	.word	0x200005d2
 8005868:	20000afe 	.word	0x20000afe

0800586c <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	; 0x30
 8005870:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT16        dcControl;
    UINT16     wdiv = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	823b      	strh	r3, [r7, #16]
/*ECATCHANGE_START(V5.11) ECAT4*/
    UINT16     wd = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
    UINT32     cycleTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
    BOOL bSubordinatedCycles = FALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    UINT16    nPdInputBuffer = 3;
 8005888:	2303      	movs	r3, #3
 800588a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16    nPdOutputBuffer = 3;
 800588c:	2303      	movs	r3, #3
 800588e:	857b      	strh	r3, [r7, #42]	; 0x2a

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8005890:	2300      	movs	r3, #0
 8005892:	853b      	strh	r3, [r7, #40]	; 0x28
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8005894:	2300      	movs	r3, #0
 8005896:	84fb      	strh	r3, [r7, #38]	; 0x26

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8005898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800589c:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 800589e:	4ba4      	ldr	r3, [pc, #656]	; (8005b30 <StartInputHandler+0x2c4>)
 80058a0:	899a      	ldrh	r2, [r3, #12]
 80058a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a4:	4013      	ands	r3, r2
 80058a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 80058a8:	4ba2      	ldr	r3, [pc, #648]	; (8005b34 <StartInputHandler+0x2c8>)
 80058aa:	899a      	ldrh	r2, [r3, #12]
 80058ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ae:	4013      	ands	r3, r2
 80058b0:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16ALEventMask = 0;
 80058b2:	4ba1      	ldr	r3, [pc, #644]	; (8005b38 <StartInputHandler+0x2cc>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	801a      	strh	r2, [r3, #0]

    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 80058b8:	4ba0      	ldr	r3, [pc, #640]	; (8005b3c <StartInputHandler+0x2d0>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 80058be:	2002      	movs	r0, #2
 80058c0:	f7ff fd72 	bl	80053a8 <GetSyncMan>
 80058c4:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	881a      	ldrh	r2, [r3, #0]
 80058ca:	4b9d      	ldr	r3, [pc, #628]	; (8005b40 <StartInputHandler+0x2d4>)
 80058cc:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	889b      	ldrh	r3, [r3, #4]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <StartInputHandler+0x72>
    {
       nPdOutputBuffer = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80058de:	2003      	movs	r0, #3
 80058e0:	f7ff fd62 	bl	80053a8 <GetSyncMan>
 80058e4:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	881a      	ldrh	r2, [r3, #0]
 80058ea:	4b96      	ldr	r3, [pc, #600]	; (8005b44 <StartInputHandler+0x2d8>)
 80058ec:	801a      	strh	r2, [r3, #0]
    
    /* get the number of input buffer used for calculating the address areas */
    if ( pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	889b      	ldrh	r3, [r3, #4]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <StartInputHandler+0x92>
        nPdInputBuffer = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80058fe:	4b91      	ldr	r3, [pc, #580]	; (8005b44 <StartInputHandler+0x2d8>)
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	4b90      	ldr	r3, [pc, #576]	; (8005b48 <StartInputHandler+0x2dc>)
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800590c:	fb03 f301 	mul.w	r3, r3, r1
 8005910:	4413      	add	r3, r2
 8005912:	4a8e      	ldr	r2, [pc, #568]	; (8005b4c <StartInputHandler+0x2e0>)
 8005914:	8812      	ldrh	r2, [r2, #0]
 8005916:	4293      	cmp	r3, r2
 8005918:	dd0a      	ble.n	8005930 <StartInputHandler+0xc4>
 800591a:	4b8a      	ldr	r3, [pc, #552]	; (8005b44 <StartInputHandler+0x2d8>)
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	4b8a      	ldr	r3, [pc, #552]	; (8005b4c <StartInputHandler+0x2e0>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	4619      	mov	r1, r3
 8005926:	4b8a      	ldr	r3, [pc, #552]	; (8005b50 <StartInputHandler+0x2e4>)
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	440b      	add	r3, r1
 800592c:	429a      	cmp	r2, r3
 800592e:	db18      	blt.n	8005962 <StartInputHandler+0xf6>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8005930:	4b84      	ldr	r3, [pc, #528]	; (8005b44 <StartInputHandler+0x2d8>)
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	4b84      	ldr	r3, [pc, #528]	; (8005b48 <StartInputHandler+0x2dc>)
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800593e:	fb03 f301 	mul.w	r3, r3, r1
 8005942:	4413      	add	r3, r2
 8005944:	4a83      	ldr	r2, [pc, #524]	; (8005b54 <StartInputHandler+0x2e8>)
 8005946:	8812      	ldrh	r2, [r2, #0]
 8005948:	4293      	cmp	r3, r2
 800594a:	dd0c      	ble.n	8005966 <StartInputHandler+0xfa>
 800594c:	4b7d      	ldr	r3, [pc, #500]	; (8005b44 <StartInputHandler+0x2d8>)
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	4b80      	ldr	r3, [pc, #512]	; (8005b54 <StartInputHandler+0x2e8>)
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	4619      	mov	r1, r3
 8005958:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <StartInputHandler+0x2ec>)
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	440b      	add	r3, r1
 800595e:	429a      	cmp	r2, r3
 8005960:	da01      	bge.n	8005966 <StartInputHandler+0xfa>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8005962:	231e      	movs	r3, #30
 8005964:	e31b      	b.n	8005f9e <StartInputHandler+0x732>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8005966:	4b76      	ldr	r3, [pc, #472]	; (8005b40 <StartInputHandler+0x2d4>)
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <StartInputHandler+0x2f0>)
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	4619      	mov	r1, r3
 8005972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005974:	fb03 f301 	mul.w	r3, r3, r1
 8005978:	4413      	add	r3, r2
 800597a:	4a74      	ldr	r2, [pc, #464]	; (8005b4c <StartInputHandler+0x2e0>)
 800597c:	8812      	ldrh	r2, [r2, #0]
    if (
 800597e:	4293      	cmp	r3, r2
 8005980:	dd0a      	ble.n	8005998 <StartInputHandler+0x12c>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8005982:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <StartInputHandler+0x2d4>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	4b70      	ldr	r3, [pc, #448]	; (8005b4c <StartInputHandler+0x2e0>)
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <StartInputHandler+0x2e4>)
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	440b      	add	r3, r1
 8005994:	429a      	cmp	r2, r3
 8005996:	db31      	blt.n	80059fc <StartInputHandler+0x190>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8005998:	4b69      	ldr	r3, [pc, #420]	; (8005b40 <StartInputHandler+0x2d4>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	4b6f      	ldr	r3, [pc, #444]	; (8005b5c <StartInputHandler+0x2f0>)
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059a6:	fb03 f301 	mul.w	r3, r3, r1
 80059aa:	4413      	add	r3, r2
 80059ac:	4a69      	ldr	r2, [pc, #420]	; (8005b54 <StartInputHandler+0x2e8>)
 80059ae:	8812      	ldrh	r2, [r2, #0]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	dd0a      	ble.n	80059ca <StartInputHandler+0x15e>
 80059b4:	4b62      	ldr	r3, [pc, #392]	; (8005b40 <StartInputHandler+0x2d4>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <StartInputHandler+0x2e8>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <StartInputHandler+0x2ec>)
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	440b      	add	r3, r1
 80059c6:	429a      	cmp	r2, r3
 80059c8:	db18      	blt.n	80059fc <StartInputHandler+0x190>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80059ca:	4b5d      	ldr	r3, [pc, #372]	; (8005b40 <StartInputHandler+0x2d4>)
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	4b62      	ldr	r3, [pc, #392]	; (8005b5c <StartInputHandler+0x2f0>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	4619      	mov	r1, r3
 80059d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059d8:	fb03 f301 	mul.w	r3, r3, r1
 80059dc:	4413      	add	r3, r2
 80059de:	4a59      	ldr	r2, [pc, #356]	; (8005b44 <StartInputHandler+0x2d8>)
 80059e0:	8812      	ldrh	r2, [r2, #0]
        ||
 80059e2:	4293      	cmp	r3, r2
 80059e4:	dd0c      	ble.n	8005a00 <StartInputHandler+0x194>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80059e6:	4b56      	ldr	r3, [pc, #344]	; (8005b40 <StartInputHandler+0x2d4>)
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <StartInputHandler+0x2d8>)
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <StartInputHandler+0x2dc>)
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	440b      	add	r3, r1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	da01      	bge.n	8005a00 <StartInputHandler+0x194>
        )
    {
        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 80059fc:	231d      	movs	r3, #29
 80059fe:	e2ce      	b.n	8005f9e <StartInputHandler+0x732>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read registers 0x980:0x981 (corresponding masks are adapted)*/
    HW_EscReadWord(dcControl, ESC_DC_UNIT_CONTROL_OFFSET);
 8005a00:	f107 0312 	add.w	r3, r7, #18
 8005a04:	2202      	movs	r2, #2
 8005a06:	f44f 6118 	mov.w	r1, #2432	; 0x980
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fd96 	bl	800453c <HW_EscRead>
    dcControl = SWAPWORD(dcControl);
 8005a10:	8a7b      	ldrh	r3, [r7, #18]
 8005a12:	827b      	strh	r3, [r7, #18]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8005a14:	f107 0308 	add.w	r3, r7, #8
 8005a18:	2204      	movs	r2, #4
 8005a1a:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fd8c 	bl	800453c <HW_EscRead>
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

    // Cycle time for Sync1
        HW_EscReadDWord(cycleTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	f640 11a4 	movw	r1, #2468	; 0x9a4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe fd83 	bl	800453c <HW_EscRead>
        cycleTimeSync1 = SWAPDWORD(cycleTimeSync1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	607b      	str	r3, [r7, #4]


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <StartInputHandler+0x2c4>)
 8005a3c:	885b      	ldrh	r3, [r3, #2]
 8005a3e:	853b      	strh	r3, [r7, #40]	; 0x28
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8005a40:	4b3c      	ldr	r3, [pc, #240]	; (8005b34 <StartInputHandler+0x2c8>)
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 8005a46:	8a7b      	ldrh	r3, [r7, #18]
 8005a48:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d057      	beq.n	8005b00 <StartInputHandler+0x294>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8005a50:	8a7b      	ldrh	r3, [r7, #18]
 8005a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <StartInputHandler+0x1f2>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005a5a:	2330      	movs	r3, #48	; 0x30
 8005a5c:	e29f      	b.n	8005f9e <StartInputHandler+0x732>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8005a5e:	8a7b      	ldrh	r3, [r7, #18]
 8005a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <StartInputHandler+0x20a>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8005a68:	8a7b      	ldrh	r3, [r7, #18]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <StartInputHandler+0x20a>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005a72:	2330      	movs	r3, #48	; 0x30
 8005a74:	e293      	b.n	8005f9e <StartInputHandler+0x732>
        }

        if(u16MinSuppSyncType != 0)
 8005a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d015      	beq.n	8005aa8 <StartInputHandler+0x23c>
        {
/*ECATCHANGE_START(V5.11) ESM2*/
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8005a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <StartInputHandler+0x224>
 8005a86:	8a7b      	ldrh	r3, [r7, #18]
 8005a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <StartInputHandler+0x238>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8005a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <StartInputHandler+0x23c>
 8005a9a:	8a7b      	ldrh	r3, [r7, #18]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <StartInputHandler+0x23c>
/*ECATCHANGE_END(V5.11) ESM2*/
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8005aa4:	2330      	movs	r3, #48	; 0x30
 8005aa6:	e27a      	b.n	8005f9e <StartInputHandler+0x732>
    }
        }

        /*Check if Sync0 cycle time is supported*/
        if ( cycleTimeSync0 != 0 && (cycleTimeSync0 < MIN_PD_CYCLE_TIME || cycleTimeSync0 > MAX_PD_CYCLE_TIME) )
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <StartInputHandler+0x256>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <StartInputHandler+0x2f4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d903      	bls.n	8005abe <StartInputHandler+0x252>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <StartInputHandler+0x2f8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <StartInputHandler+0x256>
            return ALSTATUSCODE_DCSYNC0CYCLETIME;
 8005abe:	2336      	movs	r3, #54	; 0x36
 8005ac0:	e26d      	b.n	8005f9e <StartInputHandler+0x732>


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8005ac2:	8a7b      	ldrh	r3, [r7, #18]
 8005ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <StartInputHandler+0x27e>
 8005acc:	8a7b      	ldrh	r3, [r7, #18]
 8005ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <StartInputHandler+0x27e>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
/*ECATCHANGE_START(V5.11) ESM1*/
            if((cycleTimeSync1 > 0) && (cycleTimeSync1 >= cycleTimeSync0))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <StartInputHandler+0x27e>
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d302      	bcc.n	8005aea <StartInputHandler+0x27e>
/*ECATCHANGE_END(V5.11) ESM1*/
            {
                bSubordinatedCycles = TRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 8005aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <StartInputHandler+0x294>
 8005af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <StartInputHandler+0x294>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005afc:	2330      	movs	r3, #48	; 0x30
 8005afe:	e24e      	b.n	8005f9e <StartInputHandler+0x732>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <StartInputHandler+0x2fc>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d04b      	beq.n	8005ba0 <StartInputHandler+0x334>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12c      	bne.n	8005b6c <StartInputHandler+0x300>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8005b12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d009      	beq.n	8005b2c <StartInputHandler+0x2c0>
 8005b18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d006      	beq.n	8005b2c <StartInputHandler+0x2c0>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 8005b1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d003      	beq.n	8005b2c <StartInputHandler+0x2c0>
 8005b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f040 8081 	bne.w	8005c2e <StartInputHandler+0x3c2>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005b2c:	2330      	movs	r3, #48	; 0x30
 8005b2e:	e236      	b.n	8005f9e <StartInputHandler+0x732>
 8005b30:	20000ddc 	.word	0x20000ddc
 8005b34:	20000d98 	.word	0x20000d98
 8005b38:	20000ad8 	.word	0x20000ad8
 8005b3c:	20000aee 	.word	0x20000aee
 8005b40:	20000ad0 	.word	0x20000ad0
 8005b44:	20000b00 	.word	0x20000b00
 8005b48:	20000ae8 	.word	0x20000ae8
 8005b4c:	20000d86 	.word	0x20000d86
 8005b50:	20000d7c 	.word	0x20000d7c
 8005b54:	20000d74 	.word	0x20000d74
 8005b58:	20000d8e 	.word	0x20000d8e
 8005b5c:	20000ac2 	.word	0x20000ac2
 8005b60:	0007a11f 	.word	0x0007a11f
 8005b64:	c3500000 	.word	0xc3500000
 8005b68:	20000e20 	.word	0x20000e20
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 8005b6c:	8a7b      	ldrh	r3, [r7, #18]
 8005b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <StartInputHandler+0x31a>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8005b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d002      	beq.n	8005b82 <StartInputHandler+0x316>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 8005b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d101      	bne.n	8005b86 <StartInputHandler+0x31a>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005b82:	2330      	movs	r3, #48	; 0x30
 8005b84:	e20b      	b.n	8005f9e <StartInputHandler+0x732>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8005b86:	8a7b      	ldrh	r3, [r7, #18]
 8005b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d14e      	bne.n	8005c2e <StartInputHandler+0x3c2>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 8005b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d002      	beq.n	8005b9c <StartInputHandler+0x330>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8005b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d148      	bne.n	8005c2e <StartInputHandler+0x3c2>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8005b9c:	2330      	movs	r3, #48	; 0x30
 8005b9e:	e1fe      	b.n	8005f9e <StartInputHandler+0x732>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8005ba0:	8a7b      	ldrh	r3, [r7, #18]
 8005ba2:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d120      	bne.n	8005bec <StartInputHandler+0x380>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8005baa:	4b97      	ldr	r3, [pc, #604]	; (8005e08 <StartInputHandler+0x59c>)
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <StartInputHandler+0x35e>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	853b      	strh	r3, [r7, #40]	; 0x28
                
                if (nPdInputSize > 0)
 8005bb6:	4b95      	ldr	r3, [pc, #596]	; (8005e0c <StartInputHandler+0x5a0>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <StartInputHandler+0x358>
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8005bbe:	2322      	movs	r3, #34	; 0x22
 8005bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bc2:	e00f      	b.n	8005be4 <StartInputHandler+0x378>
                else
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bc8:	e00c      	b.n	8005be4 <StartInputHandler+0x378>
            }
            else if (nPdInputSize > 0)
 8005bca:	4b90      	ldr	r3, [pc, #576]	; (8005e0c <StartInputHandler+0x5a0>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <StartInputHandler+0x370>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bda:	e003      	b.n	8005be4 <StartInputHandler+0x378>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8005be0:	2300      	movs	r3, #0
 8005be2:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            sSyncManOutPar.u16GetCycleTime = 1;
 8005be4:	4b8a      	ldr	r3, [pc, #552]	; (8005e10 <StartInputHandler+0x5a4>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	839a      	strh	r2, [r3, #28]
 8005bea:	e020      	b.n	8005c2e <StartInputHandler+0x3c2>

        }
        else
        {
            if (nPdOutputSize > 0)
 8005bec:	4b86      	ldr	r3, [pc, #536]	; (8005e08 <StartInputHandler+0x59c>)
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <StartInputHandler+0x39c>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 8005bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <StartInputHandler+0x396>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c00:	e004      	b.n	8005c0c <StartInputHandler+0x3a0>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 8005c02:	2302      	movs	r3, #2
 8005c04:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c06:	e001      	b.n	8005c0c <StartInputHandler+0x3a0>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	853b      	strh	r3, [r7, #40]	; 0x28
            }


            if (nPdInputSize > 0)
 8005c0c:	4b7f      	ldr	r3, [pc, #508]	; (8005e0c <StartInputHandler+0x5a0>)
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <StartInputHandler+0x3be>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 8005c14:	8a7b      	ldrh	r3, [r7, #18]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <StartInputHandler+0x3b8>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c22:	e004      	b.n	8005c2e <StartInputHandler+0x3c2>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 8005c24:	2302      	movs	r3, #2
 8005c26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c28:	e001      	b.n	8005c2e <StartInputHandler+0x3c2>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8005c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d106      	bne.n	8005c42 <StartInputHandler+0x3d6>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a76      	ldr	r2, [pc, #472]	; (8005e10 <StartInputHandler+0x5a4>)
 8005c38:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4a75      	ldr	r2, [pc, #468]	; (8005e14 <StartInputHandler+0x5a8>)
 8005c3e:	6253      	str	r3, [r2, #36]	; 0x24
 8005c40:	e00a      	b.n	8005c58 <StartInputHandler+0x3ec>
/*ECATCHANGE_END(V5.11) ECAT4*/
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8005c42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d107      	bne.n	8005c58 <StartInputHandler+0x3ec>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a71      	ldr	r2, [pc, #452]	; (8005e10 <StartInputHandler+0x5a4>)
 8005c4c:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT16)cycleTimeSync0;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	4b6f      	ldr	r3, [pc, #444]	; (8005e14 <StartInputHandler+0x5a8>)
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
/*ECATCHANGE_END(V5.11) ECAT4*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <StartInputHandler+0x5ac>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <StartInputHandler+0x404>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8005c60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <StartInputHandler+0x400>
 8005c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <StartInputHandler+0x404>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 8005c6c:	2329      	movs	r3, #41	; 0x29
 8005c6e:	e196      	b.n	8005f9e <StartInputHandler+0x732>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8005c70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <StartInputHandler+0x410>
 8005c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <StartInputHandler+0x416>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8005c7c:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <StartInputHandler+0x5b0>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8005c82:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <StartInputHandler+0x5b0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d010      	beq.n	8005cac <StartInputHandler+0x440>
        {
            if(nPdOutputSize > 0)
 8005c8a:	4b5f      	ldr	r3, [pc, #380]	; (8005e08 <StartInputHandler+0x59c>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <StartInputHandler+0x430>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8005c92:	4b63      	ldr	r3, [pc, #396]	; (8005e20 <StartInputHandler+0x5b4>)
 8005c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <StartInputHandler+0x440>
            }
            else if(nPdInputSize > 0)
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <StartInputHandler+0x5a0>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <StartInputHandler+0x440>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8005ca4:	4b5e      	ldr	r3, [pc, #376]	; (8005e20 <StartInputHandler+0x5b4>)
 8005ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005caa:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8005cac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d008      	beq.n	8005cc4 <StartInputHandler+0x458>
 8005cb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d005      	beq.n	8005cc4 <StartInputHandler+0x458>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8005cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d002      	beq.n	8005cc4 <StartInputHandler+0x458>
 8005cbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d109      	bne.n	8005cd8 <StartInputHandler+0x46c>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8005cc4:	4b57      	ldr	r3, [pc, #348]	; (8005e24 <StartInputHandler+0x5b8>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.11) ECAT4*/
            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8005cca:	4b4f      	ldr	r3, [pc, #316]	; (8005e08 <StartInputHandler+0x59c>)
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <StartInputHandler+0x46c>
            {
               u16ALEventMask = 0;
 8005cd2:	4b53      	ldr	r3, [pc, #332]	; (8005e20 <StartInputHandler+0x5b4>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	801a      	strh	r2, [r3, #0]
            }
/*ECATCHANGE_END(V5.11) ECAT4*/
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8005cd8:	4a4d      	ldr	r2, [pc, #308]	; (8005e10 <StartInputHandler+0x5a4>)
 8005cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cdc:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 8005cde:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <StartInputHandler+0x5a8>)
 8005ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce2:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8005ce4:	4b50      	ldr	r3, [pc, #320]	; (8005e28 <StartInputHandler+0x5bc>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8005cea:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <StartInputHandler+0x5c0>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8005cf0:	4b4f      	ldr	r3, [pc, #316]	; (8005e30 <StartInputHandler+0x5c4>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <StartInputHandler+0x5c8>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 8005cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d134      	bne.n	8005d6e <StartInputHandler+0x502>
    {
        /* get the number of Sync0 event within on SM cycle */
        if(cycleTimeSync1 >= cycleTimeSync0)
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d316      	bcc.n	8005d3a <StartInputHandler+0x4ce>
        {
            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	4b46      	ldr	r3, [pc, #280]	; (8005e30 <StartInputHandler+0x5c4>)
 8005d18:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d22:	fb02 f201 	mul.w	r2, r2, r1
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <StartInputHandler+0x4d4>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 8005d2c:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <StartInputHandler+0x5c4>)
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <StartInputHandler+0x5c4>)
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <StartInputHandler+0x4d4>
        }
        }
        else
        {
            u16SmSync0Value = 1;
 8005d3a:	4b3d      	ldr	r3, [pc, #244]	; (8005e30 <StartInputHandler+0x5c4>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <StartInputHandler+0x5bc>)
 8005d4c:	801a      	strh	r2, [r3, #0]

        if((cycleTimeSync1 % cycleTimeSync0) > 0)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d56:	fb02 f201 	mul.w	r2, r2, r1
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <StartInputHandler+0x51a>
            LatchInputSync0Value++;
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <StartInputHandler+0x5bc>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <StartInputHandler+0x5bc>)
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e00b      	b.n	8005d86 <StartInputHandler+0x51a>

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8005d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d102      	bne.n	8005d7a <StartInputHandler+0x50e>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8005d74:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <StartInputHandler+0x5c4>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8005d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d002      	beq.n	8005d86 <StartInputHandler+0x51a>
        {
            LatchInputSync0Value = 1;
 8005d80:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <StartInputHandler+0x5bc>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8005d86:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <StartInputHandler+0x5cc>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	801a      	strh	r2, [r3, #0]
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
/*ECATCHANGE_START(V5.11) ECAT4*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8005d8c:	f107 030e 	add.w	r3, r7, #14
 8005d90:	2202      	movs	r2, #2
 8005d92:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fbd0 	bl	800453c <HW_EscRead>
    wd = SWAPWORD(wd);
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/

    if (nPdOutputSize > 0 &&  wd != 0 )
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <StartInputHandler+0x59c>)
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d04d      	beq.n	8005e44 <StartInputHandler+0x5d8>
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d04a      	beq.n	8005e44 <StartInputHandler+0x5d8>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8005dae:	f107 0310 	add.w	r3, r7, #16
 8005db2:	2202      	movs	r2, #2
 8005db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fbbf 	bl	800453c <HW_EscRead>
    wdiv = SWAPWORD(wdiv);
 8005dbe:	8a3b      	ldrh	r3, [r7, #16]
 8005dc0:	823b      	strh	r3, [r7, #16]
        if ( wdiv != 0 )
 8005dc2:	8a3b      	ldrh	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d019      	beq.n	8005dfc <StartInputHandler+0x590>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8005dc8:	8a3b      	ldrh	r3, [r7, #16]
 8005dca:	3302      	adds	r3, #2
 8005dcc:	61fb      	str	r3, [r7, #28]

            d *= wd;
 8005dce:	89fb      	ldrh	r3, [r7, #14]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	61fb      	str	r3, [r7, #28]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8005de0:	3327      	adds	r3, #39	; 0x27
 8005de2:	61fb      	str	r3, [r7, #28]
            d /= 25000;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	08db      	lsrs	r3, r3, #3
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <StartInputHandler+0x5d0>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	61fb      	str	r3, [r7, #28]
            EcatWdValue = (UINT16) d;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <StartInputHandler+0x5d4>)
 8005df8:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8005dfa:	e028      	b.n	8005e4e <StartInputHandler+0x5e2>
        }
        else
        {
            wd = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	81fb      	strh	r3, [r7, #14]
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <StartInputHandler+0x5d4>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8005e06:	e022      	b.n	8005e4e <StartInputHandler+0x5e2>
 8005e08:	20000ac2 	.word	0x20000ac2
 8005e0c:	20000ae8 	.word	0x20000ae8
 8005e10:	20000ddc 	.word	0x20000ddc
 8005e14:	20000d98 	.word	0x20000d98
 8005e18:	20000abc 	.word	0x20000abc
 8005e1c:	20000af9 	.word	0x20000af9
 8005e20:	20000ad8 	.word	0x20000ad8
 8005e24:	20000af2 	.word	0x20000af2
 8005e28:	20000ae4 	.word	0x20000ae4
 8005e2c:	20000acc 	.word	0x20000acc
 8005e30:	20000aea 	.word	0x20000aea
 8005e34:	20000afc 	.word	0x20000afc
 8005e38:	20000e24 	.word	0x20000e24
 8005e3c:	14f8b589 	.word	0x14f8b589
 8005e40:	20000af6 	.word	0x20000af6
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	823b      	strh	r3, [r7, #16]
        EcatWdValue = 0;
 8005e48:	4b57      	ldr	r3, [pc, #348]	; (8005fa8 <StartInputHandler+0x73c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8005e4e:	4b56      	ldr	r3, [pc, #344]	; (8005fa8 <StartInputHandler+0x73c>)
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <StartInputHandler+0x5f2>
 8005e56:	4b55      	ldr	r3, [pc, #340]	; (8005fac <StartInputHandler+0x740>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <StartInputHandler+0x602>
 8005e5e:	4b52      	ldr	r3, [pc, #328]	; (8005fa8 <StartInputHandler+0x73c>)
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <StartInputHandler+0x606>
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <StartInputHandler+0x740>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <StartInputHandler+0x606>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 8005e6e:	231f      	movs	r3, #31
 8005e70:	e095      	b.n	8005f9e <StartInputHandler+0x732>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8005e72:	4b4f      	ldr	r3, [pc, #316]	; (8005fb0 <StartInputHandler+0x744>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <StartInputHandler+0x624>
 8005e7a:	4b4e      	ldr	r3, [pc, #312]	; (8005fb4 <StartInputHandler+0x748>)
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <StartInputHandler+0x624>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8005e82:	4b4d      	ldr	r3, [pc, #308]	; (8005fb8 <StartInputHandler+0x74c>)
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	4b4a      	ldr	r3, [pc, #296]	; (8005fb8 <StartInputHandler+0x74c>)
 8005e8e:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 8005e90:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <StartInputHandler+0x750>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8005e96:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <StartInputHandler+0x754>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8005e9c:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <StartInputHandler+0x758>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <StartInputHandler+0x75c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8005ea8:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <StartInputHandler+0x760>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8005eae:	4b48      	ldr	r3, [pc, #288]	; (8005fd0 <StartInputHandler+0x764>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8005eb4:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <StartInputHandler+0x768>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <StartInputHandler+0x76c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/
    sSyncManOutPar.u8SyncError = 0;
 8005ec2:	4b46      	ldr	r3, [pc, #280]	; (8005fdc <StartInputHandler+0x770>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8005eca:	4b44      	ldr	r3, [pc, #272]	; (8005fdc <StartInputHandler+0x770>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 8005ed0:	8a7b      	ldrh	r3, [r7, #18]
 8005ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d050      	beq.n	8005f7c <StartInputHandler+0x710>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <StartInputHandler+0x67c>
        {
            Sync0WdValue = 0;
 8005ee0:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <StartInputHandler+0x750>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e018      	b.n	8005f1a <StartInputHandler+0x6ae>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	4a3c      	ldr	r2, [pc, #240]	; (8005fe0 <StartInputHandler+0x774>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	09db      	lsrs	r3, r3, #7
 8005ef4:	61bb      	str	r3, [r7, #24]
            if(Sync0Cycle < 5)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d803      	bhi.n	8005f04 <StartInputHandler+0x698>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 8005efc:	4b2f      	ldr	r3, [pc, #188]	; (8005fbc <StartInputHandler+0x750>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e00a      	b.n	8005f1a <StartInputHandler+0x6ae>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	4a35      	ldr	r2, [pc, #212]	; (8005fe4 <StartInputHandler+0x778>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	4b29      	ldr	r3, [pc, #164]	; (8005fbc <StartInputHandler+0x750>)
 8005f18:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 8005f1a:	8a7b      	ldrh	r3, [r7, #18]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02b      	beq.n	8005f7c <StartInputHandler+0x710>
        {
            if(cycleTimeSync1 < cycleTimeSync0)
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d204      	bcs.n	8005f36 <StartInputHandler+0x6ca>
						{
										/* Sync 1 has the same cycle time than Sync0 (maybe with a shift (cycleTimeSync1 > 0))*/
										Sync1WdValue = Sync0WdValue;
 8005f2c:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <StartInputHandler+0x750>)
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <StartInputHandler+0x75c>)
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	e022      	b.n	8005f7c <StartInputHandler+0x710>
						}
						else
						{
										/* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
										UINT32 Sync1Cycle = cycleTimeSync1/100000;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <StartInputHandler+0x774>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	09db      	lsrs	r3, r3, #7
 8005f42:	617b      	str	r3, [r7, #20]
										if(Sync1Cycle < 5)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d803      	bhi.n	8005f52 <StartInputHandler+0x6e6>
										{
												/*Sync0 cycle less than 500us*/
												Sync1WdValue = 1;
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <StartInputHandler+0x75c>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e00a      	b.n	8005f68 <StartInputHandler+0x6fc>
										}
										else
										{
												Sync1WdValue = (UINT16)(Sync1Cycle*2)/10;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <StartInputHandler+0x778>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <StartInputHandler+0x75c>)
 8005f66:	801a      	strh	r2, [r3, #0]
										}

												/* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
													Sync1WdValue += Sync0WdValue/2;
 8005f68:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <StartInputHandler+0x750>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <StartInputHandler+0x75c>)
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <StartInputHandler+0x75c>)
 8005f7a:	801a      	strh	r2, [r3, #0]





    if(nPdOutputSize > 0)
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <StartInputHandler+0x748>)
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <StartInputHandler+0x71e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_OUT);
 8005f84:	2002      	movs	r0, #2
 8005f86:	f7ff fa4f 	bl	8005428 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8005f8a:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <StartInputHandler+0x77c>)
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <StartInputHandler+0x72c>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_IN);
 8005f92:	2003      	movs	r0, #3
 8005f94:	f7ff fa48 	bl	8005428 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /*write initial input data*/
    PDO_InputMapping();
 8005f98:	f7fe fe20 	bl	8004bdc <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3730      	adds	r7, #48	; 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000af6 	.word	0x20000af6
 8005fac:	20000afa 	.word	0x20000afa
 8005fb0:	20000af9 	.word	0x20000af9
 8005fb4:	20000ac2 	.word	0x20000ac2
 8005fb8:	20000ad8 	.word	0x20000ad8
 8005fbc:	20000ad2 	.word	0x20000ad2
 8005fc0:	20000ac6 	.word	0x20000ac6
 8005fc4:	20000af4 	.word	0x20000af4
 8005fc8:	20000ad6 	.word	0x20000ad6
 8005fcc:	20000ada 	.word	0x20000ada
 8005fd0:	20000aef 	.word	0x20000aef
 8005fd4:	20000ad4 	.word	0x20000ad4
 8005fd8:	20000d98 	.word	0x20000d98
 8005fdc:	20000ddc 	.word	0x20000ddc
 8005fe0:	0a7c5ac5 	.word	0x0a7c5ac5
 8005fe4:	cccccccd 	.word	0xcccccccd
 8005fe8:	20000ae8 	.word	0x20000ae8

08005fec <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) ESM6*/
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8005ff2:	23ff      	movs	r3, #255	; 0xff
 8005ff4:	80fb      	strh	r3, [r7, #6]
/*ECATCHANGE_END(V5.11) ESM6*/
    if(bLocalErrorFlag)
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <StartOutputHandler+0x3c>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	; (800602c <StartOutputHandler+0x40>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	e00a      	b.n	800601a <StartOutputHandler+0x2e>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <StartOutputHandler+0x44>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <StartOutputHandler+0x48>)
 800600e:	22c8      	movs	r2, #200	; 0xc8
 8006010:	801a      	strh	r2, [r3, #0]
        i16WaitForPllRunningCnt = 0;
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <StartOutputHandler+0x4c>)
 8006014:	2200      	movs	r2, #0
 8006016:	801a      	strh	r2, [r3, #0]
    }


    return result;
 8006018:	88fb      	ldrh	r3, [r7, #6]
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000aca 	.word	0x20000aca
 800602c:	20000ac4 	.word	0x20000ac4
 8006030:	20000af2 	.word	0x20000af2
 8006034:	20000ad4 	.word	0x20000ad4
 8006038:	20000ace 	.word	0x20000ace

0800603c <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <StopOutputHandler+0x1c>)
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <StopOutputHandler+0x20>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000aee 	.word	0x20000aee
 800605c:	20000af3 	.word	0x20000af3

08006060 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 8006066:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <StopInputHandler+0xb8>)
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_END(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_OUT);
 800606e:	2002      	movs	r0, #2
 8006070:	f7ff f9b2 	bl	80053d8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8006074:	4b29      	ldr	r3, [pc, #164]	; (800611c <StopInputHandler+0xbc>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 800607c:	2003      	movs	r0, #3
 800607e:	f7ff f9ab 	bl	80053d8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 8006082:	230c      	movs	r3, #12
 8006084:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800608c:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006094:	80fb      	strh	r3, [r7, #6]

/*ECATCHANGE_START(V5.11) HW1*/
    ResetALEventMask( ~(ResetMask) );
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	43db      	mvns	r3, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff f915 	bl	80052cc <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <StopInputHandler+0xc0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <StopInputHandler+0xc4>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <StopInputHandler+0xc8>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <StopInputHandler+0xcc>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <StopInputHandler+0xd0>)
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 80060c0:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <StopInputHandler+0xd4>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <StopInputHandler+0xd8>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <StopInputHandler+0xdc>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <StopInputHandler+0xe0>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <StopInputHandler+0xe4>)
 80060da:	2200      	movs	r2, #0
 80060dc:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <StopInputHandler+0xe8>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 80060e4:	4b19      	ldr	r3, [pc, #100]	; (800614c <StopInputHandler+0xec>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <StopInputHandler+0xf0>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 80060f0:	4b18      	ldr	r3, [pc, #96]	; (8006154 <StopInputHandler+0xf4>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    i16WaitForPllRunningTimeout = 0;
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <StopInputHandler+0xf8>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <StopInputHandler+0xfc>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <StopInputHandler+0x100>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 800610a:	4b16      	ldr	r3, [pc, #88]	; (8006164 <StopInputHandler+0x104>)
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000ac2 	.word	0x20000ac2
 800611c:	20000ae8 	.word	0x20000ae8
 8006120:	20000aee 	.word	0x20000aee
 8006124:	20000af9 	.word	0x20000af9
 8006128:	20000af2 	.word	0x20000af2
 800612c:	20000ada 	.word	0x20000ada
 8006130:	20000aef 	.word	0x20000aef
 8006134:	20000aea 	.word	0x20000aea
 8006138:	20000afc 	.word	0x20000afc
 800613c:	20000ad2 	.word	0x20000ad2
 8006140:	20000ac6 	.word	0x20000ac6
 8006144:	20000af4 	.word	0x20000af4
 8006148:	20000ad6 	.word	0x20000ad6
 800614c:	20000ae4 	.word	0x20000ae4
 8006150:	20000acc 	.word	0x20000acc
 8006154:	20000d98 	.word	0x20000d98
 8006158:	20000ad4 	.word	0x20000ad4
 800615c:	20000afa 	.word	0x20000afa
 8006160:	20000af8 	.word	0x20000af8
 8006164:	20000e20 	.word	0x20000e20

08006168 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <BackToInitTransition+0x14>)
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20000e20 	.word	0x20000e20

08006180 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	460a      	mov	r2, r1
 800618a:	71fb      	strb	r3, [r7, #7]
 800618c:	4613      	mov	r3, r2
 800618e:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8006190:	88bb      	ldrh	r3, [r7, #4]
 8006192:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8006194:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <SetALStatus+0x68>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	79fa      	ldrb	r2, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	d002      	beq.n	80061a4 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 800619e:	4a12      	ldr	r2, [pc, #72]	; (80061e8 <SetALStatus+0x68>)
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 80061a4:	88bb      	ldrh	r3, [r7, #4]
 80061a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <SetALStatus+0x42>
    {
        Value = SWAPWORD(Value);
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	81fb      	strh	r3, [r7, #14]

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 80061b2:	f107 030e 	add.w	r3, r7, #14
 80061b6:	2202      	movs	r2, #2
 80061b8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fa25 	bl	800460c <HW_EscWrite>
    }

    Value = nAlStatus;
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <SetALStatus+0x68>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
 80061ca:	89fb      	ldrh	r3, [r7, #14]
 80061cc:	81fb      	strh	r3, [r7, #14]
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 80061ce:	f107 030e 	add.w	r3, r7, #14
 80061d2:	2202      	movs	r2, #2
 80061d4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fa17 	bl	800460c <HW_EscWrite>

}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000ac1 	.word	0x20000ac1

080061ec <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	460a      	mov	r2, r1
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	4613      	mov	r3, r2
 80061fa:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8006204:	4bdf      	ldr	r3, [pc, #892]	; (8006584 <AL_ControlInd+0x398>)
 8006206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800620a:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 800620c:	4bde      	ldr	r3, [pc, #888]	; (8006588 <AL_ControlInd+0x39c>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 800621c:	2301      	movs	r3, #1
 800621e:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 8006220:	4bda      	ldr	r3, [pc, #872]	; (800658c <AL_ControlInd+0x3a0>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f023 0310 	bic.w	r3, r3, #16
 8006228:	b2da      	uxtb	r2, r3
 800622a:	4bd8      	ldr	r3, [pc, #864]	; (800658c <AL_ControlInd+0x3a0>)
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e012      	b.n	8006256 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ( (nAlStatus & STATE_CHANGE)
 8006230:	4bd6      	ldr	r3, [pc, #856]	; (800658c <AL_ControlInd+0x3a0>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <AL_ControlInd+0x5c>
    // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
    //               (the error was acknowledged with the same state before independent of the acknowledge flag)
    /*Error Acknowledge with 0xX1 is allowed*/
           && (alControl & STATE_MASK) != STATE_INIT )
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	2b01      	cmp	r3, #1
 8006244:	f040 8374 	bne.w	8006930 <AL_ControlInd+0x744>
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
    else
    {
        nAlStatus &= STATE_MASK;
 8006248:	4bd0      	ldr	r3, [pc, #832]	; (800658c <AL_ControlInd+0x3a0>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4bce      	ldr	r3, [pc, #824]	; (800658c <AL_ControlInd+0x3a0>)
 8006254:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 800625e:	4bcb      	ldr	r3, [pc, #812]	; (800658c <AL_ControlInd+0x3a0>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8006264:	7b3b      	ldrb	r3, [r7, #12]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 800626a:	7b3a      	ldrb	r2, [r7, #12]
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	4413      	add	r3, r2
 8006270:	733b      	strb	r3, [r7, #12]


    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8006272:	7b3b      	ldrb	r3, [r7, #12]
 8006274:	2b88      	cmp	r3, #136	; 0x88
 8006276:	d074      	beq.n	8006362 <AL_ControlInd+0x176>
 8006278:	2b88      	cmp	r3, #136	; 0x88
 800627a:	dc7b      	bgt.n	8006374 <AL_ControlInd+0x188>
 800627c:	2b84      	cmp	r3, #132	; 0x84
 800627e:	d070      	beq.n	8006362 <AL_ControlInd+0x176>
 8006280:	2b84      	cmp	r3, #132	; 0x84
 8006282:	dc77      	bgt.n	8006374 <AL_ControlInd+0x188>
 8006284:	2b82      	cmp	r3, #130	; 0x82
 8006286:	d05d      	beq.n	8006344 <AL_ControlInd+0x158>
 8006288:	2b82      	cmp	r3, #130	; 0x82
 800628a:	dc73      	bgt.n	8006374 <AL_ControlInd+0x188>
 800628c:	2b12      	cmp	r3, #18
 800628e:	d059      	beq.n	8006344 <AL_ControlInd+0x158>
 8006290:	2b12      	cmp	r3, #18
 8006292:	db6f      	blt.n	8006374 <AL_ControlInd+0x188>
 8006294:	2b48      	cmp	r3, #72	; 0x48
 8006296:	dc6d      	bgt.n	8006374 <AL_ControlInd+0x188>
 8006298:	2b22      	cmp	r3, #34	; 0x22
 800629a:	db6b      	blt.n	8006374 <AL_ControlInd+0x188>
 800629c:	3b22      	subs	r3, #34	; 0x22
 800629e:	2b26      	cmp	r3, #38	; 0x26
 80062a0:	d868      	bhi.n	8006374 <AL_ControlInd+0x188>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <AL_ControlInd+0xbc>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	08006345 	.word	0x08006345
 80062ac:	08006375 	.word	0x08006375
 80062b0:	08006351 	.word	0x08006351
 80062b4:	08006375 	.word	0x08006375
 80062b8:	08006375 	.word	0x08006375
 80062bc:	08006375 	.word	0x08006375
 80062c0:	08006375 	.word	0x08006375
 80062c4:	08006375 	.word	0x08006375
 80062c8:	08006375 	.word	0x08006375
 80062cc:	08006375 	.word	0x08006375
 80062d0:	08006375 	.word	0x08006375
 80062d4:	08006375 	.word	0x08006375
 80062d8:	08006375 	.word	0x08006375
 80062dc:	08006375 	.word	0x08006375
 80062e0:	08006375 	.word	0x08006375
 80062e4:	08006375 	.word	0x08006375
 80062e8:	08006375 	.word	0x08006375
 80062ec:	08006375 	.word	0x08006375
 80062f0:	08006375 	.word	0x08006375
 80062f4:	08006375 	.word	0x08006375
 80062f8:	08006375 	.word	0x08006375
 80062fc:	08006375 	.word	0x08006375
 8006300:	08006375 	.word	0x08006375
 8006304:	08006375 	.word	0x08006375
 8006308:	08006375 	.word	0x08006375
 800630c:	08006375 	.word	0x08006375
 8006310:	08006375 	.word	0x08006375
 8006314:	08006375 	.word	0x08006375
 8006318:	08006375 	.word	0x08006375
 800631c:	08006375 	.word	0x08006375
 8006320:	08006375 	.word	0x08006375
 8006324:	08006375 	.word	0x08006375
 8006328:	08006345 	.word	0x08006345
 800632c:	08006375 	.word	0x08006375
 8006330:	08006363 	.word	0x08006363
 8006334:	08006375 	.word	0x08006375
 8006338:	08006375 	.word	0x08006375
 800633c:	08006375 	.word	0x08006375
 8006340:	08006363 	.word	0x08006363
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 8006344:	2002      	movs	r0, #2
 8006346:	f7ff f897 	bl	8005478 <CheckSmSettings>
 800634a:	4603      	mov	r3, r0
 800634c:	81fb      	strh	r3, [r7, #14]
        break;
 800634e:	e011      	b.n	8006374 <AL_ControlInd+0x188>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8006350:	498f      	ldr	r1, [pc, #572]	; (8006590 <AL_ControlInd+0x3a4>)
 8006352:	4890      	ldr	r0, [pc, #576]	; (8006594 <AL_ControlInd+0x3a8>)
 8006354:	f7fd fd3a 	bl	8003dcc <APPL_GenerateMapping>
 8006358:	4603      	mov	r3, r0
 800635a:	81fb      	strh	r3, [r7, #14]

        if (result != 0)
 800635c:	89fb      	ldrh	r3, [r7, #14]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <AL_ControlInd+0x186>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 8006362:	4b8d      	ldr	r3, [pc, #564]	; (8006598 <AL_ControlInd+0x3ac>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff f886 	bl	8005478 <CheckSmSettings>
 800636c:	4603      	mov	r3, r0
 800636e:	81fb      	strh	r3, [r7, #14]
        break;
 8006370:	e000      	b.n	8006374 <AL_ControlInd+0x188>
            break;
 8006372:	bf00      	nop
    }

    if ( result == 0 )
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 8203 	bne.w	8006782 <AL_ControlInd+0x596>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 800637c:	4b87      	ldr	r3, [pc, #540]	; (800659c <AL_ControlInd+0x3b0>)
 800637e:	2200      	movs	r2, #0
 8006380:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8006382:	7b3b      	ldrb	r3, [r7, #12]
 8006384:	3b11      	subs	r3, #17
 8006386:	2b77      	cmp	r3, #119	; 0x77
 8006388:	f200 81f8 	bhi.w	800677c <AL_ControlInd+0x590>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <AL_ControlInd+0x1a8>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	0800672b 	.word	0x0800672b
 8006398:	080065a1 	.word	0x080065a1
 800639c:	08006575 	.word	0x08006575
 80063a0:	08006777 	.word	0x08006777
 80063a4:	0800677d 	.word	0x0800677d
 80063a8:	0800677d 	.word	0x0800677d
 80063ac:	0800677d 	.word	0x0800677d
 80063b0:	08006777 	.word	0x08006777
 80063b4:	0800677d 	.word	0x0800677d
 80063b8:	0800677d 	.word	0x0800677d
 80063bc:	0800677d 	.word	0x0800677d
 80063c0:	0800677d 	.word	0x0800677d
 80063c4:	0800677d 	.word	0x0800677d
 80063c8:	0800677d 	.word	0x0800677d
 80063cc:	0800677d 	.word	0x0800677d
 80063d0:	0800677d 	.word	0x0800677d
 80063d4:	08006719 	.word	0x08006719
 80063d8:	0800672f 	.word	0x0800672f
 80063dc:	08006777 	.word	0x08006777
 80063e0:	08006603 	.word	0x08006603
 80063e4:	0800677d 	.word	0x0800677d
 80063e8:	0800677d 	.word	0x0800677d
 80063ec:	0800677d 	.word	0x0800677d
 80063f0:	08006777 	.word	0x08006777
 80063f4:	0800677d 	.word	0x0800677d
 80063f8:	0800677d 	.word	0x0800677d
 80063fc:	0800677d 	.word	0x0800677d
 8006400:	0800677d 	.word	0x0800677d
 8006404:	0800677d 	.word	0x0800677d
 8006408:	0800677d 	.word	0x0800677d
 800640c:	0800677d 	.word	0x0800677d
 8006410:	0800677d 	.word	0x0800677d
 8006414:	0800657b 	.word	0x0800657b
 8006418:	08006777 	.word	0x08006777
 800641c:	0800677d 	.word	0x0800677d
 8006420:	08006777 	.word	0x08006777
 8006424:	0800677d 	.word	0x0800677d
 8006428:	0800677d 	.word	0x0800677d
 800642c:	0800677d 	.word	0x0800677d
 8006430:	08006777 	.word	0x08006777
 8006434:	0800677d 	.word	0x0800677d
 8006438:	0800677d 	.word	0x0800677d
 800643c:	0800677d 	.word	0x0800677d
 8006440:	0800677d 	.word	0x0800677d
 8006444:	0800677d 	.word	0x0800677d
 8006448:	0800677d 	.word	0x0800677d
 800644c:	0800677d 	.word	0x0800677d
 8006450:	0800677d 	.word	0x0800677d
 8006454:	080066fd 	.word	0x080066fd
 8006458:	080066d1 	.word	0x080066d1
 800645c:	08006777 	.word	0x08006777
 8006460:	0800672f 	.word	0x0800672f
 8006464:	0800677d 	.word	0x0800677d
 8006468:	0800677d 	.word	0x0800677d
 800646c:	0800677d 	.word	0x0800677d
 8006470:	08006659 	.word	0x08006659
 8006474:	0800677d 	.word	0x0800677d
 8006478:	0800677d 	.word	0x0800677d
 800647c:	0800677d 	.word	0x0800677d
 8006480:	0800677d 	.word	0x0800677d
 8006484:	0800677d 	.word	0x0800677d
 8006488:	0800677d 	.word	0x0800677d
 800648c:	0800677d 	.word	0x0800677d
 8006490:	0800677d 	.word	0x0800677d
 8006494:	0800677d 	.word	0x0800677d
 8006498:	0800677d 	.word	0x0800677d
 800649c:	0800677d 	.word	0x0800677d
 80064a0:	0800677d 	.word	0x0800677d
 80064a4:	0800677d 	.word	0x0800677d
 80064a8:	0800677d 	.word	0x0800677d
 80064ac:	0800677d 	.word	0x0800677d
 80064b0:	0800677d 	.word	0x0800677d
 80064b4:	0800677d 	.word	0x0800677d
 80064b8:	0800677d 	.word	0x0800677d
 80064bc:	0800677d 	.word	0x0800677d
 80064c0:	0800677d 	.word	0x0800677d
 80064c4:	0800677d 	.word	0x0800677d
 80064c8:	0800677d 	.word	0x0800677d
 80064cc:	0800677d 	.word	0x0800677d
 80064d0:	0800677d 	.word	0x0800677d
 80064d4:	0800677d 	.word	0x0800677d
 80064d8:	0800677d 	.word	0x0800677d
 80064dc:	0800677d 	.word	0x0800677d
 80064e0:	0800677d 	.word	0x0800677d
 80064e4:	0800677d 	.word	0x0800677d
 80064e8:	0800677d 	.word	0x0800677d
 80064ec:	0800677d 	.word	0x0800677d
 80064f0:	0800677d 	.word	0x0800677d
 80064f4:	0800677d 	.word	0x0800677d
 80064f8:	0800677d 	.word	0x0800677d
 80064fc:	0800677d 	.word	0x0800677d
 8006500:	0800677d 	.word	0x0800677d
 8006504:	0800677d 	.word	0x0800677d
 8006508:	0800677d 	.word	0x0800677d
 800650c:	0800677d 	.word	0x0800677d
 8006510:	0800677d 	.word	0x0800677d
 8006514:	0800677d 	.word	0x0800677d
 8006518:	0800677d 	.word	0x0800677d
 800651c:	0800677d 	.word	0x0800677d
 8006520:	0800677d 	.word	0x0800677d
 8006524:	0800677d 	.word	0x0800677d
 8006528:	0800677d 	.word	0x0800677d
 800652c:	0800677d 	.word	0x0800677d
 8006530:	0800677d 	.word	0x0800677d
 8006534:	0800677d 	.word	0x0800677d
 8006538:	0800677d 	.word	0x0800677d
 800653c:	0800677d 	.word	0x0800677d
 8006540:	0800677d 	.word	0x0800677d
 8006544:	0800677d 	.word	0x0800677d
 8006548:	0800677d 	.word	0x0800677d
 800654c:	0800677d 	.word	0x0800677d
 8006550:	0800677d 	.word	0x0800677d
 8006554:	080066e1 	.word	0x080066e1
 8006558:	080066b3 	.word	0x080066b3
 800655c:	08006777 	.word	0x08006777
 8006560:	080066a3 	.word	0x080066a3
 8006564:	0800677d 	.word	0x0800677d
 8006568:	0800677d 	.word	0x0800677d
 800656c:	0800677d 	.word	0x0800677d
 8006570:	0800672f 	.word	0x0800672f
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8006574:	2313      	movs	r3, #19
 8006576:	81fb      	strh	r3, [r7, #14]
            break;
 8006578:	e130      	b.n	80067dc <AL_ControlInd+0x5f0>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 800657a:	2313      	movs	r3, #19
 800657c:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 800657e:	f7ff fdf3 	bl	8006168 <BackToInitTransition>

            break;
 8006582:	e12b      	b.n	80067dc <AL_ControlInd+0x5f0>
 8006584:	20000af0 	.word	0x20000af0
 8006588:	20000ac0 	.word	0x20000ac0
 800658c:	20000ac1 	.word	0x20000ac1
 8006590:	20000ac2 	.word	0x20000ac2
 8006594:	20000ae8 	.word	0x20000ae8
 8006598:	20000afe 	.word	0x20000afe
 800659c:	20000abe 	.word	0x20000abe
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 80065a0:	f7fe fedc 	bl	800535c <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 80065a4:	4ba5      	ldr	r3, [pc, #660]	; (800683c <AL_ControlInd+0x650>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <AL_ControlInd+0x3c4>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 80065ac:	2351      	movs	r3, #81	; 0x51
 80065ae:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 80065b0:	89fb      	ldrh	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f040 8107 	bne.w	80067c6 <AL_ControlInd+0x5da>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 80065b8:	f000 fe52 	bl	8007260 <MBX_StartMailboxHandler>
 80065bc:	4603      	mov	r3, r0
 80065be:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <AL_ControlInd+0x3f4>
            {
                bApplEsmPending = FALSE;
 80065c6:	4b9e      	ldr	r3, [pc, #632]	; (8006840 <AL_ControlInd+0x654>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 80065cc:	f7fd fb59 	bl	8003c82 <APPL_StartMailboxHandler>
 80065d0:	4603      	mov	r3, r0
 80065d2:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 80065d4:	89fb      	ldrh	r3, [r7, #14]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <AL_ControlInd+0x3f4>
                {
                    bMbxRunning = TRUE;
 80065da:	4b9a      	ldr	r3, [pc, #616]	; (8006844 <AL_ControlInd+0x658>)
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 80065e0:	89fb      	ldrh	r3, [r7, #14]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80ef 	beq.w	80067c6 <AL_ControlInd+0x5da>
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	2bff      	cmp	r3, #255	; 0xff
 80065ec:	f000 80eb 	beq.w	80067c6 <AL_ControlInd+0x5da>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                if(!bApplEsmPending)
 80065f0:	4b93      	ldr	r3, [pc, #588]	; (8006840 <AL_ControlInd+0x654>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <AL_ControlInd+0x410>
                    APPL_StopMailboxHandler();
 80065f8:	f7fd fb4b 	bl	8003c92 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 80065fc:	f000 fea6 	bl	800734c <MBX_StopMailboxHandler>
            }

            }
            break;
 8006600:	e0e1      	b.n	80067c6 <AL_ControlInd+0x5da>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 8006602:	f7ff f933 	bl	800586c <StartInputHandler>
 8006606:	4603      	mov	r3, r0
 8006608:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d112      	bne.n	8006636 <AL_ControlInd+0x44a>
            {
                bApplEsmPending = FALSE;
 8006610:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <AL_ControlInd+0x654>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 8006616:	488c      	ldr	r0, [pc, #560]	; (8006848 <AL_ControlInd+0x65c>)
 8006618:	f7fd fb43 	bl	8003ca2 <APPL_StartInputHandler>
 800661c:	4603      	mov	r3, r0
 800661e:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8006620:	89fb      	ldrh	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <AL_ControlInd+0x44a>
                {
                    /* initialize the AL Event Mask register (0x204) */
/*ECATCHANGE_START(V5.11) HW1*/
                    SetALEventMask( u16ALEventMask );
 8006626:	4b88      	ldr	r3, [pc, #544]	; (8006848 <AL_ControlInd+0x65c>)
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fe72 	bl	8005314 <SetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/

                    bEcatInputUpdateRunning = TRUE;
 8006630:	4b86      	ldr	r3, [pc, #536]	; (800684c <AL_ControlInd+0x660>)
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 8006636:	89fb      	ldrh	r3, [r7, #14]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80c6 	beq.w	80067ca <AL_ControlInd+0x5de>
 800663e:	89fb      	ldrh	r3, [r7, #14]
 8006640:	2bff      	cmp	r3, #255	; 0xff
 8006642:	f000 80c2 	beq.w	80067ca <AL_ControlInd+0x5de>
            {
                if(!bApplEsmPending)
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <AL_ControlInd+0x654>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <AL_ControlInd+0x466>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 800664e:	f7fd fb33 	bl	8003cb8 <APPL_StopInputHandler>
                }

                StopInputHandler();
 8006652:	f7ff fd05 	bl	8006060 <StopInputHandler>
            }
            break;
 8006656:	e0b8      	b.n	80067ca <AL_ControlInd+0x5de>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8006658:	f7ff fcc8 	bl	8005fec <StartOutputHandler>
 800665c:	4603      	mov	r3, r0
 800665e:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <AL_ControlInd+0x494>
            {
                bApplEsmPending = FALSE;
 8006666:	4b76      	ldr	r3, [pc, #472]	; (8006840 <AL_ControlInd+0x654>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 800666c:	f7fd fb2c 	bl	8003cc8 <APPL_StartOutputHandler>
 8006670:	4603      	mov	r3, r0
 8006672:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8006674:	89fb      	ldrh	r3, [r7, #14]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <AL_ControlInd+0x494>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 800667a:	4b75      	ldr	r3, [pc, #468]	; (8006850 <AL_ControlInd+0x664>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a3 	beq.w	80067ce <AL_ControlInd+0x5e2>
 8006688:	89fb      	ldrh	r3, [r7, #14]
 800668a:	2bff      	cmp	r3, #255	; 0xff
 800668c:	f000 809f 	beq.w	80067ce <AL_ControlInd+0x5e2>
            {
                if(!bApplEsmPending)
 8006690:	4b6b      	ldr	r3, [pc, #428]	; (8006840 <AL_ControlInd+0x654>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <AL_ControlInd+0x4b0>
                    APPL_StopOutputHandler();
 8006698:	f7fd fb1e 	bl	8003cd8 <APPL_StopOutputHandler>

                StopOutputHandler();
 800669c:	f7ff fcce 	bl	800603c <StopOutputHandler>
            }

            break;
 80066a0:	e095      	b.n	80067ce <AL_ControlInd+0x5e2>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 80066a2:	f7fd fb19 	bl	8003cd8 <APPL_StopOutputHandler>

            StopOutputHandler();
 80066a6:	f7ff fcc9 	bl	800603c <StopOutputHandler>

            bApplEsmPending = FALSE;
 80066aa:	4b65      	ldr	r3, [pc, #404]	; (8006840 <AL_ControlInd+0x654>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]

            break;
 80066b0:	e094      	b.n	80067dc <AL_ControlInd+0x5f0>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 80066b2:	f7fd fb11 	bl	8003cd8 <APPL_StopOutputHandler>
 80066b6:	4603      	mov	r3, r0
 80066b8:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80066ba:	f7ff fcbf 	bl	800603c <StopOutputHandler>

            bApplEsmPending = FALSE;
 80066be:	4b60      	ldr	r3, [pc, #384]	; (8006840 <AL_ControlInd+0x654>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80066c4:	89fb      	ldrh	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8083 	bne.w	80067d2 <AL_ControlInd+0x5e6>
                break;

            stateTrans = SAFEOP_2_PREOP;
 80066cc:	2342      	movs	r3, #66	; 0x42
 80066ce:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 80066d0:	f7fd faf2 	bl	8003cb8 <APPL_StopInputHandler>
           
            StopInputHandler();
 80066d4:	f7ff fcc4 	bl	8006060 <StopInputHandler>

            bApplEsmPending = FALSE;
 80066d8:	4b59      	ldr	r3, [pc, #356]	; (8006840 <AL_ControlInd+0x654>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]

            break;
 80066de:	e07d      	b.n	80067dc <AL_ControlInd+0x5f0>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 80066e0:	f7fd fafa 	bl	8003cd8 <APPL_StopOutputHandler>
 80066e4:	4603      	mov	r3, r0
 80066e6:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80066e8:	f7ff fca8 	bl	800603c <StopOutputHandler>

            bApplEsmPending = FALSE;
 80066ec:	4b54      	ldr	r3, [pc, #336]	; (8006840 <AL_ControlInd+0x654>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80066f2:	89fb      	ldrh	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d16e      	bne.n	80067d6 <AL_ControlInd+0x5ea>
                break;
            
            stateTrans = SAFEOP_2_INIT;
 80066f8:	2341      	movs	r3, #65	; 0x41
 80066fa:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 80066fc:	f7fd fadc 	bl	8003cb8 <APPL_StopInputHandler>
 8006700:	4603      	mov	r3, r0
 8006702:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 8006704:	f7ff fcac 	bl	8006060 <StopInputHandler>

            bApplEsmPending = FALSE;
 8006708:	4b4d      	ldr	r3, [pc, #308]	; (8006840 <AL_ControlInd+0x654>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 800670e:	89fb      	ldrh	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d162      	bne.n	80067da <AL_ControlInd+0x5ee>
                break;
            stateTrans = PREOP_2_INIT;
 8006714:	2321      	movs	r3, #33	; 0x21
 8006716:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8006718:	f000 fe18 	bl	800734c <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 800671c:	f7fd fab9 	bl	8003c92 <APPL_StopMailboxHandler>
 8006720:	4603      	mov	r3, r0
 8006722:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8006724:	f7ff fd20 	bl	8006168 <BackToInitTransition>
            break;
 8006728:	e058      	b.n	80067dc <AL_ControlInd+0x5f0>

        case INIT_2_INIT:
            BackToInitTransition();
 800672a:	f7ff fd1d 	bl	8006168 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 800672e:	7b7b      	ldrb	r3, [r7, #13]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <AL_ControlInd+0x552>
                APPL_AckErrorInd(stateTrans);
 8006734:	7b3b      	ldrb	r3, [r7, #12]
 8006736:	b29b      	uxth	r3, r3
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd fa97 	bl	8003c6c <APPL_AckErrorInd>

            if(!bLocalErrorFlag)
 800673e:	4b45      	ldr	r3, [pc, #276]	; (8006854 <AL_ControlInd+0x668>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d114      	bne.n	8006770 <AL_ControlInd+0x584>
            {
                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <AL_ControlInd+0x66c>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <AL_ControlInd+0x584>
                {
                    if(nPdOutputSize > 0)
 8006752:	4b42      	ldr	r3, [pc, #264]	; (800685c <AL_ControlInd+0x670>)
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <AL_ControlInd+0x576>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 800675a:	2002      	movs	r0, #2
 800675c:	f7fe fe64 	bl	8005428 <EnableSyncManChannel>
 8006760:	e006      	b.n	8006770 <AL_ControlInd+0x584>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                    else 
                    if(nPdInputSize > 0)
 8006762:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <AL_ControlInd+0x674>)
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <AL_ControlInd+0x584>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_IN);
 800676a:	2003      	movs	r0, #3
 800676c:	f7fe fe5c 	bl	8005428 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                }
            }
            result = NOERROR_NOSTATECHANGE;
 8006770:	23fe      	movs	r3, #254	; 0xfe
 8006772:	81fb      	strh	r3, [r7, #14]
            break;
 8006774:	e032      	b.n	80067dc <AL_ControlInd+0x5f0>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8006776:	2311      	movs	r3, #17
 8006778:	81fb      	strh	r3, [r7, #14]
            break;
 800677a:	e02f      	b.n	80067dc <AL_ControlInd+0x5f0>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 800677c:	2312      	movs	r3, #18
 800677e:	81fb      	strh	r3, [r7, #14]
            break;
 8006780:	e02c      	b.n	80067dc <AL_ControlInd+0x5f0>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8006782:	4b35      	ldr	r3, [pc, #212]	; (8006858 <AL_ControlInd+0x66c>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b08      	cmp	r3, #8
 8006788:	d006      	beq.n	8006798 <AL_ControlInd+0x5ac>
 800678a:	2b08      	cmp	r3, #8
 800678c:	dc26      	bgt.n	80067dc <AL_ControlInd+0x5f0>
 800678e:	2b02      	cmp	r3, #2
 8006790:	d00a      	beq.n	80067a8 <AL_ControlInd+0x5bc>
 8006792:	2b04      	cmp	r3, #4
 8006794:	d004      	beq.n	80067a0 <AL_ControlInd+0x5b4>
 8006796:	e021      	b.n	80067dc <AL_ControlInd+0x5f0>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8006798:	f7fd fa9e 	bl	8003cd8 <APPL_StopOutputHandler>
            StopOutputHandler();
 800679c:	f7ff fc4e 	bl	800603c <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 80067a0:	f7fd fa8a 	bl	8003cb8 <APPL_StopInputHandler>

            StopInputHandler();
 80067a4:	f7ff fc5c 	bl	8006060 <StopInputHandler>

        case STATE_PREOP:

            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	2b16      	cmp	r3, #22
 80067ac:	d107      	bne.n	80067be <AL_ControlInd+0x5d2>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 80067ae:	f000 fdcd 	bl	800734c <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 80067b2:	f7fd fa6e 	bl	8003c92 <APPL_StopMailboxHandler>

                nAlStatus = STATE_INIT;
 80067b6:	4b28      	ldr	r3, [pc, #160]	; (8006858 <AL_ControlInd+0x66c>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e00e      	b.n	80067dc <AL_ControlInd+0x5f0>
            }
            else
                nAlStatus = STATE_PREOP;
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <AL_ControlInd+0x66c>)
 80067c0:	2202      	movs	r2, #2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e00a      	b.n	80067dc <AL_ControlInd+0x5f0>
            break;
 80067c6:	bf00      	nop
 80067c8:	e008      	b.n	80067dc <AL_ControlInd+0x5f0>
            break;
 80067ca:	bf00      	nop
 80067cc:	e006      	b.n	80067dc <AL_ControlInd+0x5f0>
            break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <AL_ControlInd+0x5f0>
                break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <AL_ControlInd+0x5f0>
                break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <AL_ControlInd+0x5f0>
                break;
 80067da:	bf00      	nop
        }
    }

    if ( result == NOERROR_INWORK )
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	d146      	bne.n	8006870 <AL_ControlInd+0x684>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 80067e2:	4b20      	ldr	r3, [pc, #128]	; (8006864 <AL_ControlInd+0x678>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 80067e8:	7b3b      	ldrb	r3, [r7, #12]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <AL_ControlInd+0x67c>)
 80067ee:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <AL_ControlInd+0x67c>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	2b48      	cmp	r3, #72	; 0x48
 80067f6:	d00e      	beq.n	8006816 <AL_ControlInd+0x62a>
 80067f8:	2b48      	cmp	r3, #72	; 0x48
 80067fa:	dc11      	bgt.n	8006820 <AL_ControlInd+0x634>
 80067fc:	2b13      	cmp	r3, #19
 80067fe:	dc02      	bgt.n	8006806 <AL_ControlInd+0x61a>
 8006800:	2b12      	cmp	r3, #18
 8006802:	da03      	bge.n	800680c <AL_ControlInd+0x620>
 8006804:	e00c      	b.n	8006820 <AL_ControlInd+0x634>
 8006806:	2b24      	cmp	r3, #36	; 0x24
 8006808:	d005      	beq.n	8006816 <AL_ControlInd+0x62a>
 800680a:	e009      	b.n	8006820 <AL_ControlInd+0x634>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 800680c:	4b17      	ldr	r3, [pc, #92]	; (800686c <AL_ControlInd+0x680>)
 800680e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006812:	801a      	strh	r2, [r3, #0]
            break;
 8006814:	e008      	b.n	8006828 <AL_ControlInd+0x63c>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <AL_ControlInd+0x680>)
 8006818:	f242 3228 	movw	r2, #9000	; 0x2328
 800681c:	801a      	strh	r2, [r3, #0]
                break;
 800681e:	e003      	b.n	8006828 <AL_ControlInd+0x63c>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 8006820:	4b12      	ldr	r3, [pc, #72]	; (800686c <AL_ControlInd+0x680>)
 8006822:	22c8      	movs	r2, #200	; 0xc8
 8006824:	801a      	strh	r2, [r3, #0]
                break;
 8006826:	bf00      	nop
        }
        EsmTimeoutCounter -= 50; //subtract 50ms from the timeout to react before the master runs into a timeout.
 8006828:	4b10      	ldr	r3, [pc, #64]	; (800686c <AL_ControlInd+0x680>)
 800682a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b32      	subs	r3, #50	; 0x32
 8006832:	b29b      	uxth	r3, r3
 8006834:	b21a      	sxth	r2, r3
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <AL_ControlInd+0x680>)
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e07a      	b.n	8006932 <AL_ControlInd+0x746>
 800683c:	200005d4 	.word	0x200005d4
 8006840:	20000ac0 	.word	0x20000ac0
 8006844:	20000d72 	.word	0x20000d72
 8006848:	20000ad8 	.word	0x20000ad8
 800684c:	20000af8 	.word	0x20000af8
 8006850:	20000af3 	.word	0x20000af3
 8006854:	20000aca 	.word	0x20000aca
 8006858:	20000ac1 	.word	0x20000ac1
 800685c:	20000ac2 	.word	0x20000ac2
 8006860:	20000ae8 	.word	0x20000ae8
 8006864:	20000ae6 	.word	0x20000ae6
 8006868:	20000abe 	.word	0x20000abe
 800686c:	20000af0 	.word	0x20000af0

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8006870:	79fa      	ldrb	r2, [r7, #7]
 8006872:	4b31      	ldr	r3, [pc, #196]	; (8006938 <AL_ControlInd+0x74c>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	429a      	cmp	r2, r3
 800687c:	d04e      	beq.n	800691c <AL_ControlInd+0x730>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <AL_ControlInd+0x69e>
 8006884:	88bb      	ldrh	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01f      	beq.n	80068ca <AL_ControlInd+0x6de>
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <AL_ControlInd+0x74c>)
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	4313      	orrs	r3, r2
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d016      	beq.n	80068ca <AL_ControlInd+0x6de>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 800689c:	4b27      	ldr	r3, [pc, #156]	; (800693c <AL_ControlInd+0x750>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <AL_ControlInd+0x6c0>
            {
                APPL_StopOutputHandler();
 80068a4:	f7fd fa18 	bl	8003cd8 <APPL_StopOutputHandler>

                StopOutputHandler();
 80068a8:	f7ff fbc8 	bl	800603c <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 80068ac:	4b24      	ldr	r3, [pc, #144]	; (8006940 <AL_ControlInd+0x754>)
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <AL_ControlInd+0x6d0>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_OUT);
 80068b4:	2002      	movs	r0, #2
 80068b6:	f7fe fd8f 	bl	80053d8 <DisableSyncManChannel>
 80068ba:	e006      	b.n	80068ca <AL_ControlInd+0x6de>
/*ECATCHANGE_END(V5.11) HW1*/
            }
            else
                if(nPdInputSize > 0)
 80068bc:	4b21      	ldr	r3, [pc, #132]	; (8006944 <AL_ControlInd+0x758>)
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <AL_ControlInd+0x6de>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 80068c4:	2003      	movs	r0, #3
 80068c6:	f7fe fd87 	bl	80053d8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
            }

        }
        if ( result != 0 )
 80068ca:	89fb      	ldrh	r3, [r7, #14]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00e      	beq.n	80068ee <AL_ControlInd+0x702>
        {
            if ( nAlStatus == STATE_OP )
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <AL_ControlInd+0x74c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d102      	bne.n	80068de <AL_ControlInd+0x6f2>
                nAlStatus = STATE_SAFEOP;
 80068d8:	4b17      	ldr	r3, [pc, #92]	; (8006938 <AL_ControlInd+0x74c>)
 80068da:	2204      	movs	r2, #4
 80068dc:	701a      	strb	r2, [r3, #0]
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <AL_ControlInd+0x74c>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f043 0310 	orr.w	r3, r3, #16
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <AL_ControlInd+0x74c>)
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e00b      	b.n	8006906 <AL_ControlInd+0x71a>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 80068ee:	88bb      	ldrh	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <AL_ControlInd+0x714>
            {
                /* state change request from the user */
                result = alStatusCode;
 80068f4:	88bb      	ldrh	r3, [r7, #4]
 80068f6:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	f043 0310 	orr.w	r3, r3, #16
 80068fe:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 8006900:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <AL_ControlInd+0x74c>)
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <AL_ControlInd+0x75c>)
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <AL_ControlInd+0x74c>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	89fa      	ldrh	r2, [r7, #14]
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fc33 	bl	8006180 <SetALStatus>
 800691a:	e00a      	b.n	8006932 <AL_ControlInd+0x746>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <AL_ControlInd+0x75c>)
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <AL_ControlInd+0x74c>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fc29 	bl	8006180 <SetALStatus>
 800692e:	e000      	b.n	8006932 <AL_ControlInd+0x746>
        return;
 8006930:	bf00      	nop
    }

}
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000ac1 	.word	0x20000ac1
 800693c:	20000af3 	.word	0x20000af3
 8006940:	20000ac2 	.word	0x20000ac2
 8006944:	20000ae8 	.word	0x20000ae8
 8006948:	20000ae6 	.word	0x20000ae6

0800694c <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8006952:	4b9b      	ldr	r3, [pc, #620]	; (8006bc0 <AL_ControlRes+0x274>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 812d 	beq.w	8006bb6 <AL_ControlRes+0x26a>
    {
        UINT16 result = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8006968:	4b96      	ldr	r3, [pc, #600]	; (8006bc4 <AL_ControlRes+0x278>)
 800696a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d16d      	bne.n	8006a4e <AL_ControlRes+0x102>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8006972:	4b95      	ldr	r3, [pc, #596]	; (8006bc8 <AL_ControlRes+0x27c>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	b29b      	uxth	r3, r3
 800697a:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 800697c:	4b92      	ldr	r3, [pc, #584]	; (8006bc8 <AL_ControlRes+0x27c>)
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	2b48      	cmp	r3, #72	; 0x48
 8006982:	d030      	beq.n	80069e6 <AL_ControlRes+0x9a>
 8006984:	2b48      	cmp	r3, #72	; 0x48
 8006986:	f300 8103 	bgt.w	8006b90 <AL_ControlRes+0x244>
 800698a:	2b13      	cmp	r3, #19
 800698c:	dc02      	bgt.n	8006994 <AL_ControlRes+0x48>
 800698e:	2b12      	cmp	r3, #18
 8006990:	da03      	bge.n	800699a <AL_ControlRes+0x4e>
 8006992:	e0fd      	b.n	8006b90 <AL_ControlRes+0x244>
 8006994:	2b24      	cmp	r3, #36	; 0x24
 8006996:	d013      	beq.n	80069c0 <AL_ControlRes+0x74>
 8006998:	e0fa      	b.n	8006b90 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                    if(!bApplEsmPending)
 800699a:	4b8c      	ldr	r3, [pc, #560]	; (8006bcc <AL_ControlRes+0x280>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <AL_ControlRes+0x5a>
                        APPL_StopMailboxHandler();
 80069a2:	f7fd f976 	bl	8003c92 <APPL_StopMailboxHandler>

                    MBX_StopMailboxHandler();
 80069a6:	f000 fcd1 	bl	800734c <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 80069aa:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <AL_ControlRes+0x284>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <AL_ControlRes+0x6e>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80069b2:	4b88      	ldr	r3, [pc, #544]	; (8006bd4 <AL_ControlRes+0x288>)
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80069b8:	e0ea      	b.n	8006b90 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	80bb      	strh	r3, [r7, #4]
                break;
 80069be:	e0e7      	b.n	8006b90 <AL_ControlRes+0x244>
                case PREOP_2_SAFEOP:
                    if(!bApplEsmPending)
 80069c0:	4b82      	ldr	r3, [pc, #520]	; (8006bcc <AL_ControlRes+0x280>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <AL_ControlRes+0x80>
                        APPL_StopInputHandler();
 80069c8:	f7fd f976 	bl	8003cb8 <APPL_StopInputHandler>

                    StopInputHandler();
 80069cc:	f7ff fb48 	bl	8006060 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 80069d0:	4b7f      	ldr	r3, [pc, #508]	; (8006bd0 <AL_ControlRes+0x284>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <AL_ControlRes+0x94>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80069d8:	4b7e      	ldr	r3, [pc, #504]	; (8006bd4 <AL_ControlRes+0x288>)
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80069de:	e0d7      	b.n	8006b90 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	80bb      	strh	r3, [r7, #4]
                break;
 80069e4:	e0d4      	b.n	8006b90 <AL_ControlRes+0x244>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 80069e6:	4b7c      	ldr	r3, [pc, #496]	; (8006bd8 <AL_ControlRes+0x28c>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d014      	beq.n	8006a18 <AL_ControlRes+0xcc>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning) //
 80069ee:	4b7b      	ldr	r3, [pc, #492]	; (8006bdc <AL_ControlRes+0x290>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <AL_ControlRes+0xb0>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 80069f6:	232d      	movs	r3, #45	; 0x2d
 80069f8:	80bb      	strh	r3, [r7, #4]
 80069fa:	e01b      	b.n	8006a34 <AL_ControlRes+0xe8>
                        }
/*ECATCHANGE_START(V5.11) ECAT4*/
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 80069fc:	4b78      	ldr	r3, [pc, #480]	; (8006be0 <AL_ControlRes+0x294>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <AL_ControlRes+0xc6>
 8006a04:	4b77      	ldr	r3, [pc, #476]	; (8006be4 <AL_ControlRes+0x298>)
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <AL_ControlRes+0xc6>
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8006a0c:	231b      	movs	r3, #27
 8006a0e:	80bb      	strh	r3, [r7, #4]
 8006a10:	e010      	b.n	8006a34 <AL_ControlRes+0xe8>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 8006a12:	231a      	movs	r3, #26
 8006a14:	80bb      	strh	r3, [r7, #4]
 8006a16:	e00d      	b.n	8006a34 <AL_ControlRes+0xe8>
                        }
                    }
                    else
                    {
/*ECATCHANGE_START(V5.11) ECAT4*/
                        if (nPdOutputSize > 0)
 8006a18:	4b72      	ldr	r3, [pc, #456]	; (8006be4 <AL_ControlRes+0x298>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <AL_ControlRes+0xda>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8006a20:	231b      	movs	r3, #27
 8006a22:	80bb      	strh	r3, [r7, #4]
 8006a24:	e006      	b.n	8006a34 <AL_ControlRes+0xe8>
                        }
                        else
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 8006a26:	2308      	movs	r3, #8
 8006a28:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 8006a2e:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <AL_ControlRes+0x29c>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8006a34:	88bb      	ldrh	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80a3 	beq.w	8006b82 <AL_ControlRes+0x236>
                    {
                        if(!bApplEsmPending)
 8006a3c:	4b63      	ldr	r3, [pc, #396]	; (8006bcc <AL_ControlRes+0x280>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <AL_ControlRes+0xfc>
                            APPL_StopOutputHandler();
 8006a44:	f7fd f948 	bl	8003cd8 <APPL_StopOutputHandler>

                        StopOutputHandler();
 8006a48:	f7ff faf8 	bl	800603c <StopOutputHandler>
                    }
                break;
 8006a4c:	e099      	b.n	8006b82 <AL_ControlRes+0x236>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8006a4e:	4b5e      	ldr	r3, [pc, #376]	; (8006bc8 <AL_ControlRes+0x27c>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	2b48      	cmp	r3, #72	; 0x48
 8006a54:	d048      	beq.n	8006ae8 <AL_ControlRes+0x19c>
 8006a56:	2b48      	cmp	r3, #72	; 0x48
 8006a58:	f300 809a 	bgt.w	8006b90 <AL_ControlRes+0x244>
 8006a5c:	2b13      	cmp	r3, #19
 8006a5e:	dc02      	bgt.n	8006a66 <AL_ControlRes+0x11a>
 8006a60:	2b12      	cmp	r3, #18
 8006a62:	da03      	bge.n	8006a6c <AL_ControlRes+0x120>
 8006a64:	e094      	b.n	8006b90 <AL_ControlRes+0x244>
 8006a66:	2b24      	cmp	r3, #36	; 0x24
 8006a68:	d021      	beq.n	8006aae <AL_ControlRes+0x162>
 8006a6a:	e091      	b.n	8006b90 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 8006a6c:	4b57      	ldr	r3, [pc, #348]	; (8006bcc <AL_ControlRes+0x280>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8088 	beq.w	8006b86 <AL_ControlRes+0x23a>
                    {
                        bApplEsmPending = FALSE;
 8006a76:	4b55      	ldr	r3, [pc, #340]	; (8006bcc <AL_ControlRes+0x280>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 8006a7c:	f7fd f901 	bl	8003c82 <APPL_StartMailboxHandler>
 8006a80:	4603      	mov	r3, r0
 8006a82:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <AL_ControlRes+0x152>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 8006a8a:	4b58      	ldr	r3, [pc, #352]	; (8006bec <AL_ControlRes+0x2a0>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8006a90:	4b4d      	ldr	r3, [pc, #308]	; (8006bc8 <AL_ControlRes+0x27c>)
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	71fb      	strb	r3, [r7, #7]
                                APPL_StopMailboxHandler();
                                MBX_StopMailboxHandler();
                            }
                        }
                    }
                break;
 8006a9c:	e073      	b.n	8006b86 <AL_ControlRes+0x23a>
                            if(result != NOERROR_INWORK)
 8006a9e:	887b      	ldrh	r3, [r7, #2]
 8006aa0:	2bff      	cmp	r3, #255	; 0xff
 8006aa2:	d070      	beq.n	8006b86 <AL_ControlRes+0x23a>
                                APPL_StopMailboxHandler();
 8006aa4:	f7fd f8f5 	bl	8003c92 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8006aa8:	f000 fc50 	bl	800734c <MBX_StopMailboxHandler>
                break;
 8006aac:	e06b      	b.n	8006b86 <AL_ControlRes+0x23a>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8006aae:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <AL_ControlRes+0x280>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d069      	beq.n	8006b8a <AL_ControlRes+0x23e>
                    {
                        bApplEsmPending = FALSE;
 8006ab6:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <AL_ControlRes+0x280>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 8006abc:	484c      	ldr	r0, [pc, #304]	; (8006bf0 <AL_ControlRes+0x2a4>)
 8006abe:	f7fd f8f0 	bl	8003ca2 <APPL_StartInputHandler>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <AL_ControlRes+0x18c>
                        {
                            bEcatInputUpdateRunning = TRUE;
 8006acc:	4b49      	ldr	r3, [pc, #292]	; (8006bf4 <AL_ControlRes+0x2a8>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	71fb      	strb	r3, [r7, #7]
                                APPL_StopInputHandler();
                                StopInputHandler();
                            }
                        }
                    }
                break;
 8006ad6:	e058      	b.n	8006b8a <AL_ControlRes+0x23e>
                            if(result != NOERROR_INWORK)
 8006ad8:	887b      	ldrh	r3, [r7, #2]
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d055      	beq.n	8006b8a <AL_ControlRes+0x23e>
                                APPL_StopInputHandler();
 8006ade:	f7fd f8eb 	bl	8003cb8 <APPL_StopInputHandler>
                                StopInputHandler();
 8006ae2:	f7ff fabd 	bl	8006060 <StopInputHandler>
                break;
 8006ae6:	e050      	b.n	8006b8a <AL_ControlRes+0x23e>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 8006ae8:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <AL_ControlRes+0x280>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d04e      	beq.n	8006b8e <AL_ControlRes+0x242>
                    {
                        if(bDcSyncActive)
 8006af0:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <AL_ControlRes+0x28c>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d027      	beq.n	8006b48 <AL_ControlRes+0x1fc>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 8006af8:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <AL_ControlRes+0x2ac>)
 8006afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd45      	ble.n	8006b8e <AL_ControlRes+0x242>
 8006b02:	4b3d      	ldr	r3, [pc, #244]	; (8006bf8 <AL_ControlRes+0x2ac>)
 8006b04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006b08:	4b3c      	ldr	r3, [pc, #240]	; (8006bfc <AL_ControlRes+0x2b0>)
 8006b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	dc3d      	bgt.n	8006b8e <AL_ControlRes+0x242>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 8006b12:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <AL_ControlRes+0x2ac>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 8006b18:	4b38      	ldr	r3, [pc, #224]	; (8006bfc <AL_ControlRes+0x2b0>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	801a      	strh	r2, [r3, #0]

                                result = APPL_StartOutputHandler();
 8006b1e:	f7fd f8d3 	bl	8003cc8 <APPL_StartOutputHandler>
 8006b22:	4603      	mov	r3, r0
 8006b24:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8006b26:	887b      	ldrh	r3, [r7, #2]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <AL_ControlRes+0x1ec>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <AL_ControlRes+0x29c>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8006b32:	2308      	movs	r3, #8
 8006b34:	71fb      	strb	r3, [r7, #7]
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8006b36:	e02a      	b.n	8006b8e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8006b38:	887b      	ldrh	r3, [r7, #2]
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d027      	beq.n	8006b8e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 8006b3e:	f7fd f8cb 	bl	8003cd8 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8006b42:	f7ff fa7b 	bl	800603c <StopOutputHandler>
                break;
 8006b46:	e022      	b.n	8006b8e <AL_ControlRes+0x242>
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8006b48:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <AL_ControlRes+0x298>)
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <AL_ControlRes+0x20c>
 8006b50:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <AL_ControlRes+0x294>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01a      	beq.n	8006b8e <AL_ControlRes+0x242>
                                result = APPL_StartOutputHandler();
 8006b58:	f7fd f8b6 	bl	8003cc8 <APPL_StartOutputHandler>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	807b      	strh	r3, [r7, #2]
                                if(result == 0)
 8006b60:	887b      	ldrh	r3, [r7, #2]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <AL_ControlRes+0x226>
                                    bEcatOutputUpdateRunning = TRUE;
 8006b66:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <AL_ControlRes+0x29c>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	71fb      	strb	r3, [r7, #7]
                break;
 8006b70:	e00d      	b.n	8006b8e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8006b72:	887b      	ldrh	r3, [r7, #2]
 8006b74:	2bff      	cmp	r3, #255	; 0xff
 8006b76:	d00a      	beq.n	8006b8e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 8006b78:	f7fd f8ae 	bl	8003cd8 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8006b7c:	f7ff fa5e 	bl	800603c <StopOutputHandler>
                break;
 8006b80:	e005      	b.n	8006b8e <AL_ControlRes+0x242>
                break;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <AL_ControlRes+0x244>
                break;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <AL_ControlRes+0x244>
                break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <AL_ControlRes+0x244>
                break;
 8006b8e:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00f      	beq.n	8006bb6 <AL_ControlRes+0x26a>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <AL_ControlRes+0x274>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8006b9c:	88bb      	ldrh	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <AL_ControlRes+0x25e>
            {
                Status |= STATE_CHANGE;
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	f043 0310 	orr.w	r3, r3, #16
 8006ba8:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8006baa:	88ba      	ldrh	r2, [r7, #4]
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fae5 	bl	8006180 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000ae6 	.word	0x20000ae6
 8006bc4:	20000af0 	.word	0x20000af0
 8006bc8:	20000abe 	.word	0x20000abe
 8006bcc:	20000ac0 	.word	0x20000ac0
 8006bd0:	20000aca 	.word	0x20000aca
 8006bd4:	20000ac4 	.word	0x20000ac4
 8006bd8:	20000af2 	.word	0x20000af2
 8006bdc:	20000ada 	.word	0x20000ada
 8006be0:	20000aee 	.word	0x20000aee
 8006be4:	20000ac2 	.word	0x20000ac2
 8006be8:	20000af3 	.word	0x20000af3
 8006bec:	20000d72 	.word	0x20000d72
 8006bf0:	20000ad8 	.word	0x20000ad8
 8006bf4:	20000af8 	.word	0x20000af8
 8006bf8:	20000ad4 	.word	0x20000ad4
 8006bfc:	20000ace 	.word	0x20000ace

08006c00 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
    if(bDcSyncActive)
 8006c04:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <DC_CheckWatchdog+0xf0>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d06b      	beq.n	8006ce4 <DC_CheckWatchdog+0xe4>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8006c0c:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <DC_CheckWatchdog+0xf4>)
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <DC_CheckWatchdog+0x28>
 8006c14:	4b38      	ldr	r3, [pc, #224]	; (8006cf8 <DC_CheckWatchdog+0xf8>)
 8006c16:	881a      	ldrh	r2, [r3, #0]
 8006c18:	4b36      	ldr	r3, [pc, #216]	; (8006cf4 <DC_CheckWatchdog+0xf4>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d303      	bcc.n	8006c28 <DC_CheckWatchdog+0x28>
        {
                /*Sync0 watchdog expired*/

					bDcRunning = FALSE;        
 8006c20:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <DC_CheckWatchdog+0xfc>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e00e      	b.n	8006c46 <DC_CheckWatchdog+0x46>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8006c28:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <DC_CheckWatchdog+0xf8>)
 8006c2a:	881a      	ldrh	r2, [r3, #0]
 8006c2c:	4b31      	ldr	r3, [pc, #196]	; (8006cf4 <DC_CheckWatchdog+0xf4>)
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d205      	bcs.n	8006c40 <DC_CheckWatchdog+0x40>
            {
                Sync0WdCounter ++;
 8006c34:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <DC_CheckWatchdog+0xf8>)
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <DC_CheckWatchdog+0xf8>)
 8006c3e:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8006c40:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <DC_CheckWatchdog+0xfc>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 8006c46:	4b2d      	ldr	r3, [pc, #180]	; (8006cfc <DC_CheckWatchdog+0xfc>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d013      	beq.n	8006c76 <DC_CheckWatchdog+0x76>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8006c4e:	4b2c      	ldr	r3, [pc, #176]	; (8006d00 <DC_CheckWatchdog+0x100>)
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00f      	beq.n	8006c76 <DC_CheckWatchdog+0x76>
            {
                if(Sync1WdCounter < Sync1WdValue)
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <DC_CheckWatchdog+0x104>)
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <DC_CheckWatchdog+0x100>)
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d206      	bcs.n	8006c70 <DC_CheckWatchdog+0x70>
                {
                    Sync1WdCounter ++;
 8006c62:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <DC_CheckWatchdog+0x104>)
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <DC_CheckWatchdog+0x104>)
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <DC_CheckWatchdog+0x76>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8006c70:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <DC_CheckWatchdog+0xfc>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 8006c76:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <DC_CheckWatchdog+0xfc>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d02b      	beq.n	8006cd6 <DC_CheckWatchdog+0xd6>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8006c7e:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <DC_CheckWatchdog+0x108>)
 8006c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c82:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <DC_CheckWatchdog+0x10c>)
 8006c84:	891b      	ldrh	r3, [r3, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d211      	bcs.n	8006cae <DC_CheckWatchdog+0xae>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 8006c8a:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <DC_CheckWatchdog+0x110>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <DC_CheckWatchdog+0x114>)
 8006c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd24      	ble.n	8006ce4 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt++;
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <DC_CheckWatchdog+0x118>)
 8006c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	b21a      	sxth	r2, r3
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <DC_CheckWatchdog+0x118>)
 8006caa:	801a      	strh	r2, [r3, #0]
        {
            bSmSyncSequenceValid = FALSE;
        }

    }
}
 8006cac:	e01a      	b.n	8006ce4 <DC_CheckWatchdog+0xe4>
            else if(bSmSyncSequenceValid)
 8006cae:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <DC_CheckWatchdog+0x110>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <DC_CheckWatchdog+0xe4>
                bSmSyncSequenceValid = FALSE;
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <DC_CheckWatchdog+0x110>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <DC_CheckWatchdog+0x108>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                if(i16WaitForPllRunningTimeout > 0)
 8006cc4:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <DC_CheckWatchdog+0x114>)
 8006cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dd0a      	ble.n	8006ce4 <DC_CheckWatchdog+0xe4>
                    i16WaitForPllRunningCnt = 0;
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <DC_CheckWatchdog+0x118>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	801a      	strh	r2, [r3, #0]
}
 8006cd4:	e006      	b.n	8006ce4 <DC_CheckWatchdog+0xe4>
        else if(bSmSyncSequenceValid)
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <DC_CheckWatchdog+0x110>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <DC_CheckWatchdog+0xe4>
            bSmSyncSequenceValid = FALSE;
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <DC_CheckWatchdog+0x110>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000af2 	.word	0x20000af2
 8006cf4:	20000ad2 	.word	0x20000ad2
 8006cf8:	20000ac6 	.word	0x20000ac6
 8006cfc:	20000ada 	.word	0x20000ada
 8006d00:	20000ad6 	.word	0x20000ad6
 8006d04:	20000af4 	.word	0x20000af4
 8006d08:	20000ddc 	.word	0x20000ddc
 8006d0c:	20000528 	.word	0x20000528
 8006d10:	20000aef 	.word	0x20000aef
 8006d14:	20000ad4 	.word	0x20000ad4
 8006d18:	20000ace 	.word	0x20000ace

08006d1c <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 8006d22:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <CheckIfEcatError+0x88>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01f      	beq.n	8006d6a <CheckIfEcatError+0x4e>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8006d2e:	1dbb      	adds	r3, r7, #6
 8006d30:	2202      	movs	r2, #2
 8006d32:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fd fc00 	bl	800453c <HW_EscRead>
      WdStatusOK = SWAPWORD(WdStatusOK);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	80fb      	strh	r3, [r7, #6]

      /*ECATCHANGE_START(V5.11) ECAT4*/
      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <CheckIfEcatError+0x4e>
 8006d4a:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <CheckIfEcatError+0x8c>)
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <CheckIfEcatError+0x4e>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning)
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <CheckIfEcatError+0x90>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <CheckIfEcatError+0x48>
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8006d5a:	211b      	movs	r1, #27
 8006d5c:	2004      	movs	r0, #4
 8006d5e:	f7ff fa45 	bl	80061ec <AL_ControlInd>
 8006d62:	e01c      	b.n	8006d9e <CheckIfEcatError+0x82>
            return;
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <CheckIfEcatError+0x94>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
         }
      }
      /*ECATCHANGE_END(V5.11) ECAT4*/
   }
 
   if(bDcSyncActive)
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <CheckIfEcatError+0x98>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d015      	beq.n	8006d9e <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 8006d72:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <CheckIfEcatError+0x90>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <CheckIfEcatError+0x9c>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <CheckIfEcatError+0x70>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 8006d82:	212c      	movs	r1, #44	; 0x2c
 8006d84:	2004      	movs	r0, #4
 8006d86:	f7ff fa31 	bl	80061ec <AL_ControlInd>
               return;
 8006d8a:	e008      	b.n	8006d9e <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <CheckIfEcatError+0xa0>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8006d94:	211a      	movs	r1, #26
 8006d96:	2004      	movs	r0, #4
 8006d98:	f7ff fa28 	bl	80061ec <AL_ControlInd>
               return;
 8006d9c:	bf00      	nop
           }
        
       }
   }
}
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000af6 	.word	0x20000af6
 8006da8:	20000ac2 	.word	0x20000ac2
 8006dac:	20000af3 	.word	0x20000af3
 8006db0:	20000aee 	.word	0x20000aee
 8006db4:	20000af2 	.word	0x20000af2
 8006db8:	20000ada 	.word	0x20000ada
 8006dbc:	20000aef 	.word	0x20000aef

08006dc0 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    {
    UINT16 TmpVar = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	80bb      	strh	r3, [r7, #4]

    HW_EscReadWord(TmpVar, ESC_COMM_INFO_OFFSET);
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	2202      	movs	r2, #2
 8006dce:	2104      	movs	r1, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd fbb3 	bl	800453c <HW_EscRead>

    TmpVar = SWAPWORD(TmpVar);
 8006dd6:	88bb      	ldrh	r3, [r7, #4]
 8006dd8:	80bb      	strh	r3, [r7, #4]
    nMaxSyncMan = (UINT8) ((TmpVar & ESC_SM_CHANNELS_MASK)>> ESC_SM_CHANNELS_SHIFT);
 8006dda:	88bb      	ldrh	r3, [r7, #4]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <ECAT_Init+0xfc>)
 8006de4:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(TmpVar, ESC_DPRAM_SIZE_OFFSET);
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	2202      	movs	r2, #2
 8006dea:	2106      	movs	r1, #6
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fd fba5 	bl	800453c <HW_EscRead>
    TmpVar = SWAPWORD(TmpVar);
 8006df2:	88bb      	ldrh	r3, [r7, #4]
 8006df4:	80bb      	strh	r3, [r7, #4]

    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    /* ECATCHANGE_START(V5.11) ESC1*/
    nMaxEscAddress = (UINT16) ((TmpVar & ESC_DPRAM_SIZE_MASK) << 10) + 0xFFF;
 8006df6:	88bb      	ldrh	r3, [r7, #4]
 8006df8:	029b      	lsls	r3, r3, #10
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <ECAT_Init+0x100>)
 8006e04:	801a      	strh	r2, [r3, #0]
    /* ECATCHANGE_END(V5.11) ESC1*/
    }

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8006e06:	f7fe faa9 	bl	800535c <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	71fb      	strb	r3, [r7, #7]
 8006e0e:	e006      	b.n	8006e1e <ECAT_Init+0x5e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(i);
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fae0 	bl	80053d8 <DisableSyncManChannel>
    for (i = 0; i < nMaxSyncMan; i++)
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	71fb      	strb	r3, [r7, #7]
 8006e1e:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <ECAT_Init+0xfc>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	79fa      	ldrb	r2, [r7, #7]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3f3      	bcc.n	8006e10 <ECAT_Init+0x50>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8006e28:	f000 f99a 	bl	8007160 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <ECAT_Init+0x104>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8006e32:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <ECAT_Init+0x108>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8006e38:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <ECAT_Init+0x10c>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <ECAT_Init+0x110>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <ECAT_Init+0x114>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <ECAT_Init+0x118>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <ECAT_Init+0x11c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8006e56:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <ECAT_Init+0x120>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <ECAT_Init+0x124>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8006e62:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <ECAT_Init+0x128>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <ECAT_Init+0x12c>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <ECAT_Init+0x130>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <ECAT_Init+0x134>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8006e7a:	4b1f      	ldr	r3, [pc, #124]	; (8006ef8 <ECAT_Init+0x138>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 8006e80:	4b1e      	ldr	r3, [pc, #120]	; (8006efc <ECAT_Init+0x13c>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8006e86:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <ECAT_Init+0x140>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <ECAT_Init+0x144>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <ECAT_Init+0x148>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8006e98:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <ECAT_Init+0x148>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff f96e 	bl	8006180 <SetALStatus>
    nEcatStateTrans = 0;
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <ECAT_Init+0x14c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	801a      	strh	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) ECAT5*/
    bEscIntEnabled = FALSE;
 8006eaa:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <ECAT_Init+0x150>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) ECAT5*/

    /* initialize the COE part */
    COE_Init();
 8006eb0:	f7fe f952 	bl	8005158 <COE_Init>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000afe 	.word	0x20000afe
 8006ec0:	20000aec 	.word	0x20000aec
 8006ec4:	20000ac0 	.word	0x20000ac0
 8006ec8:	20000ae6 	.word	0x20000ae6
 8006ecc:	20000aee 	.word	0x20000aee
 8006ed0:	20000af3 	.word	0x20000af3
 8006ed4:	20000af8 	.word	0x20000af8
 8006ed8:	20000afa 	.word	0x20000afa
 8006edc:	20000af6 	.word	0x20000af6
 8006ee0:	20000ac6 	.word	0x20000ac6
 8006ee4:	20000ad2 	.word	0x20000ad2
 8006ee8:	20000af4 	.word	0x20000af4
 8006eec:	20000ad6 	.word	0x20000ad6
 8006ef0:	20000af2 	.word	0x20000af2
 8006ef4:	20000aca 	.word	0x20000aca
 8006ef8:	20000ac4 	.word	0x20000ac4
 8006efc:	20000ad8 	.word	0x20000ad8
 8006f00:	20000ac2 	.word	0x20000ac2
 8006f04:	20000ae8 	.word	0x20000ae8
 8006f08:	20000ac1 	.word	0x20000ac1
 8006f0c:	20000abe 	.word	0x20000abe
 8006f10:	20000af9 	.word	0x20000af9

08006f14 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	80bb      	strh	r3, [r7, #4]
    UINT16 sm1Activate = SM_SETTING_ENABLE_VALUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	807b      	strh	r3, [r7, #2]

    /* check if services are stored in the mailbox */
    MBX_Main();
 8006f22:	f000 fd6f 	bl	8007a04 <MBX_Main>


    if ( bMbxRunning )
 8006f26:	4b5d      	ldr	r3, [pc, #372]	; (800709c <ECAT_Main+0x188>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <ECAT_Main+0x2c>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8006f2e:	1cbb      	adds	r3, r7, #2
 8006f30:	2202      	movs	r2, #2
 8006f32:	f640 010e 	movw	r1, #2062	; 0x80e
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fd fb00 	bl	800453c <HW_EscRead>
        sm1Activate = SWAPWORD(sm1Activate);
 8006f3c:	887b      	ldrh	r3, [r7, #2]
 8006f3e:	807b      	strh	r3, [r7, #2]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8006f40:	f7fd fae8 	bl	8004514 <HW_GetALEventRegister>
 8006f44:	4603      	mov	r3, r0
 8006f46:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);


    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <ECAT_Main+0x6c>
 8006f52:	4b53      	ldr	r3, [pc, #332]	; (80070a0 <ECAT_Main+0x18c>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d112      	bne.n	8006f80 <ECAT_Main+0x6c>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadWord( EscAlControl, ESC_AL_CONTROL_OFFSET);
 8006f5a:	1d3b      	adds	r3, r7, #4
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd faea 	bl	800453c <HW_EscRead>
        EscAlControl = SWAPWORD(EscAlControl);
 8006f68:	88bb      	ldrh	r3, [r7, #4]
 8006f6a:	80bb      	strh	r3, [r7, #4]


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	f023 0311 	bic.w	r3, r3, #17
 8006f72:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 8006f74:	88bb      	ldrh	r3, [r7, #4]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff f936 	bl	80061ec <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01c      	beq.n	8006fc4 <ECAT_Main+0xb0>
 8006f8a:	4b45      	ldr	r3, [pc, #276]	; (80070a0 <ECAT_Main+0x18c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d118      	bne.n	8006fc4 <ECAT_Main+0xb0>
 8006f92:	4b44      	ldr	r3, [pc, #272]	; (80070a4 <ECAT_Main+0x190>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d112      	bne.n	8006fc4 <ECAT_Main+0xb0>
 8006f9e:	4b41      	ldr	r3, [pc, #260]	; (80070a4 <ECAT_Main+0x190>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f023 0310 	bic.w	r3, r3, #16
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d00c      	beq.n	8006fc4 <ECAT_Main+0xb0>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	f023 0310 	bic.w	r3, r3, #16
 8006fb0:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8006fb2:	4b3c      	ldr	r3, [pc, #240]	; (80070a4 <ECAT_Main+0x190>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff f914 	bl	80061ec <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8006fc4:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <ECAT_Main+0x18c>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <ECAT_Main+0xbc>
    {
        AL_ControlRes();
 8006fcc:	f7ff fcbe 	bl	800694c <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8006fd0:	4b32      	ldr	r3, [pc, #200]	; (800709c <ECAT_Main+0x188>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d05d      	beq.n	8007094 <ECAT_Main+0x180>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
        if(!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8006fd8:	887b      	ldrh	r3, [r7, #2]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d108      	bne.n	8006ff4 <ECAT_Main+0xe0>
            AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8006fe2:	4b30      	ldr	r3, [pc, #192]	; (80070a4 <ECAT_Main+0x190>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff f8fc 	bl	80061ec <AL_ControlInd>

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00f      	beq.n	800701e <ECAT_Main+0x10a>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u16dummy = 0;
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <ECAT_Main+0x194>)
 8007000:	2200      	movs	r2, #0
 8007002:	801a      	strh	r2, [r3, #0]
            HW_EscWriteWord(u16dummy,u16EscAddrSendMbx);
 8007004:	4b29      	ldr	r3, [pc, #164]	; (80070ac <ECAT_Main+0x198>)
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	2202      	movs	r2, #2
 800700a:	4619      	mov	r1, r3
 800700c:	4826      	ldr	r0, [pc, #152]	; (80070a8 <ECAT_Main+0x194>)
 800700e:	f7fd fafd 	bl	800460c <HW_EscWrite>

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007018:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 800701a:	f000 fab5 	bl	8007588 <MBX_MailboxReadInd>
        }

        DISABLE_MBX_INT;
        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 800701e:	887b      	ldrh	r3, [r7, #2]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <ECAT_Main+0x11c>
 8007028:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <ECAT_Main+0x19c>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <ECAT_Main+0x12e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8007030:	887b      	ldrh	r3, [r7, #2]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d11d      	bne.n	8007076 <ECAT_Main+0x162>
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <ECAT_Main+0x19c>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d019      	beq.n	8007076 <ECAT_Main+0x162>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8007042:	f000 fb09 	bl	8007658 <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            if(bMbxRepeatToggle)
 8007046:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <ECAT_Main+0x19c>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <ECAT_Main+0x146>
                sm1Activate |= SM_SETTING_REPEAT_ACK; //set repeat acknowledge bit (bit 9)
 800704e:	887b      	ldrh	r3, [r7, #2]
 8007050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007054:	b29b      	uxth	r3, r3
 8007056:	807b      	strh	r3, [r7, #2]
 8007058:	e004      	b.n	8007064 <ECAT_Main+0x150>
            else
                sm1Activate &= ~SM_SETTING_REPEAT_ACK; //clear repeat acknowledge bit (bit 9)
 800705a:	887b      	ldrh	r3, [r7, #2]
 800705c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007060:	b29b      	uxth	r3, r3
 8007062:	807b      	strh	r3, [r7, #2]

            sm1Activate = SWAPWORD(sm1Activate);
 8007064:	887b      	ldrh	r3, [r7, #2]
 8007066:	807b      	strh	r3, [r7, #2]
            HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8007068:	1cbb      	adds	r3, r7, #2
 800706a:	2202      	movs	r2, #2
 800706c:	f640 010e 	movw	r1, #2062	; 0x80e
 8007070:	4618      	mov	r0, r3
 8007072:	f7fd facb 	bl	800460c <HW_EscWrite>
        }
        ENABLE_MBX_INT;

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8007076:	f7fd fa4d 	bl	8004514 <HW_GetALEventRegister>
 800707a:	4603      	mov	r3, r0
 800707c:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <ECAT_Main+0x180>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708e:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8007090:	f000 fb8c 	bl	80077ac <MBX_CheckAndCopyMailbox>

        }
    }
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20000d72 	.word	0x20000d72
 80070a0:	20000ae6 	.word	0x20000ae6
 80070a4:	20000ac1 	.word	0x20000ac1
 80070a8:	20000ac8 	.word	0x20000ac8
 80070ac:	20000d86 	.word	0x20000d86
 80070b0:	20000d90 	.word	0x20000d90

080070b4 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	885b      	ldrh	r3, [r3, #2]
 80070c2:	3301      	adds	r3, #1
 80070c4:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	889b      	ldrh	r3, [r3, #4]
 80070ca:	89fa      	ldrh	r2, [r7, #14]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d101      	bne.n	80070d4 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	89fa      	ldrh	r2, [r7, #14]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d101      	bne.n	80070e2 <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 80070de:	2307      	movs	r3, #7
 80070e0:	e00b      	b.n	80070fa <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	461a      	mov	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	3202      	adds	r2, #2
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	89fa      	ldrh	r2, [r7, #14]
 80070f6:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	429a      	cmp	r2, r3
 8007118:	d018      	beq.n	800714c <GetOutOfMbxQueue+0x46>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8007120:	897a      	ldrh	r2, [r7, #10]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3202      	adds	r2, #2
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 800712c:	897b      	ldrh	r3, [r7, #10]
 800712e:	3301      	adds	r3, #1
 8007130:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	897a      	ldrh	r2, [r7, #10]
 8007136:	801a      	strh	r2, [r3, #0]
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	889b      	ldrh	r3, [r3, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d105      	bne.n	8007150 <GetOutOfMbxQueue+0x4a>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e001      	b.n	8007150 <GetOutOfMbxQueue+0x4a>
        }
    }
    else
        pMbx = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8007150:	68fb      	ldr	r3, [r7, #12]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8007166:	4b2d      	ldr	r3, [pc, #180]	; (800721c <MBX_Init+0xbc>)
 8007168:	2222      	movs	r2, #34	; 0x22
 800716a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 800716c:	4b2c      	ldr	r3, [pc, #176]	; (8007220 <MBX_Init+0xc0>)
 800716e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007172:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8007174:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <MBX_Init+0xc4>)
 8007176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800717a:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 800717c:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <MBX_Init+0xc8>)
 800717e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007182:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8007184:	4b29      	ldr	r3, [pc, #164]	; (800722c <MBX_Init+0xcc>)
 8007186:	2200      	movs	r2, #0
 8007188:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <MBX_Init+0xcc>)
 800718c:	2200      	movs	r2, #0
 800718e:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8007190:	4b26      	ldr	r3, [pc, #152]	; (800722c <MBX_Init+0xcc>)
 8007192:	220a      	movs	r2, #10
 8007194:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8007196:	4b26      	ldr	r3, [pc, #152]	; (8007230 <MBX_Init+0xd0>)
 8007198:	2200      	movs	r2, #0
 800719a:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <MBX_Init+0xd0>)
 800719e:	2200      	movs	r2, #0
 80071a0:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 80071a2:	4b23      	ldr	r3, [pc, #140]	; (8007230 <MBX_Init+0xd0>)
 80071a4:	220a      	movs	r2, #10
 80071a6:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 80071a8:	4b22      	ldr	r3, [pc, #136]	; (8007234 <MBX_Init+0xd4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 80071ae:	4b22      	ldr	r3, [pc, #136]	; (8007238 <MBX_Init+0xd8>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 80071b4:	4b21      	ldr	r3, [pc, #132]	; (800723c <MBX_Init+0xdc>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 80071ba:	4b21      	ldr	r3, [pc, #132]	; (8007240 <MBX_Init+0xe0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <MBX_Init+0xe4>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80071ca:	1dbb      	adds	r3, r7, #6
 80071cc:	2202      	movs	r2, #2
 80071ce:	f640 010e 	movw	r1, #2062	; 0x80e
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd f9b2 	bl	800453c <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071de:	b29b      	uxth	r3, r3
 80071e0:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80071e2:	1dbb      	adds	r3, r7, #6
 80071e4:	2202      	movs	r2, #2
 80071e6:	f640 010e 	movw	r1, #2062	; 0x80e
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fd fa0e 	bl	800460c <HW_EscWrite>
    }
    bMbxRunning = FALSE;
 80071f0:	4b15      	ldr	r3, [pc, #84]	; (8007248 <MBX_Init+0xe8>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <MBX_Init+0xec>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 80071fc:	4b14      	ldr	r3, [pc, #80]	; (8007250 <MBX_Init+0xf0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8007202:	4b14      	ldr	r3, [pc, #80]	; (8007254 <MBX_Init+0xf4>)
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8007208:	4b13      	ldr	r3, [pc, #76]	; (8007258 <MBX_Init+0xf8>)
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <MBX_Init+0xfc>)
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000d8e 	.word	0x20000d8e
 8007220:	20000d7c 	.word	0x20000d7c
 8007224:	20000d74 	.word	0x20000d74
 8007228:	20000d86 	.word	0x20000d86
 800722c:	20000d3c 	.word	0x20000d3c
 8007230:	20000d08 	.word	0x20000d08
 8007234:	20000d88 	.word	0x20000d88
 8007238:	20000d94 	.word	0x20000d94
 800723c:	20000d80 	.word	0x20000d80
 8007240:	20000d78 	.word	0x20000d78
 8007244:	20000d90 	.word	0x20000d90
 8007248:	20000d72 	.word	0x20000d72
 800724c:	20000d71 	.word	0x20000d71
 8007250:	20000d84 	.word	0x20000d84
 8007254:	20000d8d 	.word	0x20000d8d
 8007258:	20000d8c 	.word	0x20000d8c
 800725c:	20000d04 	.word	0x20000d04

08007260 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	80fb      	strh	r3, [r7, #6]
    /* get address of the receive mailbox sync manager (SM0) */
/*ECATCHANGE_START(V5.11) HW1*/
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 800726a:	2000      	movs	r0, #0
 800726c:	f7fe f89c 	bl	80053a8 <GetSyncMan>
 8007270:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	885a      	ldrh	r2, [r3, #2]
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <MBX_StartMailboxHandler+0xd4>)
 8007278:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	881a      	ldrh	r2, [r3, #0]
 800727e:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <MBX_StartMailboxHandler+0xd8>)
 8007280:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8007282:	2001      	movs	r0, #1
 8007284:	f7fe f890 	bl	80053a8 <GetSyncMan>
 8007288:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885a      	ldrh	r2, [r3, #2]
 800728e:	4b2b      	ldr	r3, [pc, #172]	; (800733c <MBX_StartMailboxHandler+0xdc>)
 8007290:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	4b2a      	ldr	r3, [pc, #168]	; (8007340 <MBX_StartMailboxHandler+0xe0>)
 8007298:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 800729a:	4b27      	ldr	r3, [pc, #156]	; (8007338 <MBX_StartMailboxHandler+0xd8>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	4b24      	ldr	r3, [pc, #144]	; (8007334 <MBX_StartMailboxHandler+0xd4>)
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <MBX_StartMailboxHandler+0xe0>)
 80072a8:	8812      	ldrh	r2, [r2, #0]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	dd0c      	ble.n	80072c8 <MBX_StartMailboxHandler+0x68>
 80072ae:	4b22      	ldr	r3, [pc, #136]	; (8007338 <MBX_StartMailboxHandler+0xd8>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b22      	ldr	r3, [pc, #136]	; (8007340 <MBX_StartMailboxHandler+0xe0>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4b20      	ldr	r3, [pc, #128]	; (800733c <MBX_StartMailboxHandler+0xdc>)
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	440b      	add	r3, r1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	da01      	bge.n	80072c8 <MBX_StartMailboxHandler+0x68>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80072c4:	2316      	movs	r3, #22
 80072c6:	e031      	b.n	800732c <MBX_StartMailboxHandler+0xcc>
    }

    /* enable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    EnableSyncManChannel(MAILBOX_WRITE);
 80072c8:	2000      	movs	r0, #0
 80072ca:	f7fe f8ad 	bl	8005428 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 80072ce:	2001      	movs	r0, #1
 80072d0:	f7fe f8aa 	bl	8005428 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

/* ECATCHANGE_START(V5.11) MBX2*/
        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80072d4:	4b17      	ldr	r3, [pc, #92]	; (8007334 <MBX_StartMailboxHandler+0xd4>)
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f003 fb7b 	bl	800a9d4 <malloc>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b18      	ldr	r3, [pc, #96]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 80072e4:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 80072e6:	4b17      	ldr	r3, [pc, #92]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d115      	bne.n	800731a <MBX_StartMailboxHandler+0xba>
        {
            bNoMbxMemoryAvailable = TRUE;
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <MBX_StartMailboxHandler+0xe8>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 80072f4:	200a      	movs	r0, #10
 80072f6:	f003 fb6d 	bl	800a9d4 <malloc>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 8007300:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <MBX_StartMailboxHandler+0xae>
            {
                result = ALSTATUSCODE_NOMEMORY;
 800730a:	2302      	movs	r3, #2
 800730c:	80fb      	strh	r3, [r7, #6]
            }
           
            APPL_FreeMailboxBuffer(psWriteMbx);
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f003 fb66 	bl	800a9e4 <free>
 8007318:	e007      	b.n	800732a <MBX_StartMailboxHandler+0xca>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <MBX_StartMailboxHandler+0xe8>)
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8007320:	4b08      	ldr	r3, [pc, #32]	; (8007344 <MBX_StartMailboxHandler+0xe4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f003 fb5d 	bl	800a9e4 <free>
        }
/* ECATCHANGE_END(V5.11) MBX2*/

    return result;
 800732a:	88fb      	ldrh	r3, [r7, #6]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000d8e 	.word	0x20000d8e
 8007338:	20000d74 	.word	0x20000d74
 800733c:	20000d7c 	.word	0x20000d7c
 8007340:	20000d86 	.word	0x20000d86
 8007344:	20000d88 	.word	0x20000d88
 8007348:	20000d70 	.word	0x20000d70

0800734c <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8007352:	4b44      	ldr	r3, [pc, #272]	; (8007464 <MBX_StopMailboxHandler+0x118>)
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    DisableSyncManChannel(MAILBOX_WRITE);
 8007358:	2000      	movs	r0, #0
 800735a:	f7fe f83d 	bl	80053d8 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 800735e:	2001      	movs	r0, #1
 8007360:	f7fe f83a 	bl	80053d8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8007364:	4b40      	ldr	r3, [pc, #256]	; (8007468 <MBX_StopMailboxHandler+0x11c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <MBX_StopMailboxHandler+0x2a>
        APPL_FreeMailboxBuffer(psRepeatMbx);
 800736c:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <MBX_StopMailboxHandler+0x11c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f003 fb37 	bl	800a9e4 <free>

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8007376:	4b3d      	ldr	r3, [pc, #244]	; (800746c <MBX_StopMailboxHandler+0x120>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <MBX_StopMailboxHandler+0x48>
 800737e:	4b3b      	ldr	r3, [pc, #236]	; (800746c <MBX_StopMailboxHandler+0x120>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b39      	ldr	r3, [pc, #228]	; (8007468 <MBX_StopMailboxHandler+0x11c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d004      	beq.n	8007394 <MBX_StopMailboxHandler+0x48>
        APPL_FreeMailboxBuffer(psStoreMbx);
 800738a:	4b38      	ldr	r3, [pc, #224]	; (800746c <MBX_StopMailboxHandler+0x120>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f003 fb28 	bl	800a9e4 <free>

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8007394:	4b36      	ldr	r3, [pc, #216]	; (8007470 <MBX_StopMailboxHandler+0x124>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <MBX_StopMailboxHandler+0x72>
 800739c:	4b34      	ldr	r3, [pc, #208]	; (8007470 <MBX_StopMailboxHandler+0x124>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b31      	ldr	r3, [pc, #196]	; (8007468 <MBX_StopMailboxHandler+0x11c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d00a      	beq.n	80073be <MBX_StopMailboxHandler+0x72>
 80073a8:	4b31      	ldr	r3, [pc, #196]	; (8007470 <MBX_StopMailboxHandler+0x124>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b2f      	ldr	r3, [pc, #188]	; (800746c <MBX_StopMailboxHandler+0x120>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d004      	beq.n	80073be <MBX_StopMailboxHandler+0x72>
        APPL_FreeMailboxBuffer(psReadMbx);
 80073b4:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <MBX_StopMailboxHandler+0x124>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f003 fb13 	bl	800a9e4 <free>


    psRepeatMbx = NULL;
 80073be:	4b2a      	ldr	r3, [pc, #168]	; (8007468 <MBX_StopMailboxHandler+0x11c>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 80073c4:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <MBX_StopMailboxHandler+0x124>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 80073ca:	4b28      	ldr	r3, [pc, #160]	; (800746c <MBX_StopMailboxHandler+0x120>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80073d0:	4b28      	ldr	r3, [pc, #160]	; (8007474 <MBX_StopMailboxHandler+0x128>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	807b      	strh	r3, [r7, #2]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80073da:	1cbb      	adds	r3, r7, #2
 80073dc:	2202      	movs	r2, #2
 80073de:	f640 010e 	movw	r1, #2062	; 0x80e
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fd f8aa 	bl	800453c <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 80073e8:	887b      	ldrh	r3, [r7, #2]
 80073ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80073f2:	1cbb      	adds	r3, r7, #2
 80073f4:	2202      	movs	r2, #2
 80073f6:	f640 010e 	movw	r1, #2062	; 0x80e
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd f906 	bl	800460c <HW_EscWrite>
    }
    bSendMbxIsFull         = FALSE;
 8007400:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <MBX_StopMailboxHandler+0x12c>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8007406:	4b1d      	ldr	r3, [pc, #116]	; (800747c <MBX_StopMailboxHandler+0x130>)
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 800740c:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <MBX_StopMailboxHandler+0x134>)
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <MBX_StopMailboxHandler+0x138>)
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8007418:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <MBX_StopMailboxHandler+0x13c>)
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 800741e:	481b      	ldr	r0, [pc, #108]	; (800748c <MBX_StopMailboxHandler+0x140>)
 8007420:	f7ff fe71 	bl	8007106 <GetOutOfMbxQueue>
 8007424:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <MBX_StopMailboxHandler+0xea>
        {
            APPL_FreeMailboxBuffer(pMbx);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f003 fad9 	bl	800a9e4 <free>
            pMbx = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <MBX_StopMailboxHandler+0xd2>
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 800743c:	4814      	ldr	r0, [pc, #80]	; (8007490 <MBX_StopMailboxHandler+0x144>)
 800743e:	f7ff fe62 	bl	8007106 <GetOutOfMbxQueue>
 8007442:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d004      	beq.n	8007454 <MBX_StopMailboxHandler+0x108>
        {
            APPL_FreeMailboxBuffer(pMbx);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 faca 	bl	800a9e4 <free>
            pMbx = NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <MBX_StopMailboxHandler+0xf0>

}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000d72 	.word	0x20000d72
 8007468:	20000d94 	.word	0x20000d94
 800746c:	20000d78 	.word	0x20000d78
 8007470:	20000d80 	.word	0x20000d80
 8007474:	20000d90 	.word	0x20000d90
 8007478:	20000d71 	.word	0x20000d71
 800747c:	20000d84 	.word	0x20000d84
 8007480:	20000d8d 	.word	0x20000d8d
 8007484:	20000d8c 	.word	0x20000d8c
 8007488:	20000d04 	.word	0x20000d04
 800748c:	20000d3c 	.word	0x20000d3c
 8007490:	20000d08 	.word	0x20000d08

08007494 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	889b      	ldrh	r3, [r3, #4]
 80074a0:	121b      	asrs	r3, r3, #8
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d105      	bne.n	80074b6 <MailboxServiceInd+0x22>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fd fe66 	bl	800517c <COE_ServiceInd>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
        break;
 80074b4:	e002      	b.n	80074bc <MailboxServiceInd+0x28>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 80074b6:	2302      	movs	r3, #2
 80074b8:	73fb      	strb	r3, [r7, #15]
        break;
 80074ba:	bf00      	nop
    }

    return result;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	889b      	ldrh	r3, [r3, #4]
 80074d8:	0b1b      	lsrs	r3, r3, #12
 80074da:	b29b      	uxth	r3, r3
 80074dc:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 80074e4:	89bb      	ldrh	r3, [r7, #12]
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	d914      	bls.n	8007516 <MBX_MailboxWriteInd+0x4e>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2204      	movs	r2, #4
 80074f0:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	889b      	ldrh	r3, [r3, #4]
 80074f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	809a      	strh	r2, [r3, #4]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2208      	movs	r2, #8
 800750a:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8e0 	bl	80076d4 <MBX_MailboxSendReq>
    else
    {
        APPL_FreeMailboxBuffer(pMbx);
        pMbx = NULL;
    }
}
 8007514:	e02f      	b.n	8007576 <MBX_MailboxWriteInd+0xae>
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <MBX_MailboxWriteInd+0x5e>
 800751c:	4b18      	ldr	r3, [pc, #96]	; (8007580 <MBX_MailboxWriteInd+0xb8>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	7bba      	ldrb	r2, [r7, #14]
 8007522:	429a      	cmp	r2, r3
 8007524:	d021      	beq.n	800756a <MBX_MailboxWriteInd+0xa2>
        u8MbxWriteCounter = mbxCounter;
 8007526:	4a16      	ldr	r2, [pc, #88]	; (8007580 <MBX_MailboxWriteInd+0xb8>)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	7013      	strb	r3, [r2, #0]
            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 800752c:	4915      	ldr	r1, [pc, #84]	; (8007584 <MBX_MailboxWriteInd+0xbc>)
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fdc0 	bl	80070b4 <PutInMbxQueue>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
        if ( result != 0 )
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01b      	beq.n	8007576 <MBX_MailboxWriteInd+0xae>
            pMbx->MbxHeader.Length     = 4;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2204      	movs	r2, #4
 8007542:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	889b      	ldrh	r3, [r3, #4]
 8007548:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8b6 	bl	80076d4 <MBX_MailboxSendReq>
        if ( result != 0 )
 8007568:	e005      	b.n	8007576 <MBX_MailboxWriteInd+0xae>
        APPL_FreeMailboxBuffer(pMbx);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f003 fa3a 	bl	800a9e4 <free>
        pMbx = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	607b      	str	r3, [r7, #4]
}
 8007574:	e7ff      	b.n	8007576 <MBX_MailboxWriteInd+0xae>
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000d8c 	.word	0x20000d8c
 8007584:	20000d3c 	.word	0x20000d3c

08007588 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 800758e:	4b2b      	ldr	r3, [pc, #172]	; (800763c <MBX_MailboxReadInd+0xb4>)
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8007594:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <MBX_MailboxReadInd+0xb8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <MBX_MailboxReadInd+0x2c>
 800759c:	4b29      	ldr	r3, [pc, #164]	; (8007644 <MBX_MailboxReadInd+0xbc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d107      	bne.n	80075b4 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <MBX_MailboxReadInd+0xb8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f003 fa1b 	bl	800a9e4 <free>
        psRepeatMbx = NULL;
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <MBX_MailboxReadInd+0xb8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <MBX_MailboxReadInd+0xc0>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <MBX_MailboxReadInd+0xb8>)
 80075ba:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 80075bc:	4b21      	ldr	r3, [pc, #132]	; (8007644 <MBX_MailboxReadInd+0xbc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 80075c4:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <MBX_MailboxReadInd+0xbc>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f991 	bl	80078f0 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 80075ce:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <MBX_MailboxReadInd+0xbc>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	e009      	b.n	80075ea <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80075d6:	481d      	ldr	r0, [pc, #116]	; (800764c <MBX_MailboxReadInd+0xc4>)
 80075d8:	f7ff fd95 	bl	8007106 <GetOutOfMbxQueue>
 80075dc:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f983 	bl	80078f0 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 80075ea:	4b19      	ldr	r3, [pc, #100]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01f      	beq.n	8007632 <MBX_MailboxReadInd+0xaa>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d019      	beq.n	8007632 <MBX_MailboxReadInd+0xaa>
        {
           UINT8 result = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f023 0302 	bic.w	r3, r3, #2
 800760a:	b2da      	uxtb	r2, r3
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 800760e:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <MBX_MailboxReadInd+0xcc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd fde9 	bl	80051ec <COE_ContinueInd>
 800761a:	4603      	mov	r3, r0
 800761c:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <MBX_MailboxReadInd+0xaa>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f043 0302 	orr.w	r3, r3, #2
 800762c:	b2da      	uxtb	r2, r3
 800762e:	4b08      	ldr	r3, [pc, #32]	; (8007650 <MBX_MailboxReadInd+0xc8>)
 8007630:	701a      	strb	r2, [r3, #0]
        }
        else
        {
        }
    }
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000d71 	.word	0x20000d71
 8007640:	20000d94 	.word	0x20000d94
 8007644:	20000d78 	.word	0x20000d78
 8007648:	20000d80 	.word	0x20000d80
 800764c:	20000d08 	.word	0x20000d08
 8007650:	20000d8d 	.word	0x20000d8d
 8007654:	20000d88 	.word	0x20000d88

08007658 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 800765e:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <MBX_MailboxRepeatReq+0x68>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01d      	beq.n	80076a2 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8007666:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <MBX_MailboxRepeatReq+0x68>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 800766c:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <MBX_MailboxRepeatReq+0x6c>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <MBX_MailboxRepeatReq+0x3e>
 8007674:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <MBX_MailboxRepeatReq+0x70>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10c      	bne.n	8007696 <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
/*ECATCHANGE_START(V5.11) HW1*/
            DisableSyncManChannel(MAILBOX_READ);
 800767c:	2001      	movs	r0, #1
 800767e:	f7fd feab 	bl	80053d8 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <MBX_MailboxRepeatReq+0x74>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <MBX_MailboxRepeatReq+0x70>)
 8007688:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 800768a:	2001      	movs	r0, #1
 800768c:	f7fd fecc 	bl	8005428 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8007690:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <MBX_MailboxRepeatReq+0x6c>)
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f92a 	bl	80078f0 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <MBX_MailboxRepeatReq+0x68>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <MBX_MailboxRepeatReq+0x78>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <MBX_MailboxRepeatReq+0x78>)
 80076b4:	701a      	strb	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000d94 	.word	0x20000d94
 80076c4:	20000d71 	.word	0x20000d71
 80076c8:	20000d78 	.word	0x20000d78
 80076cc:	20000d80 	.word	0x20000d80
 80076d0:	20000d90 	.word	0x20000d90

080076d4 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 80076e4:	4b2d      	ldr	r3, [pc, #180]	; (800779c <MBX_MailboxSendReq+0xc8>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <MBX_MailboxSendReq+0x20>
        return ERROR_INVALIDSTATE;
 80076f0:	23f0      	movs	r3, #240	; 0xf0
 80076f2:	e04e      	b.n	8007792 <MBX_MailboxSendReq+0xbe>
    ENTER_MBX_CRITICAL;
    DISABLE_MBX_INT;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	889b      	ldrh	r3, [r3, #4]
 80076f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	809a      	strh	r2, [r3, #4]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 8007702:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <MBX_MailboxSendReq+0x40>
        u8MbxReadCounter = 1;
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 8007710:	2201      	movs	r2, #1
 8007712:	701a      	strb	r2, [r3, #0]

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	889b      	ldrh	r3, [r3, #4]
 8007718:	b21a      	sxth	r2, r3
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	031b      	lsls	r3, r3, #12
 8007720:	b21b      	sxth	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b21b      	sxth	r3, r3
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	809a      	strh	r2, [r3, #4]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8df 	bl	80078f0 <MBX_CopyToSendMailbox>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d014      	beq.n	8007762 <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8007738:	491a      	ldr	r1, [pc, #104]	; (80077a4 <MBX_MailboxSendReq+0xd0>)
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fcba 	bl	80070b4 <PutInMbxQueue>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <MBX_MailboxSendReq+0x80>
            flags |= FRAGMENTS_FOLLOW;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007750:	70fb      	strb	r3, [r7, #3]
 8007752:	e00c      	b.n	800776e <MBX_MailboxSendReq+0x9a>
        else
            u8MbxReadCounter++;
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e005      	b.n	800776e <MBX_MailboxSendReq+0x9a>
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	3301      	adds	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <MBX_MailboxSendReq+0xcc>)
 800776c:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 800776e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0c      	bge.n	8007790 <MBX_MailboxSendReq+0xbc>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8007776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777e:	b25a      	sxtb	r2, r3
 8007780:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <MBX_MailboxSendReq+0xd4>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b25b      	sxtb	r3, r3
 8007786:	4313      	orrs	r3, r2
 8007788:	b25b      	sxtb	r3, r3
 800778a:	b2da      	uxtb	r2, r3
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <MBX_MailboxSendReq+0xd4>)
 800778e:	701a      	strb	r2, [r3, #0]
    }

    ENABLE_MBX_INT;
    LEAVE_MBX_CRITICAL;

    return result;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000ac1 	.word	0x20000ac1
 80077a0:	20000d04 	.word	0x20000d04
 80077a4:	20000d08 	.word	0x20000d08
 80077a8:	20000d8d 	.word	0x20000d8d

080077ac <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 80077b2:	4b47      	ldr	r3, [pc, #284]	; (80078d0 <MBX_CheckAndCopyMailbox+0x124>)
 80077b4:	8819      	ldrh	r1, [r3, #0]
 80077b6:	1cbb      	adds	r3, r7, #2
 80077b8:	2202      	movs	r2, #2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fc febe 	bl	800453c <HW_EscRead>
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);
 80077c0:	887b      	ldrh	r3, [r7, #2]
 80077c2:	807b      	strh	r3, [r7, #2]

/* ECATCHANGE_START(V5.11) MBX2*/
    if(bNoMbxMemoryAvailable == TRUE)
 80077c4:	4b43      	ldr	r3, [pc, #268]	; (80078d4 <MBX_CheckAndCopyMailbox+0x128>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d123      	bne.n	8007814 <MBX_CheckAndCopyMailbox+0x68>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 80077cc:	200a      	movs	r0, #10
 80077ce:	f003 f901 	bl	800a9d4 <malloc>
 80077d2:	4603      	mov	r3, r0
 80077d4:	607b      	str	r3, [r7, #4]

        if(pMbx != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <MBX_CheckAndCopyMailbox+0x68>
        {
            HMEMSET(pMbx,0x00,10);
 80077dc:	220a      	movs	r2, #10
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f003 f915 	bl	800aa10 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	889b      	ldrh	r3, [r3, #4]
 80077f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2207      	movs	r2, #7
 8007804:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ff63 	bl	80076d4 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f003 f8e8 	bl	800a9e4 <free>
        }
    }
/* ECATCHANGE_END(V5.11) MBX2*/
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	3306      	adds	r3, #6
 8007818:	b29b      	uxth	r3, r3
 800781a:	807b      	strh	r3, [r7, #2]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 800781c:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <MBX_CheckAndCopyMailbox+0x12c>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <MBX_CheckAndCopyMailbox+0x80>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 8007824:	4b2d      	ldr	r3, [pc, #180]	; (80078dc <MBX_CheckAndCopyMailbox+0x130>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <MBX_CheckAndCopyMailbox+0x88>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 800782c:	4b2c      	ldr	r3, [pc, #176]	; (80078e0 <MBX_CheckAndCopyMailbox+0x134>)
 800782e:	2201      	movs	r2, #1
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e04a      	b.n	80078ca <MBX_CheckAndCopyMailbox+0x11e>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 8007834:	4b2a      	ldr	r3, [pc, #168]	; (80078e0 <MBX_CheckAndCopyMailbox+0x134>)
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <MBX_CheckAndCopyMailbox+0x138>)
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d902      	bls.n	800784a <MBX_CheckAndCopyMailbox+0x9e>
            mbxLen = u16ReceiveMbxSize;
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <MBX_CheckAndCopyMailbox+0x138>)
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	807b      	strh	r3, [r7, #2]

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 800784a:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <MBX_CheckAndCopyMailbox+0x138>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f003 f8c0 	bl	800a9d4 <malloc>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	4b23      	ldr	r3, [pc, #140]	; (80078e8 <MBX_CheckAndCopyMailbox+0x13c>)
 800785a:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 800785c:	4b22      	ldr	r3, [pc, #136]	; (80078e8 <MBX_CheckAndCopyMailbox+0x13c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <MBX_CheckAndCopyMailbox+0xc0>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <MBX_CheckAndCopyMailbox+0x134>)
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e02e      	b.n	80078ca <MBX_CheckAndCopyMailbox+0x11e>
            return;
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <MBX_CheckAndCopyMailbox+0x13c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <MBX_CheckAndCopyMailbox+0x124>)
 8007872:	8811      	ldrh	r1, [r2, #0]
 8007874:	887a      	ldrh	r2, [r7, #2]
 8007876:	4618      	mov	r0, r3
 8007878:	f7fc fe60 	bl	800453c <HW_EscRead>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT16 smstate = 0x00;
 800787c:	2300      	movs	r3, #0
 800787e:	803b      	strh	r3, [r7, #0]
        HW_EscReadWord(smstate,ESC_SYNCMAN_CONTROL_OFFSET);
 8007880:	463b      	mov	r3, r7
 8007882:	2202      	movs	r2, #2
 8007884:	f640 0104 	movw	r1, #2052	; 0x804
 8007888:	4618      	mov	r0, r3
 800788a:	f7fc fe57 	bl	800453c <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800788e:	883b      	ldrh	r3, [r7, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	803b      	strh	r3, [r7, #0]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8007894:	883b      	ldrh	r3, [r7, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00f      	beq.n	80078c0 <MBX_CheckAndCopyMailbox+0x114>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u16dummy = 0;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <MBX_CheckAndCopyMailbox+0x140>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	801a      	strh	r2, [r3, #0]
            HW_EscReadWord(u16dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 2));
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <MBX_CheckAndCopyMailbox+0x124>)
 80078a8:	881a      	ldrh	r2, [r3, #0]
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <MBX_CheckAndCopyMailbox+0x138>)
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b02      	subs	r3, #2
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2202      	movs	r2, #2
 80078b8:	4619      	mov	r1, r3
 80078ba:	480c      	ldr	r0, [pc, #48]	; (80078ec <MBX_CheckAndCopyMailbox+0x140>)
 80078bc:	f7fc fe3e 	bl	800453c <HW_EscRead>
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 80078c0:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <MBX_CheckAndCopyMailbox+0x13c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fdff 	bl	80074c8 <MBX_MailboxWriteInd>

    }
}
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000d74 	.word	0x20000d74
 80078d4:	20000d70 	.word	0x20000d70
 80078d8:	20000d71 	.word	0x20000d71
 80078dc:	20000d8d 	.word	0x20000d8d
 80078e0:	20000d84 	.word	0x20000d84
 80078e4:	20000d8e 	.word	0x20000d8e
 80078e8:	20000d88 	.word	0x20000d88
 80078ec:	20000ac8 	.word	0x20000ac8

080078f0 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 80078f8:	4b39      	ldr	r3, [pc, #228]	; (80079e0 <MBX_CopyToSendMailbox+0xf0>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8007904:	23f0      	movs	r3, #240	; 0xf0
 8007906:	e067      	b.n	80079d8 <MBX_CopyToSendMailbox+0xe8>
    }


    if ( !bMbxRunning )
 8007908:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <MBX_CopyToSendMailbox+0xf4>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <MBX_CopyToSendMailbox+0x24>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8007910:	23f0      	movs	r3, #240	; 0xf0
 8007912:	e061      	b.n	80079d8 <MBX_CopyToSendMailbox+0xe8>
    }

    if ( bSendMbxIsFull )
 8007914:	4b34      	ldr	r3, [pc, #208]	; (80079e8 <MBX_CopyToSendMailbox+0xf8>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <MBX_CopyToSendMailbox+0x30>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 800791c:	2307      	movs	r3, #7
 800791e:	e05b      	b.n	80079d8 <MBX_CopyToSendMailbox+0xe8>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	82fb      	strh	r3, [r7, #22]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 8007926:	4b31      	ldr	r3, [pc, #196]	; (80079ec <MBX_CopyToSendMailbox+0xfc>)
 8007928:	8819      	ldrh	r1, [r3, #0]
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	3306      	adds	r3, #6
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fc fe6a 	bl	800460c <HW_EscWrite>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT16 smstate = 0x00;
 8007938:	2300      	movs	r3, #0
 800793a:	81fb      	strh	r3, [r7, #14]
        HW_EscReadWord(smstate,(ESC_SYNCMAN_CONTROL_OFFSET + SIZEOF_SM_REGISTER));
 800793c:	f107 030e 	add.w	r3, r7, #14
 8007940:	2202      	movs	r2, #2
 8007942:	f640 010c 	movw	r1, #2060	; 0x80c
 8007946:	4618      	mov	r0, r3
 8007948:	f7fc fdf8 	bl	800453c <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800794c:	89fb      	ldrh	r3, [r7, #14]
 800794e:	b29b      	uxth	r3, r3
 8007950:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 8007952:	89fb      	ldrh	r3, [r7, #14]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12a      	bne.n	80079b4 <MBX_CopyToSendMailbox+0xc4>
        {
            UINT8 BytesLeft = u16SendMbxSize - (mbxSize + MBX_HEADER_SIZE);
 800795e:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <MBX_CopyToSendMailbox+0x100>)
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b2da      	uxtb	r2, r3
 8007964:	8afb      	ldrh	r3, [r7, #22]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	3b06      	subs	r3, #6
 800796e:	757b      	strb	r3, [r7, #21]

            /*Write last Byte to trigger mailbox full flag*/
            /*Read last 2 Bytes and write them again (required if low Byte of the WORD were written before)*/
            u16dummy = 0;
 8007970:	4b20      	ldr	r3, [pc, #128]	; (80079f4 <MBX_CopyToSendMailbox+0x104>)
 8007972:	2200      	movs	r2, #0
 8007974:	801a      	strh	r2, [r3, #0]
            if(BytesLeft < 2)
 8007976:	7d7b      	ldrb	r3, [r7, #21]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d80e      	bhi.n	800799a <MBX_CopyToSendMailbox+0xaa>
            {
                /*The last 2Bytes are overlapping the already written buffer*/
                                
                /*Get the valid 16Bit address*/
                UINT32 LastDataAddress = ((mbxSize + MBX_HEADER_SIZE)/2)*2;
 800797c:	8afb      	ldrh	r3, [r7, #22]
 800797e:	3306      	adds	r3, #6
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	613b      	str	r3, [r7, #16]
            
                /*Copy the buffer to overwrite*/
                MEMCPY((UINT16 *)&u16dummy,(((UINT8 *)pMbx) + LastDataAddress),(2 - BytesLeft));
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	18d1      	adds	r1, r2, r3
 800798c:	7d7b      	ldrb	r3, [r7, #21]
 800798e:	f1c3 0302 	rsb	r3, r3, #2
 8007992:	461a      	mov	r2, r3
 8007994:	4817      	ldr	r0, [pc, #92]	; (80079f4 <MBX_CopyToSendMailbox+0x104>)
 8007996:	f003 f82d 	bl	800a9f4 <memcpy>
            }
            
            HW_EscWriteWord(u16dummy,(u16EscAddrSendMbx + u16SendMbxSize - 2));
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <MBX_CopyToSendMailbox+0xfc>)
 800799c:	881a      	ldrh	r2, [r3, #0]
 800799e:	4b14      	ldr	r3, [pc, #80]	; (80079f0 <MBX_CopyToSendMailbox+0x100>)
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b02      	subs	r3, #2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2202      	movs	r2, #2
 80079ac:	4619      	mov	r1, r3
 80079ae:	4811      	ldr	r0, [pc, #68]	; (80079f4 <MBX_CopyToSendMailbox+0x104>)
 80079b0:	f7fc fe2c 	bl	800460c <HW_EscWrite>
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 80079b4:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <MBX_CopyToSendMailbox+0x108>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <MBX_CopyToSendMailbox+0xd4>
            psWriteMbx = NULL;
 80079bc:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <MBX_CopyToSendMailbox+0x10c>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e002      	b.n	80079ca <MBX_CopyToSendMailbox+0xda>
        else
        {
            /* only the first time after the INIT2PREOP-transition */
            psWriteMbx = &asMbx[1];
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <MBX_CopyToSendMailbox+0x10c>)
 80079c6:	4a0e      	ldr	r2, [pc, #56]	; (8007a00 <MBX_CopyToSendMailbox+0x110>)
 80079c8:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 80079ca:	4a0b      	ldr	r2, [pc, #44]	; (80079f8 <MBX_CopyToSendMailbox+0x108>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <MBX_CopyToSendMailbox+0xf8>)
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]


        return 0;
 80079d6:	2300      	movs	r3, #0
    }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000ac1 	.word	0x20000ac1
 80079e4:	20000d72 	.word	0x20000d72
 80079e8:	20000d71 	.word	0x20000d71
 80079ec:	20000d86 	.word	0x20000d86
 80079f0:	20000d7c 	.word	0x20000d7c
 80079f4:	20000ac8 	.word	0x20000ac8
 80079f8:	20000d80 	.word	0x20000d80
 80079fc:	20000d88 	.word	0x20000d88
 8007a00:	20000c04 	.word	0x20000c04

08007a04 <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8007a12:	4818      	ldr	r0, [pc, #96]	; (8007a74 <MBX_Main+0x70>)
 8007a14:	f7ff fb77 	bl	8007106 <GetOutOfMbxQueue>
 8007a18:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <MBX_Main+0x26>
            result = MailboxServiceInd(pMbx);
 8007a20:	6838      	ldr	r0, [r7, #0]
 8007a22:	f7ff fd37 	bl	8007494 <MailboxServiceInd>
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]

        if ( result != 0 )
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d014      	beq.n	8007a5a <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2201      	movs	r2, #1
 8007a48:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8007a52:	2100      	movs	r1, #0
 8007a54:	6838      	ldr	r0, [r7, #0]
 8007a56:	f7ff fe3d 	bl	80076d4 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1d6      	bne.n	8007a0e <MBX_Main+0xa>



      if ( bReceiveMbxIsLocked )
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <MBX_Main+0x74>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 8007a68:	f7ff fea0 	bl	80077ac <MBX_CheckAndCopyMailbox>
      }
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20000d3c 	.word	0x20000d3c
 8007a78:	20000d84 	.word	0x20000d84

08007a7c <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8007a86:	f7fc fe53 	bl	8004730 <COE_GetObjectDictionary>
 8007a8a:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 8007a8c:	e009      	b.n	8007aa2 <OBJ_GetObjectHandle+0x26>
    {
        if (pObjEntry->Index == index)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	891b      	ldrh	r3, [r3, #8]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d101      	bne.n	8007a9c <OBJ_GetObjectHandle+0x20>
            return pObjEntry;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e006      	b.n	8007aaa <OBJ_GetObjectHandle+0x2e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	60fb      	str	r3, [r7, #12]
    while (pObjEntry!= NULL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f2      	bne.n	8007a8e <OBJ_GetObjectHandle+0x12>
    }
    return 0;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	603a      	str	r2, [r7, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	4603      	mov	r3, r0
 8007abe:	80fb      	strh	r3, [r7, #6]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	717b      	strb	r3, [r7, #5]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	121b      	asrs	r3, r3, #8
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	72bb      	strb	r3, [r7, #10]
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	899b      	ldrh	r3, [r3, #12]
 8007ada:	727b      	strb	r3, [r7, #9]
    UINT32 size = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 8007ae0:	793b      	ldrb	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d043      	beq.n	8007b6e <OBJ_GetObjectLength+0xbc>
    {
        if ( objCode == OBJCODE_VAR )
 8007ae6:	7abb      	ldrb	r3, [r7, #10]
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d101      	bne.n	8007af0 <OBJ_GetObjectLength+0x3e>
            return 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e061      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>
        else if ((objCode == OBJCODE_ARR)
 8007af0:	7abb      	ldrb	r3, [r7, #10]
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d118      	bne.n	8007b28 <OBJ_GetObjectLength+0x76>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	3306      	adds	r3, #6
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	461a      	mov	r2, r3
 8007b08:	7a7b      	ldrb	r3, [r7, #9]
 8007b0a:	fb03 f302 	mul.w	r3, r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3307      	adds	r3, #7
 8007b14:	08db      	lsrs	r3, r3, #3
 8007b16:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8007b18:	797b      	ldrb	r3, [r7, #5]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <OBJ_GetObjectLength+0x72>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3302      	adds	r3, #2
 8007b22:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	e045      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8007b28:	2301      	movs	r3, #1
 8007b2a:	72fb      	strb	r3, [r7, #11]
 8007b2c:	e00f      	b.n	8007b4e <OBJ_GetObjectLength+0x9c>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6919      	ldr	r1, [r3, #16]
 8007b32:	7afa      	ldrb	r2, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4413      	add	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	440b      	add	r3, r1
 8007b3e:	885b      	ldrh	r3, [r3, #2]
 8007b40:	461a      	mov	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
            for (i = 1; i <= maxSubindex; i++)
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	72fb      	strb	r3, [r7, #11]
 8007b4e:	7afa      	ldrb	r2, [r7, #11]
 8007b50:	7a7b      	ldrb	r3, [r7, #9]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d9eb      	bls.n	8007b2e <OBJ_GetObjectLength+0x7c>
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	08db      	lsrs	r3, r3, #3
 8007b5c:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8007b5e:	797b      	ldrb	r3, [r7, #5]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <OBJ_GetObjectLength+0xb8>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3302      	adds	r3, #2
 8007b68:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	e022      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 8007b6e:	7abb      	ldrb	r3, [r7, #10]
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d105      	bne.n	8007b80 <OBJ_GetObjectLength+0xce>
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	3307      	adds	r3, #7
 8007b7c:	10db      	asrs	r3, r3, #3
 8007b7e:	e019      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>

        }
        else if ( subindex == 0 )
 8007b80:	797b      	ldrb	r3, [r7, #5]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <OBJ_GetObjectLength+0xd8>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e014      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>
        }
        else if((objCode == OBJCODE_ARR)
 8007b8a:	7abb      	ldrb	r3, [r7, #10]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d106      	bne.n	8007b9e <OBJ_GetObjectLength+0xec>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	3306      	adds	r3, #6
 8007b96:	885b      	ldrh	r3, [r3, #2]
 8007b98:	3307      	adds	r3, #7
 8007b9a:	10db      	asrs	r3, r3, #3
 8007b9c:	e00a      	b.n	8007bb4 <OBJ_GetObjectLength+0x102>
        }
        else
        {
                return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6919      	ldr	r1, [r3, #16]
 8007ba2:	797a      	ldrb	r2, [r7, #5]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	4413      	add	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	440b      	add	r3, r1
 8007bae:	885b      	ldrh	r3, [r3, #2]
 8007bb0:	3307      	adds	r3, #7
 8007bb2:	10db      	asrs	r3, r3, #3
        }
    }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3302      	adds	r3, #2
 8007bd0:	2230      	movs	r2, #48	; 0x30
 8007bd2:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	491d      	ldr	r1, [pc, #116]	; (8007c50 <OBJ_CopyNumberToString+0x90>)
 8007bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	4413      	add	r3, r2
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <OBJ_CopyNumberToString+0x90>)
 8007bf0:	fba2 1203 	umull	r1, r2, r2, r3
 8007bf4:	0952      	lsrs	r2, r2, #5
 8007bf6:	2164      	movs	r1, #100	; 0x64
 8007bf8:	fb01 f202 	mul.w	r2, r1, r2
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3301      	adds	r3, #1
 8007c04:	7819      	ldrb	r1, [r3, #0]
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	4a12      	ldr	r2, [pc, #72]	; (8007c54 <OBJ_CopyNumberToString+0x94>)
 8007c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0e:	08db      	lsrs	r3, r3, #3
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3301      	adds	r3, #1
 8007c16:	440a      	add	r2, r1
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3302      	adds	r3, #2
 8007c20:	7818      	ldrb	r0, [r3, #0]
 8007c22:	7bfa      	ldrb	r2, [r7, #15]
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <OBJ_CopyNumberToString+0x94>)
 8007c26:	fba3 1302 	umull	r1, r3, r3, r2
 8007c2a:	08d9      	lsrs	r1, r3, #3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	4402      	add	r2, r0
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	51eb851f 	.word	0x51eb851f
 8007c54:	cccccccd 	.word	0xcccccccd

08007c58 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	2220      	movs	r2, #32
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8007c6c:	f7fc fd60 	bl	8004730 <COE_GetObjectDictionary>
 8007c70:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8007c76:	e032      	b.n	8007cde <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	891b      	ldrh	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d32a      	bcc.n	8007cd8 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	747b      	strb	r3, [r7, #17]
            if ( t )
 8007c86:	7c7b      	ldrb	r3, [r7, #17]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01f      	beq.n	8007ccc <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	899b      	ldrh	r3, [r3, #12]
 8007c90:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8007c96:	e011      	b.n	8007cbc <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8007c98:	89fb      	ldrh	r3, [r7, #14]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f000 f934 	bl	8007f0c <OBJ_GetEntryDesc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	889a      	ldrh	r2, [r3, #4]
 8007ca8:	89bb      	ldrh	r3, [r7, #12]
 8007caa:	4013      	ands	r3, r2
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <OBJ_GetNoOfObjects+0x5e>
                        t = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	747b      	strb	r3, [r7, #17]
                    i++;
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	81fb      	strh	r3, [r7, #14]
                while ( t && i <= maxSubindex )
 8007cbc:	7c7b      	ldrb	r3, [r7, #17]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <OBJ_GetNoOfObjects+0x74>
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	89fa      	ldrh	r2, [r7, #14]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d9e5      	bls.n	8007c98 <OBJ_GetNoOfObjects+0x40>
                }
            }
            if ( !t )
 8007ccc:	7c7b      	ldrb	r3, [r7, #17]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8007cd2:	8a7b      	ldrh	r3, [r7, #18]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	617b      	str	r3, [r7, #20]
    while (pObjEntry != NULL)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1c9      	bne.n	8007c78 <OBJ_GetNoOfObjects+0x20>
    }

    return n;
 8007ce4:	8a7b      	ldrh	r3, [r7, #18]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607b      	str	r3, [r7, #4]
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	81fb      	strh	r3, [r7, #14]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	2220      	movs	r2, #32
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d14:	d10c      	bne.n	8007d30 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8007d16:	f7fc fd0b 	bl	8004730 <COE_GetObjectDictionary>
 8007d1a:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <OBJ_GetObjectList+0x46>
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	221b      	movs	r2, #27
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e002      	b.n	8007d36 <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 8007d30:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <OBJ_GetObjectList+0xf4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d03e      	beq.n	8007dba <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 8007d3c:	e037      	b.n	8007dae <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	891b      	ldrh	r3, [r3, #8]
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d46:	d32f      	bcc.n	8007da8 <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	837b      	strh	r3, [r7, #26]
                if ( t )
 8007d4c:	8b7b      	ldrh	r3, [r7, #26]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01d      	beq.n	8007d8e <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	899b      	ldrh	r3, [r3, #12]
 8007d56:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 8007d5c:	e010      	b.n	8007d80 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 8007d5e:	7e7b      	ldrb	r3, [r7, #25]
 8007d60:	4619      	mov	r1, r3
 8007d62:	69f8      	ldr	r0, [r7, #28]
 8007d64:	f000 f8d2 	bl	8007f0c <OBJ_GetEntryDesc>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	889a      	ldrh	r2, [r3, #4]
 8007d6c:	8afb      	ldrh	r3, [r7, #22]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <OBJ_GetObjectList+0x8a>
                            t = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	837b      	strh	r3, [r7, #26]
                        i++;
 8007d7a:	7e7b      	ldrb	r3, [r7, #25]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	767b      	strb	r3, [r7, #25]
                    while ( t && i <= maxSubindex )
 8007d80:	8b7b      	ldrh	r3, [r7, #26]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <OBJ_GetObjectList+0x9e>
 8007d86:	7e7a      	ldrb	r2, [r7, #25]
 8007d88:	7d7b      	ldrb	r3, [r7, #21]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d9e7      	bls.n	8007d5e <OBJ_GetObjectList+0x6e>
                    }
                }
                if ( !t )
 8007d8e:	8b7b      	ldrh	r3, [r7, #26]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	891a      	ldrh	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	801a      	strh	r2, [r3, #0]
                    pData++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8007da2:	89bb      	ldrh	r3, [r7, #12]
 8007da4:	3b02      	subs	r3, #2
 8007da6:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	61fb      	str	r3, [r7, #28]
        while (pObjEntry != NULL && size > 1 )
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <OBJ_GetObjectList+0xca>
 8007db4:	89bb      	ldrh	r3, [r7, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d8c1      	bhi.n	8007d3e <OBJ_GetObjectList+0x4e>
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	891a      	ldrh	r2, [r3, #8]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e003      	b.n	8007dd2 <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dd0:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8007dd2:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <OBJ_GetObjectList+0xf4>)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 8007dd8:	89bb      	ldrh	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3720      	adds	r7, #32
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000e44 	.word	0x20000e44

08007de8 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b08d      	sub	sp, #52	; 0x34
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60ba      	str	r2, [r7, #8]
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	4603      	mov	r3, r0
 8007df4:	81fb      	strh	r3, [r7, #14]
 8007df6:	460b      	mov	r3, r1
 8007df8:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	899b      	ldrh	r3, [r3, #12]
 8007e08:	121b      	asrs	r3, r3, #8
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8007e14:	7b7b      	ldrb	r3, [r7, #13]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <OBJ_GetDesc+0x3a>
 8007e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d10e      	bne.n	8007e40 <OBJ_GetDesc+0x58>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );
 8007e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e24:	f7f8 f9d0 	bl	80001c8 <strlen>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d064      	beq.n	8007efc <OBJ_GetDesc+0x114>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 8007e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e34:	461a      	mov	r2, r3
 8007e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f002 fddb 	bl	800a9f4 <memcpy>
        if ( pData )
 8007e3e:	e05d      	b.n	8007efc <OBJ_GetDesc+0x114>
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 8007e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d13c      	bne.n	8007ec2 <OBJ_GetDesc+0xda>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 8007e4c:	7b7b      	ldrb	r3, [r7, #13]
 8007e4e:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8007e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e52:	f7f8 f9b9 	bl	80001c8 <strlen>
 8007e56:	4603      	mov	r3, r0
 8007e58:	3301      	adds	r3, #1
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5c:	4413      	add	r3, r2
 8007e5e:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 8007e60:	e023      	b.n	8007eaa <OBJ_GetDesc+0xc2>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
            {
                if ( i == tmpSubindex )
 8007e62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007e64:	8c3b      	ldrh	r3, [r7, #32]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d114      	bne.n	8007e94 <OBJ_GetDesc+0xac>
                {
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6c:	f7f8 f9ac 	bl	80001c8 <strlen>
 8007e70:	4603      	mov	r3, r0
 8007e72:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <OBJ_GetDesc+0xa6>
 8007e7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <OBJ_GetDesc+0xa6>
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8007e80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e82:	461a      	mov	r2, r3
 8007e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f002 fdb4 	bl	800a9f4 <memcpy>
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8007e8c:	e019      	b.n	8007ec2 <OBJ_GetDesc+0xda>
                        strSize = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    break;
 8007e92:	e016      	b.n	8007ec2 <OBJ_GetDesc+0xda>
                }
                else
                {
                    i++;
 8007e94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e96:	3301      	adds	r3, #1
 8007e98:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9c:	f7f8 f994 	bl	80001c8 <strlen>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea6:	4413      	add	r3, r2
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 8007eaa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007eac:	8c3b      	ldrh	r3, [r7, #32]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d807      	bhi.n	8007ec2 <OBJ_GetDesc+0xda>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2bff      	cmp	r3, #255	; 0xff
 8007eb8:	d003      	beq.n	8007ec2 <OBJ_GetDesc+0xda>
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8007ec0:	d1cf      	bne.n	8007e62 <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 8007ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d119      	bne.n	8007efc <OBJ_GetDesc+0x114>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 8007ec8:	230c      	movs	r3, #12
 8007eca:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d014      	beq.n	8007efc <OBJ_GetDesc+0x114>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <OBJ_GetDesc+0x120>)
 8007ed4:	f107 0410 	add.w	r4, r7, #16
 8007ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007eda:	c407      	stmia	r4!, {r0, r1, r2}
 8007edc:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8007ede:	7b7a      	ldrb	r2, [r7, #13]
 8007ee0:	f107 0310 	add.w	r3, r7, #16
 8007ee4:	3309      	adds	r3, #9
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fe69 	bl	8007bc0 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	220d      	movs	r2, #13
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 fd7c 	bl	800a9f4 <memcpy>
            }
        }
    }

    return strSize;
 8007efc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3734      	adds	r7, #52	; 0x34
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd90      	pop	{r4, r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000534 	.word	0x20000534

08007f0c <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	899b      	ldrh	r3, [r3, #12]
 8007f1c:	121b      	asrs	r3, r3, #8
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d10b      	bne.n	8007f44 <OBJ_GetEntryDesc+0x38>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <OBJ_GetEntryDesc+0x2e>
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e00d      	b.n	8007f56 <OBJ_GetEntryDesc+0x4a>
        else
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	3306      	adds	r3, #6
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	e008      	b.n	8007f56 <OBJ_GetEntryDesc+0x4a>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6919      	ldr	r1, [r3, #16]
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	4413      	add	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	440b      	add	r3, r1
 8007f54:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	330a      	adds	r3, #10
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
/*ECATCHANGE_START(V5.11) OBJ1*/
    UINT16 bitOffset = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	899b      	ldrh	r3, [r3, #12]
 8007f90:	121b      	asrs	r3, r3, #8
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    if(subindex > 0)
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <OBJ_GetEntryOffset+0x2a>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8007fa0:	8abb      	ldrh	r3, [r7, #20]
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	82bb      	strh	r3, [r7, #20]
    }
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b07      	cmp	r3, #7
 8007faa:	d101      	bne.n	8007fb0 <OBJ_GetEntryOffset+0x34>
        return 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e0e0      	b.n	8008172 <OBJ_GetEntryOffset+0x1f6>

    for (i = 1; i <= subindex; i++)
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	82fb      	strh	r3, [r7, #22]
 8007fb4:	e0d6      	b.n	8008164 <OBJ_GetEntryOffset+0x1e8>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d104      	bne.n	8007fc6 <OBJ_GetEntryOffset+0x4a>
           )
            pEntry = &pObjEntry->pEntryDesc[1];
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	3306      	adds	r3, #6
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e008      	b.n	8007fd8 <OBJ_GetEntryOffset+0x5c>
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6919      	ldr	r1, [r3, #16]
 8007fca:	8afa      	ldrh	r2, [r7, #22]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	440b      	add	r3, r1
 8007fd6:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 8007fe0:	f280 80ad 	bge.w	800813e <OBJ_GetEntryOffset+0x1c2>
 8007fe4:	f240 2262 	movw	r2, #610	; 0x262
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	f280 8087 	bge.w	80080fc <OBJ_GetEntryOffset+0x180>
 8007fee:	2b2f      	cmp	r3, #47	; 0x2f
 8007ff0:	dc64      	bgt.n	80080bc <OBJ_GetEntryOffset+0x140>
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	f2c0 80a3 	blt.w	800813e <OBJ_GetEntryOffset+0x1c2>
 8007ff8:	3b03      	subs	r3, #3
 8007ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8007ffc:	f200 809f 	bhi.w	800813e <OBJ_GetEntryOffset+0x1c2>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <OBJ_GetEntryOffset+0x8c>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	080080c3 	.word	0x080080c3
 800800c:	080080fd 	.word	0x080080fd
 8008010:	0800813f 	.word	0x0800813f
 8008014:	080080c3 	.word	0x080080c3
 8008018:	080080fd 	.word	0x080080fd
 800801c:	080080fd 	.word	0x080080fd
 8008020:	0800813f 	.word	0x0800813f
 8008024:	0800813f 	.word	0x0800813f
 8008028:	080080c3 	.word	0x080080c3
 800802c:	0800813f 	.word	0x0800813f
 8008030:	0800813f 	.word	0x0800813f
 8008034:	0800813f 	.word	0x0800813f
 8008038:	0800813f 	.word	0x0800813f
 800803c:	0800813f 	.word	0x0800813f
 8008040:	0800813f 	.word	0x0800813f
 8008044:	0800813f 	.word	0x0800813f
 8008048:	0800813f 	.word	0x0800813f
 800804c:	0800813f 	.word	0x0800813f
 8008050:	0800813f 	.word	0x0800813f
 8008054:	0800813f 	.word	0x0800813f
 8008058:	0800813f 	.word	0x0800813f
 800805c:	0800813f 	.word	0x0800813f
 8008060:	0800813f 	.word	0x0800813f
 8008064:	0800813f 	.word	0x0800813f
 8008068:	0800813f 	.word	0x0800813f
 800806c:	0800813f 	.word	0x0800813f
 8008070:	0800813f 	.word	0x0800813f
 8008074:	0800813f 	.word	0x0800813f
 8008078:	080080c3 	.word	0x080080c3
 800807c:	080080fd 	.word	0x080080fd
 8008080:	0800813f 	.word	0x0800813f
 8008084:	0800813f 	.word	0x0800813f
 8008088:	0800813f 	.word	0x0800813f
 800808c:	0800813f 	.word	0x0800813f
 8008090:	0800813f 	.word	0x0800813f
 8008094:	0800813f 	.word	0x0800813f
 8008098:	0800813f 	.word	0x0800813f
 800809c:	0800813f 	.word	0x0800813f
 80080a0:	0800813f 	.word	0x0800813f
 80080a4:	0800813f 	.word	0x0800813f
 80080a8:	0800813f 	.word	0x0800813f
 80080ac:	0800813f 	.word	0x0800813f
 80080b0:	0800813f 	.word	0x0800813f
 80080b4:	080080c3 	.word	0x080080c3
 80080b8:	080080fd 	.word	0x080080fd
 80080bc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80080c0:	d13d      	bne.n	800813e <OBJ_GetEntryOffset+0x1c2>
/*ECATCHANGE_END(V5.11) SDO9*/

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 80080c2:	8abb      	ldrh	r3, [r7, #20]
 80080c4:	330f      	adds	r3, #15
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f023 030f 	bic.w	r3, r3, #15
 80080cc:	82bb      	strh	r3, [r7, #20]
#endif


/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8afa      	ldrh	r2, [r7, #22]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d23d      	bcs.n	8008154 <OBJ_GetEntryOffset+0x1d8>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	2b0b      	cmp	r3, #11
 80080de:	d004      	beq.n	80080ea <OBJ_GetEntryOffset+0x16e>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80080e8:	d104      	bne.n	80080f4 <OBJ_GetEntryOffset+0x178>
                {
                    bitOffset += pEntry->BitLength;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	885a      	ldrh	r2, [r3, #2]
 80080ee:	8abb      	ldrh	r3, [r7, #20]
 80080f0:	4413      	add	r3, r2
 80080f2:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 80080f4:	8abb      	ldrh	r3, [r7, #20]
 80080f6:	3310      	adds	r3, #16
 80080f8:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 80080fa:	e02b      	b.n	8008154 <OBJ_GetEntryOffset+0x1d8>
        case    DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 80080fc:	8abb      	ldrh	r3, [r7, #20]
 80080fe:	331f      	adds	r3, #31
 8008100:	b29b      	uxth	r3, r3
 8008102:	f023 031f 	bic.w	r3, r3, #31
 8008106:	82bb      	strh	r3, [r7, #20]
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	b29b      	uxth	r3, r3
 800810c:	8afa      	ldrh	r2, [r7, #22]
 800810e:	429a      	cmp	r2, r3
 8008110:	d222      	bcs.n	8008158 <OBJ_GetEntryOffset+0x1dc>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	f240 2262 	movw	r2, #610	; 0x262
 800811a:	4293      	cmp	r3, r2
 800811c:	d005      	beq.n	800812a <OBJ_GetEntryOffset+0x1ae>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	f240 2263 	movw	r2, #611	; 0x263
 8008126:	4293      	cmp	r3, r2
 8008128:	d105      	bne.n	8008136 <OBJ_GetEntryOffset+0x1ba>
                {
                    bitOffset += pEntry->BitLength;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	885a      	ldrh	r2, [r3, #2]
 800812e:	8abb      	ldrh	r3, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	82bb      	strh	r3, [r7, #20]
                }
                else
                   bitOffset += 32;
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8008134:	e010      	b.n	8008158 <OBJ_GetEntryOffset+0x1dc>
                   bitOffset += 32;
 8008136:	8abb      	ldrh	r3, [r7, #20]
 8008138:	3320      	adds	r3, #32
 800813a:	82bb      	strh	r3, [r7, #20]
            break;
 800813c:	e00c      	b.n	8008158 <OBJ_GetEntryOffset+0x1dc>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	b29b      	uxth	r3, r3
 8008142:	8afa      	ldrh	r2, [r7, #22]
 8008144:	429a      	cmp	r2, r3
 8008146:	d209      	bcs.n	800815c <OBJ_GetEntryOffset+0x1e0>
                bitOffset += pEntry->BitLength;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	885a      	ldrh	r2, [r3, #2]
 800814c:	8abb      	ldrh	r3, [r7, #20]
 800814e:	4413      	add	r3, r2
 8008150:	82bb      	strh	r3, [r7, #20]
            break;
 8008152:	e003      	b.n	800815c <OBJ_GetEntryOffset+0x1e0>
            break;
 8008154:	bf00      	nop
 8008156:	e002      	b.n	800815e <OBJ_GetEntryOffset+0x1e2>
            break;
 8008158:	bf00      	nop
 800815a:	e000      	b.n	800815e <OBJ_GetEntryOffset+0x1e2>
            break;
 800815c:	bf00      	nop
    for (i = 1; i <= subindex; i++)
 800815e:	8afb      	ldrh	r3, [r7, #22]
 8008160:	3301      	adds	r3, #1
 8008162:	82fb      	strh	r3, [r7, #22]
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	b29b      	uxth	r3, r3
 8008168:	8afa      	ldrh	r2, [r7, #22]
 800816a:	429a      	cmp	r2, r3
 800816c:	f67f af23 	bls.w	8007fb6 <OBJ_GetEntryOffset+0x3a>
        }
    }

    return bitOffset;
 8008170:	8abb      	ldrh	r3, [r7, #20]
}
 8008172:	4618      	mov	r0, r3
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop

08008180 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	460a      	mov	r2, r1
 800818a:	80fb      	strh	r3, [r7, #6]
 800818c:	4613      	mov	r3, r2
 800818e:	80bb      	strh	r3, [r7, #4]
    /*ECATCHANGE_START(V5.11) ESM7*/
    switch (NewSyncType)
 8008190:	88bb      	ldrh	r3, [r7, #4]
 8008192:	2b22      	cmp	r3, #34	; 0x22
 8008194:	f200 80be 	bhi.w	8008314 <CheckSyncTypeValue+0x194>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <CheckSyncTypeValue+0x20>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	0800822d 	.word	0x0800822d
 80081a4:	08008231 	.word	0x08008231
 80081a8:	0800829f 	.word	0x0800829f
 80081ac:	080082d3 	.word	0x080082d3
 80081b0:	08008315 	.word	0x08008315
 80081b4:	08008315 	.word	0x08008315
 80081b8:	08008315 	.word	0x08008315
 80081bc:	08008315 	.word	0x08008315
 80081c0:	08008315 	.word	0x08008315
 80081c4:	08008315 	.word	0x08008315
 80081c8:	08008315 	.word	0x08008315
 80081cc:	08008315 	.word	0x08008315
 80081d0:	08008315 	.word	0x08008315
 80081d4:	08008315 	.word	0x08008315
 80081d8:	08008315 	.word	0x08008315
 80081dc:	08008315 	.word	0x08008315
 80081e0:	08008315 	.word	0x08008315
 80081e4:	08008315 	.word	0x08008315
 80081e8:	08008315 	.word	0x08008315
 80081ec:	08008315 	.word	0x08008315
 80081f0:	08008315 	.word	0x08008315
 80081f4:	08008315 	.word	0x08008315
 80081f8:	08008315 	.word	0x08008315
 80081fc:	08008315 	.word	0x08008315
 8008200:	08008315 	.word	0x08008315
 8008204:	08008315 	.word	0x08008315
 8008208:	08008315 	.word	0x08008315
 800820c:	08008315 	.word	0x08008315
 8008210:	08008315 	.word	0x08008315
 8008214:	08008315 	.word	0x08008315
 8008218:	08008315 	.word	0x08008315
 800821c:	08008315 	.word	0x08008315
 8008220:	08008315 	.word	0x08008315
 8008224:	08008315 	.word	0x08008315
 8008228:	0800827d 	.word	0x0800827d
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 800822c:	2300      	movs	r3, #0
 800822e:	e072      	b.n	8008316 <CheckSyncTypeValue+0x196>
        break;

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	f641 4232 	movw	r2, #7218	; 0x1c32
 8008236:	4293      	cmp	r3, r2
 8008238:	d10b      	bne.n	8008252 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 800823a:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <CheckSyncTypeValue+0x1a4>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8008242:	4b39      	ldr	r3, [pc, #228]	; (8008328 <CheckSyncTypeValue+0x1a8>)
 8008244:	899b      	ldrh	r3, [r3, #12]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd01      	ble.n	8008252 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 800824e:	2300      	movs	r3, #0
 8008250:	e061      	b.n	8008316 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) 
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008258:	4293      	cmp	r3, r2
 800825a:	d154      	bne.n	8008306 <CheckSyncTypeValue+0x186>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 800825c:	4b33      	ldr	r3, [pc, #204]	; (800832c <CheckSyncTypeValue+0x1ac>)
 800825e:	899b      	ldrh	r3, [r3, #12]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd4e      	ble.n	8008306 <CheckSyncTypeValue+0x186>
            && (nPdOutputSize == 0) 
 8008268:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <CheckSyncTypeValue+0x1a4>)
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d14a      	bne.n	8008306 <CheckSyncTypeValue+0x186>
            && (nPdInputSize > 0))
 8008270:	4b2f      	ldr	r3, [pc, #188]	; (8008330 <CheckSyncTypeValue+0x1b0>)
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d046      	beq.n	8008306 <CheckSyncTypeValue+0x186>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8008278:	2300      	movs	r3, #0
 800827a:	e04c      	b.n	8008316 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008282:	4293      	cmp	r3, r2
 8008284:	d141      	bne.n	800830a <CheckSyncTypeValue+0x18a>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8008286:	4b29      	ldr	r3, [pc, #164]	; (800832c <CheckSyncTypeValue+0x1ac>)
 8008288:	899b      	ldrh	r3, [r3, #12]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd3b      	ble.n	800830a <CheckSyncTypeValue+0x18a>
            && (nPdOutputSize > 0))
 8008292:	4b24      	ldr	r3, [pc, #144]	; (8008324 <CheckSyncTypeValue+0x1a4>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d037      	beq.n	800830a <CheckSyncTypeValue+0x18a>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 800829a:	2300      	movs	r3, #0
 800829c:	e03b      	b.n	8008316 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f641 4232 	movw	r2, #7218	; 0x1c32
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d107      	bne.n	80082b8 <CheckSyncTypeValue+0x138>
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <CheckSyncTypeValue+0x1a8>)
 80082aa:	899b      	ldrh	r3, [r3, #12]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dd01      	ble.n	80082b8 <CheckSyncTypeValue+0x138>
        {
            return 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e02e      	b.n	8008316 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	f641 4233 	movw	r2, #7219	; 0x1c33
 80082be:	4293      	cmp	r3, r2
 80082c0:	d125      	bne.n	800830e <CheckSyncTypeValue+0x18e>
 80082c2:	4b1a      	ldr	r3, [pc, #104]	; (800832c <CheckSyncTypeValue+0x1ac>)
 80082c4:	899b      	ldrh	r3, [r3, #12]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dd1f      	ble.n	800830e <CheckSyncTypeValue+0x18e>
        {
            return 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e021      	b.n	8008316 <CheckSyncTypeValue+0x196>
        }
        break;

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	f641 4232 	movw	r2, #7218	; 0x1c32
 80082d8:	4293      	cmp	r3, r2
 80082da:	d107      	bne.n	80082ec <CheckSyncTypeValue+0x16c>
 80082dc:	4b12      	ldr	r3, [pc, #72]	; (8008328 <CheckSyncTypeValue+0x1a8>)
 80082de:	899b      	ldrh	r3, [r3, #12]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dd01      	ble.n	80082ec <CheckSyncTypeValue+0x16c>
        {
            return 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e014      	b.n	8008316 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	f641 4233 	movw	r2, #7219	; 0x1c33
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d10d      	bne.n	8008312 <CheckSyncTypeValue+0x192>
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <CheckSyncTypeValue+0x1ac>)
 80082f8:	899b      	ldrh	r3, [r3, #12]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd07      	ble.n	8008312 <CheckSyncTypeValue+0x192>
        {
            return 0;
 8008302:	2300      	movs	r3, #0
 8008304:	e007      	b.n	8008316 <CheckSyncTypeValue+0x196>
        break;
 8008306:	bf00      	nop
 8008308:	e004      	b.n	8008314 <CheckSyncTypeValue+0x194>
        break;
 800830a:	bf00      	nop
 800830c:	e002      	b.n	8008314 <CheckSyncTypeValue+0x194>
        break;
 800830e:	bf00      	nop
 8008310:	e000      	b.n	8008314 <CheckSyncTypeValue+0x194>
        }
        break;
 8008312:	bf00      	nop
    } //switch 
/*ECATCHANGE_END(V5.11) ESM7*/
    return ABORTIDX_VALUE_EXCEEDED;
 8008314:	2312      	movs	r3, #18

}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000ac2 	.word	0x20000ac2
 8008328:	20000ddc 	.word	0x20000ddc
 800832c:	20000d98 	.word	0x20000d98
 8008330:	20000ae8 	.word	0x20000ae8

08008334 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b091      	sub	sp, #68	; 0x44
 8008338:	af02      	add	r7, sp, #8
 800833a:	60ba      	str	r2, [r7, #8]
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	4603      	mov	r3, r0
 8008340:	81fb      	strh	r3, [r7, #14]
 8008342:	460b      	mov	r3, r1
 8008344:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8008346:	7b7b      	ldrb	r3, [r7, #13]
 8008348:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	899b      	ldrh	r3, [r3, #12]
 800834e:	121b      	asrs	r3, r3, #8
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	899b      	ldrh	r3, [r3, #12]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8008362:	7b7b      	ldrb	r3, [r7, #13]
 8008364:	84bb      	strh	r3, [r7, #36]	; 0x24

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8008366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800836a:	2b07      	cmp	r3, #7
 800836c:	d008      	beq.n	8008380 <OBJ_Read+0x4c>
 800836e:	89fb      	ldrh	r3, [r7, #14]
 8008370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008374:	d304      	bcc.n	8008380 <OBJ_Read+0x4c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 8008380:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <OBJ_Read+0x6e>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 8008388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800838c:	2b07      	cmp	r3, #7
 800838e:	d003      	beq.n	8008398 <OBJ_Read+0x64>
 8008390:	89fb      	ldrh	r3, [r7, #14]
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d201      	bcs.n	800839c <OBJ_Read+0x68>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8008398:	2305      	movs	r3, #5
 800839a:	e319      	b.n	80089d0 <OBJ_Read+0x69c>
        }

        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 800839c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800839e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80083a0:	e315      	b.n	80089ce <OBJ_Read+0x69a>
    }
    else
    {
        if ( subindex > maxSubindex )
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d201      	bcs.n	80083b0 <OBJ_Read+0x7c>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80083ac:	2311      	movs	r3, #17
 80083ae:	e30f      	b.n	80089d0 <OBJ_Read+0x69c>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80083b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fda8 	bl	8007f0c <OBJ_GetEntryDesc>
 80083bc:	6238      	str	r0, [r7, #32]

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <OBJ_Read+0xc0>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) < (nAlStatus & STATE_MASK) )
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	889b      	ldrh	r3, [r3, #4]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 020e 	and.w	r2, r3, #14
 80083d4:	4b87      	ldr	r3, [pc, #540]	; (80085f4 <OBJ_Read+0x2c0>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	429a      	cmp	r2, r3
 80083de:	da09      	bge.n	80083f4 <OBJ_Read+0xc0>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	889b      	ldrh	r3, [r3, #4]
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <OBJ_Read+0xbc>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 80083ec:	2306      	movs	r3, #6
 80083ee:	e2ef      	b.n	80089d0 <OBJ_Read+0x69c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80083f0:	231a      	movs	r3, #26
 80083f2:	e2ed      	b.n	80089d0 <OBJ_Read+0x69c>
                    }
                }
            }
        }
        if ( pObjEntry->Read != NULL )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <OBJ_Read+0xe0>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69dc      	ldr	r4, [r3, #28]
 8008400:	7b79      	ldrb	r1, [r7, #13]
 8008402:	89f8      	ldrh	r0, [r7, #14]
 8008404:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	47a0      	blx	r4
 8008410:	4603      	mov	r3, r0
 8008412:	e2dd      	b.n	80089d0 <OBJ_Read+0x69c>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8008414:	89fb      	ldrh	r3, [r7, #14]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d27b      	bcs.n	8008514 <OBJ_Read+0x1e0>
 800841c:	7b7b      	ldrb	r3, [r7, #13]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d078      	beq.n	8008514 <OBJ_Read+0x1e0>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	633b      	str	r3, [r7, #48]	; 0x30
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8008428:	7b7b      	ldrb	r3, [r7, #13]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fd6d 	bl	8007f0c <OBJ_GetEntryDesc>
 8008432:	6238      	str	r0, [r7, #32]
            size = BIT2BYTE(pEntry->BitLength);
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	3307      	adds	r3, #7
 800843a:	10db      	asrs	r3, r3, #3
 800843c:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8008442:	7b7b      	ldrb	r3, [r7, #13]
 8008444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008448:	3b01      	subs	r3, #1
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	4413      	add	r3, r2
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	633b      	str	r3, [r7, #48]	; 0x30

            if( ( ((UINT32)pVarPtr) & 0x1 ) == 0x1 )
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d043      	beq.n	80084e6 <OBJ_Read+0x1b2>
            {
                /*enum is stored at an odd address*/
                UINT16 cnt = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	85fb      	strh	r3, [r7, #46]	; 0x2e

                //get last even WORD address
                /*ECATCHANGE_START(V5.11) SDO3*/
//                pVarPtr = (UINT16 MBXMEM *)( ((MEM_ADDR)pVarPtr) & ~(MEM_ADDR)0x1);
                pVarPtr = (UINT16 MBXMEM *)( ((UINT32)pVarPtr) & ~(UINT32)0x1);
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
                /*ECATCHANGE_END(V5.11) SDO3*/

                for(cnt = 0; cnt < (size / 2);cnt++)
 800846a:	2300      	movs	r3, #0
 800846c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800846e:	e01b      	b.n	80084a8 <OBJ_Read+0x174>
                {
                    //clear destination buffer
                    pData[0] = (pVarPtr[0] & 0xFF00) >> 8;
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	b29a      	uxth	r2, r3
 8008478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847a:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[1] & 0xFF) << 8;
 800847c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b21a      	sxth	r2, r3
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	3302      	adds	r3, #2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b21b      	sxth	r3, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	b21b      	sxth	r3, r3
 8008490:	b29a      	uxth	r2, r3
 8008492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008494:	801a      	strh	r2, [r3, #0]

                    pData++;
 8008496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008498:	3302      	adds	r3, #2
 800849a:	64bb      	str	r3, [r7, #72]	; 0x48
                    pVarPtr++;
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	3302      	adds	r3, #2
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30
                for(cnt = 0; cnt < (size / 2);cnt++)
 80084a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084a4:	3301      	adds	r3, #1
 80084a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80084a8:	8bfb      	ldrh	r3, [r7, #30]
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d3dd      	bcc.n	8008470 <OBJ_Read+0x13c>
                }

                if((size % 2) == 1)
 80084b4:	8bfb      	ldrh	r3, [r7, #30]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8285 	beq.w	80089cc <OBJ_Read+0x698>
                {
                    pData[0] &= 0xFF00; //Clear last Byte
 80084c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[0] & 0xFF00) >> 8; //Write last byte
 80084d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4313      	orrs	r3, r2
 80084de:	b29a      	uxth	r2, r3
 80084e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e2:	801a      	strh	r2, [r3, #0]
        {
 80084e4:	e272      	b.n	80089cc <OBJ_Read+0x698>
                }
            }
            else
            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ec:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 80084ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f0:	3302      	adds	r3, #2
 80084f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f4:	8852      	ldrh	r2, [r2, #2]
 80084f6:	801a      	strh	r2, [r3, #0]
            pData += 2;
 80084f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fa:	3304      	adds	r3, #4
 80084fc:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	3304      	adds	r3, #4
 8008502:	633b      	str	r3, [r7, #48]	; 0x30

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 8008504:	8bfb      	ldrh	r3, [r7, #30]
 8008506:	3b04      	subs	r3, #4
 8008508:	461a      	mov	r2, r3
 800850a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800850c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800850e:	f002 fa71 	bl	800a9f4 <memcpy>
        {
 8008512:	e25b      	b.n	80089cc <OBJ_Read+0x698>
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 8008514:	2300      	movs	r3, #0
 8008516:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            UINT8 result = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 8008520:	7b7b      	ldrb	r3, [r7, #13]
 8008522:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008524:	e246      	b.n	80089b4 <OBJ_Read+0x680>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	857b      	strh	r3, [r7, #42]	; 0x2a

                if (i == 0)
 8008530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <OBJ_Read+0x21a>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 8008536:	89fb      	ldrh	r3, [r7, #14]
 8008538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853c:	d307      	bcc.n	800854e <OBJ_Read+0x21a>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800853e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008540:	b2db      	uxtb	r3, r3
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fd19 	bl	8007f7c <OBJ_GetEntryOffset>
 800854a:	4603      	mov	r3, r0
 800854c:	857b      	strh	r3, [r7, #42]	; 0x2a
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 800854e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008550:	091b      	lsrs	r3, r3, #4
 8008552:	b29b      	uxth	r3, r3
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 800855c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800855e:	b2db      	uxtb	r3, r3
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fcd2 	bl	8007f0c <OBJ_GetEntryDesc>
 8008568:	6238      	str	r0, [r7, #32]

                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) >= (nAlStatus & STATE_MASK) )
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	889b      	ldrh	r3, [r3, #4]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 020e 	and.w	r2, r3, #14
 8008578:	4b1e      	ldr	r3, [pc, #120]	; (80085f4 <OBJ_Read+0x2c0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	429a      	cmp	r2, r3
 8008582:	f2c0 81cf 	blt.w	8008924 <OBJ_Read+0x5f0>
                {
                    if ( i == subindex                                     /* requested entry */
 8008586:	7b7b      	ldrb	r3, [r7, #13]
 8008588:	b29b      	uxth	r3, r3
 800858a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800858c:	429a      	cmp	r2, r3
 800858e:	d00a      	beq.n	80085a6 <OBJ_Read+0x272>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8008590:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 820a 	beq.w	80089ae <OBJ_Read+0x67a>
 800859a:	7b7b      	ldrb	r3, [r7, #13]
 800859c:	b29b      	uxth	r3, r3
 800859e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80085a0:	429a      	cmp	r2, r3
 80085a2:	f0c0 8204 	bcc.w	80089ae <OBJ_Read+0x67a>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 80085a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <OBJ_Read+0x28e>
 80085ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d006      	beq.n	80085c2 <OBJ_Read+0x28e>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 80085b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80085b8:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 80085ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085bc:	3302      	adds	r3, #2
 80085be:	64bb      	str	r3, [r7, #72]	; 0x48
 80085c0:	e1f5      	b.n	80089ae <OBJ_Read+0x67a>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	853b      	strh	r3, [r7, #40]	; 0x28
                            if (pEntry->DataType >= 0x700)
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085d0:	d318      	bcc.n	8008604 <OBJ_Read+0x2d0>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d804      	bhi.n	80085e4 <OBJ_Read+0x2b0>
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	332f      	adds	r3, #47	; 0x2f
 80085e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80085e2:	e00f      	b.n	8008604 <OBJ_Read+0x2d0>
                                else if ( pEntry->BitLength == 16 )
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	885b      	ldrh	r3, [r3, #2]
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d105      	bne.n	80085f8 <OBJ_Read+0x2c4>
                                    dataType = DEFTYPE_UNSIGNED16;
 80085ec:	2306      	movs	r3, #6
 80085ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80085f0:	e008      	b.n	8008604 <OBJ_Read+0x2d0>
 80085f2:	bf00      	nop
 80085f4:	20000ac1 	.word	0x20000ac1
                                else if ( pEntry->BitLength == 32 )
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d101      	bne.n	8008604 <OBJ_Read+0x2d0>
                                    dataType = DEFTYPE_UNSIGNED32;
 8008600:	2307      	movs	r3, #7
 8008602:	853b      	strh	r3, [r7, #40]	; 0x28
                            }

                            switch (dataType)
 8008604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008606:	2b37      	cmp	r3, #55	; 0x37
 8008608:	dc78      	bgt.n	80086fc <OBJ_Read+0x3c8>
 800860a:	2b00      	cmp	r3, #0
 800860c:	f2c0 817f 	blt.w	800890e <OBJ_Read+0x5da>
 8008610:	2b37      	cmp	r3, #55	; 0x37
 8008612:	f200 817c 	bhi.w	800890e <OBJ_Read+0x5da>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <OBJ_Read+0x2e8>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	08008709 	.word	0x08008709
 8008620:	0800874d 	.word	0x0800874d
 8008624:	0800874d 	.word	0x0800874d
 8008628:	080087f1 	.word	0x080087f1
 800862c:	0800880f 	.word	0x0800880f
 8008630:	0800874d 	.word	0x0800874d
 8008634:	080087f1 	.word	0x080087f1
 8008638:	0800880f 	.word	0x0800880f
 800863c:	0800880f 	.word	0x0800880f
 8008640:	080088c1 	.word	0x080088c1
 8008644:	08008873 	.word	0x08008873
 8008648:	08008873 	.word	0x08008873
 800864c:	0800890f 	.word	0x0800890f
 8008650:	0800890f 	.word	0x0800890f
 8008654:	0800890f 	.word	0x0800890f
 8008658:	0800890f 	.word	0x0800890f
 800865c:	0800890f 	.word	0x0800890f
 8008660:	08008837 	.word	0x08008837
 8008664:	0800890f 	.word	0x0800890f
 8008668:	0800890f 	.word	0x0800890f
 800866c:	0800890f 	.word	0x0800890f
 8008670:	08008837 	.word	0x08008837
 8008674:	0800890f 	.word	0x0800890f
 8008678:	0800890f 	.word	0x0800890f
 800867c:	0800890f 	.word	0x0800890f
 8008680:	0800890f 	.word	0x0800890f
 8008684:	0800890f 	.word	0x0800890f
 8008688:	08008837 	.word	0x08008837
 800868c:	0800890f 	.word	0x0800890f
 8008690:	0800890f 	.word	0x0800890f
 8008694:	0800874d 	.word	0x0800874d
 8008698:	080087f1 	.word	0x080087f1
 800869c:	0800880f 	.word	0x0800880f
 80086a0:	0800890f 	.word	0x0800890f
 80086a4:	0800890f 	.word	0x0800890f
 80086a8:	0800890f 	.word	0x0800890f
 80086ac:	0800890f 	.word	0x0800890f
 80086b0:	0800890f 	.word	0x0800890f
 80086b4:	0800890f 	.word	0x0800890f
 80086b8:	0800890f 	.word	0x0800890f
 80086bc:	0800890f 	.word	0x0800890f
 80086c0:	0800890f 	.word	0x0800890f
 80086c4:	0800890f 	.word	0x0800890f
 80086c8:	0800890f 	.word	0x0800890f
 80086cc:	0800890f 	.word	0x0800890f
 80086d0:	0800874d 	.word	0x0800874d
 80086d4:	080087f1 	.word	0x080087f1
 80086d8:	0800880f 	.word	0x0800880f
 80086dc:	0800874d 	.word	0x0800874d
 80086e0:	0800874d 	.word	0x0800874d
 80086e4:	0800874d 	.word	0x0800874d
 80086e8:	0800874d 	.word	0x0800874d
 80086ec:	0800874d 	.word	0x0800874d
 80086f0:	0800874d 	.word	0x0800874d
 80086f4:	0800874d 	.word	0x0800874d
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8008700:	2b03      	cmp	r3, #3
 8008702:	f200 8104 	bhi.w	800890e <OBJ_Read+0x5da>
 8008706:	e0b4      	b.n	8008872 <OBJ_Read+0x53e>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8008708:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01b      	beq.n	8008748 <OBJ_Read+0x414>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	885b      	ldrh	r3, [r3, #2]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2b00      	cmp	r3, #0
 800871a:	dd0b      	ble.n	8008734 <OBJ_Read+0x400>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	885a      	ldrh	r2, [r3, #2]
 8008720:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008722:	4413      	add	r3, r2
 8008724:	b29b      	uxth	r3, r3
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <OBJ_Read+0x400>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 800872e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008730:	3302      	adds	r3, #2
 8008732:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	111b      	asrs	r3, r3, #4
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008742:	4413      	add	r3, r2
 8008744:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 8008746:	e0e9      	b.n	800891c <OBJ_Read+0x5e8>
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8008748:	2318      	movs	r3, #24
 800874a:	e141      	b.n	80089d0 <OBJ_Read+0x69c>
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 800874c:	2300      	movs	r3, #0
 800874e:	827b      	strh	r3, [r7, #18]

                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	885b      	ldrh	r3, [r3, #2]
 8008754:	461a      	mov	r2, r3
 8008756:	4ba0      	ldr	r3, [pc, #640]	; (80089d8 <OBJ_Read+0x6a4>)
 8008758:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800875c:	461a      	mov	r2, r3
 800875e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	fa02 f303 	lsl.w	r3, r2, r3
 8008768:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 8008770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	2b00      	cmp	r3, #0
 8008778:	d102      	bne.n	8008780 <OBJ_Read+0x44c>
                                    {
                                        pData[0] = 0;
 800877a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877c:	2200      	movs	r2, #0
 800877e:	801a      	strh	r2, [r3, #0]
                                    }

/* ECATCHANGE_START(V5.11) SDO7*/
                                    pData[0] = SWAPWORD(pData[0]);
 8008780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008782:	881a      	ldrh	r2, [r3, #0]
 8008784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008786:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 8008788:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <OBJ_Read+0x472>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 8008790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008792:	881a      	ldrh	r2, [r3, #0]
 8008794:	8a79      	ldrh	r1, [r7, #18]
 8008796:	8a3b      	ldrh	r3, [r7, #16]
 8008798:	400b      	ands	r3, r1
 800879a:	b29b      	uxth	r3, r3
 800879c:	4313      	orrs	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a2:	801a      	strh	r2, [r3, #0]
 80087a4:	e012      	b.n	80087cc <OBJ_Read+0x498>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 80087a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b21a      	sxth	r2, r3
 80087ac:	8a79      	ldrh	r1, [r7, #18]
 80087ae:	8a3b      	ldrh	r3, [r7, #16]
 80087b0:	400b      	ands	r3, r1
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	fa41 f303 	asr.w	r3, r1, r3
 80087c0:	b21b      	sxth	r3, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b21b      	sxth	r3, r3
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ca:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80087cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d2:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO7*/
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	885a      	ldrh	r2, [r3, #2]
 80087d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087da:	4413      	add	r3, r2
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 8095 	bne.w	8008912 <OBJ_Read+0x5de>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 80087e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ea:	3302      	adds	r3, #2
 80087ec:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 80087ee:	e090      	b.n	8008912 <OBJ_Read+0x5de>
                            case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80087f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <OBJ_Read+0x4ca>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80087fa:	2305      	movs	r3, #5
 80087fc:	e0e8      	b.n	80089d0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	881a      	ldrh	r2, [r3, #0]
 8008802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008804:	801a      	strh	r2, [r3, #0]
                                pData++;
 8008806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008808:	3302      	adds	r3, #2
 800880a:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 800880c:	e086      	b.n	800891c <OBJ_Read+0x5e8>
                            case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800880e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <OBJ_Read+0x4e8>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8008818:	2305      	movs	r3, #5
 800881a:	e0d9      	b.n	80089d0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	881a      	ldrh	r2, [r3, #0]
 8008820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008822:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8008824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008826:	3302      	adds	r3, #2
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	8852      	ldrh	r2, [r2, #2]
 800882c:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 800882e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008830:	3304      	adds	r3, #4
 8008832:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8008834:	e072      	b.n	800891c <OBJ_Read+0x5e8>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8008836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <OBJ_Read+0x510>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8008840:	2305      	movs	r3, #5
 8008842:	e0c5      	b.n	80089d0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	881a      	ldrh	r2, [r3, #0]
 8008848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884a:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 800884c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884e:	3302      	adds	r3, #2
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	8852      	ldrh	r2, [r2, #2]
 8008854:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 8008856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008858:	3304      	adds	r3, #4
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	8892      	ldrh	r2, [r2, #4]
 800885e:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8008860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008862:	3306      	adds	r3, #6
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	88d2      	ldrh	r2, [r2, #6]
 8008868:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	3308      	adds	r3, #8
 800886e:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8008870:	e054      	b.n	800891c <OBJ_Read+0x5e8>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8008872:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <OBJ_Read+0x54c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800887c:	2305      	movs	r3, #5
 800887e:	e0a7      	b.n	80089d0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	885b      	ldrh	r3, [r3, #2]
 8008884:	3307      	adds	r3, #7
 8008886:	10db      	asrs	r3, r3, #3
 8008888:	461a      	mov	r2, r3
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800888e:	f002 f8b1 	bl	800a9f4 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	f023 030f 	bic.w	r3, r3, #15
 800889a:	330f      	adds	r3, #15
 800889c:	111b      	asrs	r3, r3, #4
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a2:	4413      	add	r3, r2
 80088a4:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d031      	beq.n	8008916 <OBJ_Read+0x5e2>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80088b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088bc:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/

                                break;
 80088be:	e02a      	b.n	8008916 <OBJ_Read+0x5e2>
                            case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80088c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <OBJ_Read+0x59a>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80088ca:	2305      	movs	r3, #5
 80088cc:	e080      	b.n	80089d0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	3307      	adds	r3, #7
 80088d4:	10db      	asrs	r3, r3, #3
 80088d6:	461a      	mov	r2, r3
 80088d8:	6979      	ldr	r1, [r7, #20]
 80088da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80088dc:	f002 f88a 	bl	800a9f4 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	f023 030f 	bic.w	r3, r3, #15
 80088e8:	330f      	adds	r3, #15
 80088ea:	111b      	asrs	r3, r3, #4
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f0:	4413      	add	r3, r2
 80088f2:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00c      	beq.n	800891a <OBJ_Read+0x5e6>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8008900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	b29a      	uxth	r2, r3
 8008908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800890a:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/
                                
                                break;
 800890c:	e005      	b.n	800891a <OBJ_Read+0x5e6>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800890e:	2318      	movs	r3, #24
 8008910:	e05e      	b.n	80089d0 <OBJ_Read+0x69c>
                                break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <OBJ_Read+0x5e8>
                                break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <OBJ_Read+0x5e8>
                                break;
 800891a:	bf00      	nop
                            } //switch (deftype)

                            bRead = 1;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008922:	e044      	b.n	80089ae <OBJ_Read+0x67a>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 800892a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <OBJ_Read+0x606>
                    {
                        *pData = 0;
 8008934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008936:	2200      	movs	r2, #0
 8008938:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	2b00      	cmp	r3, #0
 8008944:	dd0e      	ble.n	8008964 <OBJ_Read+0x630>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	885a      	ldrh	r2, [r3, #2]
 800894a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800894c:	4413      	add	r3, r2
 800894e:	b29b      	uxth	r3, r3
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	2b00      	cmp	r3, #0
 8008956:	d105      	bne.n	8008964 <OBJ_Read+0x630>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8008958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895a:	3302      	adds	r3, #2
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008960:	2200      	movs	r2, #0
 8008962:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800896a:	e00a      	b.n	8008982 <OBJ_Read+0x64e>
                    {
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 800896c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896e:	3302      	adds	r3, #2
 8008970:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 8008972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008974:	2200      	movs	r2, #0
 8008976:	801a      	strh	r2, [r3, #0]
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8008978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800897c:	3301      	adds	r3, #1
 800897e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008982:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	111b      	asrs	r3, r3, #4
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	429a      	cmp	r2, r3
 8008992:	dbeb      	blt.n	800896c <OBJ_Read+0x638>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	889b      	ldrh	r3, [r3, #4]
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <OBJ_Read+0x674>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 80089a0:	2306      	movs	r3, #6
 80089a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80089a6:	e002      	b.n	80089ae <OBJ_Read+0x67a>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80089a8:	231a      	movs	r3, #26
 80089aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            for (i = subindex; i <= lastSubindex; i++)
 80089ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089b0:	3301      	adds	r3, #1
 80089b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80089b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80089b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089b8:	429a      	cmp	r2, r3
 80089ba:	f67f adb4 	bls.w	8008526 <OBJ_Read+0x1f2>
                    }
                }
            }

            if(bRead == 0)
 80089be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <OBJ_Read+0x69a>
                return result;
 80089c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089ca:	e001      	b.n	80089d0 <OBJ_Read+0x69c>
        {
 80089cc:	bf00      	nop
        }
    }

    return 0;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	373c      	adds	r7, #60	; 0x3c
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd90      	pop	{r4, r7, pc}
 80089d8:	0800b574 	.word	0x0800b574

080089dc <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b091      	sub	sp, #68	; 0x44
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60ba      	str	r2, [r7, #8]
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	4603      	mov	r3, r0
 80089e8:	81fb      	strh	r3, [r7, #14]
 80089ea:	460b      	mov	r3, r1
 80089ec:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 80089ee:	7b7b      	ldrb	r3, [r7, #13]
 80089f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	899b      	ldrh	r3, [r3, #12]
 80089f6:	121b      	asrs	r3, r3, #8
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	899b      	ldrh	r3, [r3, #12]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8008a14:	7b7b      	ldrb	r3, [r7, #13]
 8008a16:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 8008a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a1c:	2b07      	cmp	r3, #7
 8008a1e:	d023      	beq.n	8008a68 <OBJ_Write+0x8c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	86bb      	strh	r3, [r7, #52]	; 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index)))
 8008a2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11b      	bne.n	8008a68 <OBJ_Write+0x8c>
 8008a30:	89fb      	ldrh	r3, [r7, #14]
 8008a32:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d904      	bls.n	8008a44 <OBJ_Write+0x68>
 8008a3a:	89fb      	ldrh	r3, [r7, #14]
 8008a3c:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d90f      	bls.n	8008a64 <OBJ_Write+0x88>
 8008a44:	89fb      	ldrh	r3, [r7, #14]
 8008a46:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8008a4a:	d303      	bcc.n	8008a54 <OBJ_Write+0x78>
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
 8008a4e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008a52:	d307      	bcc.n	8008a64 <OBJ_Write+0x88>
 8008a54:	89fb      	ldrh	r3, [r7, #14]
 8008a56:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8008a5a:	d305      	bcc.n	8008a68 <OBJ_Write+0x8c>
 8008a5c:	89fb      	ldrh	r3, [r7, #14]
 8008a5e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008a62:	d201      	bcs.n	8008a68 <OBJ_Write+0x8c>
        {
            maxSubindex = maxConfiguredSubindex;
 8008a64:	8c3b      	ldrh	r3, [r7, #32]
 8008a66:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8008a68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d012      	beq.n	8008a96 <OBJ_Write+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 8008a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a74:	2b07      	cmp	r3, #7
 8008a76:	d101      	bne.n	8008a7c <OBJ_Write+0xa0>
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8008a78:	2305      	movs	r3, #5
 8008a7a:	e306      	b.n	800908a <OBJ_Write+0x6ae>

        if ((subindex == 0) && (dataSize > 0))
 8008a7c:	7b7b      	ldrb	r3, [r7, #13]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <OBJ_Write+0xb4>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <OBJ_Write+0xb4>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 8008a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 8008a90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a92:	863b      	strh	r3, [r7, #48]	; 0x30
 8008a94:	e022      	b.n	8008adc <OBJ_Write+0x100>
    }
    else
    if (subindex > maxSubindex)
 8008a96:	7b7b      	ldrb	r3, [r7, #13]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d201      	bcs.n	8008aa4 <OBJ_Write+0xc8>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8008aa0:	2311      	movs	r3, #17
 8008aa2:	e2f2      	b.n	800908a <OBJ_Write+0x6ae>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8008aa4:	7b7b      	ldrb	r3, [r7, #13]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fa2f 	bl	8007f0c <OBJ_GetEntryDesc>
 8008aae:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) < (nAlStatus & STATE_MASK) )
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	889b      	ldrh	r3, [r3, #4]
 8008ab4:	109b      	asrs	r3, r3, #2
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 020e 	and.w	r2, r3, #14
 8008abc:	4bb5      	ldr	r3, [pc, #724]	; (8008d94 <OBJ_Write+0x3b8>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	da09      	bge.n	8008adc <OBJ_Write+0x100>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	889b      	ldrh	r3, [r3, #4]
 8008acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <OBJ_Write+0xfc>
            {
                /* it is a read only entry */
                return ABORTIDX_READ_ONLY_ENTRY;
 8008ad4:	2307      	movs	r3, #7
 8008ad6:	e2d8      	b.n	800908a <OBJ_Write+0x6ae>
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8008ad8:	231a      	movs	r3, #26
 8008ada:	e2d6      	b.n	800908a <OBJ_Write+0x6ae>
        }
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 8008adc:	7b7b      	ldrb	r3, [r7, #13]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d024      	beq.n	8008b2c <OBJ_Write+0x150>
 8008ae2:	89fb      	ldrh	r3, [r7, #14]
 8008ae4:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d904      	bls.n	8008af6 <OBJ_Write+0x11a>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index))
 8008aec:	89fb      	ldrh	r3, [r7, #14]
 8008aee:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d90f      	bls.n	8008b16 <OBJ_Write+0x13a>
 8008af6:	89fb      	ldrh	r3, [r7, #14]
 8008af8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8008afc:	d303      	bcc.n	8008b06 <OBJ_Write+0x12a>
 8008afe:	89fb      	ldrh	r3, [r7, #14]
 8008b00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008b04:	d307      	bcc.n	8008b16 <OBJ_Write+0x13a>
 8008b06:	89fb      	ldrh	r3, [r7, #14]
 8008b08:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8008b0c:	d30e      	bcc.n	8008b2c <OBJ_Write+0x150>
 8008b0e:	89fb      	ldrh	r3, [r7, #14]
 8008b10:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008b14:	d20a      	bcs.n	8008b2c <OBJ_Write+0x150>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 8008b20:	8b7b      	ldrh	r3, [r7, #26]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <OBJ_Write+0x150>
            bClearSubindex0Required = TRUE;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    if ( pObjEntry->Write != NULL )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <OBJ_Write+0x170>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1c      	ldr	r4, [r3, #32]
 8008b38:	7b79      	ldrb	r1, [r7, #13]
 8008b3a:	89f8      	ldrh	r0, [r7, #14]
 8008b3c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	47a0      	blx	r4
 8008b48:	4603      	mov	r3, r0
 8008b4a:	e29e      	b.n	800908a <OBJ_Write+0x6ae>
    }
    else
    {
        UINT8 bWritten = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 8008b52:	2307      	movs	r3, #7
 8008b54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

/*ECATCHANGE_START(V5.11) ECAT*/
        if (dataSize == 0)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <OBJ_Write+0x186>
        {
           return 0; //no error
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e293      	b.n	800908a <OBJ_Write+0x6ae>
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8008b62:	7b7b      	ldrb	r3, [r7, #13]
 8008b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008b66:	e283      	b.n	8009070 <OBJ_Write+0x694>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 8008b72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff f9c7 	bl	8007f0c <OBJ_GetEntryDesc>
 8008b7e:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8008b80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff f9f8 	bl	8007f7c <OBJ_GetEntryOffset>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if ( ((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) >= (nAlStatus & STATE_MASK) )
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	889b      	ldrh	r3, [r3, #4]
 8008b94:	109b      	asrs	r3, r3, #2
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 020e 	and.w	r2, r3, #14
 8008b9c:	4b7d      	ldr	r3, [pc, #500]	; (8008d94 <OBJ_Write+0x3b8>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	f2c0 8238 	blt.w	800901a <OBJ_Write+0x63e>
            {
                /* we have write access for this entry */
                if (i != 0)
 8008baa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d006      	beq.n	8008bbe <OBJ_Write+0x1e2>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 8008bb0:	8b3b      	ldrh	r3, [r7, #24]
 8008bb2:	091b      	lsrs	r3, r3, #4
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bba:	4413      	add	r3, r2
 8008bbc:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 8008bbe:	7b7b      	ldrb	r3, [r7, #13]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d00a      	beq.n	8008bde <OBJ_Write+0x202>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8008bc8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 824c 	beq.w	800906a <OBJ_Write+0x68e>
 8008bd2:	7b7b      	ldrb	r3, [r7, #13]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	f0c0 8246 	bcc.w	800906a <OBJ_Write+0x68e>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 8008bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d115      	bne.n	8008c10 <OBJ_Write+0x234>
 8008be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008be8:	2b07      	cmp	r3, #7
 8008bea:	d011      	beq.n	8008c10 <OBJ_Write+0x234>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 8008bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	75fb      	strb	r3, [r7, #23]
                        if(maxConfiguredSubindex < NewSubindex0)
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8c3a      	ldrh	r2, [r7, #32]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d201      	bcs.n	8008c00 <OBJ_Write+0x224>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 8008bfc:	2313      	movs	r3, #19
 8008bfe:	e244      	b.n	800908a <OBJ_Write+0x6ae>
                        }

                        /* subindex 0 of an array or record shall be written */
/* ECATCHANGE_START(V5.11) SDO5*/
                        pVarPtr[0] = SWAPWORD(pData[0]);
 8008c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c02:	881a      	ldrh	r2, [r3, #0]
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO5*/
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 8008c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	64bb      	str	r3, [r7, #72]	; 0x48
                    {
 8008c0e:	e200      	b.n	8009012 <OBJ_Write+0x636>
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c1e:	d315      	bcc.n	8008c4c <OBJ_Write+0x270>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	885b      	ldrh	r3, [r3, #2]
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d804      	bhi.n	8008c32 <OBJ_Write+0x256>
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	885b      	ldrh	r3, [r3, #2]
 8008c2c:	332f      	adds	r3, #47	; 0x2f
 8008c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c30:	e00c      	b.n	8008c4c <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 16 )
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d102      	bne.n	8008c40 <OBJ_Write+0x264>
                                dataType = DEFTYPE_UNSIGNED16;
 8008c3a:	2306      	movs	r3, #6
 8008c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c3e:	e005      	b.n	8008c4c <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 32 )
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	885b      	ldrh	r3, [r3, #2]
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d101      	bne.n	8008c4c <OBJ_Write+0x270>
                                dataType = DEFTYPE_UNSIGNED32;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
                        }

                        switch (dataType)
 8008c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c4e:	2b37      	cmp	r3, #55	; 0x37
 8008c50:	dc78      	bgt.n	8008d44 <OBJ_Write+0x368>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f2c0 81da 	blt.w	800900c <OBJ_Write+0x630>
 8008c58:	2b37      	cmp	r3, #55	; 0x37
 8008c5a:	f200 81d7 	bhi.w	800900c <OBJ_Write+0x630>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <OBJ_Write+0x288>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008d51 	.word	0x08008d51
 8008c68:	08008d99 	.word	0x08008d99
 8008c6c:	08008d99 	.word	0x08008d99
 8008c70:	08008e55 	.word	0x08008e55
 8008c74:	08008f15 	.word	0x08008f15
 8008c78:	08008d99 	.word	0x08008d99
 8008c7c:	08008e55 	.word	0x08008e55
 8008c80:	08008f15 	.word	0x08008f15
 8008c84:	08008f15 	.word	0x08008f15
 8008c88:	08008fa1 	.word	0x08008fa1
 8008c8c:	08008fd7 	.word	0x08008fd7
 8008c90:	08008fd7 	.word	0x08008fd7
 8008c94:	0800900d 	.word	0x0800900d
 8008c98:	0800900d 	.word	0x0800900d
 8008c9c:	0800900d 	.word	0x0800900d
 8008ca0:	0800900d 	.word	0x0800900d
 8008ca4:	0800900d 	.word	0x0800900d
 8008ca8:	08008f65 	.word	0x08008f65
 8008cac:	0800900d 	.word	0x0800900d
 8008cb0:	0800900d 	.word	0x0800900d
 8008cb4:	0800900d 	.word	0x0800900d
 8008cb8:	08008f65 	.word	0x08008f65
 8008cbc:	0800900d 	.word	0x0800900d
 8008cc0:	0800900d 	.word	0x0800900d
 8008cc4:	0800900d 	.word	0x0800900d
 8008cc8:	0800900d 	.word	0x0800900d
 8008ccc:	0800900d 	.word	0x0800900d
 8008cd0:	08008f65 	.word	0x08008f65
 8008cd4:	0800900d 	.word	0x0800900d
 8008cd8:	0800900d 	.word	0x0800900d
 8008cdc:	08008d99 	.word	0x08008d99
 8008ce0:	08008e55 	.word	0x08008e55
 8008ce4:	08008f15 	.word	0x08008f15
 8008ce8:	0800900d 	.word	0x0800900d
 8008cec:	0800900d 	.word	0x0800900d
 8008cf0:	0800900d 	.word	0x0800900d
 8008cf4:	0800900d 	.word	0x0800900d
 8008cf8:	0800900d 	.word	0x0800900d
 8008cfc:	0800900d 	.word	0x0800900d
 8008d00:	0800900d 	.word	0x0800900d
 8008d04:	0800900d 	.word	0x0800900d
 8008d08:	0800900d 	.word	0x0800900d
 8008d0c:	0800900d 	.word	0x0800900d
 8008d10:	0800900d 	.word	0x0800900d
 8008d14:	0800900d 	.word	0x0800900d
 8008d18:	08008d99 	.word	0x08008d99
 8008d1c:	08008e55 	.word	0x08008e55
 8008d20:	08008f15 	.word	0x08008f15
 8008d24:	08008d99 	.word	0x08008d99
 8008d28:	08008d99 	.word	0x08008d99
 8008d2c:	08008d99 	.word	0x08008d99
 8008d30:	08008d99 	.word	0x08008d99
 8008d34:	08008d99 	.word	0x08008d99
 8008d38:	08008d99 	.word	0x08008d99
 8008d3c:	08008d99 	.word	0x08008d99
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	f200 815f 	bhi.w	800900c <OBJ_Write+0x630>
 8008d4e:	e142      	b.n	8008fd6 <OBJ_Write+0x5fa>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 8008d50:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01b      	beq.n	8008d90 <OBJ_Write+0x3b4>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	885b      	ldrh	r3, [r3, #2]
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dd0b      	ble.n	8008d7c <OBJ_Write+0x3a0>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	885a      	ldrh	r2, [r3, #2]
 8008d68:	8b3b      	ldrh	r3, [r7, #24]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <OBJ_Write+0x3a0>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8008d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d78:	3302      	adds	r3, #2
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	111b      	asrs	r3, r3, #4
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8a:	4413      	add	r3, r2
 8008d8c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 8008d8e:	e140      	b.n	8009012 <OBJ_Write+0x636>
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8008d90:	2318      	movs	r3, #24
 8008d92:	e17a      	b.n	800908a <OBJ_Write+0x6ae>
 8008d94:	20000ac1 	.word	0x20000ac1
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	885b      	ldrh	r3, [r3, #2]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4ba1      	ldr	r3, [pc, #644]	; (8009028 <OBJ_Write+0x64c>)
 8008da4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008da8:	461a      	mov	r2, r3
 8008daa:	8b3b      	ldrh	r3, [r7, #24]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	827b      	strh	r3, [r7, #18]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8008dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	b21a      	sxth	r2, r3
 8008dc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008dc8:	4013      	ands	r3, r2
 8008dca:	b21b      	sxth	r3, r3
 8008dcc:	84bb      	strh	r3, [r7, #36]	; 0x24

/* ECATCHANGE_START(V5.11) SDO7*/
                            if (bCompleteAccess) 
 8008dce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d008      	beq.n	8008de8 <OBJ_Write+0x40c>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8008dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd8:	881a      	ldrh	r2, [r3, #0]
 8008dda:	8a7b      	ldrh	r3, [r7, #18]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de2:	4313      	orrs	r3, r2
 8008de4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008de6:	e024      	b.n	8008e32 <OBJ_Write+0x456>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4b8c      	ldr	r3, [pc, #560]	; (8009028 <OBJ_Write+0x64c>)
 8008df6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <OBJ_Write+0x42a>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 8008e02:	2312      	movs	r3, #18
 8008e04:	e141      	b.n	800908a <OBJ_Write+0x6ae>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	881a      	ldrh	r2, [r3, #0]
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4b85      	ldr	r3, [pc, #532]	; (8009028 <OBJ_Write+0x64c>)
 8008e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008e16:	4013      	ands	r3, r2
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	8b3b      	ldrh	r3, [r7, #24]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	fa02 f303 	lsl.w	r3, r2, r3
 8008e26:	b21a      	sxth	r2, r3
 8008e28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	b21b      	sxth	r3, r3
 8008e30:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }
/* ECATCHANGE_END(V5.11) SDO7*/

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e36:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	885a      	ldrh	r2, [r3, #2]
 8008e3c:	8b3b      	ldrh	r3, [r7, #24]
 8008e3e:	4413      	add	r3, r2
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 80e2 	bne.w	8009010 <OBJ_Write+0x634>
                                /* we have reached the UINT16 border */
                                pData++;
 8008e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4e:	3302      	adds	r3, #2
 8008e50:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                            break;
 8008e52:	e0dd      	b.n	8009010 <OBJ_Write+0x634>
                        case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8008e54:	8b3b      	ldrh	r3, [r7, #24]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <OBJ_Write+0x486>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8008e5e:	2305      	movs	r3, #5
 8008e60:	e113      	b.n	800908a <OBJ_Write+0x6ae>
/*ECATCHANGE_END(V5.11) SDO1*/

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8008e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8008e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <OBJ_Write+0x4a2>
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	8aba      	ldrh	r2, [r7, #20]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d001      	beq.n	8008e7e <OBJ_Write+0x4a2>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8008e7a:	231c      	movs	r3, #28
 8008e7c:	e105      	b.n	800908a <OBJ_Write+0x6ae>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d919      	bls.n	8008ebc <OBJ_Write+0x4e0>
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d814      	bhi.n	8008ebc <OBJ_Write+0x4e0>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8008e92:	8abb      	ldrh	r3, [r7, #20]
 8008e94:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8008e98:	d303      	bcc.n	8008ea2 <OBJ_Write+0x4c6>
 8008e9a:	8abb      	ldrh	r3, [r7, #20]
 8008e9c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008ea0:	d30c      	bcc.n	8008ebc <OBJ_Write+0x4e0>
 8008ea2:	8abb      	ldrh	r3, [r7, #20]
 8008ea4:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8008ea8:	d303      	bcc.n	8008eb2 <OBJ_Write+0x4d6>
 8008eaa:	8abb      	ldrh	r3, [r7, #20]
 8008eac:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008eb0:	d304      	bcc.n	8008ebc <OBJ_Write+0x4e0>
 8008eb2:	8abb      	ldrh	r3, [r7, #20]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <OBJ_Write+0x4e0>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8008eb8:	2312      	movs	r3, #18
 8008eba:	e0e6      	b.n	800908a <OBJ_Write+0x6ae>
                                }
                            }

                            if((index == 0x1C32 || index == 0x1C33) && (i == 1))
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	f641 4232 	movw	r2, #7218	; 0x1c32
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d004      	beq.n	8008ed0 <OBJ_Write+0x4f4>
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d11a      	bne.n	8008f06 <OBJ_Write+0x52a>
 8008ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d117      	bne.n	8008f06 <OBJ_Write+0x52a>
                            {
                                /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                if(pVarPtr[0] != u16NewData)
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	8aba      	ldrh	r2, [r7, #20]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d00f      	beq.n	8008f00 <OBJ_Write+0x524>
                                {
                                    result = CheckSyncTypeValue(index,u16NewData);
 8008ee0:	8aba      	ldrh	r2, [r7, #20]
 8008ee2:	89fb      	ldrh	r3, [r7, #14]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff f94a 	bl	8008180 <CheckSyncTypeValue>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                    if(result != 0)
 8008ef2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <OBJ_Write+0x524>
                                        return result;
 8008efa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008efe:	e0c4      	b.n	800908a <OBJ_Write+0x6ae>
                                }

                                /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                bSyncSetByUser = TRUE;
 8008f00:	4b4a      	ldr	r3, [pc, #296]	; (800902c <OBJ_Write+0x650>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
                            }

                            pVarPtr[0] = u16NewData;
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	8aba      	ldrh	r2, [r7, #20]
 8008f0a:	801a      	strh	r2, [r3, #0]
                            pData++;
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0e:	3302      	adds	r3, #2
 8008f10:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8008f12:	e07e      	b.n	8009012 <OBJ_Write+0x636>
                        case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8008f14:	8b3b      	ldrh	r3, [r7, #24]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <OBJ_Write+0x546>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8008f1e:	2305      	movs	r3, #5
 8008f20:	e0b3      	b.n	800908a <OBJ_Write+0x6ae>
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8008f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00f      	beq.n	8008f4a <OBJ_Write+0x56e>
                                ((pVarPtr[0] != pData[0])
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	881a      	ldrh	r2, [r3, #0]
 8008f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f30:	881b      	ldrh	r3, [r3, #0]
                            if(bClearSubindex0Required && 
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d107      	bne.n	8008f46 <OBJ_Write+0x56a>
                                || (pVarPtr[1] != pData[1])))
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	3302      	adds	r3, #2
 8008f3a:	881a      	ldrh	r2, [r3, #0]
 8008f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3e:	3302      	adds	r3, #2
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d001      	beq.n	8008f4a <OBJ_Write+0x56e>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8008f46:	231c      	movs	r3, #28
 8008f48:	e09f      	b.n	800908a <OBJ_Write+0x6ae>
                            }

                            pVarPtr[0] = pData[0];
 8008f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4c:	881a      	ldrh	r2, [r3, #0]
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	3302      	adds	r3, #2
 8008f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f58:	8852      	ldrh	r2, [r2, #2]
 8008f5a:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5e:	3304      	adds	r3, #4
 8008f60:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8008f62:	e056      	b.n	8009012 <OBJ_Write+0x636>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8008f64:	8b3b      	ldrh	r3, [r7, #24]
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <OBJ_Write+0x596>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8008f6e:	2305      	movs	r3, #5
 8008f70:	e08b      	b.n	800908a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8008f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f74:	881a      	ldrh	r2, [r3, #0]
 8008f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f78:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f80:	8852      	ldrh	r2, [r2, #2]
 8008f82:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	3304      	adds	r3, #4
 8008f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f8a:	8892      	ldrh	r2, [r2, #4]
 8008f8c:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	3306      	adds	r3, #6
 8008f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f94:	88d2      	ldrh	r2, [r2, #6]
 8008f96:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 8008f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 8008f9e:	e038      	b.n	8009012 <OBJ_Write+0x636>
                        case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8008fa0:	8b3b      	ldrh	r3, [r7, #24]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <OBJ_Write+0x5d2>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8008faa:	2305      	movs	r3, #5
 8008fac:	e06d      	b.n	800908a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	3307      	adds	r3, #7
 8008fb4:	10db      	asrs	r3, r3, #3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fbc:	f001 fd1a 	bl	800a9f4 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	f023 030f 	bic.w	r3, r3, #15
 8008fc8:	330f      	adds	r3, #15
 8008fca:	111b      	asrs	r3, r3, #4
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fd0:	4413      	add	r3, r2
 8008fd2:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/
                            break;
 8008fd4:	e01d      	b.n	8009012 <OBJ_Write+0x636>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8008fd6:	8b3b      	ldrh	r3, [r7, #24]
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <OBJ_Write+0x608>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8008fe0:	2305      	movs	r3, #5
 8008fe2:	e052      	b.n	800908a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	885b      	ldrh	r3, [r3, #2]
 8008fe8:	3307      	adds	r3, #7
 8008fea:	10db      	asrs	r3, r3, #3
 8008fec:	461a      	mov	r2, r3
 8008fee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff2:	f001 fcff 	bl	800a9f4 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	885b      	ldrh	r3, [r3, #2]
 8008ffa:	f023 030f 	bic.w	r3, r3, #15
 8008ffe:	330f      	adds	r3, #15
 8009000:	111b      	asrs	r3, r3, #4
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009006:	4413      	add	r3, r2
 8009008:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/

                            break;
 800900a:	e002      	b.n	8009012 <OBJ_Write+0x636>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800900c:	2318      	movs	r3, #24
 800900e:	e03c      	b.n	800908a <OBJ_Write+0x6ae>
                            break;
 8009010:	bf00      	nop
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009018:	e027      	b.n	800906a <OBJ_Write+0x68e>

                }
            }
            else
            {
                if(i == 0)
 800901a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800901c:	2b00      	cmp	r3, #0
 800901e:	d107      	bne.n	8009030 <OBJ_Write+0x654>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8009020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009022:	3302      	adds	r3, #2
 8009024:	64bb      	str	r3, [r7, #72]	; 0x48
 8009026:	e01d      	b.n	8009064 <OBJ_Write+0x688>
 8009028:	0800b574 	.word	0x0800b574
 800902c:	20000e20 	.word	0x20000e20
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	885b      	ldrh	r3, [r3, #2]
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	2b00      	cmp	r3, #0
 800903a:	dd0b      	ble.n	8009054 <OBJ_Write+0x678>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	885a      	ldrh	r2, [r3, #2]
 8009040:	8b3b      	ldrh	r3, [r7, #24]
 8009042:	4413      	add	r3, r2
 8009044:	b29b      	uxth	r3, r3
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <OBJ_Write+0x678>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 800904e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009050:	3302      	adds	r3, #2
 8009052:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
/*ECATCHANGE_START(V5.11) SDO9*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	885b      	ldrh	r3, [r3, #2]
 8009058:	091b      	lsrs	r3, r3, #4
 800905a:	b29b      	uxth	r3, r3
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009060:	4413      	add	r3, r2
 8009062:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO9*/
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8009064:	2318      	movs	r3, #24
 8009066:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        for (i = subindex; i <= lastSubindex; i++)
 800906a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800906c:	3301      	adds	r3, #1
 800906e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009070:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009072:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009074:	429a      	cmp	r2, r3
 8009076:	f67f ad77 	bls.w	8008b68 <OBJ_Write+0x18c>
            }
        }

        if (bWritten == 0)
 800907a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <OBJ_Write+0x6ac>
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8009082:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009086:	e000      	b.n	800908a <OBJ_Write+0x6ae>
    }

    return 0;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	373c      	adds	r7, #60	; 0x3c
 800908e:	46bd      	mov	sp, r7
 8009090:	bd90      	pop	{r4, r7, pc}
 8009092:	bf00      	nop

08009094 <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8009094:	b5b0      	push	{r4, r5, r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	613b      	str	r3, [r7, #16]

    if ( (pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	891b      	ldrh	r3, [r3, #8]
 80090a8:	f003 0310 	and.w	r3, r3, #16
 80090ac:	4a99      	ldr	r2, [pc, #612]	; (8009314 <SdoDownloadSegmentInd+0x280>)
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d102      	bne.n	80090ba <SdoDownloadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 80090b4:	2301      	movs	r3, #1
 80090b6:	75fb      	strb	r3, [r7, #23]
 80090b8:	e156      	b.n	8009368 <SdoDownloadSegmentInd+0x2d4>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 80090ba:	4b97      	ldr	r3, [pc, #604]	; (8009318 <SdoDownloadSegmentInd+0x284>)
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	3b09      	subs	r3, #9
 80090c0:	81bb      	strh	r3, [r7, #12]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	891b      	ldrh	r3, [r3, #8]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	4b91      	ldr	r3, [pc, #580]	; (8009314 <SdoDownloadSegmentInd+0x280>)
 80090d0:	701a      	strb	r2, [r3, #0]

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 80090d2:	4b92      	ldr	r3, [pc, #584]	; (800931c <SdoDownloadSegmentInd+0x288>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8144 	beq.w	8009364 <SdoDownloadSegmentInd+0x2d0>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 80090dc:	4b90      	ldr	r3, [pc, #576]	; (8009320 <SdoDownloadSegmentInd+0x28c>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b90      	ldr	r3, [pc, #576]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	891b      	ldrh	r3, [r3, #8]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d02a      	beq.n	800914a <SdoDownloadSegmentInd+0xb6>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 80090f4:	89bb      	ldrh	r3, [r7, #12]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d823      	bhi.n	8009144 <SdoDownloadSegmentInd+0xb0>
                {
/* ECATCHANGE_START(V5.11) ECAT7*/
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	817b      	strh	r3, [r7, #10]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	3b03      	subs	r3, #3
 8009106:	461a      	mov	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4293      	cmp	r3, r2
 800910c:	d80a      	bhi.n	8009124 <SdoDownloadSegmentInd+0x90>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	891b      	ldrh	r3, [r3, #8]
 8009112:	105b      	asrs	r3, r3, #1
 8009114:	b29b      	uxth	r3, r3
 8009116:	43db      	mvns	r3, r3
 8009118:	b29b      	uxth	r3, r3
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	429a      	cmp	r2, r3
 8009122:	d008      	beq.n	8009136 <SdoDownloadSegmentInd+0xa2>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b07      	cmp	r3, #7
 8009128:	d909      	bls.n	800913e <SdoDownloadSegmentInd+0xaa>
                        && (bytesToSave == (mbxSize - SEGMENT_NORM_HEADER_SIZE))
 800912a:	897b      	ldrh	r3, [r7, #10]
 800912c:	3b03      	subs	r3, #3
 800912e:	461a      	mov	r2, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	4293      	cmp	r3, r2
 8009134:	d103      	bne.n	800913e <SdoDownloadSegmentInd+0xaa>
                        ) )
/* ECATCHANGE_END(V5.11) ECAT7*/
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 8009136:	4b7c      	ldr	r3, [pc, #496]	; (8009328 <SdoDownloadSegmentInd+0x294>)
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	e011      	b.n	8009162 <SdoDownloadSegmentInd+0xce>
                    }
                    else
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 800913e:	230e      	movs	r3, #14
 8009140:	75fb      	strb	r3, [r7, #23]
 8009142:	e00e      	b.n	8009162 <SdoDownloadSegmentInd+0xce>
                }
                else
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8009144:	230e      	movs	r3, #14
 8009146:	75fb      	strb	r3, [r7, #23]
 8009148:	e00b      	b.n	8009162 <SdoDownloadSegmentInd+0xce>
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 800914a:	4b77      	ldr	r3, [pc, #476]	; (8009328 <SdoDownloadSegmentInd+0x294>)
 800914c:	2201      	movs	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 8009150:	89bb      	ldrh	r3, [r7, #12]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	429a      	cmp	r2, r3
 8009156:	d802      	bhi.n	800915e <SdoDownloadSegmentInd+0xca>
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8009158:	230e      	movs	r3, #14
 800915a:	75fb      	strb	r3, [r7, #23]
 800915c:	e001      	b.n	8009162 <SdoDownloadSegmentInd+0xce>
                else
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 800915e:	89bb      	ldrh	r3, [r7, #12]
 8009160:	613b      	str	r3, [r7, #16]
            }

            if ( abort == 0 )
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 80ff 	bne.w	8009368 <SdoDownloadSegmentInd+0x2d4>
            {
                /* the received data is copied in the buffer */
                UINT16 i = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	81fb      	strh	r3, [r7, #14]

                if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 800916e:	4b6d      	ldr	r3, [pc, #436]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d03c      	beq.n	80091f4 <SdoDownloadSegmentInd+0x160>
                {	
                    // Data0 will be copied to an odd address of pSdoSegData, Data1 to an even address (Segment 2, 4, ...)
                    // Read Data0
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] &= ~SEGHDATA_MASK;
 800917a:	4b68      	ldr	r3, [pc, #416]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b69      	ldr	r3, [pc, #420]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	8819      	ldrh	r1, [r3, #0]
 800918a:	4b64      	ldr	r3, [pc, #400]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b65      	ldr	r3, [pc, #404]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	4413      	add	r3, r2
 8009198:	b2ca      	uxtb	r2, r1
 800919a:	b292      	uxth	r2, r2
 800919c:	801a      	strh	r2, [r3, #0]
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] |= (pSdoInd->SdoHeader.SegHeader & SEGHDATA_MASK);
 800919e:	4b5f      	ldr	r3, [pc, #380]	; (800931c <SdoDownloadSegmentInd+0x288>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b60      	ldr	r3, [pc, #384]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4413      	add	r3, r2
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b21a      	sxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	891b      	ldrh	r3, [r3, #8]
 80091b4:	b21b      	sxth	r3, r3
 80091b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ba:	b21b      	sxth	r3, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	b219      	sxth	r1, r3
 80091c0:	4b56      	ldr	r3, [pc, #344]	; (800931c <SdoDownloadSegmentInd+0x288>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	4b57      	ldr	r3, [pc, #348]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4413      	add	r3, r2
 80091ce:	b28a      	uxth	r2, r1
 80091d0:	801a      	strh	r2, [r3, #0]
                    // Copy Data1 - DataN
                    MBXMEMCPY(&pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1],pSdoInd->SdoHeader.Data, bytesToSave - 1 );
 80091d2:	4b52      	ldr	r3, [pc, #328]	; (800931c <SdoDownloadSegmentInd+0x288>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b53      	ldr	r3, [pc, #332]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	085b      	lsrs	r3, r3, #1
 80091dc:	3301      	adds	r3, #1
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	18d0      	adds	r0, r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f103 010a 	add.w	r1, r3, #10
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	461a      	mov	r2, r3
 80091ee:	f001 fc01 	bl	800a9f4 <memcpy>
 80091f2:	e03e      	b.n	8009272 <SdoDownloadSegmentInd+0x1de>
                }
                else
                {	// Data0 will be copied to an even address of pSdoSegData, Data1 to an odd address (Segment 1, 3,...)
                    // Read Data0 and Data1
                    pSdoSegData[( nSdoSegBytesToHandle >> 1)] = ((pSdoInd->SdoHeader.SegHeader >> SEGDATASHIFT) &~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[0] << 8) & SEGHDATA_MASK);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	891b      	ldrh	r3, [r3, #8]
 80091f8:	0a1b      	lsrs	r3, r3, #8
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	b21a      	sxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b21b      	sxth	r3, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	b219      	sxth	r1, r3
 800920a:	4b44      	ldr	r3, [pc, #272]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b45      	ldr	r3, [pc, #276]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4413      	add	r3, r2
 8009218:	b28a      	uxth	r2, r1
 800921a:	801a      	strh	r2, [r3, #0]
                    
                    // Copy Data2 - DataN
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 800921c:	2301      	movs	r3, #1
 800921e:	81fb      	strh	r3, [r7, #14]
 8009220:	e021      	b.n	8009266 <SdoDownloadSegmentInd+0x1d2>
                    {
                        pSdoSegData[(nSdoSegBytesToHandle >> 1) + i] = ((pSdoInd->SdoHeader.Data[i - 1] >> SEGDATASHIFT) & ~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[i] << 8) & SEGHDATA_MASK);
 8009222:	89fb      	ldrh	r3, [r7, #14]
 8009224:	3b01      	subs	r3, #1
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	3304      	adds	r3, #4
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	4413      	add	r3, r2
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	b29b      	uxth	r3, r3
 8009234:	b21a      	sxth	r2, r3
 8009236:	89fb      	ldrh	r3, [r7, #14]
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	440b      	add	r3, r1
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	b21b      	sxth	r3, r3
 8009246:	4313      	orrs	r3, r2
 8009248:	b218      	sxth	r0, r3
 800924a:	4b34      	ldr	r3, [pc, #208]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	4b35      	ldr	r3, [pc, #212]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	0859      	lsrs	r1, r3, #1
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	440b      	add	r3, r1
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	4413      	add	r3, r2
 800925c:	b282      	uxth	r2, r0
 800925e:	801a      	strh	r2, [r3, #0]
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	81fb      	strh	r3, [r7, #14]
 8009266:	89fa      	ldrh	r2, [r7, #14]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3301      	adds	r3, #1
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	429a      	cmp	r2, r3
 8009270:	d3d7      	bcc.n	8009222 <SdoDownloadSegmentInd+0x18e>
                            // (If bytesToSave is odd, one byte too much is copied. But, that is not a problem.)
                    }
                }

                if ( bSdoSegFollows == FALSE    )
 8009272:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <SdoDownloadSegmentInd+0x294>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d176      	bne.n	8009368 <SdoDownloadSegmentInd+0x2d4>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 800927a:	4b2c      	ldr	r3, [pc, #176]	; (800932c <SdoDownloadSegmentInd+0x298>)
 800927c:	8818      	ldrh	r0, [r3, #0]
 800927e:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <SdoDownloadSegmentInd+0x29c>)
 8009280:	7819      	ldrb	r1, [r3, #0]
 8009282:	4b27      	ldr	r3, [pc, #156]	; (8009320 <SdoDownloadSegmentInd+0x28c>)
 8009284:	681c      	ldr	r4, [r3, #0]
 8009286:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <SdoDownloadSegmentInd+0x2a0>)
 8009288:	681d      	ldr	r5, [r3, #0]
 800928a:	4b24      	ldr	r3, [pc, #144]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2a      	ldr	r2, [pc, #168]	; (8009338 <SdoDownloadSegmentInd+0x2a4>)
 8009290:	7812      	ldrb	r2, [r2, #0]
 8009292:	9201      	str	r2, [sp, #4]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	462b      	mov	r3, r5
 8009298:	4622      	mov	r2, r4
 800929a:	f7ff fb9f 	bl	80089dc <OBJ_Write>
 800929e:	4603      	mov	r3, r0
 80092a0:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2bff      	cmp	r3, #255	; 0xff
 80092a6:	d12c      	bne.n	8009302 <SdoDownloadSegmentInd+0x26e>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 80092a8:	4b24      	ldr	r3, [pc, #144]	; (800933c <SdoDownloadSegmentInd+0x2a8>)
 80092aa:	2202      	movs	r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 80092ae:	4b22      	ldr	r3, [pc, #136]	; (8009338 <SdoDownloadSegmentInd+0x2a4>)
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	4b23      	ldr	r3, [pc, #140]	; (8009340 <SdoDownloadSegmentInd+0x2ac>)
 80092b4:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 80092b6:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <SdoDownloadSegmentInd+0x29c>)
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	4b22      	ldr	r3, [pc, #136]	; (8009344 <SdoDownloadSegmentInd+0x2b0>)
 80092bc:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 80092be:	4b1b      	ldr	r3, [pc, #108]	; (800932c <SdoDownloadSegmentInd+0x298>)
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	4b21      	ldr	r3, [pc, #132]	; (8009348 <SdoDownloadSegmentInd+0x2b4>)
 80092c4:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <SdoDownloadSegmentInd+0x28c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a20      	ldr	r2, [pc, #128]	; (800934c <SdoDownloadSegmentInd+0x2b8>)
 80092cc:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 80092ce:	4b13      	ldr	r3, [pc, #76]	; (800931c <SdoDownloadSegmentInd+0x288>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <SdoDownloadSegmentInd+0x2bc>)
 80092d4:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 80092d6:	4b17      	ldr	r3, [pc, #92]	; (8009334 <SdoDownloadSegmentInd+0x2a0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <SdoDownloadSegmentInd+0x2c0>)
 80092de:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 80092e0:	4b1d      	ldr	r3, [pc, #116]	; (8009358 <SdoDownloadSegmentInd+0x2c4>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 80092e6:	4a1d      	ldr	r2, [pc, #116]	; (800935c <SdoDownloadSegmentInd+0x2c8>)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 80092ec:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <SdoDownloadSegmentInd+0x294>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 80092f2:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <SdoDownloadSegmentInd+0x2cc>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <SdoDownloadSegmentInd+0x290>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 80092fe:	23ff      	movs	r3, #255	; 0xff
 8009300:	e079      	b.n	80093f6 <SdoDownloadSegmentInd+0x362>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8009302:	4b06      	ldr	r3, [pc, #24]	; (800931c <SdoDownloadSegmentInd+0x288>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f001 fb6c 	bl	800a9e4 <free>
                        pSdoSegData = NULL;
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <SdoDownloadSegmentInd+0x288>)
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	e029      	b.n	8009368 <SdoDownloadSegmentInd+0x2d4>
 8009314:	20000e42 	.word	0x20000e42
 8009318:	20000d8e 	.word	0x20000d8e
 800931c:	20000e54 	.word	0x20000e54
 8009320:	20000e38 	.word	0x20000e38
 8009324:	20000e30 	.word	0x20000e30
 8009328:	20000e35 	.word	0x20000e35
 800932c:	20000e58 	.word	0x20000e58
 8009330:	20000e70 	.word	0x20000e70
 8009334:	20000e6c 	.word	0x20000e6c
 8009338:	20000e34 	.word	0x20000e34
 800933c:	20000e40 	.word	0x20000e40
 8009340:	20000e41 	.word	0x20000e41
 8009344:	20000e74 	.word	0x20000e74
 8009348:	20000e72 	.word	0x20000e72
 800934c:	20000e50 	.word	0x20000e50
 8009350:	20000e2c 	.word	0x20000e2c
 8009354:	20000e3c 	.word	0x20000e3c
 8009358:	200005d5 	.word	0x200005d5
 800935c:	20000e4c 	.word	0x20000e4c
 8009360:	20000e43 	.word	0x20000e43
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8009364:	2303      	movs	r3, #3
 8009366:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d12d      	bne.n	80093ca <SdoDownloadSegmentInd+0x336>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220a      	movs	r2, #10
 8009372:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	88db      	ldrh	r3, [r3, #6]
 8009378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	88db      	ldrh	r3, [r3, #6]
 8009386:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
        if ( bSdoSegLastToggle )
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <SdoDownloadSegmentInd+0x36c>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <SdoDownloadSegmentInd+0x30c>
        {
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2230      	movs	r2, #48	; 0x30
 800939c:	811a      	strh	r2, [r3, #8]
 800939e:	e002      	b.n	80093a6 <SdoDownloadSegmentInd+0x312>
        }
        else
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	811a      	strh	r2, [r3, #8]

        if ( bSdoSegFollows == TRUE )
 80093a6:	4b17      	ldr	r3, [pc, #92]	; (8009404 <SdoDownloadSegmentInd+0x370>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d106      	bne.n	80093bc <SdoDownloadSegmentInd+0x328>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <SdoDownloadSegmentInd+0x374>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4413      	add	r3, r2
 80093b6:	4a14      	ldr	r2, [pc, #80]	; (8009408 <SdoDownloadSegmentInd+0x374>)
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	e01b      	b.n	80093f4 <SdoDownloadSegmentInd+0x360>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 80093bc:	4b12      	ldr	r3, [pc, #72]	; (8009408 <SdoDownloadSegmentInd+0x374>)
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 80093c2:	4b12      	ldr	r3, [pc, #72]	; (800940c <SdoDownloadSegmentInd+0x378>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	e014      	b.n	80093f4 <SdoDownloadSegmentInd+0x360>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 80093ca:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <SdoDownloadSegmentInd+0x370>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 80093d0:	4b0e      	ldr	r3, [pc, #56]	; (800940c <SdoDownloadSegmentInd+0x378>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <SdoDownloadSegmentInd+0x37c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <SdoDownloadSegmentInd+0x35a>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80093de:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <SdoDownloadSegmentInd+0x37c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fafe 	bl	800a9e4 <free>
            pSdoSegData = NULL;
 80093e8:	4b09      	ldr	r3, [pc, #36]	; (8009410 <SdoDownloadSegmentInd+0x37c>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <SdoDownloadSegmentInd+0x374>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
    }

    return abort;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bdb0      	pop	{r4, r5, r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000e42 	.word	0x20000e42
 8009404:	20000e35 	.word	0x20000e35
 8009408:	20000e30 	.word	0x20000e30
 800940c:	20000e43 	.word	0x20000e43
 8009410:	20000e54 	.word	0x20000e54

08009414 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	77fb      	strb	r3, [r7, #31]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	613b      	str	r3, [r7, #16]

   if ( (pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7a1b      	ldrb	r3, [r3, #8]
 8009428:	f003 0310 	and.w	r3, r3, #16
 800942c:	4a84      	ldr	r2, [pc, #528]	; (8009640 <SdoUploadSegmentInd+0x22c>)
 800942e:	7812      	ldrb	r2, [r2, #0]
 8009430:	4293      	cmp	r3, r2
 8009432:	d102      	bne.n	800943a <SdoUploadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8009434:	2301      	movs	r3, #1
 8009436:	77fb      	strb	r3, [r7, #31]
 8009438:	e0fc      	b.n	8009634 <SdoUploadSegmentInd+0x220>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	61bb      	str	r3, [r7, #24]
        UINT16 maxData;
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 800943e:	4b81      	ldr	r3, [pc, #516]	; (8009644 <SdoUploadSegmentInd+0x230>)
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	3b09      	subs	r3, #9
 8009444:	81fb      	strh	r3, [r7, #14]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7a1b      	ldrb	r3, [r3, #8]
 800944a:	f003 0310 	and.w	r3, r3, #16
 800944e:	b2da      	uxtb	r2, r3
 8009450:	4b7b      	ldr	r3, [pc, #492]	; (8009640 <SdoUploadSegmentInd+0x22c>)
 8009452:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 8009454:	89fa      	ldrh	r2, [r7, #14]
 8009456:	4b7c      	ldr	r3, [pc, #496]	; (8009648 <SdoUploadSegmentInd+0x234>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	441a      	add	r2, r3
 800945c:	4b7b      	ldr	r3, [pc, #492]	; (800964c <SdoUploadSegmentInd+0x238>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d909      	bls.n	8009478 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8009464:	4b79      	ldr	r3, [pc, #484]	; (800964c <SdoUploadSegmentInd+0x238>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	4b77      	ldr	r3, [pc, #476]	; (8009648 <SdoUploadSegmentInd+0x234>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = FALSE;
 8009470:	4b77      	ldr	r3, [pc, #476]	; (8009650 <SdoUploadSegmentInd+0x23c>)
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
 8009476:	e004      	b.n	8009482 <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 8009478:	89fb      	ldrh	r3, [r7, #14]
 800947a:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = TRUE;
 800947c:	4b74      	ldr	r3, [pc, #464]	; (8009650 <SdoUploadSegmentInd+0x23c>)
 800947e:	2201      	movs	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        // Clear Data0
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHDATA_MASK;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	891b      	ldrh	r3, [r3, #8]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	b29a      	uxth	r2, r3
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	811a      	strh	r2, [r3, #8]
        if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 800948e:	4b6e      	ldr	r3, [pc, #440]	; (8009648 <SdoUploadSegmentInd+0x234>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d024      	beq.n	80094e4 <SdoUploadSegmentInd+0xd0>
        {	// Data starts at odd byte number (Segment 2, 4,...): Data0 is at high byte, Data1 lies at an even address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= (pSdoSegData[(nSdoSegBytesToHandle >> 1)] & SEGHDATA_MASK);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	891b      	ldrh	r3, [r3, #8]
 800949e:	b21a      	sxth	r2, r3
 80094a0:	4b6c      	ldr	r3, [pc, #432]	; (8009654 <SdoUploadSegmentInd+0x240>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	4b68      	ldr	r3, [pc, #416]	; (8009648 <SdoUploadSegmentInd+0x234>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	085b      	lsrs	r3, r3, #1
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	440b      	add	r3, r1
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b21b      	sxth	r3, r3
 80094b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094b6:	b21b      	sxth	r3, r3
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b21b      	sxth	r3, r3
 80094bc:	b29a      	uxth	r2, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], size - 1);
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f103 000a 	add.w	r0, r3, #10
 80094c8:	4b62      	ldr	r3, [pc, #392]	; (8009654 <SdoUploadSegmentInd+0x240>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4b5e      	ldr	r3, [pc, #376]	; (8009648 <SdoUploadSegmentInd+0x234>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	3301      	adds	r3, #1
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	18d1      	adds	r1, r2, r3
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	3b01      	subs	r3, #1
 80094dc:	461a      	mov	r2, r3
 80094de:	f001 fa89 	bl	800a9f4 <memcpy>
 80094e2:	e045      	b.n	8009570 <SdoUploadSegmentInd+0x15c>
        }
        else
        {	
            UINT16 i = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	82fb      	strh	r3, [r7, #22]
            UINT32 nIndexOffset = nSdoSegBytesToHandle >> 1;
 80094e8:	4b57      	ldr	r3, [pc, #348]	; (8009648 <SdoUploadSegmentInd+0x234>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	60bb      	str	r3, [r7, #8]
            // Data starts at even byte number (Segment 1,3, ...): Data0 is at low byte, Data1 lies at an odd address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= ((pSdoSegData[(nSdoSegBytesToHandle >> 1)] << SEGDATASHIFT) & SEGHDATA_MASK);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	b21a      	sxth	r2, r3
 80094f6:	4b57      	ldr	r3, [pc, #348]	; (8009654 <SdoUploadSegmentInd+0x240>)
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	4b53      	ldr	r3, [pc, #332]	; (8009648 <SdoUploadSegmentInd+0x234>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	440b      	add	r3, r1
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	021b      	lsls	r3, r3, #8
 8009508:	b21b      	sxth	r3, r3
 800950a:	4313      	orrs	r3, r2
 800950c:	b21b      	sxth	r3, r3
 800950e:	b29a      	uxth	r2, r3
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            
            for (i = 0; i < (size >> 1);i++)
 8009514:	2300      	movs	r3, #0
 8009516:	82fb      	strh	r3, [r7, #22]
 8009518:	e025      	b.n	8009566 <SdoUploadSegmentInd+0x152>
            {
                pSdoSegRes->SdoHeader.Data[i] = ((pSdoSegData[i + nIndexOffset] & SEGHDATA_MASK) >> 8) | ((pSdoSegData[i + nIndexOffset + 1] & ~SEGHDATA_MASK) << 8);
 800951a:	4b4e      	ldr	r3, [pc, #312]	; (8009654 <SdoUploadSegmentInd+0x240>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	8af9      	ldrh	r1, [r7, #22]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	440b      	add	r3, r1
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	4413      	add	r3, r2
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	b29b      	uxth	r3, r3
 800952e:	b21a      	sxth	r2, r3
 8009530:	4b48      	ldr	r3, [pc, #288]	; (8009654 <SdoUploadSegmentInd+0x240>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	8af8      	ldrh	r0, [r7, #22]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4403      	add	r3, r0
 800953a:	3301      	adds	r3, #1
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	440b      	add	r3, r1
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	b21b      	sxth	r3, r3
 8009546:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800954a:	b21b      	sxth	r3, r3
 800954c:	4313      	orrs	r3, r2
 800954e:	b21a      	sxth	r2, r3
 8009550:	8afb      	ldrh	r3, [r7, #22]
 8009552:	b291      	uxth	r1, r2
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	3304      	adds	r3, #4
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	4413      	add	r3, r2
 800955c:	460a      	mov	r2, r1
 800955e:	805a      	strh	r2, [r3, #2]
            for (i = 0; i < (size >> 1);i++)
 8009560:	8afb      	ldrh	r3, [r7, #22]
 8009562:	3301      	adds	r3, #1
 8009564:	82fb      	strh	r3, [r7, #22]
 8009566:	8afa      	ldrh	r2, [r7, #22]
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	429a      	cmp	r2, r3
 800956e:	d3d4      	bcc.n	800951a <SdoUploadSegmentInd+0x106>
                    // (If size is even, one byte too much is copied. But, that is not a problem.)
            }
        }
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	88db      	ldrh	r3, [r3, #6]
 8009574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009578:	b29a      	uxth	r2, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	88db      	ldrh	r3, [r3, #6]
 8009582:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009586:	b29a      	uxth	r2, r3
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	891b      	ldrh	r3, [r3, #8]
 8009590:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009594:	b29a      	uxth	r2, r3
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	811a      	strh	r2, [r3, #8]
        if (bSdoSegFollows)
 800959a:	4b2d      	ldr	r3, [pc, #180]	; (8009650 <SdoUploadSegmentInd+0x23c>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <SdoUploadSegmentInd+0x1a2>
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	891a      	ldrh	r2, [r3, #8]
 80095a6:	4b26      	ldr	r3, [pc, #152]	; (8009640 <SdoUploadSegmentInd+0x22c>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	4313      	orrs	r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	811a      	strh	r2, [r3, #8]
 80095b4:	e00b      	b.n	80095ce <SdoUploadSegmentInd+0x1ba>
        else
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	891a      	ldrh	r2, [r3, #8]
 80095ba:	4b21      	ldr	r3, [pc, #132]	; (8009640 <SdoUploadSegmentInd+0x22c>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f043 0301 	orr.w	r3, r3, #1
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	811a      	strh	r2, [r3, #8]

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d810      	bhi.n	80095f6 <SdoUploadSegmentInd+0x1e2>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	220a      	movs	r2, #10
 80095d8:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	891a      	ldrh	r2, [r3, #8]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f1c3 0307 	rsb	r3, r3, #7
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	4313      	orrs	r3, r2
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	811a      	strh	r2, [r3, #8]
 80095f4:	e005      	b.n	8009602 <SdoUploadSegmentInd+0x1ee>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3303      	adds	r3, #3
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 8009602:	4b13      	ldr	r3, [pc, #76]	; (8009650 <SdoUploadSegmentInd+0x23c>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d106      	bne.n	8009618 <SdoUploadSegmentInd+0x204>
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 800960a:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <SdoUploadSegmentInd+0x234>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	4413      	add	r3, r2
 8009612:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <SdoUploadSegmentInd+0x234>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	e00d      	b.n	8009634 <SdoUploadSegmentInd+0x220>
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <SdoUploadSegmentInd+0x240>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f9e1 	bl	800a9e4 <free>
            pSdoSegData = NULL;
 8009622:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <SdoUploadSegmentInd+0x240>)
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <SdoUploadSegmentInd+0x234>)
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <SdoUploadSegmentInd+0x244>)
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 8009634:	7ffb      	ldrb	r3, [r7, #31]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000e42 	.word	0x20000e42
 8009644:	20000d7c 	.word	0x20000d7c
 8009648:	20000e30 	.word	0x20000e30
 800964c:	20000e38 	.word	0x20000e38
 8009650:	20000e35 	.word	0x20000e35
 8009654:	20000e54 	.word	0x20000e54
 8009658:	20000e43 	.word	0x20000e43

0800965c <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	461a      	mov	r2, r3
 800966a:	4623      	mov	r3, r4
 800966c:	71fb      	strb	r3, [r7, #7]
 800966e:	4603      	mov	r3, r0
 8009670:	71bb      	strb	r3, [r7, #6]
 8009672:	460b      	mov	r3, r1
 8009674:	717b      	strb	r3, [r7, #5]
 8009676:	4613      	mov	r3, r2
 8009678:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 800967a:	79bb      	ldrb	r3, [r7, #6]
 800967c:	2b60      	cmp	r3, #96	; 0x60
 800967e:	d009      	beq.n	8009694 <SdoRes+0x38>
 8009680:	79bb      	ldrb	r3, [r7, #6]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <SdoRes+0x38>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= 0xFF00;
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	891b      	ldrh	r3, [r3, #8]
 800968a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800968e:	b29a      	uxth	r2, r3
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	811a      	strh	r2, [r3, #8]
    }
    if ( abort == 0 )
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d172      	bne.n	8009780 <SdoRes+0x124>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	88db      	ldrh	r3, [r3, #6]
 800969e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	88db      	ldrh	r3, [r3, #6]
 80096ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80096b6:	79bb      	ldrb	r3, [r7, #6]
 80096b8:	2b40      	cmp	r3, #64	; 0x40
 80096ba:	d145      	bne.n	8009748 <SdoRes+0xec>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d81d      	bhi.n	80096fe <SdoRes+0xa2>
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01a      	beq.n	80096fe <SdoRes+0xa2>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	220a      	movs	r2, #10
 80096cc:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	891a      	ldrh	r2, [r3, #8]
                                                                                        SDOHEADER_TRANSFERTYPE        |
                                                                                        completeAccess |
 80096d2:	797b      	ldrb	r3, [r7, #5]
 80096d4:	f043 0303 	orr.w	r3, r3, #3
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	b219      	sxth	r1, r3
                                                                                        ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f1c3 0304 	rsb	r3, r3, #4
 80096e4:	009b      	lsls	r3, r3, #2
                                                                                        completeAccess |
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	430b      	orrs	r3, r1
 80096ea:	b21b      	sxth	r3, r3
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	811a      	strh	r2, [r3, #8]
 80096fc:	e05a      	b.n	80097b4 <SdoRes+0x158>
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 80096fe:	887b      	ldrh	r3, [r7, #2]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	d905      	bls.n	8009712 <SdoRes+0xb6>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 8009706:	887b      	ldrh	r3, [r7, #2]
 8009708:	330a      	adds	r3, #10
 800970a:	b29a      	uxth	r2, r3
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	e005      	b.n	800971e <SdoRes+0xc2>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	b29b      	uxth	r3, r3
 8009716:	330a      	adds	r3, #10
 8009718:	b29a      	uxth	r2, r3
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	b29a      	uxth	r2, r3
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	b29a      	uxth	r2, r3
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	81da      	strh	r2, [r3, #14]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	891a      	ldrh	r2, [r3, #8]
 8009734:	797b      	ldrb	r3, [r7, #5]
 8009736:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800973a:	b2db      	uxtb	r3, r3
 800973c:	b29b      	uxth	r3, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	b29a      	uxth	r2, r3
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	811a      	strh	r2, [r3, #8]
 8009746:	e035      	b.n	80097b4 <SdoRes+0x158>
                                                                                        completeAccess |
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8009748:	79bb      	ldrb	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <SdoRes+0x108>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	220a      	movs	r2, #10
 8009752:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_DOWNLOADSEGMENTRES;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	891b      	ldrh	r3, [r3, #8]
 8009758:	f043 0320 	orr.w	r3, r3, #32
 800975c:	b29a      	uxth	r2, r3
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	811a      	strh	r2, [r3, #8]
 8009762:	e027      	b.n	80097b4 <SdoRes+0x158>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 8009764:	79bb      	ldrb	r3, [r7, #6]
 8009766:	2b60      	cmp	r3, #96	; 0x60
 8009768:	d024      	beq.n	80097b4 <SdoRes+0x158>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	220a      	movs	r2, #10
 800976e:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_INITIATEDOWNLOADRES;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	891b      	ldrh	r3, [r3, #8]
 8009774:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009778:	b29a      	uxth	r2, r3
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	811a      	strh	r2, [r3, #8]
 800977e:	e019      	b.n	80097b4 <SdoRes+0x158>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	220a      	movs	r2, #10
 8009784:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	88db      	ldrh	r3, [r3, #6]
 800978a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800978e:	b29a      	uxth	r2, r3
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	88db      	ldrh	r3, [r3, #6]
 8009798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800979c:	b29a      	uxth	r2, r3
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	80da      	strh	r2, [r3, #6]
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    = SDOSERVICE_ABORTTRANSFER;
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	2280      	movs	r2, #128	; 0x80
 80097a6:	811a      	strh	r2, [r3, #8]
        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <SdoRes+0x174>)
 80097ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 80097b4:	2102      	movs	r1, #2
 80097b6:	69f8      	ldr	r0, [r7, #28]
 80097b8:	f7fd ff8c 	bl	80076d4 <MBX_MailboxSendReq>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <SdoRes+0x16c>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 80097c2:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <SdoRes+0x178>)
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	6013      	str	r3, [r2, #0]
    }
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd90      	pop	{r4, r7, pc}
 80097d0:	0800b594 	.word	0x0800b594
 80097d4:	20000ab8 	.word	0x20000ab8

080097d8 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b08f      	sub	sp, #60	; 0x3c
 80097dc:	af02      	add	r7, sp, #8
 80097de:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    UINT8 sdoHeader = pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	891b      	ldrh	r3, [r3, #8]
 80097ea:	76bb      	strb	r3, [r7, #26]
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 80097ec:	7ebb      	ldrb	r3, [r7, #26]
 80097ee:	f023 031f 	bic.w	r3, r3, #31
 80097f2:	767b      	strb	r3, [r7, #25]
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	82fb      	strh	r3, [r7, #22]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    UINT32 objLength = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 dataSize = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	627b      	str	r3, [r7, #36]	; 0x24

    if ( bSdoInWork )
 8009808:	4b99      	ldr	r3, [pc, #612]	; (8009a70 <SDOS_SdoInd+0x298>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <SDOS_SdoInd+0x3c>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 8009810:	2309      	movs	r3, #9
 8009812:	e272      	b.n	8009cfa <SDOS_SdoInd+0x522>
    }


    switch (command)
 8009814:	7e7b      	ldrb	r3, [r7, #25]
 8009816:	2b60      	cmp	r3, #96	; 0x60
 8009818:	f000 823b 	beq.w	8009c92 <SDOS_SdoInd+0x4ba>
 800981c:	2b60      	cmp	r3, #96	; 0x60
 800981e:	f300 8252 	bgt.w	8009cc6 <SDOS_SdoInd+0x4ee>
 8009822:	2b40      	cmp	r3, #64	; 0x40
 8009824:	d008      	beq.n	8009838 <SDOS_SdoInd+0x60>
 8009826:	2b40      	cmp	r3, #64	; 0x40
 8009828:	f300 824d 	bgt.w	8009cc6 <SDOS_SdoInd+0x4ee>
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8230 	beq.w	8009c92 <SDOS_SdoInd+0x4ba>
 8009832:	2b20      	cmp	r3, #32
 8009834:	f040 8247 	bne.w	8009cc6 <SDOS_SdoInd+0x4ee>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
        index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	895b      	ldrh	r3, [r3, #10]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	82bb      	strh	r3, [r7, #20]
        index <<= 8;
 8009840:	8abb      	ldrh	r3, [r7, #20]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	82bb      	strh	r3, [r7, #20]
        index += pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	891b      	ldrh	r3, [r3, #8]
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	b29a      	uxth	r2, r3
 800984e:	8abb      	ldrh	r3, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	82bb      	strh	r3, [r7, #20]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex    = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	895b      	ldrh	r3, [r3, #10]
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	b29b      	uxth	r3, r3
 800985c:	74fb      	strb	r3, [r7, #19]

        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 800985e:	8abb      	ldrh	r3, [r7, #20]
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe f90b 	bl	8007a7c <OBJ_GetObjectHandle>
 8009866:	60f8      	str	r0, [r7, #12]

        if ( pObjEntry )
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 820d 	beq.w	8009c8a <SDOS_SdoInd+0x4b2>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	61fb      	str	r3, [r7, #28]
            UINT8 segTransfer = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	76fb      	strb	r3, [r7, #27]

            {
                dataSize = objLength = OBJ_GetObjectLength( index, subindex, pObjEntry, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS) );
 800987e:	7ebb      	ldrb	r3, [r7, #26]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	b2db      	uxtb	r3, r3
 8009886:	7cf9      	ldrb	r1, [r7, #19]
 8009888:	8ab8      	ldrh	r0, [r7, #20]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	f7fe f911 	bl	8007ab2 <OBJ_GetObjectLength>
 8009890:	62b8      	str	r0, [r7, #40]	; 0x28
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	627b      	str	r3, [r7, #36]	; 0x24

                if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8009896:	7e7b      	ldrb	r3, [r7, #25]
 8009898:	2b40      	cmp	r3, #64	; 0x40
 800989a:	d127      	bne.n	80098ec <SDOS_SdoInd+0x114>
                {
                    /* SDO Upload */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 800989c:	8afb      	ldrh	r3, [r7, #22]
 800989e:	2b0a      	cmp	r3, #10
 80098a0:	d001      	beq.n	80098a6 <SDOS_SdoInd+0xce>
                        /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 80098a2:	2308      	movs	r3, #8
 80098a4:	e229      	b.n	8009cfa <SDOS_SdoInd+0x522>
                    /* distinguish between expedited and normal upload response within the length of the response data */
                    if ( (objLength <= MAX_EXPEDITED_DATA) && objLength != 0 )
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d810      	bhi.n	80098ce <SDOS_SdoInd+0xf6>
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00d      	beq.n	80098ce <SDOS_SdoInd+0xf6>
                    {
                        /* Expedited Upload */
                        bTransferType = 1;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* pData is the pointer where the object data has to be copied for the response */
                        pData = ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	330c      	adds	r3, #12
 80098bc:	61fb      	str	r3, [r7, #28]
                        /* initialize the 4 data bytes of the SDO upload response because the requested object data
                           could be less than 4 */
                        pData[0] = 0;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2200      	movs	r2, #0
 80098c2:	801a      	strh	r2, [r3, #0]
                        pData[1] = 0;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3302      	adds	r3, #2
 80098c8:	2200      	movs	r2, #0
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e013      	b.n	80098f6 <SDOS_SdoInd+0x11e>
                    }
                    else
                    {
                        /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                    dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 80098ce:	4b69      	ldr	r3, [pc, #420]	; (8009a74 <SDOS_SdoInd+0x29c>)
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	3b10      	subs	r3, #16
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
                        if ( dataSize < objLength )
 80098d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	429a      	cmp	r2, r3
 80098dc:	d202      	bcs.n	80098e4 <SDOS_SdoInd+0x10c>
                            /* Segmented Upload */
                            segTransfer = 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	76fb      	strb	r3, [r7, #27]
 80098e2:	e008      	b.n	80098f6 <SDOS_SdoInd+0x11e>
                        else
                            /* Normal Upload */
                            pData = ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3310      	adds	r3, #16
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	e004      	b.n	80098f6 <SDOS_SdoInd+0x11e>
                    }
                }
                else
                {
                    /* SDO-Download: store if the request is a expedited or normal request  */
                    bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 80098ec:	7ebb      	ldrb	r3, [r7, #26]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
            }

            if ( command == SDOSERVICE_INITIATEDOWNLOADREQ )
 80098f6:	7e7b      	ldrb	r3, [r7, #25]
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d13b      	bne.n	8009974 <SDOS_SdoInd+0x19c>
            {
                /* SDO Download */
                if ( bTransferType )
 80098fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00f      	beq.n	8009924 <SDOS_SdoInd+0x14c>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 8009904:	8afb      	ldrh	r3, [r7, #22]
 8009906:	2b0a      	cmp	r3, #10
 8009908:	d001      	beq.n	800990e <SDOS_SdoInd+0x136>
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 800990a:	2308      	movs	r3, #8
 800990c:	e1f5      	b.n	8009cfa <SDOS_SdoInd+0x522>
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 800990e:	7ebb      	ldrb	r3, [r7, #26]
 8009910:	109b      	asrs	r3, r3, #2
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	f1c3 0304 	rsb	r3, r3, #4
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	330c      	adds	r3, #12
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	e027      	b.n	8009974 <SDOS_SdoInd+0x19c>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	89db      	ldrh	r3, [r3, #14]
 8009928:	041b      	lsls	r3, r3, #16
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	8992      	ldrh	r2, [r2, #12]
 800992e:	4413      	add	r3, r2
 8009930:	60bb      	str	r3, [r7, #8]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3310      	adds	r3, #16
 8009936:	4a50      	ldr	r2, [pc, #320]	; (8009a78 <SDOS_SdoInd+0x2a0>)
 8009938:	8812      	ldrh	r2, [r2, #0]
 800993a:	4293      	cmp	r3, r2
 800993c:	d907      	bls.n	800994e <SDOS_SdoInd+0x176>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 800993e:	8afa      	ldrh	r2, [r7, #22]
 8009940:	4b4d      	ldr	r3, [pc, #308]	; (8009a78 <SDOS_SdoInd+0x2a0>)
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	3b06      	subs	r3, #6
 8009946:	429a      	cmp	r2, r3
 8009948:	d008      	beq.n	800995c <SDOS_SdoInd+0x184>
                            return MBXERR_INVALIDSIZE;
 800994a:	2308      	movs	r3, #8
 800994c:	e1d5      	b.n	8009cfa <SDOS_SdoInd+0x522>
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 800994e:	8afa      	ldrh	r2, [r7, #22]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	330a      	adds	r3, #10
 8009954:	429a      	cmp	r2, r3
 8009956:	d001      	beq.n	800995c <SDOS_SdoInd+0x184>
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 8009958:	2308      	movs	r3, #8
 800995a:	e1ce      	b.n	8009cfa <SDOS_SdoInd+0x522>
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3310      	adds	r3, #16
 8009960:	61fb      	str	r3, [r7, #28]
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 8009966:	8afb      	ldrh	r3, [r7, #22]
 8009968:	3b0a      	subs	r3, #10
 800996a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996c:	429a      	cmp	r2, r3
 800996e:	d901      	bls.n	8009974 <SDOS_SdoInd+0x19c>
                        /* Segmented Download */
                        segTransfer = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	76fb      	strb	r3, [r7, #27]
                }
            }

            if ( sdoHeader & SDOHEADER_COMPLETEACCESS )
 8009974:	7ebb      	ldrb	r3, [r7, #26]
 8009976:	f003 0310 	and.w	r3, r3, #16
 800997a:	2b00      	cmp	r3, #0
 800997c:	d008      	beq.n	8009990 <SDOS_SdoInd+0x1b8>
            {
                bCompleteAccess = 1;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 8009984:	7cfb      	ldrb	r3, [r7, #19]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d902      	bls.n	8009990 <SDOS_SdoInd+0x1b8>
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800998a:	2305      	movs	r3, #5
 800998c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if ( abort == 0 )
 8009990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 819a 	bne.w	8009cce <SDOS_SdoInd+0x4f6>
            {
                if ( segTransfer )
 800999a:	7efb      	ldrb	r3, [r7, #27]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 80d2 	beq.w	8009b46 <SDOS_SdoInd+0x36e>
                {
                    bSdoSegFollows         = TRUE;
 80099a2:	4b36      	ldr	r3, [pc, #216]	; (8009a7c <SDOS_SdoInd+0x2a4>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 80099a8:	4b35      	ldr	r3, [pc, #212]	; (8009a80 <SDOS_SdoInd+0x2a8>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 80099ae:	4a35      	ldr	r2, [pc, #212]	; (8009a84 <SDOS_SdoInd+0x2ac>)
 80099b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80099b4:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 80099b6:	4a34      	ldr	r2, [pc, #208]	; (8009a88 <SDOS_SdoInd+0x2b0>)
 80099b8:	8abb      	ldrh	r3, [r7, #20]
 80099ba:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 80099bc:	4a33      	ldr	r2, [pc, #204]	; (8009a8c <SDOS_SdoInd+0x2b4>)
 80099be:	7cfb      	ldrb	r3, [r7, #19]
 80099c0:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 80099c2:	4a33      	ldr	r2, [pc, #204]	; (8009a90 <SDOS_SdoInd+0x2b8>)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80099c8:	7e7b      	ldrb	r3, [r7, #25]
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d103      	bne.n	80099d6 <SDOS_SdoInd+0x1fe>
                        nSdoSegCompleteSize    = objLength;
 80099ce:	4a31      	ldr	r2, [pc, #196]	; (8009a94 <SDOS_SdoInd+0x2bc>)
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e002      	b.n	80099dc <SDOS_SdoInd+0x204>
                    else
                        nSdoSegCompleteSize    = dataSize;
 80099d6:	4a2f      	ldr	r2, [pc, #188]	; (8009a94 <SDOS_SdoInd+0x2bc>)
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	6013      	str	r3, [r2, #0]

                    if (pSdoSegData != NULL)
 80099dc:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <SDOS_SdoInd+0x21c>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 80099e4:	4b2c      	ldr	r3, [pc, #176]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fffb 	bl	800a9e4 <free>
                        pSdoSegData = NULL;
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <SDOS_SdoInd+0x2bc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 ffe8 	bl	800a9d4 <malloc>
 8009a04:	4603      	mov	r3, r0
 8009a06:	461a      	mov	r2, r3
 8009a08:	4b23      	ldr	r3, [pc, #140]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 8009a0a:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 8009a0c:	4b22      	ldr	r3, [pc, #136]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <SDOS_SdoInd+0x254>
                    {
/*ECATCHANGE_START(V5.11) SDO4*/
                        if(bCompleteAccess)
 8009a14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <SDOS_SdoInd+0x24c>
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8009a1c:	2305      	movs	r3, #5
 8009a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        } //if(pEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 8009a22:	e154      	b.n	8009cce <SDOS_SdoInd+0x4f6>
                            abort = ABORTIDX_OUT_OF_MEMORY;
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8009a2a:	e150      	b.n	8009cce <SDOS_SdoInd+0x4f6>
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8009a2c:	7e7b      	ldrb	r3, [r7, #25]
 8009a2e:	2b40      	cmp	r3, #64	; 0x40
 8009a30:	d175      	bne.n	8009b1e <SDOS_SdoInd+0x346>
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	7cf9      	ldrb	r1, [r7, #19]
 8009a38:	8ab8      	ldrh	r0, [r7, #20]
 8009a3a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a46:	f7fe fc75 	bl	8008334 <OBJ_Read>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            if ( abort == 0 )
 8009a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d123      	bne.n	8009aa0 <SDOS_SdoInd+0x2c8>
                                MBXMEMCPY( ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3310      	adds	r3, #16
 8009a5c:	4a0e      	ldr	r2, [pc, #56]	; (8009a98 <SDOS_SdoInd+0x2c0>)
 8009a5e:	6811      	ldr	r1, [r2, #0]
 8009a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 ffc6 	bl	800a9f4 <memcpy>
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <SDOS_SdoInd+0x2c4>)
 8009a6a:	2260      	movs	r2, #96	; 0x60
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e066      	b.n	8009b3e <SDOS_SdoInd+0x366>
 8009a70:	200005d5 	.word	0x200005d5
 8009a74:	20000d7c 	.word	0x20000d7c
 8009a78:	20000d8e 	.word	0x20000d8e
 8009a7c:	20000e35 	.word	0x20000e35
 8009a80:	20000e42 	.word	0x20000e42
 8009a84:	20000e34 	.word	0x20000e34
 8009a88:	20000e58 	.word	0x20000e58
 8009a8c:	20000e70 	.word	0x20000e70
 8009a90:	20000e6c 	.word	0x20000e6c
 8009a94:	20000e38 	.word	0x20000e38
 8009a98:	20000e54 	.word	0x20000e54
 8009a9c:	20000e43 	.word	0x20000e43
                            else if ( abort == ABORTIDX_WORKING )
 8009aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2bff      	cmp	r3, #255	; 0xff
 8009aa6:	d14a      	bne.n	8009b3e <SDOS_SdoInd+0x366>
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 8009aa8:	4b96      	ldr	r3, [pc, #600]	; (8009d04 <SDOS_SdoInd+0x52c>)
 8009aaa:	2204      	movs	r2, #4
 8009aac:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 8009aae:	4a96      	ldr	r2, [pc, #600]	; (8009d08 <SDOS_SdoInd+0x530>)
 8009ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ab4:	7013      	strb	r3, [r2, #0]
                                u8StoreSubindex = subindex;
 8009ab6:	4a95      	ldr	r2, [pc, #596]	; (8009d0c <SDOS_SdoInd+0x534>)
 8009ab8:	7cfb      	ldrb	r3, [r7, #19]
 8009aba:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 8009abc:	4a94      	ldr	r2, [pc, #592]	; (8009d10 <SDOS_SdoInd+0x538>)
 8009abe:	8abb      	ldrh	r3, [r7, #20]
 8009ac0:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 8009ac2:	4a94      	ldr	r2, [pc, #592]	; (8009d14 <SDOS_SdoInd+0x53c>)
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 8009ac8:	4b93      	ldr	r3, [pc, #588]	; (8009d18 <SDOS_SdoInd+0x540>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a93      	ldr	r2, [pc, #588]	; (8009d1c <SDOS_SdoInd+0x544>)
 8009ace:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	4a92      	ldr	r2, [pc, #584]	; (8009d20 <SDOS_SdoInd+0x548>)
 8009ad6:	6013      	str	r3, [r2, #0]
                                bSdoInWork = TRUE;
 8009ad8:	4b92      	ldr	r3, [pc, #584]	; (8009d24 <SDOS_SdoInd+0x54c>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
                                pSdoResStored = pSdoInd;
 8009ade:	4a92      	ldr	r2, [pc, #584]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6013      	str	r3, [r2, #0]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 8009ae4:	4b90      	ldr	r3, [pc, #576]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	891a      	ldrh	r2, [r3, #8]
 8009aea:	4b8f      	ldr	r3, [pc, #572]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009af2:	b292      	uxth	r2, r2
 8009af4:	811a      	strh	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8009af6:	4b8c      	ldr	r3, [pc, #560]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	891b      	ldrh	r3, [r3, #8]
 8009afc:	b21a      	sxth	r2, r3
 8009afe:	7ebb      	ldrb	r3, [r7, #26]
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b06:	b21b      	sxth	r3, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b21a      	sxth	r2, r3
 8009b0c:	4b86      	ldr	r3, [pc, #536]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	b292      	uxth	r2, r2
 8009b12:	811a      	strh	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8009b14:	4b85      	ldr	r3, [pc, #532]	; (8009d2c <SDOS_SdoInd+0x554>)
 8009b16:	2260      	movs	r2, #96	; 0x60
 8009b18:	701a      	strb	r2, [r3, #0]
                                return 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e0ed      	b.n	8009cfa <SDOS_SdoInd+0x522>
                            MBXMEMCPY( pSdoSegData, ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 8009b1e:	4b7e      	ldr	r3, [pc, #504]	; (8009d18 <SDOS_SdoInd+0x540>)
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f103 0110 	add.w	r1, r3, #16
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	3b0a      	subs	r3, #10
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f000 ff61 	bl	800a9f4 <memcpy>
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 8009b32:	4b7e      	ldr	r3, [pc, #504]	; (8009d2c <SDOS_SdoInd+0x554>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 8009b38:	8afb      	ldrh	r3, [r7, #22]
 8009b3a:	3b0a      	subs	r3, #10
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
                        nSdoSegBytesToHandle = dataSize;
 8009b3e:	4a7c      	ldr	r2, [pc, #496]	; (8009d30 <SDOS_SdoInd+0x558>)
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	6013      	str	r3, [r2, #0]
        break;
 8009b44:	e0c3      	b.n	8009cce <SDOS_SdoInd+0x4f6>
                    if ( objLength == 0 )
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d108      	bne.n	8009b5e <SDOS_SdoInd+0x386>
                        nSdoSegIndex             = index;
 8009b4c:	4a79      	ldr	r2, [pc, #484]	; (8009d34 <SDOS_SdoInd+0x55c>)
 8009b4e:	8abb      	ldrh	r3, [r7, #20]
 8009b50:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 8009b52:	4a79      	ldr	r2, [pc, #484]	; (8009d38 <SDOS_SdoInd+0x560>)
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 8009b58:	4a78      	ldr	r2, [pc, #480]	; (8009d3c <SDOS_SdoInd+0x564>)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8009b5e:	7e7b      	ldrb	r3, [r7, #25]
 8009b60:	2b40      	cmp	r3, #64	; 0x40
 8009b62:	d149      	bne.n	8009bf8 <SDOS_SdoInd+0x420>
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 8009b64:	7cf9      	ldrb	r1, [r7, #19]
 8009b66:	8ab8      	ldrh	r0, [r7, #20]
 8009b68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b76:	f7fe fbdd 	bl	8008334 <OBJ_Read>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 8009b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b84:	2bff      	cmp	r3, #255	; 0xff
 8009b86:	f040 80a2 	bne.w	8009cce <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_READ;
 8009b8a:	4b5e      	ldr	r3, [pc, #376]	; (8009d04 <SDOS_SdoInd+0x52c>)
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8009b90:	4a5d      	ldr	r2, [pc, #372]	; (8009d08 <SDOS_SdoInd+0x530>)
 8009b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b96:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 8009b98:	4a5c      	ldr	r2, [pc, #368]	; (8009d0c <SDOS_SdoInd+0x534>)
 8009b9a:	7cfb      	ldrb	r3, [r7, #19]
 8009b9c:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8009b9e:	4a5c      	ldr	r2, [pc, #368]	; (8009d10 <SDOS_SdoInd+0x538>)
 8009ba0:	8abb      	ldrh	r3, [r7, #20]
 8009ba2:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 8009ba4:	4a5b      	ldr	r2, [pc, #364]	; (8009d14 <SDOS_SdoInd+0x53c>)
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8009baa:	4a5c      	ldr	r2, [pc, #368]	; (8009d1c <SDOS_SdoInd+0x544>)
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	4a5a      	ldr	r2, [pc, #360]	; (8009d20 <SDOS_SdoInd+0x548>)
 8009bb6:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 8009bb8:	4b5a      	ldr	r3, [pc, #360]	; (8009d24 <SDOS_SdoInd+0x54c>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 8009bbe:	4a5a      	ldr	r2, [pc, #360]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8009bc4:	4b58      	ldr	r3, [pc, #352]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	891a      	ldrh	r2, [r3, #8]
 8009bca:	4b57      	ldr	r3, [pc, #348]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009bd2:	b292      	uxth	r2, r2
 8009bd4:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8009bd6:	4b54      	ldr	r3, [pc, #336]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	891b      	ldrh	r3, [r3, #8]
 8009bdc:	b21a      	sxth	r2, r3
 8009bde:	7ebb      	ldrb	r3, [r7, #26]
 8009be0:	b21b      	sxth	r3, r3
 8009be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be6:	b21b      	sxth	r3, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	b21a      	sxth	r2, r3
 8009bec:	4b4e      	ldr	r3, [pc, #312]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	811a      	strh	r2, [r3, #8]
                            return 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e080      	b.n	8009cfa <SDOS_SdoInd+0x522>
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 8009bf8:	7cf9      	ldrb	r1, [r7, #19]
 8009bfa:	8ab8      	ldrh	r0, [r7, #20]
 8009bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0a:	f7fe fee7 	bl	80089dc <OBJ_Write>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 8009c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c18:	2bff      	cmp	r3, #255	; 0xff
 8009c1a:	d158      	bne.n	8009cce <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_WRITE;
 8009c1c:	4b39      	ldr	r3, [pc, #228]	; (8009d04 <SDOS_SdoInd+0x52c>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8009c22:	4a39      	ldr	r2, [pc, #228]	; (8009d08 <SDOS_SdoInd+0x530>)
 8009c24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c28:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 8009c2a:	4a38      	ldr	r2, [pc, #224]	; (8009d0c <SDOS_SdoInd+0x534>)
 8009c2c:	7cfb      	ldrb	r3, [r7, #19]
 8009c2e:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8009c30:	4a37      	ldr	r2, [pc, #220]	; (8009d10 <SDOS_SdoInd+0x538>)
 8009c32:	8abb      	ldrh	r3, [r7, #20]
 8009c34:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 8009c36:	4a37      	ldr	r2, [pc, #220]	; (8009d14 <SDOS_SdoInd+0x53c>)
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8009c3c:	4a37      	ldr	r2, [pc, #220]	; (8009d1c <SDOS_SdoInd+0x544>)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	4a36      	ldr	r2, [pc, #216]	; (8009d20 <SDOS_SdoInd+0x548>)
 8009c48:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 8009c4a:	4b36      	ldr	r3, [pc, #216]	; (8009d24 <SDOS_SdoInd+0x54c>)
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 8009c50:	4a35      	ldr	r2, [pc, #212]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8009c56:	4b34      	ldr	r3, [pc, #208]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	891a      	ldrh	r2, [r3, #8]
 8009c5c:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009c64:	b292      	uxth	r2, r2
 8009c66:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8009c68:	4b2f      	ldr	r3, [pc, #188]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	891b      	ldrh	r3, [r3, #8]
 8009c6e:	b21a      	sxth	r2, r3
 8009c70:	7ebb      	ldrb	r3, [r7, #26]
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c78:	b21b      	sxth	r3, r3
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	b21a      	sxth	r2, r3
 8009c7e:	4b2a      	ldr	r3, [pc, #168]	; (8009d28 <SDOS_SdoInd+0x550>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	b292      	uxth	r2, r2
 8009c84:	811a      	strh	r2, [r3, #8]
                            return 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e037      	b.n	8009cfa <SDOS_SdoInd+0x522>
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8009c90:	e01d      	b.n	8009cce <SDOS_SdoInd+0x4f6>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 8009c92:	4b26      	ldr	r3, [pc, #152]	; (8009d2c <SDOS_SdoInd+0x554>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	7e7a      	ldrb	r2, [r7, #25]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d110      	bne.n	8009cbe <SDOS_SdoInd+0x4e6>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8009c9c:	7e7b      	ldrb	r3, [r7, #25]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <SDOS_SdoInd+0x4d8>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff f9f6 	bl	8009094 <SdoDownloadSegmentInd>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 8009cae:	e00f      	b.n	8009cd0 <SDOS_SdoInd+0x4f8>
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fbaf 	bl	8009414 <SdoUploadSegmentInd>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8009cbc:	e008      	b.n	8009cd0 <SDOS_SdoInd+0x4f8>
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8009cc4:	e004      	b.n	8009cd0 <SDOS_SdoInd+0x4f8>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8009ccc:	e000      	b.n	8009cd0 <SDOS_SdoInd+0x4f8>
        break;
 8009cce:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 8009cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cd4:	2bff      	cmp	r3, #255	; 0xff
 8009cd6:	d00f      	beq.n	8009cf8 <SDOS_SdoInd+0x520>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 8009cd8:	7ebb      	ldrb	r3, [r7, #26]
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	b29c      	uxth	r4, r3
 8009ce4:	7e79      	ldrb	r1, [r7, #25]
 8009ce6:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	f7ff fcb2 	bl	800965c <SdoRes>
    }

    return 0;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3734      	adds	r7, #52	; 0x34
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd90      	pop	{r4, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000e40 	.word	0x20000e40
 8009d08:	20000e41 	.word	0x20000e41
 8009d0c:	20000e74 	.word	0x20000e74
 8009d10:	20000e72 	.word	0x20000e72
 8009d14:	20000e50 	.word	0x20000e50
 8009d18:	20000e54 	.word	0x20000e54
 8009d1c:	20000e2c 	.word	0x20000e2c
 8009d20:	20000e3c 	.word	0x20000e3c
 8009d24:	200005d5 	.word	0x200005d5
 8009d28:	20000e4c 	.word	0x20000e4c
 8009d2c:	20000e43 	.word	0x20000e43
 8009d30:	20000e30 	.word	0x20000e30
 8009d34:	20000e58 	.word	0x20000e58
 8009d38:	20000e70 	.word	0x20000e70
 8009d3c:	20000e6c 	.word	0x20000e6c

08009d40 <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b089      	sub	sp, #36	; 0x24
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	4603      	mov	r3, r0
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 8009d52:	4b38      	ldr	r3, [pc, #224]	; (8009e34 <SDOS_SdoRes+0xf4>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d068      	beq.n	8009e2c <SDOS_SdoRes+0xec>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 8009d5a:	4b37      	ldr	r3, [pc, #220]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	891b      	ldrh	r3, [r3, #8]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f023 031f 	bic.w	r3, r3, #31
 8009d66:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 8009d68:	4b33      	ldr	r3, [pc, #204]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	891b      	ldrh	r3, [r3, #8]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8009d76:	7d7b      	ldrb	r3, [r7, #21]
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d148      	bne.n	8009e0e <SDOS_SdoRes+0xce>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8009d7c:	4b2f      	ldr	r3, [pc, #188]	; (8009e3c <SDOS_SdoRes+0xfc>)
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	3b10      	subs	r3, #16
 8009d82:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d91d      	bls.n	8009dc8 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 8009d8c:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <SDOS_SdoRes+0x100>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 8009d92:	4b2c      	ldr	r3, [pc, #176]	; (8009e44 <SDOS_SdoRes+0x104>)
 8009d94:	2201      	movs	r2, #1
 8009d96:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 8009d98:	4a2b      	ldr	r2, [pc, #172]	; (8009e48 <SDOS_SdoRes+0x108>)
 8009d9a:	7d3b      	ldrb	r3, [r7, #20]
 8009d9c:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 8009d9e:	4a2b      	ldr	r2, [pc, #172]	; (8009e4c <SDOS_SdoRes+0x10c>)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 8009da4:	4b2a      	ldr	r3, [pc, #168]	; (8009e50 <SDOS_SdoRes+0x110>)
 8009da6:	2260      	movs	r2, #96	; 0x60
 8009da8:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <SDOS_SdoRes+0x114>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
                MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8009db0:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3310      	adds	r3, #16
 8009db6:	8afa      	ldrh	r2, [r7, #22]
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fe1a 	bl	800a9f4 <memcpy>
                nSdoSegBytesToHandle = dataSize;
 8009dc0:	8afb      	ldrh	r3, [r7, #22]
 8009dc2:	4a25      	ldr	r2, [pc, #148]	; (8009e58 <SDOS_SdoRes+0x118>)
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	e022      	b.n	8009e0e <SDOS_SdoRes+0xce>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d811      	bhi.n	8009df2 <SDOS_SdoRes+0xb2>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00e      	beq.n	8009df2 <SDOS_SdoRes+0xb2>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8009dd4:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	330c      	adds	r3, #12
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d016      	beq.n	8009e0e <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8009de0:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fe02 	bl	800a9f4 <memcpy>
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8009df0:	e00d      	b.n	8009e0e <SDOS_SdoRes+0xce>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 8009df2:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3310      	adds	r3, #16
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d007      	beq.n	8009e0e <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3310      	adds	r3, #16
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fdf3 	bl	800a9f4 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <SDOS_SdoRes+0xf4>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 8009e14:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <SDOS_SdoRes+0xf8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	8afc      	ldrh	r4, [r7, #22]
 8009e1a:	7d3a      	ldrb	r2, [r7, #20]
 8009e1c:	7d79      	ldrb	r1, [r7, #21]
 8009e1e:	7bf8      	ldrb	r0, [r7, #15]
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4623      	mov	r3, r4
 8009e28:	f7ff fc18 	bl	800965c <SdoRes>
    }
}
 8009e2c:	bf00      	nop
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd90      	pop	{r4, r7, pc}
 8009e34:	200005d5 	.word	0x200005d5
 8009e38:	20000e4c 	.word	0x20000e4c
 8009e3c:	20000d7c 	.word	0x20000d7c
 8009e40:	20000e35 	.word	0x20000e35
 8009e44:	20000e42 	.word	0x20000e42
 8009e48:	20000e34 	.word	0x20000e34
 8009e4c:	20000e38 	.word	0x20000e38
 8009e50:	20000e43 	.word	0x20000e43
 8009e54:	20000e54 	.word	0x20000e54
 8009e58:	20000e30 	.word	0x20000e30

08009e5c <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b08f      	sub	sp, #60	; 0x3c
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	891b      	ldrh	r3, [r3, #8]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e72:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 8009e76:	2302      	movs	r3, #2
 8009e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 8009e7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	d105      	bne.n	8009e90 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	d807      	bhi.n	8009e9c <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 8009e8c:	2306      	movs	r3, #6
 8009e8e:	e1d2      	b.n	800a236 <SDOS_SdoInfoInd+0x3da>
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d801      	bhi.n	8009e9c <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 8009e98:	2306      	movs	r3, #6
 8009e9a:	e1cc      	b.n	800a236 <SDOS_SdoInfoInd+0x3da>
    }

    switch ( opCode )
 8009e9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009ea0:	2b05      	cmp	r3, #5
 8009ea2:	f000 80c9 	beq.w	800a038 <SDOS_SdoInfoInd+0x1dc>
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	f300 8191 	bgt.w	800a1ce <SDOS_SdoInfoInd+0x372>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d003      	beq.n	8009eb8 <SDOS_SdoInfoInd+0x5c>
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	f000 80c1 	beq.w	800a038 <SDOS_SdoInfoInd+0x1dc>
 8009eb6:	e18a      	b.n	800a1ce <SDOS_SdoInfoInd+0x372>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if ( SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	899b      	ldrh	r3, [r3, #12]
 8009ebc:	2b05      	cmp	r3, #5
 8009ebe:	f200 8189 	bhi.w	800a1d4 <SDOS_SdoInfoInd+0x378>
        {
            UINT16 size = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8) SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	899b      	ldrh	r3, [r3, #12]
 8009eca:	75fb      	strb	r3, [r7, #23]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 8009ecc:	220e      	movs	r2, #14
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	48a3      	ldr	r0, [pc, #652]	; (800a160 <SDOS_SdoInfoInd+0x304>)
 8009ed2:	f000 fd8f 	bl	800a9f4 <memcpy>
            if ( listType-- == 0 )
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	75fa      	strb	r2, [r7, #23]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d122      	bne.n	8009f26 <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 8009ee0:	4ba0      	ldr	r3, [pc, #640]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eec:	e014      	b.n	8009f18 <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 8009eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fd feb0 	bl	8007c58 <OBJ_GetNoOfObjects>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	823b      	strh	r3, [r7, #16]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	1d9a      	adds	r2, r3, #6
 8009f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f04:	3304      	adds	r3, #4
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	4413      	add	r3, r2
 8009f0a:	8a3a      	ldrh	r2, [r7, #16]
 8009f0c:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8009f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f12:	3301      	adds	r3, #1
 8009f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d9e6      	bls.n	8009eee <SDOS_SdoInfoInd+0x92>
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8009f20:	2312      	movs	r3, #18
 8009f22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009f24:	e058      	b.n	8009fd8 <SDOS_SdoInfoInd+0x17c>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	82bb      	strh	r3, [r7, #20]

                if ( nSdoInfoFragmentsLeft )
 8009f2a:	4b8e      	ldr	r3, [pc, #568]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d011      	beq.n	8009f56 <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 8009f32:	4b8d      	ldr	r3, [pc, #564]	; (800a168 <SDOS_SdoInfoInd+0x30c>)
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	3b0c      	subs	r3, #12
 8009f38:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO>>1];
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3306      	adds	r3, #6
 8009f3e:	3306      	adds	r3, #6
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 8009f42:	4b8a      	ldr	r3, [pc, #552]	; (800a16c <SDOS_SdoInfoInd+0x310>)
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 8009f48:	4b86      	ldr	r3, [pc, #536]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	4b84      	ldr	r3, [pc, #528]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009f52:	801a      	strh	r2, [r3, #0]
 8009f54:	e029      	b.n	8009faa <SDOS_SdoInfoInd+0x14e>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fd fe7d 	bl	8007c58 <OBJ_GetNoOfObjects>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	82bb      	strh	r3, [r7, #20]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 8009f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f66:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 8009f68:	4b7f      	ldr	r3, [pc, #508]	; (800a168 <SDOS_SdoInfoInd+0x30c>)
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	3b0e      	subs	r3, #14
 8009f6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT>>1];
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3306      	adds	r3, #6
 8009f74:	3308      	adds	r3, #8
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if( (n<<1) > size)
 8009f78:	8abb      	ldrh	r3, [r7, #20]
 8009f7a:	005a      	lsls	r2, r3, #1
 8009f7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	dd10      	ble.n	8009fa4 <SDOS_SdoInfoInd+0x148>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments 
                        */
                        UINT16 Fragsize = size + 2;
 8009f82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f84:	3302      	adds	r3, #2
 8009f86:	827b      	strh	r3, [r7, #18]
                        nSdoInfoFragmentsLeft = (((n<<1)-size + (Fragsize-1)) /Fragsize);
 8009f88:	8abb      	ldrh	r3, [r7, #20]
 8009f8a:	005a      	lsls	r2, r3, #1
 8009f8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	8a7b      	ldrh	r3, [r7, #18]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	441a      	add	r2, r3
 8009f96:	8a7b      	ldrh	r3, [r7, #18]
 8009f98:	fb92 f3f3 	sdiv	r3, r2, r3
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	4b71      	ldr	r3, [pc, #452]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e002      	b.n	8009faa <SDOS_SdoInfoInd+0x14e>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 8009fa4:	4b6f      	ldr	r3, [pc, #444]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData,&abort);
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	b298      	uxth	r0, r3
 8009fae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009fb0:	f107 010c 	add.w	r1, r7, #12
 8009fb4:	f107 030f 	add.w	r3, r7, #15
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	f7fd fe98 	bl	8007cf0 <OBJ_GetObjectList>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 8009fc4:	89ba      	ldrh	r2, [r7, #12]
 8009fc6:	4b69      	ldr	r3, [pc, #420]	; (800a16c <SDOS_SdoInfoInd+0x310>)
 8009fc8:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8009fca:	4b67      	ldr	r3, [pc, #412]	; (800a168 <SDOS_SdoInfoInd+0x30c>)
 8009fcc:	881a      	ldrh	r2, [r3, #0]
 8009fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b06      	subs	r3, #6
 8009fd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length    = size;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009fdc:	801a      	strh	r2, [r3, #0]

            if(abort == 0)
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 80f7 	bne.w	800a1d4 <SDOS_SdoInfoInd+0x378>
            {
             pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	891b      	ldrh	r3, [r3, #8]
 8009fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	811a      	strh	r2, [r3, #8]
             pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft             = SWAPWORD(nSdoInfoFragmentsLeft);
 800a002:	4b58      	ldr	r3, [pc, #352]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 800a004:	881a      	ldrh	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 800a00a:	4b56      	ldr	r3, [pc, #344]	; (800a164 <SDOS_SdoInfoInd+0x308>)
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 80e0 	beq.w	800a1d4 <SDOS_SdoInfoInd+0x378>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~ INFOHEADER_INCOMPLETE_MASK;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	891b      	ldrh	r3, [r3, #8]
 800a018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	891b      	ldrh	r3, [r3, #8]
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 800a030:	2382      	movs	r3, #130	; 0x82
 800a032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 800a036:	e0cd      	b.n	800a1d4 <SDOS_SdoInfoInd+0x378>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	899b      	ldrh	r3, [r3, #12]
 800a03c:	81bb      	strh	r3, [r7, #12]
        if(index < 0x1000)
 800a03e:	89bb      	ldrh	r3, [r7, #12]
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a044:	d202      	bcs.n	800a04c <SDOS_SdoInfoInd+0x1f0>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800a046:	2305      	movs	r3, #5
 800a048:	73fb      	strb	r3, [r7, #15]
                }
            }
            else
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 800a04a:	e0c5      	b.n	800a1d8 <SDOS_SdoInfoInd+0x37c>
            pObjEntry = OBJ_GetObjectHandle( index );
 800a04c:	89bb      	ldrh	r3, [r7, #12]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fd fd14 	bl	8007a7c <OBJ_GetObjectHandle>
 800a054:	61f8      	str	r0, [r7, #28]
            if ( pObjEntry )
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80b5 	beq.w	800a1c8 <SDOS_SdoInfoInd+0x36c>
                UINT16 size = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	847b      	strh	r3, [r7, #34]	; 0x22
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 800a062:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a066:	2b03      	cmp	r3, #3
 800a068:	d126      	bne.n	800a0b8 <SDOS_SdoInfoInd+0x25c>
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f103 040e 	add.w	r4, r3, #14
 800a070:	69f8      	ldr	r0, [r7, #28]
 800a072:	f7fd ff77 	bl	8007f64 <OBJ_GetObjDesc>
 800a076:	4603      	mov	r3, r0
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6023      	str	r3, [r4, #0]
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 800a07c:	89b8      	ldrh	r0, [r7, #12]
 800a07e:	2300      	movs	r3, #0
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	2100      	movs	r1, #0
 800a084:	f7fd feb0 	bl	8007de8 <OBJ_GetDesc>
 800a088:	4603      	mov	r3, r0
 800a08a:	330c      	adds	r3, #12
 800a08c:	847b      	strh	r3, [r7, #34]	; 0x22
                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800a08e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a090:	4b35      	ldr	r3, [pc, #212]	; (800a168 <SDOS_SdoInfoInd+0x30c>)
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	3b06      	subs	r3, #6
 800a096:	429a      	cmp	r2, r3
 800a098:	d902      	bls.n	800a0a0 <SDOS_SdoInfoInd+0x244>
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 800a09a:	230c      	movs	r3, #12
 800a09c:	847b      	strh	r3, [r7, #34]	; 0x22
 800a09e:	e077      	b.n	800a190 <SDOS_SdoInfoInd+0x334>
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 800a0a0:	89b8      	ldrh	r0, [r7, #12]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	330e      	adds	r3, #14
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	f7fd fe9c 	bl	8007de8 <OBJ_GetDesc>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	847b      	strh	r3, [r7, #34]	; 0x22
 800a0b6:	e06b      	b.n	800a190 <SDOS_SdoInfoInd+0x334>
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	89db      	ldrh	r3, [r3, #14]
 800a0bc:	76fb      	strb	r3, [r7, #27]
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800a0be:	69f8      	ldr	r0, [r7, #28]
 800a0c0:	f7fd ff50 	bl	8007f64 <OBJ_GetObjDesc>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	885b      	ldrh	r3, [r3, #2]
 800a0c8:	76bb      	strb	r3, [r7, #26]
                    if ( subindex <= maxSubindex )
 800a0ca:	7efa      	ldrb	r2, [r7, #27]
 800a0cc:	7ebb      	ldrb	r3, [r7, #26]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d85c      	bhi.n	800a18c <SDOS_SdoInfoInd+0x330>
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f103 0410 	add.w	r4, r3, #16
 800a0d8:	7efb      	ldrb	r3, [r7, #27]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	69f8      	ldr	r0, [r7, #28]
 800a0de:	f7fd ff15 	bl	8007f0c <OBJ_GetEntryDesc>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2206      	movs	r2, #6
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fc83 	bl	800a9f4 <memcpy>
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	89db      	ldrh	r3, [r3, #14]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 800a0fa:	69f8      	ldr	r0, [r7, #28]
 800a0fc:	f7fd ff32 	bl	8007f64 <OBJ_GetObjDesc>
 800a100:	4603      	mov	r3, r0
 800a102:	885b      	ldrh	r3, [r3, #2]
 800a104:	833b      	strh	r3, [r7, #24]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800a106:	8b3b      	ldrh	r3, [r7, #24]
 800a108:	121b      	asrs	r3, r3, #8
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	833b      	strh	r3, [r7, #24]
                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 800a112:	8b3b      	ldrh	r3, [r7, #24]
 800a114:	2b08      	cmp	r3, #8
 800a116:	d002      	beq.n	800a11e <SDOS_SdoInfoInd+0x2c2>
 800a118:	8b3b      	ldrh	r3, [r7, #24]
 800a11a:	2b09      	cmp	r3, #9
 800a11c:	d10d      	bne.n	800a13a <SDOS_SdoInfoInd+0x2de>
 800a11e:	7efb      	ldrb	r3, [r7, #27]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <SDOS_SdoInfoInd+0x2de>
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3310      	adds	r3, #16
 800a128:	3306      	adds	r3, #6
 800a12a:	220d      	movs	r2, #13
 800a12c:	4910      	ldr	r1, [pc, #64]	; (800a170 <SDOS_SdoInfoInd+0x314>)
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fc60 	bl	800a9f4 <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 800a134:	231c      	movs	r3, #28
 800a136:	847b      	strh	r3, [r7, #34]	; 0x22
 800a138:	e02a      	b.n	800a190 <SDOS_SdoInfoInd+0x334>
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800a13a:	89b8      	ldrh	r0, [r7, #12]
 800a13c:	7ef9      	ldrb	r1, [r7, #27]
 800a13e:	2300      	movs	r3, #0
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	f7fd fe51 	bl	8007de8 <OBJ_GetDesc>
 800a146:	4603      	mov	r3, r0
 800a148:	3310      	adds	r3, #16
 800a14a:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800a14c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a14e:	4b06      	ldr	r3, [pc, #24]	; (800a168 <SDOS_SdoInfoInd+0x30c>)
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	3b06      	subs	r3, #6
 800a154:	429a      	cmp	r2, r3
 800a156:	d90d      	bls.n	800a174 <SDOS_SdoInfoInd+0x318>
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800a158:	2310      	movs	r3, #16
 800a15a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a15c:	e018      	b.n	800a190 <SDOS_SdoInfoInd+0x334>
 800a15e:	bf00      	nop
 800a160:	20000e5c 	.word	0x20000e5c
 800a164:	20000e48 	.word	0x20000e48
 800a168:	20000d7c 	.word	0x20000d7c
 800a16c:	20000e28 	.word	0x20000e28
 800a170:	20000534 	.word	0x20000534
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800a174:	89b8      	ldrh	r0, [r7, #12]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3310      	adds	r3, #16
 800a17a:	3306      	adds	r3, #6
 800a17c:	7ef9      	ldrb	r1, [r7, #27]
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	f7fd fe32 	bl	8007de8 <OBJ_GetDesc>
 800a184:	4603      	mov	r3, r0
 800a186:	3310      	adds	r3, #16
 800a188:	847b      	strh	r3, [r7, #34]	; 0x22
 800a18a:	e001      	b.n	800a190 <SDOS_SdoInfoInd+0x334>
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 800a18c:	2311      	movs	r3, #17
 800a18e:	73fb      	strb	r3, [r7, #15]
                if ( abort == 0 )
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d120      	bne.n	800a1d8 <SDOS_SdoInfoInd+0x37c>
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	815a      	strh	r2, [r3, #10]
                        pSdoInfoInd->MbxHeader.Length = size;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a1a0:	801a      	strh	r2, [r3, #0]
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	891b      	ldrh	r3, [r3, #8]
 800a1a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	891a      	ldrh	r2, [r3, #8]
 800a1b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	811a      	strh	r2, [r3, #8]
        break;
 800a1c6:	e007      	b.n	800a1d8 <SDOS_SdoInfoInd+0x37c>
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	73fb      	strb	r3, [r7, #15]
        break;
 800a1cc:	e004      	b.n	800a1d8 <SDOS_SdoInfoInd+0x37c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	73fb      	strb	r3, [r7, #15]
 800a1d2:	e002      	b.n	800a1da <SDOS_SdoInfoInd+0x37e>
        break;
 800a1d4:	bf00      	nop
 800a1d6:	e000      	b.n	800a1da <SDOS_SdoInfoInd+0x37e>
        break;
 800a1d8:	bf00      	nop
    }

    if ( abort )
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01d      	beq.n	800a21c <SDOS_SdoInfoInd+0x3c0>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	220a      	movs	r2, #10
 800a1e4:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	891b      	ldrh	r3, [r3, #8]
 800a1ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	891b      	ldrh	r3, [r3, #8]
 800a1f8:	f043 0307 	orr.w	r3, r3, #7
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	461a      	mov	r2, r3
 800a20c:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <SDOS_SdoInfoInd+0x3e4>)
 800a20e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <SDOS_SdoInfoInd+0x3e8>)
 800a218:	2200      	movs	r2, #0
 800a21a:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 800a21c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7fd fa56 	bl	80076d4 <MBX_MailboxSendReq>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <SDOS_SdoInfoInd+0x3d8>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 800a22e:	4a06      	ldr	r2, [pc, #24]	; (800a248 <SDOS_SdoInfoInd+0x3ec>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6013      	str	r3, [r2, #0]
    }

    return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3734      	adds	r7, #52	; 0x34
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd90      	pop	{r4, r7, pc}
 800a23e:	bf00      	nop
 800a240:	0800b594 	.word	0x0800b594
 800a244:	20000e48 	.word	0x20000e48
 800a248:	20000ab8 	.word	0x20000ab8

0800a24c <_ZN3LED3LEDC1ERN4Port4GPIOEmh>:
#include "drivers/LED.h"

LED::LED::LED(Port::GPIO &gpio,
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	70fb      	strb	r3, [r7, #3]
		uint32_t periodMask,
		uint8_t	polarity)
:gpio_(gpio),mode_(0),periodMask_(periodMask),polarity_(polarity)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	711a      	strb	r2, [r3, #4]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	78fa      	ldrb	r2, [r7, #3]
 800a270:	731a      	strb	r2, [r3, #12]
{}
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <_ZN3LED3LEDD1Ev>:

LED::LED::~LED(){}
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <MainCpp>:
LED::LED led1(led1_gpio);
LED::LED led2(led2_gpio);
LED::LED led3(led3_gpio);

void MainCpp()
{
 800a296:	b580      	push	{r7, lr}
 800a298:	af00      	add	r7, sp, #0
	MainEtherCAT();
 800a29a:	f7f9 fff5 	bl	8004288 <MainEtherCAT>
//
//		msDelay(1);
//	}


}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <_Z41__static_initialization_and_destruction_0ii>:
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d120      	bne.n	800a2f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d11b      	bne.n	800a2f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
LED::LED led0(led0_gpio);
 800a2be:	2301      	movs	r3, #1
 800a2c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a2c4:	4918      	ldr	r1, [pc, #96]	; (800a328 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a2c6:	4819      	ldr	r0, [pc, #100]	; (800a32c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a2c8:	f7ff ffc0 	bl	800a24c <_ZN3LED3LEDC1ERN4Port4GPIOEmh>
LED::LED led1(led1_gpio);
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a2d2:	4917      	ldr	r1, [pc, #92]	; (800a330 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800a2d4:	4817      	ldr	r0, [pc, #92]	; (800a334 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800a2d6:	f7ff ffb9 	bl	800a24c <_ZN3LED3LEDC1ERN4Port4GPIOEmh>
LED::LED led2(led2_gpio);
 800a2da:	2301      	movs	r3, #1
 800a2dc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a2e0:	4915      	ldr	r1, [pc, #84]	; (800a338 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800a2e2:	4816      	ldr	r0, [pc, #88]	; (800a33c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800a2e4:	f7ff ffb2 	bl	800a24c <_ZN3LED3LEDC1ERN4Port4GPIOEmh>
LED::LED led3(led3_gpio);
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a2ee:	4914      	ldr	r1, [pc, #80]	; (800a340 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800a2f0:	4814      	ldr	r0, [pc, #80]	; (800a344 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800a2f2:	f7ff ffab 	bl	800a24c <_ZN3LED3LEDC1ERN4Port4GPIOEmh>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d110      	bne.n	800a31e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a302:	4293      	cmp	r3, r2
 800a304:	d10b      	bne.n	800a31e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800a306:	480f      	ldr	r0, [pc, #60]	; (800a344 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800a308:	f7ff ffba 	bl	800a280 <_ZN3LED3LEDD1Ev>
LED::LED led2(led2_gpio);
 800a30c:	480b      	ldr	r0, [pc, #44]	; (800a33c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800a30e:	f7ff ffb7 	bl	800a280 <_ZN3LED3LEDD1Ev>
LED::LED led1(led1_gpio);
 800a312:	4808      	ldr	r0, [pc, #32]	; (800a334 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800a314:	f7ff ffb4 	bl	800a280 <_ZN3LED3LEDD1Ev>
LED::LED led0(led0_gpio);
 800a318:	4804      	ldr	r0, [pc, #16]	; (800a32c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a31a:	f7ff ffb1 	bl	800a280 <_ZN3LED3LEDD1Ev>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20000698 	.word	0x20000698
 800a32c:	200005d8 	.word	0x200005d8
 800a330:	200006a0 	.word	0x200006a0
 800a334:	200005e8 	.word	0x200005e8
 800a338:	200006a8 	.word	0x200006a8
 800a33c:	200005f8 	.word	0x200005f8
 800a340:	200006b0 	.word	0x200006b0
 800a344:	20000608 	.word	0x20000608

0800a348 <_GLOBAL__sub_I_led0>:
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a350:	2001      	movs	r0, #1
 800a352:	f7ff ffa7 	bl	800a2a4 <_Z41__static_initialization_and_destruction_0ii>
 800a356:	bd80      	pop	{r7, pc}

0800a358 <_GLOBAL__sub_D_led0>:
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a360:	2000      	movs	r0, #0
 800a362:	f7ff ff9f 	bl	800a2a4 <_Z41__static_initialization_and_destruction_0ii>
 800a366:	bd80      	pop	{r7, pc}

0800a368 <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>:

	// *-----* SPI *-----* //

	class SPIComm{
		public:
			SPIComm(SPI_HandleTypeDef *hspi):hspi_(hspi){}
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <_ZN4Port7SPICommD1Ev>:
			~SPIComm(){}
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>:

	// *-----* GPIO *-----* //
	class GPIO
	{
		public:
			GPIO(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin):GPIOx_(GPIOx),GPIO_Pin_(GPIO_Pin){}
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	88fa      	ldrh	r2, [r7, #6]
 800a3b4:	809a      	strh	r2, [r3, #4]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <_ZN4Port4GPIOD1Ev>:
			~GPIO(){}
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>:
	};

	class EXIT:public GPIO
	{
		public:
			EXIT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, IRQn_Type EXTIx_IRQn)
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	80fb      	strh	r3, [r7, #6]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	717b      	strb	r3, [r7, #5]
			:GPIO::GPIO(GPIOx,GPIO_Pin),EXTIx_IRQn_(EXTIx_IRQn){}
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	88fa      	ldrh	r2, [r7, #6]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff ffd0 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	797a      	ldrb	r2, [r7, #5]
 800a400:	719a      	strb	r2, [r3, #6]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <_ZN4Port4EXITD1Ev>:
			~EXIT(){}
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ffd4 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <_ZN4Port2CSC1EP12GPIO_TypeDefth>:
	};

	class CS:GPIO
	{
		public:
			CS(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,uint8_t polarity):GPIO(GPIOx,GPIO_Pin),polarity_(polarity){}
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	4611      	mov	r1, r2
 800a432:	461a      	mov	r2, r3
 800a434:	460b      	mov	r3, r1
 800a436:	80fb      	strh	r3, [r7, #6]
 800a438:	4613      	mov	r3, r2
 800a43a:	717b      	strb	r3, [r7, #5]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	88fa      	ldrh	r2, [r7, #6]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ffaa 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	797a      	ldrb	r2, [r7, #5]
 800a44c:	719a      	strb	r2, [r3, #6]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_ZN4Port2CSD1Ev>:
			~CS(){}
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff ffae 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>:
	#define TX_CQUEUE_BUFFER_LENGTH 64

	class UartCom
	{
		public:
			UartCom(UART_HandleTypeDef *huart,
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	603b      	str	r3, [r7, #0]
		)
			:huart_(huart),
			 txBufLen_(txBufLen),
			 rxBufLen_(rxBufLen),
			 txCQueue_(txCQueueBufLen),
			 rxCQueue_(rxCQueueBufLen)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	609a      	str	r2, [r3, #8]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3314      	adds	r3, #20
 800a496:	2200      	movs	r2, #0
 800a498:	69b9      	ldr	r1, [r7, #24]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f9d2 	bl	800a844 <_ZN8CQueueNS6CQueueC1EmPh>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3330      	adds	r3, #48	; 0x30
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	69f9      	ldr	r1, [r7, #28]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 f9cb 	bl	800a844 <_ZN8CQueueNS6CQueueC1EmPh>
			{
				pTxBuf_ 		= new uint8_t [txBufLen_];
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fa3e 	bl	800a934 <_Znaj>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	60da      	str	r2, [r3, #12]
				pRxBuf_ 		= new uint8_t [rxBufLen_];
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fa35 	bl	800a934 <_Znaj>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	611a      	str	r2, [r3, #16]

			}
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <_ZN4Port7UartComD1Ev>:
			~UartCom()
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
			{
				delete [] pTxBuf_;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <_ZN4Port7UartComD1Ev+0x1a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 fa1d 	bl	800a930 <_ZdaPv>
				delete [] pRxBuf_;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <_ZN4Port7UartComD1Ev+0x2c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fa14 	bl	800a930 <_ZdaPv>
			{
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3330      	adds	r3, #48	; 0x30
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 f9e1 	bl	800a8d4 <_ZN8CQueueNS6CQueueD1Ev>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3314      	adds	r3, #20
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f9dc 	bl	800a8d4 <_ZN8CQueueNS6CQueueD1Ev>
			}
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>:
	 * PB8,  PB9 	---> 	CAN1, FIFO1
	 */
	class CANComm
	{
		public:
			CANComm(CAN_HandleTypeDef *hcan, uint32_t rxFifo):hcan_(hcan),rxFifo_(rxFifo){}
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	4a07      	ldr	r2, [pc, #28]	; (800a554 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm+0x2c>)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	63da      	str	r2, [r3, #60]	; 0x3c
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	0800b614 	.word	0x0800b614

0800a558 <_ZN4Port7CANCommD1Ev>:
			virtual ~CANComm(){}
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	4a04      	ldr	r2, [pc, #16]	; (800a574 <_ZN4Port7CANCommD1Ev+0x1c>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	0800b614 	.word	0x0800b614

0800a578 <_ZN4Port7CANCommD0Ev>:
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ffe9 	bl	800a558 <_ZN4Port7CANCommD1Ev>
 800a586:	2140      	movs	r1, #64	; 0x40
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f9cf 	bl	800a92c <_ZdlPvj>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <_Z41__static_initialization_and_destruction_0ii>:
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	f040 8098 	bne.w	800a6da <_Z41__static_initialization_and_destruction_0ii+0x142>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	f040 8092 	bne.w	800a6da <_Z41__static_initialization_and_destruction_0ii+0x142>
Port::UartCom		uart2rs485(H_UART_RS485);
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2311      	movs	r3, #17
 800a5c0:	2211      	movs	r2, #17
 800a5c2:	4971      	ldr	r1, [pc, #452]	; (800a788 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800a5c4:	4871      	ldr	r0, [pc, #452]	; (800a78c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800a5c6:	f7ff ff54 	bl	800a472 <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800a5ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a5ce:	4970      	ldr	r1, [pc, #448]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a5d0:	4870      	ldr	r0, [pc, #448]	; (800a794 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800a5d2:	f7ff fee3 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800a5d6:	4970      	ldr	r1, [pc, #448]	; (800a798 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800a5d8:	4870      	ldr	r0, [pc, #448]	; (800a79c <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800a5da:	f7ff fec5 	bl	800a368 <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5e4:	496e      	ldr	r1, [pc, #440]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a5e6:	486f      	ldr	r0, [pc, #444]	; (800a7a4 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800a5e8:	f7ff ff1d 	bl	800a426 <_ZN4Port2CSC1EP12GPIO_TypeDefth>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800a5ec:	2306      	movs	r3, #6
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	496d      	ldr	r1, [pc, #436]	; (800a7a8 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800a5f2:	486e      	ldr	r0, [pc, #440]	; (800a7ac <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800a5f4:	f7ff fef1 	bl	800a3da <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800a5f8:	2307      	movs	r3, #7
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	496a      	ldr	r1, [pc, #424]	; (800a7a8 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800a5fe:	486c      	ldr	r0, [pc, #432]	; (800a7b0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800a600:	f7ff feeb 	bl	800a3da <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800a604:	2317      	movs	r3, #23
 800a606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a60a:	4967      	ldr	r1, [pc, #412]	; (800a7a8 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800a60c:	4869      	ldr	r0, [pc, #420]	; (800a7b4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800a60e:	f7ff fee4 	bl	800a3da <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800a612:	2204      	movs	r2, #4
 800a614:	4968      	ldr	r1, [pc, #416]	; (800a7b8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800a616:	4869      	ldr	r0, [pc, #420]	; (800a7bc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800a618:	f7ff fec0 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800a61c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a620:	495f      	ldr	r1, [pc, #380]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a622:	4867      	ldr	r0, [pc, #412]	; (800a7c0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a624:	f7ff feba 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800a628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a62c:	495c      	ldr	r1, [pc, #368]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a62e:	4865      	ldr	r0, [pc, #404]	; (800a7c4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800a630:	f7ff feb4 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800a634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a638:	4959      	ldr	r1, [pc, #356]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a63a:	4863      	ldr	r0, [pc, #396]	; (800a7c8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800a63c:	f7ff feae 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800a640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a644:	4956      	ldr	r1, [pc, #344]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a646:	4861      	ldr	r0, [pc, #388]	; (800a7cc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800a648:	f7ff fea8 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800a64c:	2202      	movs	r2, #2
 800a64e:	4954      	ldr	r1, [pc, #336]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a650:	485f      	ldr	r0, [pc, #380]	; (800a7d0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a652:	f7ff fea3 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800a656:	2201      	movs	r2, #1
 800a658:	4951      	ldr	r1, [pc, #324]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a65a:	485e      	ldr	r0, [pc, #376]	; (800a7d4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800a65c:	f7ff fe9e 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800a660:	2220      	movs	r2, #32
 800a662:	494b      	ldr	r1, [pc, #300]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a664:	485c      	ldr	r0, [pc, #368]	; (800a7d8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800a666:	f7ff fe99 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800a66a:	2210      	movs	r2, #16
 800a66c:	4948      	ldr	r1, [pc, #288]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a66e:	485b      	ldr	r0, [pc, #364]	; (800a7dc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a670:	f7ff fe94 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800a674:	2201      	movs	r2, #1
 800a676:	495a      	ldr	r1, [pc, #360]	; (800a7e0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a678:	485a      	ldr	r0, [pc, #360]	; (800a7e4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a67a:	f7ff ff55 	bl	800a528 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800a67e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a682:	4943      	ldr	r1, [pc, #268]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a684:	4858      	ldr	r0, [pc, #352]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a686:	f7ff fe89 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800a68a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a68e:	4940      	ldr	r1, [pc, #256]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a690:	4856      	ldr	r0, [pc, #344]	; (800a7ec <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a692:	f7ff fe83 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800a696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a69a:	493d      	ldr	r1, [pc, #244]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a69c:	4854      	ldr	r0, [pc, #336]	; (800a7f0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a69e:	f7ff fe7d 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800a6a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a6:	493a      	ldr	r1, [pc, #232]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a6a8:	4852      	ldr	r0, [pc, #328]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800a6aa:	f7ff fe77 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800a6ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6b2:	4937      	ldr	r1, [pc, #220]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a6b4:	4850      	ldr	r0, [pc, #320]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800a6b6:	f7ff fe71 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800a6ba:	2280      	movs	r2, #128	; 0x80
 800a6bc:	4934      	ldr	r1, [pc, #208]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a6be:	484f      	ldr	r0, [pc, #316]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800a6c0:	f7ff fe6c 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800a6c4:	2240      	movs	r2, #64	; 0x40
 800a6c6:	4932      	ldr	r1, [pc, #200]	; (800a790 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800a6c8:	484d      	ldr	r0, [pc, #308]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800a6ca:	f7ff fe67 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800a6ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a6d2:	4933      	ldr	r1, [pc, #204]	; (800a7a0 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800a6d4:	484b      	ldr	r0, [pc, #300]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800a6d6:	f7ff fe61 	bl	800a39c <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d14f      	bne.n	800a780 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d14a      	bne.n	800a780 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800a6ea:	4846      	ldr	r0, [pc, #280]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800a6ec:	f7ff fe6a 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800a6f0:	4843      	ldr	r0, [pc, #268]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800a6f2:	f7ff fe67 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800a6f6:	4841      	ldr	r0, [pc, #260]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800a6f8:	f7ff fe64 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800a6fc:	483e      	ldr	r0, [pc, #248]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800a6fe:	f7ff fe61 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800a702:	483c      	ldr	r0, [pc, #240]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800a704:	f7ff fe5e 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800a708:	4839      	ldr	r0, [pc, #228]	; (800a7f0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a70a:	f7ff fe5b 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800a70e:	4837      	ldr	r0, [pc, #220]	; (800a7ec <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a710:	f7ff fe58 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800a714:	4834      	ldr	r0, [pc, #208]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a716:	f7ff fe55 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800a71a:	4832      	ldr	r0, [pc, #200]	; (800a7e4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a71c:	f7ff ff1c 	bl	800a558 <_ZN4Port7CANCommD1Ev>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800a720:	482e      	ldr	r0, [pc, #184]	; (800a7dc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a722:	f7ff fe4f 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800a726:	482c      	ldr	r0, [pc, #176]	; (800a7d8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800a728:	f7ff fe4c 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800a72c:	4829      	ldr	r0, [pc, #164]	; (800a7d4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800a72e:	f7ff fe49 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800a732:	4827      	ldr	r0, [pc, #156]	; (800a7d0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a734:	f7ff fe46 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800a738:	4824      	ldr	r0, [pc, #144]	; (800a7cc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800a73a:	f7ff fe43 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800a73e:	4822      	ldr	r0, [pc, #136]	; (800a7c8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800a740:	f7ff fe40 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800a744:	481f      	ldr	r0, [pc, #124]	; (800a7c4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800a746:	f7ff fe3d 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800a74a:	481d      	ldr	r0, [pc, #116]	; (800a7c0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a74c:	f7ff fe3a 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800a750:	481a      	ldr	r0, [pc, #104]	; (800a7bc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800a752:	f7ff fe37 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800a756:	4817      	ldr	r0, [pc, #92]	; (800a7b4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800a758:	f7ff fe58 	bl	800a40c <_ZN4Port4EXITD1Ev>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800a75c:	4814      	ldr	r0, [pc, #80]	; (800a7b0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800a75e:	f7ff fe55 	bl	800a40c <_ZN4Port4EXITD1Ev>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800a762:	4812      	ldr	r0, [pc, #72]	; (800a7ac <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800a764:	f7ff fe52 	bl	800a40c <_ZN4Port4EXITD1Ev>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800a768:	480e      	ldr	r0, [pc, #56]	; (800a7a4 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800a76a:	f7ff fe75 	bl	800a458 <_ZN4Port2CSD1Ev>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800a76e:	480b      	ldr	r0, [pc, #44]	; (800a79c <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800a770:	f7ff fe09 	bl	800a386 <_ZN4Port7SPICommD1Ev>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800a774:	4807      	ldr	r0, [pc, #28]	; (800a794 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800a776:	f7ff fe25 	bl	800a3c4 <_ZN4Port4GPIOD1Ev>
Port::UartCom		uart2rs485(H_UART_RS485);
 800a77a:	4804      	ldr	r0, [pc, #16]	; (800a78c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800a77c:	f7ff feae 	bl	800a4dc <_ZN4Port7UartComD1Ev>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200008a0 	.word	0x200008a0
 800a78c:	20000618 	.word	0x20000618
 800a790:	40020800 	.word	0x40020800
 800a794:	20000664 	.word	0x20000664
 800a798:	20000764 	.word	0x20000764
 800a79c:	2000066c 	.word	0x2000066c
 800a7a0:	40020400 	.word	0x40020400
 800a7a4:	20000670 	.word	0x20000670
 800a7a8:	40020000 	.word	0x40020000
 800a7ac:	20000678 	.word	0x20000678
 800a7b0:	20000680 	.word	0x20000680
 800a7b4:	20000688 	.word	0x20000688
 800a7b8:	40020c00 	.word	0x40020c00
 800a7bc:	20000690 	.word	0x20000690
 800a7c0:	20000698 	.word	0x20000698
 800a7c4:	200006a0 	.word	0x200006a0
 800a7c8:	200006a8 	.word	0x200006a8
 800a7cc:	200006b0 	.word	0x200006b0
 800a7d0:	200006b8 	.word	0x200006b8
 800a7d4:	200006c0 	.word	0x200006c0
 800a7d8:	200006c8 	.word	0x200006c8
 800a7dc:	200006d0 	.word	0x200006d0
 800a7e0:	200009dc 	.word	0x200009dc
 800a7e4:	200006d8 	.word	0x200006d8
 800a7e8:	20000718 	.word	0x20000718
 800a7ec:	20000720 	.word	0x20000720
 800a7f0:	20000728 	.word	0x20000728
 800a7f4:	20000730 	.word	0x20000730
 800a7f8:	20000738 	.word	0x20000738
 800a7fc:	20000740 	.word	0x20000740
 800a800:	20000748 	.word	0x20000748
 800a804:	20000750 	.word	0x20000750

0800a808 <_GLOBAL__sub_I_uart2rs485>:
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a810:	2001      	movs	r0, #1
 800a812:	f7ff fec1 	bl	800a598 <_Z41__static_initialization_and_destruction_0ii>
 800a816:	bd80      	pop	{r7, pc}

0800a818 <_GLOBAL__sub_D_uart2rs485>:
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a820:	2000      	movs	r0, #0
 800a822:	f7ff feb9 	bl	800a598 <_Z41__static_initialization_and_destruction_0ii>
 800a826:	bd80      	pop	{r7, pc}

0800a828 <_ZL15IsNotPowerOfTwom>:
 */

#include "utils/cqueue.h"

static inline uint32_t IsNotPowerOfTwo(uint32_t number)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	return (number & (number-1));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	1e5a      	subs	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4013      	ands	r3, r2
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <_ZN8CQueueNS6CQueueC1EmPh>:

CQueueNS::CQueue::CQueue(uint32_t totalLen, uint8_t *pBuffer_)
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
:InitResult(ERROR),readIdx(0),writeIdx(0),mask(0),pBuffer(NULL),IsDeleteNeeded(0),ndtrLast(totalLen)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	605a      	str	r2, [r3, #4]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	609a      	str	r2, [r3, #8]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	60da      	str	r2, [r3, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	611a      	str	r2, [r3, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	751a      	strb	r2, [r3, #20]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	619a      	str	r2, [r3, #24]
{
	if(IsNotPowerOfTwo(totalLen))
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	f7ff ffd4 	bl	800a828 <_ZL15IsNotPowerOfTwom>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	bf14      	ite	ne
 800a886:	2301      	movne	r3, #1
 800a888:	2300      	moveq	r3, #0
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d11c      	bne.n	800a8ca <_ZN8CQueueNS6CQueueC1EmPh+0x86>
	{}
	else
	{
		if(pBuffer_ == NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <_ZN8CQueueNS6CQueueC1EmPh+0x6a>
		{
			pBuffer = new uint8_t [totalLen];
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f84b 	bl	800a934 <_Znaj>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	611a      	str	r2, [r3, #16]
			IsDeleteNeeded = 1;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	751a      	strb	r2, [r3, #20]
 800a8ac:	e002      	b.n	800a8b4 <_ZN8CQueueNS6CQueueC1EmPh+0x70>
		}
		else
		{
			pBuffer = pBuffer_;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	611a      	str	r2, [r3, #16]
		}
		if(pBuffer != NULL)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <_ZN8CQueueNS6CQueueC1EmPh+0x86>
		{
			mask = totalLen - 1;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	60da      	str	r2, [r3, #12]
			InitResult = SUCCESS;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <_ZN8CQueueNS6CQueueD1Ev>:


CQueueNS::CQueue::~CQueue()
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
{
	Reset();
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f815 	bl	800a90c <_ZN8CQueueNS6CQueue5ResetEv>
	if(IsDeleteNeeded)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7d1b      	ldrb	r3, [r3, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d008      	beq.n	800a8fc <_ZN8CQueueNS6CQueueD1Ev+0x28>
	{
		delete []pBuffer;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <_ZN8CQueueNS6CQueueD1Ev+0x28>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f81a 	bl	800a930 <_ZdaPv>
	}
	pBuffer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]
}
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZN8CQueueNS6CQueue5ResetEv>:

void CQueueNS::CQueue::Reset()
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	readIdx = 0;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	605a      	str	r2, [r3, #4]
	writeIdx = 0;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	609a      	str	r2, [r3, #8]
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <_ZdlPvj>:
 800a92c:	f000 b804 	b.w	800a938 <_ZdlPv>

0800a930 <_ZdaPv>:
 800a930:	f000 b802 	b.w	800a938 <_ZdlPv>

0800a934 <_Znaj>:
 800a934:	f000 b802 	b.w	800a93c <_Znwj>

0800a938 <_ZdlPv>:
 800a938:	f000 b854 	b.w	800a9e4 <free>

0800a93c <_Znwj>:
 800a93c:	2801      	cmp	r0, #1
 800a93e:	bf38      	it	cc
 800a940:	2001      	movcc	r0, #1
 800a942:	b510      	push	{r4, lr}
 800a944:	4604      	mov	r4, r0
 800a946:	4620      	mov	r0, r4
 800a948:	f000 f844 	bl	800a9d4 <malloc>
 800a94c:	b930      	cbnz	r0, 800a95c <_Znwj+0x20>
 800a94e:	f000 f807 	bl	800a960 <_ZSt15get_new_handlerv>
 800a952:	b908      	cbnz	r0, 800a958 <_Znwj+0x1c>
 800a954:	f000 f80c 	bl	800a970 <abort>
 800a958:	4780      	blx	r0
 800a95a:	e7f4      	b.n	800a946 <_Znwj+0xa>
 800a95c:	bd10      	pop	{r4, pc}
	...

0800a960 <_ZSt15get_new_handlerv>:
 800a960:	4b02      	ldr	r3, [pc, #8]	; (800a96c <_ZSt15get_new_handlerv+0xc>)
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	f3bf 8f5b 	dmb	ish
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	20000758 	.word	0x20000758

0800a970 <abort>:
 800a970:	b508      	push	{r3, lr}
 800a972:	2006      	movs	r0, #6
 800a974:	f000 f936 	bl	800abe4 <raise>
 800a978:	2001      	movs	r0, #1
 800a97a:	f7f6 fc6b 	bl	8001254 <_exit>
	...

0800a980 <__errno>:
 800a980:	4b01      	ldr	r3, [pc, #4]	; (800a988 <__errno+0x8>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000544 	.word	0x20000544

0800a98c <__libc_init_array>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	4d0d      	ldr	r5, [pc, #52]	; (800a9c4 <__libc_init_array+0x38>)
 800a990:	4c0d      	ldr	r4, [pc, #52]	; (800a9c8 <__libc_init_array+0x3c>)
 800a992:	1b64      	subs	r4, r4, r5
 800a994:	10a4      	asrs	r4, r4, #2
 800a996:	2600      	movs	r6, #0
 800a998:	42a6      	cmp	r6, r4
 800a99a:	d109      	bne.n	800a9b0 <__libc_init_array+0x24>
 800a99c:	4d0b      	ldr	r5, [pc, #44]	; (800a9cc <__libc_init_array+0x40>)
 800a99e:	4c0c      	ldr	r4, [pc, #48]	; (800a9d0 <__libc_init_array+0x44>)
 800a9a0:	f000 f94a 	bl	800ac38 <_init>
 800a9a4:	1b64      	subs	r4, r4, r5
 800a9a6:	10a4      	asrs	r4, r4, #2
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	d105      	bne.n	800a9ba <__libc_init_array+0x2e>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b4:	4798      	blx	r3
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7ee      	b.n	800a998 <__libc_init_array+0xc>
 800a9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9be:	4798      	blx	r3
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	e7f2      	b.n	800a9aa <__libc_init_array+0x1e>
 800a9c4:	0800b684 	.word	0x0800b684
 800a9c8:	0800b684 	.word	0x0800b684
 800a9cc:	0800b684 	.word	0x0800b684
 800a9d0:	0800b690 	.word	0x0800b690

0800a9d4 <malloc>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <malloc+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f000 b871 	b.w	800aac0 <_malloc_r>
 800a9de:	bf00      	nop
 800a9e0:	20000544 	.word	0x20000544

0800a9e4 <free>:
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <free+0xc>)
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	f000 b819 	b.w	800aa20 <_free_r>
 800a9ee:	bf00      	nop
 800a9f0:	20000544 	.word	0x20000544

0800a9f4 <memcpy>:
 800a9f4:	440a      	add	r2, r1
 800a9f6:	4291      	cmp	r1, r2
 800a9f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9fc:	d100      	bne.n	800aa00 <memcpy+0xc>
 800a9fe:	4770      	bx	lr
 800aa00:	b510      	push	{r4, lr}
 800aa02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa0a:	4291      	cmp	r1, r2
 800aa0c:	d1f9      	bne.n	800aa02 <memcpy+0xe>
 800aa0e:	bd10      	pop	{r4, pc}

0800aa10 <memset>:
 800aa10:	4402      	add	r2, r0
 800aa12:	4603      	mov	r3, r0
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d100      	bne.n	800aa1a <memset+0xa>
 800aa18:	4770      	bx	lr
 800aa1a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1e:	e7f9      	b.n	800aa14 <memset+0x4>

0800aa20 <_free_r>:
 800aa20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa22:	2900      	cmp	r1, #0
 800aa24:	d048      	beq.n	800aab8 <_free_r+0x98>
 800aa26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa2a:	9001      	str	r0, [sp, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa32:	bfb8      	it	lt
 800aa34:	18e4      	addlt	r4, r4, r3
 800aa36:	f000 f8f3 	bl	800ac20 <__malloc_lock>
 800aa3a:	4a20      	ldr	r2, [pc, #128]	; (800aabc <_free_r+0x9c>)
 800aa3c:	9801      	ldr	r0, [sp, #4]
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	4615      	mov	r5, r2
 800aa42:	b933      	cbnz	r3, 800aa52 <_free_r+0x32>
 800aa44:	6063      	str	r3, [r4, #4]
 800aa46:	6014      	str	r4, [r2, #0]
 800aa48:	b003      	add	sp, #12
 800aa4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa4e:	f000 b8ed 	b.w	800ac2c <__malloc_unlock>
 800aa52:	42a3      	cmp	r3, r4
 800aa54:	d90b      	bls.n	800aa6e <_free_r+0x4e>
 800aa56:	6821      	ldr	r1, [r4, #0]
 800aa58:	1862      	adds	r2, r4, r1
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	bf04      	itt	eq
 800aa5e:	681a      	ldreq	r2, [r3, #0]
 800aa60:	685b      	ldreq	r3, [r3, #4]
 800aa62:	6063      	str	r3, [r4, #4]
 800aa64:	bf04      	itt	eq
 800aa66:	1852      	addeq	r2, r2, r1
 800aa68:	6022      	streq	r2, [r4, #0]
 800aa6a:	602c      	str	r4, [r5, #0]
 800aa6c:	e7ec      	b.n	800aa48 <_free_r+0x28>
 800aa6e:	461a      	mov	r2, r3
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	b10b      	cbz	r3, 800aa78 <_free_r+0x58>
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d9fa      	bls.n	800aa6e <_free_r+0x4e>
 800aa78:	6811      	ldr	r1, [r2, #0]
 800aa7a:	1855      	adds	r5, r2, r1
 800aa7c:	42a5      	cmp	r5, r4
 800aa7e:	d10b      	bne.n	800aa98 <_free_r+0x78>
 800aa80:	6824      	ldr	r4, [r4, #0]
 800aa82:	4421      	add	r1, r4
 800aa84:	1854      	adds	r4, r2, r1
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	d1dd      	bne.n	800aa48 <_free_r+0x28>
 800aa8c:	681c      	ldr	r4, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	6053      	str	r3, [r2, #4]
 800aa92:	4421      	add	r1, r4
 800aa94:	6011      	str	r1, [r2, #0]
 800aa96:	e7d7      	b.n	800aa48 <_free_r+0x28>
 800aa98:	d902      	bls.n	800aaa0 <_free_r+0x80>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	6003      	str	r3, [r0, #0]
 800aa9e:	e7d3      	b.n	800aa48 <_free_r+0x28>
 800aaa0:	6825      	ldr	r5, [r4, #0]
 800aaa2:	1961      	adds	r1, r4, r5
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf04      	itt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	6063      	str	r3, [r4, #4]
 800aaae:	bf04      	itt	eq
 800aab0:	1949      	addeq	r1, r1, r5
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	6054      	str	r4, [r2, #4]
 800aab6:	e7c7      	b.n	800aa48 <_free_r+0x28>
 800aab8:	b003      	add	sp, #12
 800aaba:	bd30      	pop	{r4, r5, pc}
 800aabc:	2000075c 	.word	0x2000075c

0800aac0 <_malloc_r>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	1ccd      	adds	r5, r1, #3
 800aac4:	f025 0503 	bic.w	r5, r5, #3
 800aac8:	3508      	adds	r5, #8
 800aaca:	2d0c      	cmp	r5, #12
 800aacc:	bf38      	it	cc
 800aace:	250c      	movcc	r5, #12
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	4606      	mov	r6, r0
 800aad4:	db01      	blt.n	800aada <_malloc_r+0x1a>
 800aad6:	42a9      	cmp	r1, r5
 800aad8:	d903      	bls.n	800aae2 <_malloc_r+0x22>
 800aada:	230c      	movs	r3, #12
 800aadc:	6033      	str	r3, [r6, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae2:	f000 f89d 	bl	800ac20 <__malloc_lock>
 800aae6:	4921      	ldr	r1, [pc, #132]	; (800ab6c <_malloc_r+0xac>)
 800aae8:	680a      	ldr	r2, [r1, #0]
 800aaea:	4614      	mov	r4, r2
 800aaec:	b99c      	cbnz	r4, 800ab16 <_malloc_r+0x56>
 800aaee:	4f20      	ldr	r7, [pc, #128]	; (800ab70 <_malloc_r+0xb0>)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	b923      	cbnz	r3, 800aafe <_malloc_r+0x3e>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f000 f83c 	bl	800ab74 <_sbrk_r>
 800aafc:	6038      	str	r0, [r7, #0]
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 f837 	bl	800ab74 <_sbrk_r>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d123      	bne.n	800ab52 <_malloc_r+0x92>
 800ab0a:	230c      	movs	r3, #12
 800ab0c:	6033      	str	r3, [r6, #0]
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f000 f88c 	bl	800ac2c <__malloc_unlock>
 800ab14:	e7e3      	b.n	800aade <_malloc_r+0x1e>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	1b5b      	subs	r3, r3, r5
 800ab1a:	d417      	bmi.n	800ab4c <_malloc_r+0x8c>
 800ab1c:	2b0b      	cmp	r3, #11
 800ab1e:	d903      	bls.n	800ab28 <_malloc_r+0x68>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	441c      	add	r4, r3
 800ab24:	6025      	str	r5, [r4, #0]
 800ab26:	e004      	b.n	800ab32 <_malloc_r+0x72>
 800ab28:	6863      	ldr	r3, [r4, #4]
 800ab2a:	42a2      	cmp	r2, r4
 800ab2c:	bf0c      	ite	eq
 800ab2e:	600b      	streq	r3, [r1, #0]
 800ab30:	6053      	strne	r3, [r2, #4]
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 f87a 	bl	800ac2c <__malloc_unlock>
 800ab38:	f104 000b 	add.w	r0, r4, #11
 800ab3c:	1d23      	adds	r3, r4, #4
 800ab3e:	f020 0007 	bic.w	r0, r0, #7
 800ab42:	1ac2      	subs	r2, r0, r3
 800ab44:	d0cc      	beq.n	800aae0 <_malloc_r+0x20>
 800ab46:	1a1b      	subs	r3, r3, r0
 800ab48:	50a3      	str	r3, [r4, r2]
 800ab4a:	e7c9      	b.n	800aae0 <_malloc_r+0x20>
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	6864      	ldr	r4, [r4, #4]
 800ab50:	e7cc      	b.n	800aaec <_malloc_r+0x2c>
 800ab52:	1cc4      	adds	r4, r0, #3
 800ab54:	f024 0403 	bic.w	r4, r4, #3
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d0e3      	beq.n	800ab24 <_malloc_r+0x64>
 800ab5c:	1a21      	subs	r1, r4, r0
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f000 f808 	bl	800ab74 <_sbrk_r>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d1dd      	bne.n	800ab24 <_malloc_r+0x64>
 800ab68:	e7cf      	b.n	800ab0a <_malloc_r+0x4a>
 800ab6a:	bf00      	nop
 800ab6c:	2000075c 	.word	0x2000075c
 800ab70:	20000760 	.word	0x20000760

0800ab74 <_sbrk_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d06      	ldr	r5, [pc, #24]	; (800ab90 <_sbrk_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f6 fb72 	bl	8001268 <_sbrk>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_sbrk_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_sbrk_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	20000e80 	.word	0x20000e80

0800ab94 <_raise_r>:
 800ab94:	291f      	cmp	r1, #31
 800ab96:	b538      	push	{r3, r4, r5, lr}
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	d904      	bls.n	800aba8 <_raise_r+0x14>
 800ab9e:	2316      	movs	r3, #22
 800aba0:	6003      	str	r3, [r0, #0]
 800aba2:	f04f 30ff 	mov.w	r0, #4294967295
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abaa:	b112      	cbz	r2, 800abb2 <_raise_r+0x1e>
 800abac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abb0:	b94b      	cbnz	r3, 800abc6 <_raise_r+0x32>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f830 	bl	800ac18 <_getpid_r>
 800abb8:	462a      	mov	r2, r5
 800abba:	4601      	mov	r1, r0
 800abbc:	4620      	mov	r0, r4
 800abbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abc2:	f000 b817 	b.w	800abf4 <_kill_r>
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d00a      	beq.n	800abe0 <_raise_r+0x4c>
 800abca:	1c59      	adds	r1, r3, #1
 800abcc:	d103      	bne.n	800abd6 <_raise_r+0x42>
 800abce:	2316      	movs	r3, #22
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	2001      	movs	r0, #1
 800abd4:	e7e7      	b.n	800aba6 <_raise_r+0x12>
 800abd6:	2400      	movs	r4, #0
 800abd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abdc:	4628      	mov	r0, r5
 800abde:	4798      	blx	r3
 800abe0:	2000      	movs	r0, #0
 800abe2:	e7e0      	b.n	800aba6 <_raise_r+0x12>

0800abe4 <raise>:
 800abe4:	4b02      	ldr	r3, [pc, #8]	; (800abf0 <raise+0xc>)
 800abe6:	4601      	mov	r1, r0
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	f7ff bfd3 	b.w	800ab94 <_raise_r>
 800abee:	bf00      	nop
 800abf0:	20000544 	.word	0x20000544

0800abf4 <_kill_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	; (800ac14 <_kill_r+0x20>)
 800abf8:	2300      	movs	r3, #0
 800abfa:	4604      	mov	r4, r0
 800abfc:	4608      	mov	r0, r1
 800abfe:	4611      	mov	r1, r2
 800ac00:	602b      	str	r3, [r5, #0]
 800ac02:	f7f6 fb17 	bl	8001234 <_kill>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	d102      	bne.n	800ac10 <_kill_r+0x1c>
 800ac0a:	682b      	ldr	r3, [r5, #0]
 800ac0c:	b103      	cbz	r3, 800ac10 <_kill_r+0x1c>
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	bf00      	nop
 800ac14:	20000e80 	.word	0x20000e80

0800ac18 <_getpid_r>:
 800ac18:	f7f6 bb04 	b.w	8001224 <_getpid>

0800ac1c <__retarget_lock_acquire_recursive>:
 800ac1c:	4770      	bx	lr

0800ac1e <__retarget_lock_release_recursive>:
 800ac1e:	4770      	bx	lr

0800ac20 <__malloc_lock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__malloc_lock+0x8>)
 800ac22:	f7ff bffb 	b.w	800ac1c <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20000e79 	.word	0x20000e79

0800ac2c <__malloc_unlock>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <__malloc_unlock+0x8>)
 800ac2e:	f7ff bff6 	b.w	800ac1e <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20000e79 	.word	0x20000e79

0800ac38 <_init>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr

0800ac44 <_fini>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	bf00      	nop
 800ac48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4a:	bc08      	pop	{r3}
 800ac4c:	469e      	mov	lr, r3
 800ac4e:	4770      	bx	lr

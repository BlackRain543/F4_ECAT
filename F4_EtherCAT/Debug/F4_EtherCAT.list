
F4_EtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c278  0800c278  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c280  0800c280  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800c290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000205a8  2**0
                  CONTENTS
 10 .bss          00000968  200005a8  200005a8  000205a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f10  20000f10  000205a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036063  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000574a  00000000  00000000  0005663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  0005bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001910  00000000  00000000  0005d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029596  00000000  00000000  0005f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e3c  00000000  00000000  00088656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c7f  00000000  00000000  000ae492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00193111  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007380  00000000  00000000  00193164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a8 	.word	0x200005a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b82c 	.word	0x0800b82c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005ac 	.word	0x200005ac
 80001c4:	0800b82c 	.word	0x0800b82c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fffe 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 faf2 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 fac8 	bl	8000a74 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f98c 	bl	8000800 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004e8:	f000 f9b8 	bl	800085c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ec:	f000 f9ec 	bl	80008c8 <MX_SPI2_Init>
  MX_DAC_Init();
 80004f0:	f000 f952 	bl	8000798 <MX_DAC_Init>
  MX_ADC1_Init();
 80004f4:	f000 f878 	bl	80005e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004f8:	f000 f8c8 	bl	800068c <MX_ADC2_Init>
  MX_CAN1_Init();
 80004fc:	f000 f918 	bl	8000730 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000500:	f000 fa64 	bl	80009cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000504:	f000 fa8c 	bl	8000a20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000508:	f000 fa14 	bl	8000934 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MainCpp();
 800050c:	f00a fd06 	bl	800af1c <MainCpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x40>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f00b f86e 	bl	800b604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fd2b 	bl	8002ff4 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a4:	f000 fba8 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2105      	movs	r1, #5
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ff8c 	bl	80034e4 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d2:	f000 fb91 	bl	8000cf8 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MX_ADC1_Init+0xa0>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000616:	2200      	movs	r2, #0
 8000618:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x9c>)
 800062c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x9c>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x9c>)
 800064e:	f000 ffb3 	bl	80015b8 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000658:	f000 fb4e 	bl	8000cf8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800065c:	2307      	movs	r3, #7
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x9c>)
 800066e:	f001 f915 	bl	800189c <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 fb3e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000824 	.word	0x20000824
 8000688:	40012000 	.word	0x40012000

0800068c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_ADC2_Init+0xa0>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006d0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_ADC2_Init+0x9c>)
 80006f2:	f000 ff61 	bl	80015b8 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80006fc:	f000 fafc 	bl	8000cf8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000700:	2306      	movs	r3, #6
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000708:	2301      	movs	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC2_Init+0x9c>)
 8000712:	f001 f8c3 	bl	800189c <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800071c:	f000 faec 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000788 	.word	0x20000788
 800072c:	40012100 	.word	0x40012100

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_CAN1_Init+0x60>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_CAN1_Init+0x64>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_CAN1_Init+0x60>)
 800073c:	2210      	movs	r2, #16
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_CAN1_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_CAN1_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_CAN1_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_CAN1_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_CAN1_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_CAN1_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_CAN1_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_CAN1_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_CAN1_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CAN1_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_CAN1_Init+0x60>)
 800077e:	f001 fb2d 	bl	8001ddc <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 fab6 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000a68 	.word	0x20000a68
 8000794:	40006400 	.word	0x40006400

08000798 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_DAC_Init+0x60>)
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_DAC_Init+0x64>)
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_DAC_Init+0x60>)
 80007ae:	f001 fd22 	bl	80021f6 <HAL_DAC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007b8:	f000 fa9e 	bl	8000cf8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_DAC_Init+0x60>)
 80007cc:	f001 fd35 	bl	800223a <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007d6:	f000 fa8f 	bl	8000cf8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	2210      	movs	r2, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_DAC_Init+0x60>)
 80007e2:	f001 fd2a 	bl	800223a <HAL_DAC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 fa84 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200008b0 	.word	0x200008b0
 80007fc:	40007400 	.word	0x40007400

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f002 fa95 	bl	8002d6c <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 fa56 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200007d0 	.word	0x200007d0
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008ae:	f003 f815 	bl	80038dc <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 fa1e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000924 	.word	0x20000924
 80008c4:	40013000 	.word	0x40013000

080008c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_SPI2_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_SPI2_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI2_Init+0x64>)
 80008d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI2_Init+0x64>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI2_Init+0x64>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI2_Init+0x64>)
 80008f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI2_Init+0x64>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_SPI2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI2_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_SPI2_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI2_Init+0x64>)
 8000914:	220a      	movs	r2, #10
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_SPI2_Init+0x64>)
 800091a:	f002 ffdf 	bl	80038dc <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000924:	f000 f9e8 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000730 	.word	0x20000730
 8000930:	40003800 	.word	0x40003800

08000934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM2_Init+0x94>)
 800095a:	2227      	movs	r2, #39	; 0x27
 800095c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_TIM2_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_TIM2_Init+0x94>)
 800097a:	f003 faa5 	bl	8003ec8 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000984:	f000 f9b8 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000996:	f003 fb57 	bl	8004048 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 f9aa 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009a4:	2320      	movs	r3, #32
 80009a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM2_Init+0x94>)
 80009b2:	f003 fd4b 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f99c 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000097c 	.word	0x2000097c

080009cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MX_USART1_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f003 fd9e 	bl	8004544 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f973 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000086c 	.word	0x2000086c
 8000a1c:	40011000 	.word	0x40011000

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f003 fd74 	bl	8004544 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f949 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200009c4 	.word	0x200009c4
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2038      	movs	r0, #56	; 0x38
 8000a9c:	f001 fb75 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa0:	2038      	movs	r0, #56	; 0x38
 8000aa2:	f001 fb8e 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	203a      	movs	r0, #58	; 0x3a
 8000aac:	f001 fb6d 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ab0:	203a      	movs	r0, #58	; 0x3a
 8000ab2:	f001 fb86 	bl	80021c2 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b81      	ldr	r3, [pc, #516]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a80      	ldr	r2, [pc, #512]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b7e      	ldr	r3, [pc, #504]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b7a      	ldr	r3, [pc, #488]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a79      	ldr	r2, [pc, #484]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b77      	ldr	r3, [pc, #476]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b73      	ldr	r3, [pc, #460]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a72      	ldr	r2, [pc, #456]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b70      	ldr	r3, [pc, #448]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b6c      	ldr	r3, [pc, #432]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a6b      	ldr	r2, [pc, #428]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b69      	ldr	r3, [pc, #420]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a64      	ldr	r2, [pc, #400]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <MX_GPIO_Init+0x220>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_CTRL_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f242 0130 	movw	r1, #8240	; 0x2030
 8000b6c:	485e      	ldr	r0, [pc, #376]	; (8000ce8 <MX_GPIO_Init+0x224>)
 8000b6e:	f002 f8bf 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000b72:	2200      	movs	r2, #0
 8000b74:	f647 1103 	movw	r1, #30979	; 0x7903
 8000b78:	485c      	ldr	r0, [pc, #368]	; (8000cec <MX_GPIO_Init+0x228>)
 8000b7a:	f002 f8b9 	bl	8002cf0 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x22c>)
 8000b86:	f002 f8b3 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_LOADED_GPIO_Port, EEPROM_LOADED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4859      	ldr	r0, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x230>)
 8000b90:	f002 f8ae 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = RS485_CTRL_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	484e      	ldr	r0, [pc, #312]	; (8000ce8 <MX_GPIO_Init+0x224>)
 8000bae:	f001 ff03 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000bb2:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4848      	ldr	r0, [pc, #288]	; (8000ce8 <MX_GPIO_Init+0x224>)
 8000bc8:	f001 fef6 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC0_Pin SYNC1_Pin SPI2_IRQ_Pin */
  GPIO_InitStruct.Pin = SYNC0_Pin|SYNC1_Pin|SPI2_IRQ_Pin;
 8000bcc:	f240 1303 	movw	r3, #259	; 0x103
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <MX_GPIO_Init+0x22c>)
 8000be4:	f001 fee8 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin;
 8000be8:	2330      	movs	r3, #48	; 0x30
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x224>)
 8000c00:	f001 feda 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin LED0_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000c04:	f647 1303 	movw	r3, #30979	; 0x7903
 8000c08:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4833      	ldr	r0, [pc, #204]	; (8000cec <MX_GPIO_Init+0x228>)
 8000c1e:	f001 fecb 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8000c22:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	482d      	ldr	r0, [pc, #180]	; (8000cec <MX_GPIO_Init+0x228>)
 8000c38:	f001 febe 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN7_Pin */
  GPIO_InitStruct.Pin = IN7_Pin;
 8000c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN7_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <MX_GPIO_Init+0x228>)
 8000c52:	f001 feb1 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN6_Pin IN7C7_Pin IN4_Pin IN3_Pin
                           IN2_Pin IN1_Pin IN0_Pin */
  GPIO_InitStruct.Pin = IN6_Pin|IN7C7_Pin|IN4_Pin|IN3_Pin
 8000c56:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c5a:	617b      	str	r3, [r7, #20]
                          |IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481f      	ldr	r0, [pc, #124]	; (8000ce8 <MX_GPIO_Init+0x224>)
 8000c6c:	f001 fea4 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <MX_GPIO_Init+0x22c>)
 8000c8a:	f001 fe95 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_LOADED_Pin */
  GPIO_InitStruct.Pin = EEPROM_LOADED_Pin;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_LOADED_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_GPIO_Init+0x230>)
 8000ca6:	f001 fe87 	bl	80029b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f001 fa6b 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f001 fa84 	bl	80021c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f001 fa63 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	f001 fa7c 	bl	80021c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2017      	movs	r0, #23
 8000cd0:	f001 fa5b 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cd4:	2017      	movs	r0, #23
 8000cd6:	f001 fa74 	bl	80021c2 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a5e      	ldr	r2, [pc, #376]	; (8000eec <HAL_ADC_MspInit+0x198>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d158      	bne.n	8000e28 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a5c      	ldr	r2, [pc, #368]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	484c      	ldr	r0, [pc, #304]	; (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000dc2:	f001 fdf9 	bl	80029b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000dc8:	4a4c      	ldr	r2, [pc, #304]	; (8000efc <HAL_ADC_MspInit+0x1a8>)
 8000dca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000df0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df6:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e0a:	483b      	ldr	r0, [pc, #236]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e0c:	f001 fa64 	bl	80022d8 <HAL_DMA_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e16:	f7ff ff6f 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e20:	4a35      	ldr	r2, [pc, #212]	; (8000ef8 <HAL_ADC_MspInit+0x1a4>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e26:	e05d      	b.n	8000ee4 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <HAL_ADC_MspInit+0x1ac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d158      	bne.n	8000ee4 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_ADC_MspInit+0x19c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <HAL_ADC_MspInit+0x1a0>)
 8000e7e:	f001 fd9b 	bl	80029b8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_ADC_MspInit+0x1b4>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ec8:	480e      	ldr	r0, [pc, #56]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000eca:	f001 fa05 	bl	80022d8 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8000ed4:	f7ff ff10 	bl	8000cf8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_ADC_MspInit+0x1b0>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	200008c4 	.word	0x200008c4
 8000efc:	40026410 	.word	0x40026410
 8000f00:	40012100 	.word	0x40012100
 8000f04:	20000a08 	.word	0x20000a08
 8000f08:	40026440 	.word	0x40026440

08000f0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_CAN_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_CAN_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_CAN_MspInit+0x8c>)
 8000f84:	f001 fd18 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40006400 	.word	0x40006400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_DAC_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d127      	bne.n	800100e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_DAC_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ff6:	2330      	movs	r3, #48	; 0x30
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_DAC_MspInit+0x84>)
 800100a:	f001 fcd5 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40007400 	.word	0x40007400
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_I2C_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12b      	bne.n	800109e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_I2C_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_I2C_MspInit+0x88>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_I2C_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23c0      	movs	r3, #192	; 0xc0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001066:	2312      	movs	r3, #18
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001072:	2304      	movs	r3, #4
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <HAL_I2C_MspInit+0x8c>)
 800107e:	f001 fc9b 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_I2C_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x88>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_I2C_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <HAL_SPI_MspInit+0x124>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12c      	bne.n	8001130 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_SPI_MspInit+0x128>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a3f      	ldr	r2, [pc, #252]	; (80011dc <HAL_SPI_MspInit+0x128>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <HAL_SPI_MspInit+0x128>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_SPI_MspInit+0x128>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <HAL_SPI_MspInit+0x128>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800110e:	2338      	movs	r3, #56	; 0x38
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111e:	2305      	movs	r3, #5
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	482d      	ldr	r0, [pc, #180]	; (80011e0 <HAL_SPI_MspInit+0x12c>)
 800112a:	f001 fc45 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800112e:	e04f      	b.n	80011d0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <HAL_SPI_MspInit+0x130>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d14a      	bne.n	80011d0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_SPI_MspInit+0x128>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_SPI_MspInit+0x128>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_SPI_MspInit+0x128>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_SPI_MspInit+0x128>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118e:	230c      	movs	r3, #12
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119e:	2305      	movs	r3, #5
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	480f      	ldr	r0, [pc, #60]	; (80011e8 <HAL_SPI_MspInit+0x134>)
 80011aa:	f001 fc05 	bl	80029b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c0:	2305      	movs	r3, #5
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_SPI_MspInit+0x12c>)
 80011cc:	f001 fbf4 	bl	80029b8 <HAL_GPIO_Init>
}
 80011d0:	bf00      	nop
 80011d2:	3730      	adds	r7, #48	; 0x30
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40003800 	.word	0x40003800
 80011e8:	40020800 	.word	0x40020800

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fc:	d115      	bne.n	800122a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_TIM_Base_MspInit+0x48>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	201c      	movs	r0, #28
 8001220:	f000 ffb3 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001224:	201c      	movs	r0, #28
 8001226:	f000 ffcc 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a32      	ldr	r2, [pc, #200]	; (8001320 <HAL_UART_MspInit+0xe8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12d      	bne.n	80012b6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_UART_MspInit+0xec>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_UART_MspInit+0xec>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_UART_MspInit+0xec>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_UART_MspInit+0xec>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_UART_MspInit+0xec>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_UART_MspInit+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a4:	2307      	movs	r3, #7
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <HAL_UART_MspInit+0xf0>)
 80012b0:	f001 fb82 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b4:	e030      	b.n	8001318 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_UART_MspInit+0xf4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d12b      	bne.n	8001318 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_UART_MspInit+0xec>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f8:	230c      	movs	r3, #12
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001308:	2307      	movs	r3, #7
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_UART_MspInit+0xf0>)
 8001314:	f001 fb50 	bl	80029b8 <HAL_GPIO_Init>
}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40011000 	.word	0x40011000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	40004400 	.word	0x40004400

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 f8fc 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <DMA2_Stream0_IRQHandler+0x10>)
 800138a:	f001 f8ab 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200008c4 	.word	0x200008c4

08001398 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <DMA2_Stream2_IRQHandler+0x10>)
 800139e:	f001 f8a1 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000a08 	.word	0x20000a08

080013ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_kill>:

int _kill(int pid, int sig)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013c6:	f00a f8d5 	bl	800b574 <__errno>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2216      	movs	r2, #22
 80013ce:	601a      	str	r2, [r3, #0]
	return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe7 	bl	80013bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ee:	e7fe      	b.n	80013ee <_exit+0x12>

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f00a f8a8 	bl	800b574 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20020000 	.word	0x20020000
 8001450:	00000400 	.word	0x00000400
 8001454:	200005c4 	.word	0x200005c4
 8001458:	20000f10 	.word	0x20000f10

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ffd7 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f00a f867 	bl	800b580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff f80d 	bl	80004d0 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	200005a8 	.word	0x200005a8
  ldr r2, =_sidata
 80014c4:	0800c290 	.word	0x0800c290
  ldr r2, =_sbss
 80014c8:	200005a8 	.word	0x200005a8
  ldr r4, =_ebss
 80014cc:	20000f10 	.word	0x20000f10

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 fe39 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fbfc 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe51 	bl	80021de <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 fe19 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000a90 	.word	0x20000a90

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000a90 	.word	0x20000a90

080015b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e033      	b.n	8001636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fbbc 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d118      	bne.n	8001628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015fe:	f023 0302 	bic.w	r3, r3, #2
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fa68 	bl	8001ae0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
 8001626:	e001      	b.n	800162c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_ADC_Start_DMA+0x1e>
 800165a:	2302      	movs	r3, #2
 800165c:	e0e9      	b.n	8001832 <HAL_ADC_Start_DMA+0x1f2>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d018      	beq.n	80016a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001684:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_ADC_Start_DMA+0x1fc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6d      	ldr	r2, [pc, #436]	; (8001840 <HAL_ADC_Start_DMA+0x200>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9a      	lsrs	r2, r3, #18
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	3b01      	subs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b4:	d107      	bne.n	80016c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	f040 80a1 	bne.w	8001818 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001700:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	d106      	bne.n	8001724 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f023 0206 	bic.w	r2, r3, #6
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
 8001722:	e002      	b.n	800172a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_ADC_Start_DMA+0x204>)
 8001734:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	4a43      	ldr	r2, [pc, #268]	; (8001848 <HAL_ADC_Start_DMA+0x208>)
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_ADC_Start_DMA+0x20c>)
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	4a41      	ldr	r2, [pc, #260]	; (8001850 <HAL_ADC_Start_DMA+0x210>)
 800174c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001756:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001766:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	334c      	adds	r3, #76	; 0x4c
 8001782:	4619      	mov	r1, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f000 fe54 	bl	8002434 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b00      	cmp	r3, #0
 8001796:	d12a      	bne.n	80017ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <HAL_ADC_Start_DMA+0x214>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d015      	beq.n	80017ce <HAL_ADC_Start_DMA+0x18e>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <HAL_ADC_Start_DMA+0x218>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d105      	bne.n	80017b8 <HAL_ADC_Start_DMA+0x178>
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_ADC_Start_DMA+0x204>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <HAL_ADC_Start_DMA+0x21c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d136      	bne.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_ADC_Start_DMA+0x204>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d130      	bne.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d129      	bne.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e020      	b.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_ADC_Start_DMA+0x214>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d11b      	bne.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d114      	bne.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e00b      	b.n	8001830 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 0210 	orr.w	r2, r3, #16
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	431bde83 	.word	0x431bde83
 8001844:	40012300 	.word	0x40012300
 8001848:	08001cd9 	.word	0x08001cd9
 800184c:	08001d93 	.word	0x08001d93
 8001850:	08001daf 	.word	0x08001daf
 8001854:	40012000 	.word	0x40012000
 8001858:	40012100 	.word	0x40012100
 800185c:	40012200 	.word	0x40012200

08001860 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e105      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x228>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d925      	bls.n	8001914 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68d9      	ldr	r1, [r3, #12]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68d9      	ldr	r1, [r3, #12]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4403      	add	r3, r0
 8001906:	3b1e      	subs	r3, #30
 8001908:	409a      	lsls	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e022      	b.n	800195a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	2207      	movs	r2, #7
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6919      	ldr	r1, [r3, #16]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	4603      	mov	r3, r0
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4403      	add	r3, r0
 8001950:	409a      	lsls	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d824      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b05      	subs	r3, #5
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b05      	subs	r3, #5
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
 80019aa:	e04c      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d824      	bhi.n	80019fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	; 0x23
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43da      	mvns	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	400a      	ands	r2, r1
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b23      	subs	r3, #35	; 0x23
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	e023      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b41      	subs	r3, #65	; 0x41
 8001a10:	221f      	movs	r2, #31
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b41      	subs	r3, #65	; 0x41
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_ADC_ConfigChannel+0x234>)
 8001a48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_ADC_ConfigChannel+0x238>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1cc>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_ADC_ConfigChannel+0x238>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d123      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d003      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x1e6>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d11b      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d111      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_ConfigChannel+0x23c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_ADC_ConfigChannel+0x240>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9a      	lsrs	r2, r3, #18
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	4b79      	ldr	r3, [pc, #484]	; (8001cd0 <ADC_Init+0x1f0>)
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	021a      	lsls	r2, r3, #8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <ADC_Init+0x1f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6899      	ldr	r1, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e00f      	b.n	8001bde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0202 	bic.w	r2, r2, #2
 8001bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	3b01      	subs	r3, #1
 8001c38:	035a      	lsls	r2, r3, #13
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e007      	b.n	8001c54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	051a      	lsls	r2, r3, #20
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c96:	025a      	lsls	r2, r3, #9
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6899      	ldr	r1, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	029a      	lsls	r2, r3, #10
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	609a      	str	r2, [r3, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40012300 	.word	0x40012300
 8001cd4:	0f000001 	.word	0x0f000001

08001cd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d13c      	bne.n	8001d6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d12b      	bne.n	8001d64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d127      	bne.n	8001d64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d119      	bne.n	8001d64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0220 	bic.w	r2, r2, #32
 8001d3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fd7b 	bl	8001860 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d6a:	e00e      	b.n	8001d8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fd85 	bl	8001888 <HAL_ADC_ErrorCallback>
}
 8001d7e:	e004      	b.n	8001d8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff fd67 	bl	8001874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fd5a 	bl	8001888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0ed      	b.n	8001fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff f886 	bl	8000f0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff fbc6 	bl	80015a0 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e16:	e012      	b.n	8001e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff fbc2 	bl	80015a0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d90b      	bls.n	8001e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0c5      	b.n	8001fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0e5      	beq.n	8001e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0202 	bic.w	r2, r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5c:	f7ff fba0 	bl	80015a0 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e62:	e012      	b.n	8001e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e64:	f7ff fb9c 	bl	80015a0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	d90b      	bls.n	8001e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2205      	movs	r2, #5
 8001e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e09f      	b.n	8001fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e5      	bne.n	8001e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e1b      	ldrb	r3, [r3, #24]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e007      	b.n	8001ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7e5b      	ldrb	r3, [r3, #25]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d108      	bne.n	8001edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e007      	b.n	8001eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7e9b      	ldrb	r3, [r3, #26]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d108      	bne.n	8001f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e007      	b.n	8001f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0220 	bic.w	r2, r2, #32
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7edb      	ldrb	r3, [r3, #27]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0210 	bic.w	r2, r2, #16
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e007      	b.n	8001f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0210 	orr.w	r2, r2, #16
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7f1b      	ldrb	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0208 	bic.w	r2, r2, #8
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7f5b      	ldrb	r3, [r3, #29]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0204 	orr.w	r2, r2, #4
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	ea42 0103 	orr.w	r1, r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff3e 	bl	800201c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff31 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e014      	b.n	8002232 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe febf 	bl	8000f9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800223a:	b480      	push	{r7}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	795b      	ldrb	r3, [r3, #5]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_DAC_ConfigChannel+0x18>
 800224e:	2302      	movs	r3, #2
 8002250:	e03c      	b.n	80022cc <HAL_DAC_ConfigChannel+0x92>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2202      	movs	r2, #2
 800225c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	22c0      	movs	r2, #192	; 0xc0
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff f95c 	bl	80015a0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e099      	b.n	8002428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002314:	e00f      	b.n	8002336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002316:	f7ff f943 	bl	80015a0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b05      	cmp	r3, #5
 8002322:	d908      	bls.n	8002336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e078      	b.n	8002428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e8      	bne.n	8002316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_DMA_Init+0x158>)
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4313      	orrs	r3, r2
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0307 	bic.w	r3, r3, #7
 80023b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d117      	bne.n	80023fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fa6f 	bl	80028c0 <DMA_CheckFifoParam>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023f6:	2301      	movs	r3, #1
 80023f8:	e016      	b.n	8002428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa26 	bl	8002854 <DMA_CalcBaseAndBitshift>
 8002408:	4603      	mov	r3, r0
 800240a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	223f      	movs	r2, #63	; 0x3f
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	f010803f 	.word	0xf010803f

08002434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_DMA_Start_IT+0x26>
 8002456:	2302      	movs	r3, #2
 8002458:	e040      	b.n	80024dc <HAL_DMA_Start_IT+0xa8>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12f      	bne.n	80024ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f9b8 	bl	80027f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	223f      	movs	r2, #63	; 0x3f
 800248e:	409a      	lsls	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0216 	orr.w	r2, r2, #22
 80024a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0208 	orr.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e005      	b.n	80024da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024da:	7dfb      	ldrb	r3, [r7, #23]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024f0:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_DMA_IRQHandler+0x258>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a92      	ldr	r2, [pc, #584]	; (8002740 <HAL_DMA_IRQHandler+0x25c>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2208      	movs	r2, #8
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01a      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2208      	movs	r2, #8
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2201      	movs	r2, #1
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2204      	movs	r2, #4
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2204      	movs	r2, #4
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2210      	movs	r2, #16
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03c      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2210      	movs	r2, #16
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d018      	beq.n	8002626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d024      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
 8002612:	e01f      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e016      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0208 	bic.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2220      	movs	r2, #32
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 808e 	beq.w	8002782 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8086 	beq.w	8002782 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2220      	movs	r2, #32
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d136      	bne.n	80026fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0216 	bic.w	r2, r2, #22
 800269c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <HAL_DMA_IRQHandler+0x1da>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	223f      	movs	r2, #63	; 0x3f
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d07d      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
        }
        return;
 80026fa:	e078      	b.n	80027ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d108      	bne.n	800272a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	2b00      	cmp	r3, #0
 800271e:	d030      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
 8002728:	e02b      	b.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d027      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e022      	b.n	8002782 <HAL_DMA_IRQHandler+0x29e>
 800273c:	20000000 	.word	0x20000000
 8002740:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0210 	bic.w	r2, r2, #16
 8002760:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	2b00      	cmp	r3, #0
 8002788:	d032      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d022      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2205      	movs	r2, #5
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d307      	bcc.n	80027ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f2      	bne.n	80027ae <HAL_DMA_IRQHandler+0x2ca>
 80027c8:	e000      	b.n	80027cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027ee:	bf00      	nop
    }
  }
}
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d108      	bne.n	8002838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002836:	e007      	b.n	8002848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3b10      	subs	r3, #16
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <DMA_CalcBaseAndBitshift+0x68>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d909      	bls.n	8002896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	659a      	str	r2, [r3, #88]	; 0x58
 8002894:	e007      	b.n	80028a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	aaaaaaab 	.word	0xaaaaaaab
 80028bc:	0800b85c 	.word	0x0800b85c

080028c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0x5a>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d856      	bhi.n	800298e <DMA_CheckFifoParam+0xce>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x28>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	0800290b 	.word	0x0800290b
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	0800298f 	.word	0x0800298f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d046      	beq.n	8002992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e043      	b.n	8002992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002912:	d140      	bne.n	8002996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e03d      	b.n	8002996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d121      	bne.n	8002968 <DMA_CheckFifoParam+0xa8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d837      	bhi.n	800299a <DMA_CheckFifoParam+0xda>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x70>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002947 	.word	0x08002947
 8002938:	08002941 	.word	0x08002941
 800293c:	08002959 	.word	0x08002959
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e030      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d025      	beq.n	800299e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e022      	b.n	800299e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002960:	d11f      	bne.n	80029a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002966:	e01c      	b.n	80029a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d903      	bls.n	8002976 <DMA_CheckFifoParam+0xb6>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d003      	beq.n	800297c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002974:	e018      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      break;
 800297a:	e015      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e00b      	b.n	80029a6 <DMA_CheckFifoParam+0xe6>
      break;
 800298e:	bf00      	nop
 8002990:	e00a      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e008      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e006      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e004      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
    }
  } 
  
  return status; 
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e16b      	b.n	8002cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 815a 	bne.w	8002ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b4 	beq.w	8002ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a5f      	ldr	r2, [pc, #380]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_GPIO_Init+0x310>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_GPIO_Init+0x314>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02b      	beq.n	8002bde <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a51      	ldr	r2, [pc, #324]	; (8002cd0 <HAL_GPIO_Init+0x318>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d025      	beq.n	8002bda <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_GPIO_Init+0x31c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4f      	ldr	r2, [pc, #316]	; (8002cd8 <HAL_GPIO_Init+0x320>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0x216>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_GPIO_Init+0x212>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_GPIO_Init+0x32c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <HAL_GPIO_Init+0x20e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_GPIO_Init+0x330>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_GPIO_Init+0x20a>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e00e      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x228>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <HAL_GPIO_Init+0x310>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae90 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40021400 	.word	0x40021400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021c00 	.word	0x40021c00
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d0c:	e003      	b.n	8002d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f806 	bl	8002d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e12b      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe f946 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd0:	f000 fd5c 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a81      	ldr	r2, [pc, #516]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d807      	bhi.n	8002df0 <HAL_I2C_Init+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a80      	ldr	r2, [pc, #512]	; (8002fe4 <HAL_I2C_Init+0x278>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf94      	ite	ls
 8002de8:	2301      	movls	r3, #1
 8002dea:	2300      	movhi	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e006      	b.n	8002dfe <HAL_I2C_Init+0x92>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a7d      	ldr	r2, [pc, #500]	; (8002fe8 <HAL_I2C_Init+0x27c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0e7      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a78      	ldr	r2, [pc, #480]	; (8002fec <HAL_I2C_Init+0x280>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d802      	bhi.n	8002e40 <HAL_I2C_Init+0xd4>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e009      	b.n	8002e54 <HAL_I2C_Init+0xe8>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a69      	ldr	r2, [pc, #420]	; (8002ff0 <HAL_I2C_Init+0x284>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	3301      	adds	r3, #1
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	495c      	ldr	r1, [pc, #368]	; (8002fe0 <HAL_I2C_Init+0x274>)
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d819      	bhi.n	8002ea8 <HAL_I2C_Init+0x13c>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e59      	subs	r1, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e82:	1c59      	adds	r1, r3, #1
 8002e84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e88:	400b      	ands	r3, r1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_I2C_Init+0x138>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e59      	subs	r1, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	e051      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e04f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <HAL_I2C_Init+0x168>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e012      	b.n	8002efa <HAL_I2C_Init+0x18e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	0099      	lsls	r1, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Init+0x196>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e022      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <HAL_I2C_Init+0x1bc>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e58      	subs	r0, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	440b      	add	r3, r1
 8002f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f26:	e00f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e58      	subs	r0, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	0099      	lsls	r1, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	6809      	ldr	r1, [r1, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6911      	ldr	r1, [r2, #16]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68d2      	ldr	r2, [r2, #12]
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	000186a0 	.word	0x000186a0
 8002fe4:	001e847f 	.word	0x001e847f
 8002fe8:	003d08ff 	.word	0x003d08ff
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e264      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b9d      	ldr	r3, [pc, #628]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e23f      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b91      	ldr	r3, [pc, #580]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a8a      	ldr	r2, [pc, #552]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a87      	ldr	r2, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a80      	ldr	r2, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fa78 	bl	80015a0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fa74 	bl	80015a0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e204      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fa64 	bl	80015a0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe fa60 	bl	80015a0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f0      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c4      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4952      	ldr	r1, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fa19 	bl	80015a0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fa15 	bl	80015a0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a5      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4940      	ldr	r1, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x2b0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f9f8 	bl	80015a0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe f9f4 	bl	80015a0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e184      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d030      	beq.n	8003240 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe f9d8 	bl	80015a0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe f9d4 	bl	80015a0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e164      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e015      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x2b4>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe f9c1 	bl	80015a0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe f9bd 	bl	80015a0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e14d      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a0 	beq.w	800338e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d121      	bne.n	80032ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_RCC_OscConfig+0x2b8>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fe f983 	bl	80015a0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e011      	b.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
 80032ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe f976 	bl	80015a0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e106      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCC_OscConfig+0x4e4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2f0>
 80032d6:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	e01c      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d10c      	bne.n	8003306 <HAL_RCC_OscConfig+0x312>
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e00b      	b.n	800331e <HAL_RCC_OscConfig+0x32a>
 8003306:	4b75      	ldr	r3, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a74      	ldr	r2, [pc, #464]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	4b72      	ldr	r3, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a71      	ldr	r2, [pc, #452]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe f93b 	bl	80015a0 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe f937 	bl	80015a0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0c5      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ee      	beq.n	800332e <HAL_RCC_OscConfig+0x33a>
 8003350:	e014      	b.n	800337c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe f925 	bl	80015a0 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f921 	bl	80015a0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0af      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ee      	bne.n	800335a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a55      	ldr	r2, [pc, #340]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 809b 	beq.w	80034ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d05c      	beq.n	800345e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d141      	bne.n	8003430 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe f8f5 	bl	80015a0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe f8f1 	bl	80015a0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e081      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	019b      	lsls	r3, r3, #6
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe f8ca 	bl	80015a0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f8c6 	bl	80015a0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e056      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x41c>
 800342e:	e04e      	b.n	80034ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe f8b3 	bl	80015a0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe f8af 	bl	80015a0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e03f      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x44a>
 800345c:	e037      	b.n	80034ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e032      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_RCC_OscConfig+0x4e8>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d028      	beq.n	80034ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d121      	bne.n	80034ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d11a      	bne.n	80034ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800349a:	4013      	ands	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40007000 	.word	0x40007000
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470060 	.word	0x42470060

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fd ffe4 	bl	80015a0 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fd ffe0 	bl	80015a0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd ff44 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	0800b844 	.word	0x0800b844
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	2300      	movs	r3, #0
 80036c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80bd 	bhi.w	8003854 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e0b7      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036e6:	60bb      	str	r3, [r7, #8]
       break;
 80036e8:	e0b7      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036ec:	60bb      	str	r3, [r7, #8]
      break;
 80036ee:	e0b4      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04d      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	461a      	mov	r2, r3
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	ea02 0800 	and.w	r8, r2, r0
 800371e:	ea03 0901 	and.w	r9, r3, r1
 8003722:	4640      	mov	r0, r8
 8003724:	4649      	mov	r1, r9
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	014b      	lsls	r3, r1, #5
 8003730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003734:	0142      	lsls	r2, r0, #5
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	ebb0 0008 	subs.w	r0, r0, r8
 800373e:	eb61 0109 	sbc.w	r1, r1, r9
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	018b      	lsls	r3, r1, #6
 800374c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003750:	0182      	lsls	r2, r0, #6
 8003752:	1a12      	subs	r2, r2, r0
 8003754:	eb63 0301 	sbc.w	r3, r3, r1
 8003758:	f04f 0000 	mov.w	r0, #0
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	00d9      	lsls	r1, r3, #3
 8003762:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003766:	00d0      	lsls	r0, r2, #3
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	eb12 0208 	adds.w	r2, r2, r8
 8003770:	eb43 0309 	adc.w	r3, r3, r9
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	0259      	lsls	r1, r3, #9
 800377e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003782:	0250      	lsls	r0, r2, #9
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	461a      	mov	r2, r3
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	f7fc fd20 	bl	80001d8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e04a      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	461a      	mov	r2, r3
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	ea02 0400 	and.w	r4, r2, r0
 80037ba:	ea03 0501 	and.w	r5, r3, r1
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	014b      	lsls	r3, r1, #5
 80037cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037d0:	0142      	lsls	r2, r0, #5
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	1b00      	subs	r0, r0, r4
 80037d8:	eb61 0105 	sbc.w	r1, r1, r5
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	018b      	lsls	r3, r1, #6
 80037e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037ea:	0182      	lsls	r2, r0, #6
 80037ec:	1a12      	subs	r2, r2, r0
 80037ee:	eb63 0301 	sbc.w	r3, r3, r1
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	00d9      	lsls	r1, r3, #3
 80037fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003800:	00d0      	lsls	r0, r2, #3
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	1912      	adds	r2, r2, r4
 8003808:	eb45 0303 	adc.w	r3, r5, r3
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	0299      	lsls	r1, r3, #10
 8003816:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800381a:	0290      	lsls	r0, r2, #10
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	461a      	mov	r2, r3
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	f7fc fcd4 	bl	80001d8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003856:	60bb      	str	r3, [r7, #8]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	68bb      	ldr	r3, [r7, #8]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	0800b854 	.word	0x0800b854

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	f7ff ffdc 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0b5b      	lsrs	r3, r3, #13
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800b854 	.word	0x0800b854

080038dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07b      	b.n	80039e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fe:	d009      	beq.n	8003914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
 8003906:	e005      	b.n	8003914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fbc0 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	ea42 0103 	orr.w	r1, r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0104 	and.w	r1, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f003 0210 	and.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08c      	sub	sp, #48	; 0x30
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x26>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e18a      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x33c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fdc0 	bl	80015a0 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d00f      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x70>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a44:	d107      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x68>
 8003a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5c:	e15b      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x82>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x82>
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a76:	e14e      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d003      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2205      	movs	r2, #5
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae8:	d178      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x10a>
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d166      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1c:	e053      	b.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d11b      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d113      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d119      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x1b8>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d014      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	b292      	uxth	r2, r2
 8003b88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c9a      	adds	r2, r3, #2
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ba6:	f7fd fcfb 	bl	80015a0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d807      	bhi.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bc4:	e0a7      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1a6      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x130>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1a1      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x130>
 8003bda:	e07c      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x1fc>
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d16b      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c10:	e057      	b.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11c      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d114      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d119      	bne.n	8003c9c <HAL_SPI_TransmitReceive+0x2ae>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c9c:	f7fd fc80 	bl	80015a0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d803      	bhi.n	8003cb4 <HAL_SPI_TransmitReceive+0x2c6>
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x2cc>
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cc0:	e029      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1a2      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x224>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d19d      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8b2 	bl	8003e44 <SPI_EndRxTxTransaction>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cf2:	e010      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e000      	b.n	8003d16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3730      	adds	r7, #48	; 0x30
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d44:	f7fd fc2c 	bl	80015a0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d54:	f7fd fc24 	bl	80015a0 <HAL_GetTick>
 8003d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	0d1b      	lsrs	r3, r3, #20
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6a:	e054      	b.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d050      	beq.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d74:	f7fd fc14 	bl	80015a0 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d902      	bls.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d13d      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d111      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d004      	beq.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d107      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd0:	d10f      	bne.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e017      	b.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d19b      	bne.n	8003d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000

08003e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <SPI_EndRxTxTransaction+0x7c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <SPI_EndRxTxTransaction+0x80>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0d5b      	lsrs	r3, r3, #21
 8003e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d112      	bne.n	8003e96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff5a 	bl	8003d34 <SPI_WaitFlagStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d0f2      	beq.n	8003e96 <SPI_EndRxTxTransaction+0x52>
 8003eb0:	e000      	b.n	8003eb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eb2:	bf00      	nop
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	165e9f81 	.word	0x165e9f81

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd f97c 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 f966 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e04e      	b.n	800401e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d022      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003faa:	d01d      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d018      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d111      	bne.n	800400c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d010      	beq.n	800401c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	e007      	b.n	800401c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40001800 	.word	0x40001800

08004048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e0b4      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x186>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409c:	d03e      	beq.n	800411c <HAL_TIM_ConfigClockSource+0xd4>
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	f200 8087 	bhi.w	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	f000 8086 	beq.w	80041ba <HAL_TIM_ConfigClockSource+0x172>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d87f      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d01a      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xa6>
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d87b      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d050      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x11a>
 80040c0:	2b60      	cmp	r3, #96	; 0x60
 80040c2:	d877      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d03c      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xfa>
 80040c8:	2b50      	cmp	r3, #80	; 0x50
 80040ca:	d873      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d058      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x13a>
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d86f      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d064      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040d8:	2b30      	cmp	r3, #48	; 0x30
 80040da:	d86b      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d060      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d867      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05c      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d05a      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040ec:	e062      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f000 f985 	bl	800440c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
      break;
 800411a:	e04f      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f000 f96e 	bl	800440c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413e:	609a      	str	r2, [r3, #8]
      break;
 8004140:	e03c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	461a      	mov	r2, r3
 8004150:	f000 f8e2 	bl	8004318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2150      	movs	r1, #80	; 0x50
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f93b 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8004160:	e02c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	f000 f901 	bl	8004376 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2160      	movs	r1, #96	; 0x60
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f92b 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8004180:	e01c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 f8c2 	bl	8004318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2140      	movs	r1, #64	; 0x40
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f91b 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e00c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f000 f912 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 80041b2:	e003      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e000      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a40      	ldr	r2, [pc, #256]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <TIM_Base_SetConfig+0x114>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d02b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d027      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d023      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d017      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <TIM_Base_SetConfig+0x128>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <TIM_Base_SetConfig+0x12c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a26      	ldr	r2, [pc, #152]	; (8004308 <TIM_Base_SetConfig+0x130>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <TIM_Base_SetConfig+0x134>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <TIM_Base_SetConfig+0x138>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <TIM_Base_SetConfig+0x13c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0xf8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40010400 	.word	0x40010400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	40001800 	.word	0x40001800
 8004310:	40001c00 	.word	0x40001c00
 8004314:	40002000 	.word	0x40002000

08004318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 030a 	bic.w	r3, r3, #10
 8004354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f043 0307 	orr.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	021a      	lsls	r2, r3, #8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	431a      	orrs	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e05a      	b.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d01d      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d018      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00e      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10c      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e03f      	b.n	80045d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fe64 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	; 0x24
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f829 	bl	80045e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800459c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	b09f      	sub	sp, #124	; 0x7c
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	68d9      	ldr	r1, [r3, #12]
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	ea40 0301 	orr.w	r3, r0, r1
 8004600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	431a      	orrs	r2, r3
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	4313      	orrs	r3, r2
 8004618:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004624:	f021 010c 	bic.w	r1, r1, #12
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	6999      	ldr	r1, [r3, #24]
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4bc5      	ldr	r3, [pc, #788]	; (8004964 <UART_SetConfig+0x384>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d004      	beq.n	800465e <UART_SetConfig+0x7e>
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4bc3      	ldr	r3, [pc, #780]	; (8004968 <UART_SetConfig+0x388>)
 800465a:	429a      	cmp	r2, r3
 800465c:	d103      	bne.n	8004666 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800465e:	f7ff f929 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8004662:	6778      	str	r0, [r7, #116]	; 0x74
 8004664:	e002      	b.n	800466c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004666:	f7ff f911 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 800466a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	f040 80b6 	bne.w	80047e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467a:	461c      	mov	r4, r3
 800467c:	f04f 0500 	mov.w	r5, #0
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	1891      	adds	r1, r2, r2
 8004686:	6439      	str	r1, [r7, #64]	; 0x40
 8004688:	415b      	adcs	r3, r3
 800468a:	647b      	str	r3, [r7, #68]	; 0x44
 800468c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004690:	1912      	adds	r2, r2, r4
 8004692:	eb45 0303 	adc.w	r3, r5, r3
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	00d9      	lsls	r1, r3, #3
 80046a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046a4:	00d0      	lsls	r0, r2, #3
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	1911      	adds	r1, r2, r4
 80046ac:	6639      	str	r1, [r7, #96]	; 0x60
 80046ae:	416b      	adcs	r3, r5
 80046b0:	667b      	str	r3, [r7, #100]	; 0x64
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c0:	415b      	adcs	r3, r3
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046cc:	f7fb fd84 	bl	80001d8 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4ba5      	ldr	r3, [pc, #660]	; (800496c <UART_SetConfig+0x38c>)
 80046d6:	fba3 2302 	umull	r2, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	011e      	lsls	r6, r3, #4
 80046de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e0:	461c      	mov	r4, r3
 80046e2:	f04f 0500 	mov.w	r5, #0
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	1891      	adds	r1, r2, r2
 80046ec:	6339      	str	r1, [r7, #48]	; 0x30
 80046ee:	415b      	adcs	r3, r3
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
 80046f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046f6:	1912      	adds	r2, r2, r4
 80046f8:	eb45 0303 	adc.w	r3, r5, r3
 80046fc:	f04f 0000 	mov.w	r0, #0
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	00d9      	lsls	r1, r3, #3
 8004706:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470a:	00d0      	lsls	r0, r2, #3
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	1911      	adds	r1, r2, r4
 8004712:	65b9      	str	r1, [r7, #88]	; 0x58
 8004714:	416b      	adcs	r3, r5
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	461a      	mov	r2, r3
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	1891      	adds	r1, r2, r2
 8004724:	62b9      	str	r1, [r7, #40]	; 0x28
 8004726:	415b      	adcs	r3, r3
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800472e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004732:	f7fb fd51 	bl	80001d8 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b8c      	ldr	r3, [pc, #560]	; (800496c <UART_SetConfig+0x38c>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	3332      	adds	r3, #50	; 0x32
 800474e:	4a87      	ldr	r2, [pc, #540]	; (800496c <UART_SetConfig+0x38c>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800475c:	441e      	add	r6, r3
 800475e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004760:	4618      	mov	r0, r3
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	1894      	adds	r4, r2, r2
 800476c:	623c      	str	r4, [r7, #32]
 800476e:	415b      	adcs	r3, r3
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004776:	1812      	adds	r2, r2, r0
 8004778:	eb41 0303 	adc.w	r3, r1, r3
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	f04f 0500 	mov.w	r5, #0
 8004784:	00dd      	lsls	r5, r3, #3
 8004786:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800478a:	00d4      	lsls	r4, r2, #3
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	1814      	adds	r4, r2, r0
 8004792:	653c      	str	r4, [r7, #80]	; 0x50
 8004794:	414b      	adcs	r3, r1
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
 8004798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	61b9      	str	r1, [r7, #24]
 80047a6:	415b      	adcs	r3, r3
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047b2:	f7fb fd11 	bl	80001d8 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4b6c      	ldr	r3, [pc, #432]	; (800496c <UART_SetConfig+0x38c>)
 80047bc:	fba3 1302 	umull	r1, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2164      	movs	r1, #100	; 0x64
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	3332      	adds	r3, #50	; 0x32
 80047ce:	4a67      	ldr	r2, [pc, #412]	; (800496c <UART_SetConfig+0x38c>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 0207 	and.w	r2, r3, #7
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4432      	add	r2, r6
 80047e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047e2:	e0b9      	b.n	8004958 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	461c      	mov	r4, r3
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	4622      	mov	r2, r4
 80047ee:	462b      	mov	r3, r5
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	6139      	str	r1, [r7, #16]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047fc:	1912      	adds	r2, r2, r4
 80047fe:	eb45 0303 	adc.w	r3, r5, r3
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	00d9      	lsls	r1, r3, #3
 800480c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004810:	00d0      	lsls	r0, r2, #3
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	eb12 0804 	adds.w	r8, r2, r4
 800481a:	eb43 0905 	adc.w	r9, r3, r5
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	008b      	lsls	r3, r1, #2
 8004832:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004836:	0082      	lsls	r2, r0, #2
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fb fccc 	bl	80001d8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <UART_SetConfig+0x38c>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011e      	lsls	r6, r3, #4
 800484e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004850:	4618      	mov	r0, r3
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	1894      	adds	r4, r2, r2
 800485c:	60bc      	str	r4, [r7, #8]
 800485e:	415b      	adcs	r3, r3
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004866:	1812      	adds	r2, r2, r0
 8004868:	eb41 0303 	adc.w	r3, r1, r3
 800486c:	f04f 0400 	mov.w	r4, #0
 8004870:	f04f 0500 	mov.w	r5, #0
 8004874:	00dd      	lsls	r5, r3, #3
 8004876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800487a:	00d4      	lsls	r4, r2, #3
 800487c:	4622      	mov	r2, r4
 800487e:	462b      	mov	r3, r5
 8004880:	1814      	adds	r4, r2, r0
 8004882:	64bc      	str	r4, [r7, #72]	; 0x48
 8004884:	414b      	adcs	r3, r1
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048a0:	0082      	lsls	r2, r0, #2
 80048a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048a6:	f7fb fc97 	bl	80001d8 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4b2f      	ldr	r3, [pc, #188]	; (800496c <UART_SetConfig+0x38c>)
 80048b0:	fba3 1302 	umull	r1, r3, r3, r2
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	2164      	movs	r1, #100	; 0x64
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	3332      	adds	r3, #50	; 0x32
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <UART_SetConfig+0x38c>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ce:	441e      	add	r6, r3
 80048d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d2:	4618      	mov	r0, r3
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	1894      	adds	r4, r2, r2
 80048de:	603c      	str	r4, [r7, #0]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e8:	1812      	adds	r2, r2, r0
 80048ea:	eb41 0303 	adc.w	r3, r1, r3
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	f04f 0500 	mov.w	r5, #0
 80048f6:	00dd      	lsls	r5, r3, #3
 80048f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048fc:	00d4      	lsls	r4, r2, #3
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	eb12 0a00 	adds.w	sl, r2, r0
 8004906:	eb43 0b01 	adc.w	fp, r3, r1
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	008b      	lsls	r3, r1, #2
 800491e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004922:	0082      	lsls	r2, r0, #2
 8004924:	4650      	mov	r0, sl
 8004926:	4659      	mov	r1, fp
 8004928:	f7fb fc56 	bl	80001d8 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <UART_SetConfig+0x38c>)
 8004932:	fba3 1302 	umull	r1, r3, r3, r2
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2164      	movs	r1, #100	; 0x64
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	3332      	adds	r3, #50	; 0x32
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <UART_SetConfig+0x38c>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4432      	add	r2, r6
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	377c      	adds	r7, #124	; 0x7c
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	bf00      	nop
 8004964:	40011000 	.word	0x40011000
 8004968:	40011400 	.word	0x40011400
 800496c:	51eb851f 	.word	0x51eb851f

08004970 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{ 
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	80fb      	strh	r3, [r7, #6]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <APPL_StartMailboxHandler>:
           the transition by calling ECAT_StateChange.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <APPL_StartInputHandler>:
            the state transition immediately, in that case the application need to be complete 
            the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) EL9800 1*/
    sDOOutputs.bLED1 = 0;
 80049e0:	4a32      	ldr	r2, [pc, #200]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 80049e2:	7893      	ldrb	r3, [r2, #2]
 80049e4:	f36f 0300 	bfc	r3, #0, #1
 80049e8:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED2 = 0;
 80049ea:	4a30      	ldr	r2, [pc, #192]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 80049ec:	7893      	ldrb	r3, [r2, #2]
 80049ee:	f36f 0341 	bfc	r3, #1, #1
 80049f2:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED3 = 0;
 80049f4:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 80049f6:	7893      	ldrb	r3, [r2, #2]
 80049f8:	f36f 0382 	bfc	r3, #2, #1
 80049fc:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED4 = 0;
 80049fe:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a00:	7893      	ldrb	r3, [r2, #2]
 8004a02:	f36f 03c3 	bfc	r3, #3, #1
 8004a06:	7093      	strb	r3, [r2, #2]
#if _STM32_IO8
    sDOOutputs.bLED5 = 0;
 8004a08:	4a28      	ldr	r2, [pc, #160]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a0a:	7893      	ldrb	r3, [r2, #2]
 8004a0c:	f36f 1304 	bfc	r3, #4, #1
 8004a10:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED7 = 0;
 8004a12:	4a26      	ldr	r2, [pc, #152]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a14:	7893      	ldrb	r3, [r2, #2]
 8004a16:	f36f 1386 	bfc	r3, #6, #1
 8004a1a:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED6 = 0;
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a1e:	7893      	ldrb	r3, [r2, #2]
 8004a20:	f36f 1345 	bfc	r3, #5, #1
 8004a24:	7093      	strb	r3, [r2, #2]
    sDOOutputs.bLED8 = 0;
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a28:	7893      	ldrb	r3, [r2, #2]
 8004a2a:	f36f 13c7 	bfc	r3, #7, #1
 8004a2e:	7093      	strb	r3, [r2, #2]
#endif
    
    LED_1                        = sDOOutputs.bLED1;
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a32:	789b      	ldrb	r3, [r3, #2]
 8004a34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <APPL_StopOutputHandler+0xd4>)
 8004a3c:	601a      	str	r2, [r3, #0]
    LED_2                        = sDOOutputs.bLED2;
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a40:	789b      	ldrb	r3, [r3, #2]
 8004a42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <APPL_StopOutputHandler+0xd8>)
 8004a4a:	601a      	str	r2, [r3, #0]
    LED_3                        = sDOOutputs.bLED3;
 8004a4c:	4b17      	ldr	r3, [pc, #92]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a4e:	789b      	ldrb	r3, [r3, #2]
 8004a50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <APPL_StopOutputHandler+0xdc>)
 8004a58:	601a      	str	r2, [r3, #0]
    LED_4                        = sDOOutputs.bLED4;
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <APPL_StopOutputHandler+0xe0>)
 8004a66:	601a      	str	r2, [r3, #0]
#if _STM32_IO8
    LED_5                        = sDOOutputs.bLED5;
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a6a:	789b      	ldrb	r3, [r3, #2]
 8004a6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <APPL_StopOutputHandler+0xe4>)
 8004a74:	601a      	str	r2, [r3, #0]
    LED_7                        = sDOOutputs.bLED7;
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a78:	789b      	ldrb	r3, [r3, #2]
 8004a7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <APPL_StopOutputHandler+0xe8>)
 8004a82:	601a      	str	r2, [r3, #0]
    LED_6                        = sDOOutputs.bLED6;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a86:	789b      	ldrb	r3, [r3, #2]
 8004a88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <APPL_StopOutputHandler+0xec>)
 8004a90:	601a      	str	r2, [r3, #0]
    LED_8                        = sDOOutputs.bLED8;
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <APPL_StopOutputHandler+0xd0>)
 8004a94:	789b      	ldrb	r3, [r3, #2]
 8004a96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <APPL_StopOutputHandler+0xf0>)
 8004a9e:	601a      	str	r2, [r3, #0]
#endif
/*ECATCHANGE_END(V5.11) EL9800 1*/
    return ALSTATUSCODE_NOERROR;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	2000009c 	.word	0x2000009c
 8004ab0:	424082b8 	.word	0x424082b8
 8004ab4:	424082b4 	.word	0x424082b4
 8004ab8:	424082b0 	.word	0x424082b0
 8004abc:	424082ac 	.word	0x424082ac
 8004ac0:	42408284 	.word	0x42408284
 8004ac4:	42410294 	.word	0x42410294
 8004ac8:	42408280 	.word	0x42408280
 8004acc:	42410290 	.word	0x42410290

08004ad0 <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16* pInputSize,UINT16* pOutputSize)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b089      	sub	sp, #36	; 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
#if COE_SUPPORTED
    UINT16 result = ALSTATUSCODE_NOERROR;
 8004ada:	2300      	movs	r3, #0
 8004adc:	83fb      	strh	r3, [r7, #30]
    UINT16 PDOAssignEntryCnt = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	83bb      	strh	r3, [r7, #28]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	837b      	strh	r3, [r7, #26]
    UINT16 InputSize = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	833b      	strh	r3, [r7, #24]
    UINT16 OutputSize = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	82fb      	strh	r3, [r7, #22]

    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	83bb      	strh	r3, [r7, #28]
 8004afe:	e039      	b.n	8004b74 <APPL_GenerateMapping+0xa4>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 8004b00:	8bbb      	ldrh	r3, [r7, #28]
 8004b02:	4a4b      	ldr	r2, [pc, #300]	; (8004c30 <APPL_GenerateMapping+0x160>)
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	885b      	ldrh	r3, [r3, #2]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 fe1e 	bl	800874c <OBJ_GetObjectHandle>
 8004b10:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d025      	beq.n	8004b64 <APPL_GenerateMapping+0x94>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	837b      	strh	r3, [r7, #26]
 8004b24:	e019      	b.n	8004b5a <APPL_GenerateMapping+0x8a>
            {
			//				result = *(UINT8 *)pPDO->pVarPtr;
			//				result=(OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3);
                pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	699c      	ldr	r4, [r3, #24]
 8004b2a:	8b7b      	ldrh	r3, [r7, #26]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 f889 	bl	8008c4c <OBJ_GetEntryOffset>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4423      	add	r3, r4
 8004b42:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	8afb      	ldrh	r3, [r7, #22]
 8004b50:	4413      	add	r3, r2
 8004b52:	82fb      	strh	r3, [r7, #22]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8004b54:	8b7b      	ldrh	r3, [r7, #26]
 8004b56:	3301      	adds	r3, #1
 8004b58:	837b      	strh	r3, [r7, #26]
 8004b5a:	8b7a      	ldrh	r2, [r7, #26]
 8004b5c:	89fb      	ldrh	r3, [r7, #14]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3e1      	bcc.n	8004b26 <APPL_GenerateMapping+0x56>
 8004b62:	e004      	b.n	8004b6e <APPL_GenerateMapping+0x9e>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	82fb      	strh	r3, [r7, #22]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 8004b68:	2325      	movs	r3, #37	; 0x25
 8004b6a:	83fb      	strh	r3, [r7, #30]
            break;
 8004b6c:	e007      	b.n	8004b7e <APPL_GenerateMapping+0xae>
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8004b6e:	8bbb      	ldrh	r3, [r7, #28]
 8004b70:	3301      	adds	r3, #1
 8004b72:	83bb      	strh	r3, [r7, #28]
 8004b74:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <APPL_GenerateMapping+0x160>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	8bba      	ldrh	r2, [r7, #28]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d3c0      	bcc.n	8004b00 <APPL_GenerateMapping+0x30>
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8004b7e:	8afb      	ldrh	r3, [r7, #22]
 8004b80:	3307      	adds	r3, #7
 8004b82:	10db      	asrs	r3, r3, #3
 8004b84:	82fb      	strh	r3, [r7, #22]

    if(result == 0)
 8004b86:	8bfb      	ldrh	r3, [r7, #30]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d141      	bne.n	8004c10 <APPL_GenerateMapping+0x140>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	83bb      	strh	r3, [r7, #28]
 8004b90:	e039      	b.n	8004c06 <APPL_GenerateMapping+0x136>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8004b92:	8bbb      	ldrh	r3, [r7, #28]
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <APPL_GenerateMapping+0x164>)
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4413      	add	r3, r2
 8004b9a:	885b      	ldrh	r3, [r3, #2]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f003 fdd5 	bl	800874c <OBJ_GetObjectHandle>
 8004ba2:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d025      	beq.n	8004bf6 <APPL_GenerateMapping+0x126>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	837b      	strh	r3, [r7, #26]
 8004bb6:	e019      	b.n	8004bec <APPL_GenerateMapping+0x11c>
                {
                    pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	699c      	ldr	r4, [r3, #24]
 8004bbc:	8b7b      	ldrh	r3, [r7, #26]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	6939      	ldr	r1, [r7, #16]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 f840 	bl	8008c4c <OBJ_GetEntryOffset>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	08db      	lsrs	r3, r3, #3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4423      	add	r3, r4
 8004bd4:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	8b3b      	ldrh	r3, [r7, #24]
 8004be2:	4413      	add	r3, r2
 8004be4:	833b      	strh	r3, [r7, #24]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8004be6:	8b7b      	ldrh	r3, [r7, #26]
 8004be8:	3301      	adds	r3, #1
 8004bea:	837b      	strh	r3, [r7, #26]
 8004bec:	8b7a      	ldrh	r2, [r7, #26]
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3e1      	bcc.n	8004bb8 <APPL_GenerateMapping+0xe8>
 8004bf4:	e004      	b.n	8004c00 <APPL_GenerateMapping+0x130>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	833b      	strh	r3, [r7, #24]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8004bfa:	2324      	movs	r3, #36	; 0x24
 8004bfc:	83fb      	strh	r3, [r7, #30]
                break;
 8004bfe:	e007      	b.n	8004c10 <APPL_GenerateMapping+0x140>
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8004c00:	8bbb      	ldrh	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	83bb      	strh	r3, [r7, #28]
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <APPL_GenerateMapping+0x164>)
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	8bba      	ldrh	r2, [r7, #28]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d3c0      	bcc.n	8004b92 <APPL_GenerateMapping+0xc2>
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 8004c10:	8b3b      	ldrh	r3, [r7, #24]
 8004c12:	3307      	adds	r3, #7
 8004c14:	10db      	asrs	r3, r3, #3
 8004c16:	833b      	strh	r3, [r7, #24]

    *pInputSize = InputSize;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8b3a      	ldrh	r2, [r7, #24]
 8004c1c:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	8afa      	ldrh	r2, [r7, #22]
 8004c22:	801a      	strh	r2, [r3, #0]
    return result;
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
    *pInputSize = 6;
    *pOutputSize = 2;
    return ALSTATUSCODE_NOERROR;
#endif

}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3724      	adds	r7, #36	; 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000084 	.word	0x20000084
 8004c34:	20000088 	.word	0x20000088

08004c38 <APPL_InputMapping>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
#pragma interrupt_level 1
#endif
void APPL_InputMapping(UINT16* pData)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    UINT16 j = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	81fb      	strh	r3, [r7, #14]
    UINT16 *pTmpData = (UINT16 *)pData;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60bb      	str	r3, [r7, #8]

    /* we go through all entries of the TxPDO Assign object to get the assigned TxPDOs */
   for (j = 0; j < sTxPDOassign.u16SubIndex0; j++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	81fb      	strh	r3, [r7, #14]
 8004c4c:	e023      	b.n	8004c96 <APPL_InputMapping+0x5e>
   {
      switch (sTxPDOassign.aEntries[j])
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	4a17      	ldr	r2, [pc, #92]	; (8004cb0 <APPL_InputMapping+0x78>)
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	885b      	ldrh	r3, [r3, #2]
 8004c58:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8004c5c:	d004      	beq.n	8004c68 <APPL_InputMapping+0x30>
 8004c5e:	f641 2202 	movw	r2, #6658	; 0x1a02
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <APPL_InputMapping+0x3e>
 8004c66:	e013      	b.n	8004c90 <APPL_InputMapping+0x58>
      {
      /* TxPDO 1 */
      case 0x1A00:
         *pTmpData++ = SWAPWORD(((UINT16 *) &sDIInputs)[1]);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	60ba      	str	r2, [r7, #8]
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <APPL_InputMapping+0x7c>)
 8004c70:	8852      	ldrh	r2, [r2, #2]
 8004c72:	801a      	strh	r2, [r3, #0]
         break;
 8004c74:	e00c      	b.n	8004c90 <APPL_InputMapping+0x58>
      /* TxPDO 3 */
      case 0x1A02:
         *pTmpData++ = SWAPWORD(((UINT16 *) &sAIInputs)[1]);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	60ba      	str	r2, [r7, #8]
 8004c7c:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <APPL_InputMapping+0x80>)
 8004c7e:	8852      	ldrh	r2, [r2, #2]
 8004c80:	801a      	strh	r2, [r3, #0]
         *pTmpData++ = SWAPWORD(((UINT16 *) &sAIInputs)[2]);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	1c9a      	adds	r2, r3, #2
 8004c86:	60ba      	str	r2, [r7, #8]
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <APPL_InputMapping+0x80>)
 8004c8a:	8892      	ldrh	r2, [r2, #4]
 8004c8c:	801a      	strh	r2, [r3, #0]
         break;
 8004c8e:	bf00      	nop
   for (j = 0; j < sTxPDOassign.u16SubIndex0; j++)
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	3301      	adds	r3, #1
 8004c94:	81fb      	strh	r3, [r7, #14]
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <APPL_InputMapping+0x78>)
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	89fa      	ldrh	r2, [r7, #14]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3d6      	bcc.n	8004c4e <APPL_InputMapping+0x16>
      }
   }
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000088 	.word	0x20000088
 8004cb4:	20000090 	.word	0x20000090
 8004cb8:	20000094 	.word	0x20000094

08004cbc <APPL_OutputMapping>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
#pragma interrupt_level 1
#endif
void APPL_OutputMapping(UINT16* pData)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    UINT16 j = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	81fb      	strh	r3, [r7, #14]
    UINT16 *pTmpData = (UINT16 *)pData;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60bb      	str	r3, [r7, #8]

    /* we go through all entries of the RxPDO Assign object to get the assigned RxPDOs */
    for (j = 0; j < sRxPDOassign.u16SubIndex0; j++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	81fb      	strh	r3, [r7, #14]
 8004cd0:	e013      	b.n	8004cfa <APPL_OutputMapping+0x3e>
    {
        switch (sRxPDOassign.aEntries[j])
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <APPL_OutputMapping+0x58>)
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	885b      	ldrh	r3, [r3, #2]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f241 6301 	movw	r3, #5633	; 0x1601
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d106      	bne.n	8004cf4 <APPL_OutputMapping+0x38>
        {
        /* RxPDO 2 */
        case 0x1601:
            ((UINT16 *) &sDOOutputs)[1] = SWAPWORD(*pTmpData++);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	60ba      	str	r2, [r7, #8]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <APPL_OutputMapping+0x5c>)
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	8013      	strh	r3, [r2, #0]
            break;
 8004cf2:	bf00      	nop
    for (j = 0; j < sRxPDOassign.u16SubIndex0; j++)
 8004cf4:	89fb      	ldrh	r3, [r7, #14]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	81fb      	strh	r3, [r7, #14]
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <APPL_OutputMapping+0x58>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	89fa      	ldrh	r2, [r7, #14]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3e6      	bcc.n	8004cd2 <APPL_OutputMapping+0x16>
        }
    }
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000084 	.word	0x20000084
 8004d18:	2000009e 	.word	0x2000009e

08004d1c <APPL_Application>:
/**
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_Application(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0

#if _STM32_IO4
    UINT16 analogValue;
#endif

    LED_1                        = sDOOutputs.bLED1;
 8004d20:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <APPL_Application+0x168>)
 8004d22:	789b      	ldrb	r3, [r3, #2]
 8004d24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <APPL_Application+0x16c>)
 8004d2c:	601a      	str	r2, [r3, #0]
    LED_2                        = sDOOutputs.bLED2;
 8004d2e:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <APPL_Application+0x168>)
 8004d30:	789b      	ldrb	r3, [r3, #2]
 8004d32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <APPL_Application+0x170>)
 8004d3a:	601a      	str	r2, [r3, #0]
    LED_3                        = sDOOutputs.bLED3;
 8004d3c:	4b51      	ldr	r3, [pc, #324]	; (8004e84 <APPL_Application+0x168>)
 8004d3e:	789b      	ldrb	r3, [r3, #2]
 8004d40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4b52      	ldr	r3, [pc, #328]	; (8004e90 <APPL_Application+0x174>)
 8004d48:	601a      	str	r2, [r3, #0]
    LED_4                        = sDOOutputs.bLED4;
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <APPL_Application+0x168>)
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <APPL_Application+0x178>)
 8004d56:	601a      	str	r2, [r3, #0]
#if _STM32_IO8
    LED_5                        = sDOOutputs.bLED5;
 8004d58:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <APPL_Application+0x168>)
 8004d5a:	789b      	ldrb	r3, [r3, #2]
 8004d5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b4d      	ldr	r3, [pc, #308]	; (8004e98 <APPL_Application+0x17c>)
 8004d64:	601a      	str	r2, [r3, #0]
    LED_7                        = sDOOutputs.bLED7;
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <APPL_Application+0x168>)
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <APPL_Application+0x180>)
 8004d72:	601a      	str	r2, [r3, #0]
    LED_6                        = sDOOutputs.bLED6;
 8004d74:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <APPL_Application+0x168>)
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <APPL_Application+0x184>)
 8004d80:	601a      	str	r2, [r3, #0]
    LED_8                        = sDOOutputs.bLED8;
 8004d82:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <APPL_Application+0x168>)
 8004d84:	789b      	ldrb	r3, [r3, #2]
 8004d86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <APPL_Application+0x188>)
 8004d8e:	601a      	str	r2, [r3, #0]
//	else
//	{
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	}
	
    sDIInputs.bSwitch1    = SWITCH_1;
 8004d90:	4b45      	ldr	r3, [pc, #276]	; (8004ea8 <APPL_Application+0x18c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	b2d9      	uxtb	r1, r3
 8004d9a:	4a44      	ldr	r2, [pc, #272]	; (8004eac <APPL_Application+0x190>)
 8004d9c:	7893      	ldrb	r3, [r2, #2]
 8004d9e:	f361 0300 	bfi	r3, r1, #0, #1
 8004da2:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch2    = SWITCH_2;
 8004da4:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <APPL_Application+0x194>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	b2d9      	uxtb	r1, r3
 8004dae:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <APPL_Application+0x190>)
 8004db0:	7893      	ldrb	r3, [r2, #2]
 8004db2:	f361 0341 	bfi	r3, r1, #1, #1
 8004db6:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch3    = SWITCH_3;
 8004db8:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <APPL_Application+0x198>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <APPL_Application+0x190>)
 8004dc4:	7893      	ldrb	r3, [r2, #2]
 8004dc6:	f361 0382 	bfi	r3, r1, #2, #1
 8004dca:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch4    = SWITCH_4;
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <APPL_Application+0x19c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	b2d9      	uxtb	r1, r3
 8004dd6:	4a35      	ldr	r2, [pc, #212]	; (8004eac <APPL_Application+0x190>)
 8004dd8:	7893      	ldrb	r3, [r2, #2]
 8004dda:	f361 03c3 	bfi	r3, r1, #3, #1
 8004dde:	7093      	strb	r3, [r2, #2]
#if _STM32_IO8
    sDIInputs.bSwitch5    = SWITCH_5;
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <APPL_Application+0x1a0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	b2d9      	uxtb	r1, r3
 8004dea:	4a30      	ldr	r2, [pc, #192]	; (8004eac <APPL_Application+0x190>)
 8004dec:	7893      	ldrb	r3, [r2, #2]
 8004dee:	f361 1304 	bfi	r3, r1, #4, #1
 8004df2:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch6    = SWITCH_6;
 8004df4:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <APPL_Application+0x1a4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	b2d9      	uxtb	r1, r3
 8004dfe:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <APPL_Application+0x190>)
 8004e00:	7893      	ldrb	r3, [r2, #2]
 8004e02:	f361 1345 	bfi	r3, r1, #5, #1
 8004e06:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch7    = SWITCH_7;
 8004e08:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <APPL_Application+0x1a8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	b2d9      	uxtb	r1, r3
 8004e12:	4a26      	ldr	r2, [pc, #152]	; (8004eac <APPL_Application+0x190>)
 8004e14:	7893      	ldrb	r3, [r2, #2]
 8004e16:	f361 1386 	bfi	r3, r1, #6, #1
 8004e1a:	7093      	strb	r3, [r2, #2]
    sDIInputs.bSwitch8    = SWITCH_8;
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <APPL_Application+0x1ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	b2d9      	uxtb	r1, r3
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <APPL_Application+0x190>)
 8004e28:	7893      	ldrb	r3, [r2, #2]
 8004e2a:	f361 13c7 	bfi	r3, r1, #7, #1
 8004e2e:	7093      	strb	r3, [r2, #2]
//		while(!(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==SET));
					
//	sAIInputs.i16Analoginput  = uhADCxConvertedValue;
    extern uint16_t adc1Data[];

    sAIInputs.i16Analoginput = adc1Data[0];
 8004e30:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <APPL_Application+0x1b0>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b21a      	sxth	r2, r3
 8004e36:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <APPL_Application+0x1b4>)
 8004e38:	809a      	strh	r2, [r3, #4]

    /* we toggle the TxPDO Toggle after updating the data of the corresponding TxPDO */
    sAIInputs.bTxPDOToggle ^= 1;
 8004e3a:	4b25      	ldr	r3, [pc, #148]	; (8004ed0 <APPL_Application+0x1b4>)
 8004e3c:	78db      	ldrb	r3, [r3, #3]
 8004e3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2d9      	uxtb	r1, r3
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <APPL_Application+0x1b4>)
 8004e4c:	78d3      	ldrb	r3, [r2, #3]
 8004e4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004e52:	70d3      	strb	r3, [r2, #3]

    /* we simulate a problem of the analog input, if the Switch4 is on in this example,
       in this case the TxPDO State has to set to indicate the problem to the master */
    if ( sDIInputs.bSwitch4 )
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <APPL_Application+0x190>)
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <APPL_Application+0x152>
        sAIInputs.bTxPDOState = 1;
 8004e62:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <APPL_Application+0x1b4>)
 8004e64:	78d3      	ldrb	r3, [r2, #3]
 8004e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e6a:	70d3      	strb	r3, [r2, #3]
    else
        sAIInputs.bTxPDOState = 0;
}
 8004e6c:	e004      	b.n	8004e78 <APPL_Application+0x15c>
        sAIInputs.bTxPDOState = 0;
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <APPL_Application+0x1b4>)
 8004e70:	78d3      	ldrb	r3, [r2, #3]
 8004e72:	f36f 1386 	bfc	r3, #6, #1
 8004e76:	70d3      	strb	r3, [r2, #3]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000009c 	.word	0x2000009c
 8004e88:	424082b8 	.word	0x424082b8
 8004e8c:	424082b4 	.word	0x424082b4
 8004e90:	424082b0 	.word	0x424082b0
 8004e94:	424082ac 	.word	0x424082ac
 8004e98:	42408284 	.word	0x42408284
 8004e9c:	42410294 	.word	0x42410294
 8004ea0:	42408280 	.word	0x42408280
 8004ea4:	42410290 	.word	0x42410290
 8004ea8:	42410230 	.word	0x42410230
 8004eac:	20000090 	.word	0x20000090
 8004eb0:	4241022c 	.word	0x4241022c
 8004eb4:	42410228 	.word	0x42410228
 8004eb8:	42410224 	.word	0x42410224
 8004ebc:	42410220 	.word	0x42410220
 8004ec0:	4241021c 	.word	0x4241021c
 8004ec4:	42410218 	.word	0x42410218
 8004ec8:	4240823c 	.word	0x4240823c
 8004ecc:	200005d8 	.word	0x200005d8
 8004ed0:	20000094 	.word	0x20000094

08004ed4 <ReadObject0x1802>:
 \return    ABORTIDX_XXX

 \brief     Handles SDO read requests to TxPDO Parameter
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 ReadObject0x1802( UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60ba      	str	r2, [r7, #8]
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	81fb      	strh	r3, [r7, #14]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	737b      	strb	r3, [r7, #13]

    if(bCompleteAccess)
 8004ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <ReadObject0x1802+0x1e>
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8004eee:	2305      	movs	r3, #5
 8004ef0:	e038      	b.n	8004f64 <ReadObject0x1802+0x90>

    if(subindex == 0)
 8004ef2:	7b7b      	ldrb	r3, [r7, #13]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <ReadObject0x1802+0x2e>
    {
        *pData = TxPDO1802Subindex0;
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <ReadObject0x1802+0x98>)
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	e02f      	b.n	8004f62 <ReadObject0x1802+0x8e>
    }
    else if(subindex == 6)
 8004f02:	7b7b      	ldrb	r3, [r7, #13]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d108      	bne.n	8004f1a <ReadObject0x1802+0x46>
    {
        /*clear destination buffer (no excluded TxPDO set)*/
        if(dataSize > 0)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d029      	beq.n	8004f62 <ReadObject0x1802+0x8e>
        {
            MBXMEMSET(pData,0x00,dataSize);
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	2100      	movs	r1, #0
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f006 fb76 	bl	800b604 <memset>
 8004f18:	e023      	b.n	8004f62 <ReadObject0x1802+0x8e>
        }
    }
    else if(subindex == 7)
 8004f1a:	7b7b      	ldrb	r3, [r7, #13]
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	d10d      	bne.n	8004f3c <ReadObject0x1802+0x68>
    {
        /*min size is one Byte*/
        UINT8 *pu8Data = (UINT8*)pData;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	613b      	str	r3, [r7, #16]
        
        //Reset Buffer
        *pu8Data = 0; 
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]

        *pu8Data = sAIInputs.bTxPDOState;
 8004f2a:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <ReadObject0x1802+0x9c>)
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e012      	b.n	8004f62 <ReadObject0x1802+0x8e>
    }
    else if(subindex == 9)
 8004f3c:	7b7b      	ldrb	r3, [r7, #13]
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d10d      	bne.n	8004f5e <ReadObject0x1802+0x8a>
    {
        /*min size is one Byte*/
        UINT8 *pu8Data = (UINT8*)pData;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	617b      	str	r3, [r7, #20]
        
        //Reset Buffer
        *pu8Data = 0; 
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]

        *pu8Data = sAIInputs.bTxPDOToggle;
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <ReadObject0x1802+0x9c>)
 8004f4e:	78db      	ldrb	r3, [r3, #3]
 8004f50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e001      	b.n	8004f62 <ReadObject0x1802+0x8e>
    }
    else
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8004f5e:	2311      	movs	r3, #17
 8004f60:	e000      	b.n	8004f64 <ReadObject0x1802+0x90>

    return 0;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000034 	.word	0x20000034
 8004f70:	20000094 	.word	0x20000094

08004f74 <MainEtherCAT>:

int MainEtherCAT(void)
#else
void MainEtherCAT(void)
#endif
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
    /* initialize the Hardware and the EtherCAT Slave Controller */
    HW_Init();
 8004f78:	f000 f8f6 	bl	8005168 <HW_Init>

    MainInit();
 8004f7c:	f000 fece 	bl	8005d1c <MainInit>
//    CiA402_Init();
//
//    /*Create basic mapping*/
//    APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);

    bRunApplication = TRUE;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <MainEtherCAT+0x28>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
    do
    {
        MainLoop();
 8004f86:	f000 feeb 	bl	8005d60 <MainLoop>

    } while (bRunApplication == TRUE);
 8004f8a:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <MainEtherCAT+0x28>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d0f9      	beq.n	8004f86 <MainEtherCAT+0x12>

//    CiA402_DeallocateAxis();

    HW_Release();
 8004f92:	f000 f91d 	bl	80051d0 <HW_Release>
#if _STM32_IO8
    return 0;
 8004f96:	2300      	movs	r3, #0
#endif
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000aa8 	.word	0x20000aa8

08004fa0 <__NVIC_EnableIRQ>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	db0b      	blt.n	8004fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f003 021f 	and.w	r2, r3, #31
 8004fb8:	4907      	ldr	r1, [pc, #28]	; (8004fd8 <__NVIC_EnableIRQ+0x38>)
 8004fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e100 	.word	0xe000e100

08004fdc <__NVIC_DisableIRQ>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	db12      	blt.n	8005014 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	f003 021f 	and.w	r2, r3, #31
 8004ff4:	490a      	ldr	r1, [pc, #40]	; (8005020 <__NVIC_DisableIRQ+0x44>)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8005002:	3320      	adds	r3, #32
 8005004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005008:	f3bf 8f4f 	dsb	sy
}
 800500c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800500e:	f3bf 8f6f 	isb	sy
}
 8005012:	bf00      	nop
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	e000e100 	.word	0xe000e100

08005024 <WR_CMD>:

#define	SELECT_SPI		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET)
#define DESELECT_SPI	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET)

uint8_t WR_CMD (uint8_t cmd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af02      	add	r7, sp, #8
 800502a:	4603      	mov	r3, r0
 800502c:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]

//	SELECT_SPI;
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&cmd, (uint8_t *)&rxData, 1, 100);
 8005032:	f107 020f 	add.w	r2, r7, #15
 8005036:	1df9      	adds	r1, r7, #7
 8005038:	2364      	movs	r3, #100	; 0x64
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2301      	movs	r3, #1
 800503e:	4804      	ldr	r0, [pc, #16]	; (8005050 <WR_CMD+0x2c>)
 8005040:	f7fe fcd5 	bl	80039ee <HAL_SPI_TransmitReceive>
//	DESELECT_SPI;

	return rxData;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000730 	.word	0x20000730

08005054 <GetInterruptRegister>:

        The first two bytes of an access to the EtherCAT ASIC always deliver the AL_Event register (0x220).
        It will be saved in the global "EscALEvent"
*////////////////////////////////////////////////////////////////////////////////////////
static void GetInterruptRegister(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005058:	b672      	cpsid	i
}
 800505a:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif

    /* select the SPI */
    SELECT_SPI;
 800505c:	2200      	movs	r2, #0
 800505e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005062:	4809      	ldr	r0, [pc, #36]	; (8005088 <GetInterruptRegister+0x34>)
 8005064:	f7fd fe44 	bl	8002cf0 <HAL_GPIO_WritePin>

	 HW_EscReadIsr((MEM_ADDR *)&EscALEvent.Word, 0x220, 2);
 8005068:	2202      	movs	r2, #2
 800506a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <GetInterruptRegister+0x38>)
 8005070:	f000 f8fe 	bl	8005270 <HW_EscReadIsr>

	/* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
	DESELECT_SPI;
 8005074:	2201      	movs	r2, #1
 8005076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800507a:	4803      	ldr	r0, [pc, #12]	; (8005088 <GetInterruptRegister+0x34>)
 800507c:	f7fd fe38 	bl	8002cf0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8005080:	b662      	cpsie	i
}
 8005082:	bf00      	nop
#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif

}
 8005084:	bf00      	nop
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40020400 	.word	0x40020400
 800508c:	20000a94 	.word	0x20000a94

08005090 <ISR_GetInterruptRegister>:
*////////////////////////////////////////////////////////////////////////////////////////
#if !INTERRUPTS_SUPPORTED
#define ISR_GetInterruptRegister GetInterruptRegister
#else
static void ISR_GetInterruptRegister(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
    /* SPI should be deactivated to interrupt a possible transmission */
    DESELECT_SPI;
 8005094:	2201      	movs	r2, #1
 8005096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800509a:	480b      	ldr	r0, [pc, #44]	; (80050c8 <ISR_GetInterruptRegister+0x38>)
 800509c:	f7fd fe28 	bl	8002cf0 <HAL_GPIO_WritePin>

    /* select the SPI */
    SELECT_SPI;
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a6:	4808      	ldr	r0, [pc, #32]	; (80050c8 <ISR_GetInterruptRegister+0x38>)
 80050a8:	f7fd fe22 	bl	8002cf0 <HAL_GPIO_WritePin>

    HW_EscReadIsr((MEM_ADDR *)&EscALEvent.Word, 0x220, 2);
 80050ac:	2202      	movs	r2, #2
 80050ae:	f44f 7108 	mov.w	r1, #544	; 0x220
 80050b2:	4806      	ldr	r0, [pc, #24]	; (80050cc <ISR_GetInterruptRegister+0x3c>)
 80050b4:	f000 f8dc 	bl	8005270 <HW_EscReadIsr>

	/* 	if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
		done here */

    DESELECT_SPI;
 80050b8:	2201      	movs	r2, #1
 80050ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050be:	4802      	ldr	r0, [pc, #8]	; (80050c8 <ISR_GetInterruptRegister+0x38>)
 80050c0:	f7fd fe16 	bl	8002cf0 <HAL_GPIO_WritePin>
}
 80050c4:	bf00      	nop
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40020400 	.word	0x40020400
 80050cc:	20000a94 	.word	0x20000a94

080050d0 <AddressingEsc>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief The function addresses the EtherCAT ASIC via SPI for a following SPI access.
*////////////////////////////////////////////////////////////////////////////////////////
static void AddressingEsc( UINT16 Address, UINT8 Command )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	460a      	mov	r2, r1
 80050da:	80fb      	strh	r3, [r7, #6]
 80050dc:	4613      	mov	r3, r2
 80050de:	717b      	strb	r3, [r7, #5]
    UBYTETOWORD tmp;

//    VARVOLATILE UINT8 dummy;

    tmp.Word = ( Address << 3 ) | Command;
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	b21a      	sxth	r2, r3
 80050e6:	797b      	ldrb	r3, [r7, #5]
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	81bb      	strh	r3, [r7, #12]
    /* select the SPI */
    SELECT_SPI;
 80050f2:	2200      	movs	r2, #0
 80050f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f8:	4807      	ldr	r0, [pc, #28]	; (8005118 <AddressingEsc+0x48>)
 80050fa:	f7fd fdf9 	bl	8002cf0 <HAL_GPIO_WritePin>

    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
       the transmission shall be started */
    /* send the first address/command byte to the ESC */
//	dummy = WR_CMD(tmp.Byte[1]);
	WR_CMD(tmp.Byte[1]);
 80050fe:	7b7b      	ldrb	r3, [r7, #13]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff ff8f 	bl	8005024 <WR_CMD>
    /* send the second address/command byte to the ESC */

//	dummy =	WR_CMD(tmp.Byte[0]);
	WR_CMD(tmp.Byte[0]);
 8005106:	7b3b      	ldrb	r3, [r7, #12]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff8b 	bl	8005024 <WR_CMD>
    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40020400 	.word	0x40020400

0800511c <ISR_AddressingEsc>:

#if !INTERRUPTS_SUPPORTED
#define ISR_AddressingEsc AddressingEsc
#else
static void ISR_AddressingEsc( UINT16 Address, UINT8 Command )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	460a      	mov	r2, r1
 8005126:	80fb      	strh	r3, [r7, #6]
 8005128:	4613      	mov	r3, r2
 800512a:	717b      	strb	r3, [r7, #5]
//    VARVOLATILE UINT8 dummy;

    UBYTETOWORD tmp;
    tmp.Word = ( Address << 3 ) | Command;
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	b21a      	sxth	r2, r3
 8005132:	797b      	ldrb	r3, [r7, #5]
 8005134:	b21b      	sxth	r3, r3
 8005136:	4313      	orrs	r3, r2
 8005138:	b21b      	sxth	r3, r3
 800513a:	b29b      	uxth	r3, r3
 800513c:	81bb      	strh	r3, [r7, #12]

    /* select the SPI */
    SELECT_SPI;
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005144:	4807      	ldr	r0, [pc, #28]	; (8005164 <ISR_AddressingEsc+0x48>)
 8005146:	f7fd fdd3 	bl	8002cf0 <HAL_GPIO_WritePin>
    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
      the transmission shall be started */

    /* send the first address/command byte to the ESC */
//	dummy = WR_CMD(tmp.Byte[1]);
	WR_CMD(tmp.Byte[1]);
 800514a:	7b7b      	ldrb	r3, [r7, #13]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff69 	bl	8005024 <WR_CMD>
   /* send the second address/command byte to the ESC */

//	dummy = WR_CMD(tmp.Byte[0]);
	WR_CMD(tmp.Byte[0]);
 8005152:	7b3b      	ldrb	r3, [r7, #12]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff65 	bl	8005024 <WR_CMD>
    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40020400 	.word	0x40020400

08005168 <HW_Init>:
\return     0 if initialization was successful

 \brief    This function intialize the Process Data Interface (PDI) and the host controller.
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 HW_Init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
/*initialize ADC configration*/
//	ADC_Configuration();

	do
    {
        intMask = 0x93;
 800516e:	2393      	movs	r3, #147	; 0x93
 8005170:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8005172:	1dbb      	adds	r3, r7, #6
 8005174:	2202      	movs	r2, #2
 8005176:	f44f 7101 	mov.w	r1, #516	; 0x204
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f8ac 	bl	80052d8 <HW_EscWrite>
        intMask = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8005184:	1dbb      	adds	r3, r7, #6
 8005186:	2202      	movs	r2, #2
 8005188:	f44f 7101 	mov.w	r1, #516	; 0x204
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f83b 	bl	8005208 <HW_EscRead>

    } while (intMask != 0x93);
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b93      	cmp	r3, #147	; 0x93
 8005196:	d1ea      	bne.n	800516e <HW_Init+0x6>

	intMask = 0x00;
 8005198:	2300      	movs	r3, #0
 800519a:	80fb      	strh	r3, [r7, #6]

    HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 800519c:	1dbb      	adds	r3, r7, #6
 800519e:	2204      	movs	r2, #4
 80051a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 f897 	bl	80052d8 <HW_EscWrite>

#if AL_EVENT_ENABLED
//    INIT_ESC_INT;
    ENABLE_ESC_INT();
 80051aa:	2017      	movs	r0, #23
 80051ac:	f7ff fef8 	bl	8004fa0 <__NVIC_EnableIRQ>

#if DC_SUPPORTED && _STM32_IO8
//    INIT_SYNC0_INT
//    INIT_SYNC1_INT

    ENABLE_SYNC0_INT;
 80051b0:	2006      	movs	r0, #6
 80051b2:	f7ff fef5 	bl	8004fa0 <__NVIC_EnableIRQ>
    ENABLE_SYNC1_INT;
 80051b6:	2007      	movs	r0, #7
 80051b8:	f7ff fef2 	bl	8004fa0 <__NVIC_EnableIRQ>
#endif

//    INIT_ECAT_TIMER;
    START_ECAT_TIMER;
 80051bc:	201c      	movs	r0, #28
 80051be:	f7ff feef 	bl	8004fa0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80051c2:	b662      	cpsie	i
}
 80051c4:	bf00      	nop
#if INTERRUPTS_SUPPORTED
    /* enable all interrupts */
    ENABLE_GLOBAL_INT;
#endif

    return 0;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HW_Release>:
/**
 \brief    This function shall be implemented if hardware resources need to be release
        when the sample application stops
*////////////////////////////////////////////////////////////////////////////////////////
void HW_Release(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0

}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HW_GetALEventRegister>:
 \return    first two Bytes of ALEvent register (0x220)

 \brief  This function gets the current content of ALEvent register
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 HW_GetALEventRegister(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
    GetInterruptRegister();
 80051e4:	f7ff ff36 	bl	8005054 <GetInterruptRegister>
    return EscALEvent.Word;
 80051e8:	4b01      	ldr	r3, [pc, #4]	; (80051f0 <HW_GetALEventRegister+0x10>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000a94 	.word	0x20000a94

080051f4 <HW_GetALEventRegister_Isr>:
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif

UINT16 HW_GetALEventRegister_Isr(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
     ISR_GetInterruptRegister();
 80051f8:	f7ff ff4a 	bl	8005090 <ISR_GetInterruptRegister>
    return EscALEvent.Word;
 80051fc:	4b01      	ldr	r3, [pc, #4]	; (8005204 <HW_GetALEventRegister_Isr+0x10>)
 80051fe:	881b      	ldrh	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a94 	.word	0x20000a94

08005208 <HW_EscRead>:
 \param Len            Access size in Bytes.

 \brief  This function operates the SPI read access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscRead( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
 8005214:	4613      	mov	r3, r2
 8005216:	803b      	strh	r3, [r7, #0]
    /* HBu 24.01.06: if the SPI will be read by an interrupt routine too the
                     mailbox reading may be interrupted but an interrupted
                     reading will remain in a SPI transmission fault that will
                     reset the internal Sync Manager status. Therefore the reading
                     will be divided in 1-byte reads with disabled interrupt */
    UINT16 i = Len;
 8005218:	883b      	ldrh	r3, [r7, #0]
 800521a:	81fb      	strh	r3, [r7, #14]
    UINT8 *pTmpData = (UINT8 *)pData;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60bb      	str	r3, [r7, #8]

    /* loop for all bytes to be read */
    while ( i-- > 0 )
 8005220:	e019      	b.n	8005256 <HW_EscRead+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005222:	b672      	cpsid	i
}
 8005224:	bf00      	nop
           in that case the status flag will indicate an error because
           the reading operation was interrupted without setting the last
           sent byte to 0xFF */
        DISABLE_AL_EVENT_INT;
#endif
         AddressingEsc( Address, ESC_RD );
 8005226:	887b      	ldrh	r3, [r7, #2]
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff50 	bl	80050d0 <AddressingEsc>

        /* when reading the last byte the DI pin shall be 1 */
			*pTmpData++= WR_CMD(0xFF);
 8005230:	68bc      	ldr	r4, [r7, #8]
 8005232:	1c63      	adds	r3, r4, #1
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	20ff      	movs	r0, #255	; 0xff
 8005238:	f7ff fef4 	bl	8005024 <WR_CMD>
 800523c:	4603      	mov	r3, r0
 800523e:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005240:	b662      	cpsie	i
}
 8005242:	bf00      	nop
   #if AL_EVENT_ENABLED
        ENABLE_AL_EVENT_INT;
#endif
        /* there has to be at least 15 ns + CLK/2 after the transmission is finished
           before the SPI1_SEL signal shall be 1 */
        DESELECT_SPI;
 8005244:	2201      	movs	r2, #1
 8005246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800524a:	4808      	ldr	r0, [pc, #32]	; (800526c <HW_EscRead+0x64>)
 800524c:	f7fd fd50 	bl	8002cf0 <HAL_GPIO_WritePin>
        /* next address */
        Address++;
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	3301      	adds	r3, #1
 8005254:	807b      	strh	r3, [r7, #2]
    while ( i-- > 0 )
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	81fa      	strh	r2, [r7, #14]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e0      	bne.n	8005222 <HW_EscRead+0x1a>
//        /* reset transmission flag */
//        SPI1_IF = 0;
    }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	40020400 	.word	0x40020400

08005270 <HW_EscReadIsr>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif
void HW_EscReadIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
 800527c:	4613      	mov	r3, r2
 800527e:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 8005280:	883b      	ldrh	r3, [r7, #0]
 8005282:	81fb      	strh	r3, [r7, #14]
    UINT8 data = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	737b      	strb	r3, [r7, #13]

    UINT8 *pTmpData = (UINT8 *)pData;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60bb      	str	r3, [r7, #8]

    /* send the address and command to the ESC */
     ISR_AddressingEsc( Address, ESC_RD );
 800528c:	887b      	ldrh	r3, [r7, #2]
 800528e:	2102      	movs	r1, #2
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ff43 	bl	800511c <ISR_AddressingEsc>
    /* loop for all bytes to be read */
    while ( i-- > 0 )
 8005296:	e00d      	b.n	80052b4 <HW_EscReadIsr+0x44>
    {
        if ( i == 0 )
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HW_EscReadIsr+0x32>
        {
            /* when reading the last byte the DI pin shall be 1 */
            data = 0xFF;
 800529e:	23ff      	movs	r3, #255	; 0xff
 80052a0:	737b      	strb	r3, [r7, #13]
        }

		*pTmpData++= WR_CMD(data);
 80052a2:	68bc      	ldr	r4, [r7, #8]
 80052a4:	1c63      	adds	r3, r4, #1
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	7b7b      	ldrb	r3, [r7, #13]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff feba 	bl	8005024 <WR_CMD>
 80052b0:	4603      	mov	r3, r0
 80052b2:	7023      	strb	r3, [r4, #0]
    while ( i-- > 0 )
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	81fa      	strh	r2, [r7, #14]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1ec      	bne.n	8005298 <HW_EscReadIsr+0x28>
    }

    /* there has to be at least 15 ns + CLK/2 after the transmission is finished
       before the SPI1_SEL signal shall be 1 */
    DESELECT_SPI;
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c4:	4803      	ldr	r0, [pc, #12]	; (80052d4 <HW_EscReadIsr+0x64>)
 80052c6:	f7fd fd13 	bl	8002cf0 <HAL_GPIO_WritePin>
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd90      	pop	{r4, r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40020400 	.word	0x40020400

080052d8 <HW_EscWrite>:
 \param Len            Access size in Bytes.

  \brief  This function operates the SPI write access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscWrite( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	807b      	strh	r3, [r7, #2]
 80052e4:	4613      	mov	r3, r2
 80052e6:	803b      	strh	r3, [r7, #0]
	UINT16 i = Len;
 80052e8:	883b      	ldrh	r3, [r7, #0]
 80052ea:	81fb      	strh	r3, [r7, #14]
//    VARVOLATILE UINT8 dummy;

	UINT8 *pTmpData = (UINT8 *)pData;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60bb      	str	r3, [r7, #8]

	/* loop for all bytes to be written */
	while ( i-- > 0 )
 80052f0:	e018      	b.n	8005324 <HW_EscWrite+0x4c>
  __ASM volatile ("cpsid i" : : : "memory");
 80052f2:	b672      	cpsid	i
}
 80052f4:	bf00      	nop
		/* the reading of data from the ESC can be interrupted by the
		   AL Event ISR, so every byte will be written separate */
		DISABLE_AL_EVENT_INT;
	#endif
		/* HBu 24.01.06: wrong parameter ESC_RD */
		 AddressingEsc( Address, ESC_WR );
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	2104      	movs	r1, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fee8 	bl	80050d0 <AddressingEsc>

		/* enable the ESC interrupt to get the AL Event ISR the chance to interrupt */
		/* SPI1_BUF must be read, otherwise the module will not transfer the next received data from SPIxSR to SPIxRXB.*/
	//			dummy= WR_CMD(*pTmpData++);
		WR_CMD(*pTmpData++);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	60ba      	str	r2, [r7, #8]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fe8b 	bl	8005024 <WR_CMD>
  __ASM volatile ("cpsie i" : : : "memory");
 800530e:	b662      	cpsie	i
}
 8005310:	bf00      	nop

	#if AL_EVENT_ENABLED
		ENABLE_AL_EVENT_INT;
	#endif

		DESELECT_SPI;
 8005312:	2201      	movs	r2, #1
 8005314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005318:	4807      	ldr	r0, [pc, #28]	; (8005338 <HW_EscWrite+0x60>)
 800531a:	f7fd fce9 	bl	8002cf0 <HAL_GPIO_WritePin>
		/* next address */
		Address++;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	3301      	adds	r3, #1
 8005322:	807b      	strh	r3, [r7, #2]
	while ( i-- > 0 )
 8005324:	89fb      	ldrh	r3, [r7, #14]
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	81fa      	strh	r2, [r7, #14]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e1      	bne.n	80052f2 <HW_EscWrite+0x1a>
	}
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40020400 	.word	0x40020400

0800533c <HW_EscWriteIsr>:
/* the pragma interrupt_level is used to tell the compiler that these functions will not
   be called at the same time from the main function and the interrupt routine */
//#pragma interrupt_level 1
#endif
void HW_EscWriteIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
 8005348:	4613      	mov	r3, r2
 800534a:	803b      	strh	r3, [r7, #0]
	UINT16 i = Len;
 800534c:	883b      	ldrh	r3, [r7, #0]
 800534e:	81fb      	strh	r3, [r7, #14]
//    VARVOLATILE UINT16 dummy;
	UINT8 *pTmpData = (UINT8 *)pData;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60bb      	str	r3, [r7, #8]

	/* send the address and command to the ESC */
	ISR_AddressingEsc( Address, ESC_WR );
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	2104      	movs	r1, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fedf 	bl	800511c <ISR_AddressingEsc>

	/* loop for all bytes to be written */
	while ( i-- > 0 )
 800535e:	e007      	b.n	8005370 <HW_EscWriteIsr+0x34>
	{
		/* start transmission */
	//			dummy= WR_CMD(*pTmpData);
		WR_CMD(*pTmpData);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fe5d 	bl	8005024 <WR_CMD>
		/* increment data pointer */
		pTmpData++;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3301      	adds	r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
	while ( i-- > 0 )
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	1e5a      	subs	r2, r3, #1
 8005374:	81fa      	strh	r2, [r7, #14]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f2      	bne.n	8005360 <HW_EscWriteIsr+0x24>
	}

	/* there has to be at least 15 ns + CLK/2 after the transmission is finished
	   before the SPI1_SEL signal shall be 1 */
	DESELECT_SPI;
 800537a:	2201      	movs	r2, #1
 800537c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005380:	4803      	ldr	r0, [pc, #12]	; (8005390 <HW_EscWriteIsr+0x54>)
 8005382:	f7fd fcb5 	bl	8002cf0 <HAL_GPIO_WritePin>
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40020400 	.word	0x40020400

08005394 <EXTI9_5_IRQHandler>:
//void HWISR_EcatIsr(void)
void EcatIsr(void)
#else
void EcatIsr(void)		//void __attribute__ ((__interrupt__, no_auto_psv)) EscIsr(void)
#endif
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	PDI_Isr();
 8005398:	f000 fb4c 	bl	8005a34 <PDI_Isr>

    /* reset the interrupt flag */
	ACK_ESC_INT;
 800539c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053a0:	f7fd fcc0 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <EXTI0_IRQHandler>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC0
*////////////////////////////////////////////////////////////////////////////////////////

void Sync0Isr(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
    Sync0_Isr();
 80053ac:	f000 fbea 	bl	8005b84 <Sync0_Isr>
    /* reset the interrupt flag */

    ACK_SYNC0_INT;
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <EXTI0_IRQHandler+0x14>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40013c00 	.word	0x40013c00

080053c0 <EXTI1_IRQHandler>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC1
*////////////////////////////////////////////////////////////////////////////////////////

void Sync1Isr(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
	Sync1_Isr();
 80053c4:	f000 fc88 	bl	8005cd8 <Sync1_Isr>
	/* reset the interrupt flag */

	ACK_SYNC1_INT;
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <EXTI1_IRQHandler+0x14>)
 80053ca:	2202      	movs	r2, #2
 80053cc:	615a      	str	r2, [r3, #20]
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40013c00 	.word	0x40013c00

080053d8 <TIM2_IRQHandler>:
#endif

#if _STM32_IO8 && ECAT_TIMER_INT
// Timer 2 ISR (0.1ms)
void TimerIsr(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	DISABLE_ESC_INT();
 80053dc:	2017      	movs	r0, #23
 80053de:	f7ff fdfd 	bl	8004fdc <__NVIC_DisableIRQ>

	ECAT_CheckTimer();
 80053e2:	f000 fa8f 	bl	8005904 <ECAT_CheckTimer>

	ECAT_TIMER_ACK_INT;
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <TIM2_IRQHandler+0x24>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0201 	mvn.w	r2, #1
 80053ee:	611a      	str	r2, [r3, #16]

	ENABLE_ESC_INT();
 80053f0:	2017      	movs	r0, #23
 80053f2:	f7ff fdd5 	bl	8004fa0 <__NVIC_EnableIRQ>
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	2000097c 	.word	0x2000097c

08005400 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <COE_GetObjectDictionary+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	200005cc 	.word	0x200005cc

08005418 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 800541e:	4b34      	ldr	r3, [pc, #208]	; (80054f0 <COE_ObjInit+0xd8>)
 8005420:	2220      	movs	r2, #32
 8005422:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <COE_ObjInit+0xd8>)
 8005426:	2200      	movs	r2, #0
 8005428:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 800542a:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <COE_ObjInit+0xd8>)
 800542c:	2200      	movs	r2, #0
 800542e:	605a      	str	r2, [r3, #4]
    /* only for DC Mode important: the subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the outputs are put to the hardware to allow the
        master a very exactly calculation of delay times*/
    sSyncManOutPar.u32ShiftTime     = 0;
 8005430:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <COE_ObjInit+0xd8>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 8005436:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <COE_ObjInit+0xd8>)
 8005438:	f244 021f 	movw	r2, #16415	; 0x401f
 800543c:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <COE_ObjInit+0xd8>)
 8005440:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <COE_ObjInit+0xdc>)
 8005442:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8005444:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <COE_ObjInit+0xd8>)
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <COE_ObjInit+0xd8>)
 800544c:	2200      	movs	r2, #0
 800544e:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8005450:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <COE_ObjInit+0xd8>)
 8005452:	2200      	movs	r2, #0
 8005454:	621a      	str	r2, [r3, #32]

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <COE_ObjInit+0xd8>)
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_START(V5.11) ECAT4*/
    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <COE_ObjInit+0xe0>)
 8005460:	2220      	movs	r2, #32
 8005462:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <COE_ObjInit+0xe0>)
 8005466:	2200      	movs	r2, #0
 8005468:	805a      	strh	r2, [r3, #2]

    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <COE_ObjInit+0xd8>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <COE_ObjInit+0xe0>)
 8005470:	6053      	str	r3, [r2, #4]
    /* only for DC Mode important: subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the inputs are got to the hardware to allow the
        master a very exactly calculation of delay times,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManInPar.u32ShiftTime     = 0;
 8005472:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <COE_ObjInit+0xe0>)
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <COE_ObjInit+0xd8>)
 800547a:	899a      	ldrh	r2, [r3, #12]
 800547c:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <COE_ObjInit+0xe0>)
 800547e:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <COE_ObjInit+0xe0>)
 8005482:	4a1c      	ldr	r2, [pc, #112]	; (80054f4 <COE_ObjInit+0xdc>)
 8005484:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <COE_ObjInit+0xe0>)
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <COE_ObjInit+0xe0>)
 800548e:	2200      	movs	r2, #0
 8005490:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 8005492:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <COE_ObjInit+0xe0>)
 8005494:	2200      	movs	r2, #0
 8005496:	621a      	str	r2, [r3, #32]

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <COE_ObjInit+0xe0>)
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 80054a0:	4b16      	ldr	r3, [pc, #88]	; (80054fc <COE_ObjInit+0xe4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 80054a6:	f000 f931 	bl	800570c <COE_ObjDictionaryInit>
 80054aa:	4603      	mov	r3, r0
 80054ac:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <COE_ObjInit+0xa0>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 80054b4:	f000 f8e8 	bl	8005688 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <COE_ObjInit+0xe8>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <COE_ObjInit+0xec>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <COE_ObjInit+0xf0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <COE_ObjInit+0xf4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <COE_ObjInit+0xf8>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <COE_ObjInit+0xfc>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <COE_ObjInit+0x100>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <COE_ObjInit+0x104>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20000e68 	.word	0x20000e68
 80054f4:	0007a120 	.word	0x0007a120
 80054f8:	20000e24 	.word	0x20000e24
 80054fc:	20000eac 	.word	0x20000eac
 8005500:	20000ecc 	.word	0x20000ecc
 8005504:	20000ecd 	.word	0x20000ecd
 8005508:	20000efe 	.word	0x20000efe
 800550c:	20000f00 	.word	0x20000f00
 8005510:	20000edc 	.word	0x20000edc
 8005514:	20000eb8 	.word	0x20000eb8
 8005518:	20000ec8 	.word	0x20000ec8
 800551c:	20000ee0 	.word	0x20000ee0

08005520 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d062      	beq.n	80055f4 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 8005536:	4a33      	ldr	r2, [pc, #204]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <COE_AddObjectToDic+0xe4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8005544:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
            return 0;
 800554c:	2300      	movs	r3, #0
 800554e:	e052      	b.n	80055f6 <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8005550:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	891a      	ldrh	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	891b      	ldrh	r3, [r3, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d90f      	bls.n	800557e <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <COE_AddObjectToDic+0xe4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
            return 0;
 800557a:	2300      	movs	r3, #0
 800557c:	e03b      	b.n	80055f6 <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <COE_AddObjectToDic+0xe4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8005584:	e033      	b.n	80055ee <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	891a      	ldrh	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	891b      	ldrh	r3, [r3, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	d101      	bne.n	8005596 <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e02f      	b.n	80055f6 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	891a      	ldrh	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	891b      	ldrh	r3, [r3, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d913      	bls.n	80055ca <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]

                    return 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e015      	b.n	80055f6 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
                    return 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e006      	b.n	80055f6 <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1c8      	bne.n	8005586 <COE_AddObjectToDic+0x66>
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 80055f4:	2301      	movs	r3, #1
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	200005cc 	.word	0x200005cc

08005608 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <COE_RemoveDicEntry+0x7c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 8005618:	e02a      	b.n	8005670 <COE_RemoveDicEntry+0x68>
    {
        if(pDicEntry->Index == index)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	891b      	ldrh	r3, [r3, #8]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	429a      	cmp	r2, r3
 8005622:	d122      	bne.n	800566a <COE_RemoveDicEntry+0x62>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <COE_RemoveDicEntry+0x34>
                pPrevEntry->pNext = pNextEntry;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	605a      	str	r2, [r3, #4]

            if(pNextEntry != NULL)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <COE_RemoveDicEntry+0x40>
                pNextEntry->pPrev = pPrevEntry;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	601a      	str	r2, [r3, #0]

            pDicEntry->pPrev = NULL;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	891a      	ldrh	r2, [r3, #8]
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <COE_RemoveDicEntry+0x7c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	891b      	ldrh	r3, [r3, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	d10a      	bne.n	8005678 <COE_RemoveDicEntry+0x70>
            {
                ObjDicList = pNextEntry;
 8005662:	4a08      	ldr	r2, [pc, #32]	; (8005684 <COE_RemoveDicEntry+0x7c>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6013      	str	r3, [r2, #0]
            }
            return;
 8005668:	e006      	b.n	8005678 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	617b      	str	r3, [r7, #20]
    while(pDicEntry != NULL)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1d1      	bne.n	800561a <COE_RemoveDicEntry+0x12>
 8005676:	e000      	b.n	800567a <COE_RemoveDicEntry+0x72>
            return;
 8005678:	bf00      	nop
    }
}
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	200005cc 	.word	0x200005cc

08005688 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <COE_ClearObjDictionary+0x3c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 8005698:	e009      	b.n	80056ae <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	891b      	ldrh	r3, [r3, #8]
 800569e:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 80056a6:	887b      	ldrh	r3, [r7, #2]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ffad 	bl	8005608 <COE_RemoveDicEntry>
    while(pObjEntry != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f2      	bne.n	800569a <COE_ClearObjDictionary+0x12>
    }
    ObjDicList = NULL;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <COE_ClearObjDictionary+0x3c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200005cc 	.word	0x200005cc

080056c8 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 80056d8:	e00c      	b.n	80056f4 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f7ff ff20 	bl	8005520 <COE_AddObjectToDic>
 80056e0:	4603      	mov	r3, r0
 80056e2:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <AddObjectsToObjDictionary+0x26>
            return result;
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	e009      	b.n	8005702 <AddObjectsToObjDictionary+0x3a>

        pEntry++;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3328      	adds	r3, #40	; 0x28
 80056f2:	60bb      	str	r3, [r7, #8]
    while(pEntry->Index != 0xFFFF)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	891b      	ldrh	r3, [r3, #8]
 80056f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d1ec      	bne.n	80056da <AddObjectsToObjDictionary+0x12>
    }

    return result;
 8005700:	89fb      	ldrh	r3, [r7, #14]

}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <COE_ObjDictionaryInit+0x38>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 800571c:	480a      	ldr	r0, [pc, #40]	; (8005748 <COE_ObjDictionaryInit+0x3c>)
 800571e:	f7ff ffd3 	bl	80056c8 <AddObjectsToObjDictionary>
 8005722:	4603      	mov	r3, r0
 8005724:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <COE_ObjDictionaryInit+0x24>
        return result;
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	e005      	b.n	800573c <COE_ObjDictionaryInit+0x30>
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8005730:	4806      	ldr	r0, [pc, #24]	; (800574c <COE_ObjDictionaryInit+0x40>)
 8005732:	f7ff ffc9 	bl	80056c8 <AddObjectsToObjDictionary>
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
    }

    return result;
 800573a:	88fb      	ldrh	r3, [r7, #6]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200005cc 	.word	0x200005cc
 8005748:	20000370 	.word	0x20000370
 800574c:	20000104 	.word	0x20000104

08005750 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	71fb      	strb	r3, [r7, #7]
    if(pSdoPendFunc != NULL)
 800575a:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <COE_Main+0xb8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04e      	beq.n	8005800 <COE_Main+0xb0>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8005762:	4b29      	ldr	r3, [pc, #164]	; (8005808 <COE_Main+0xb8>)
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	4b29      	ldr	r3, [pc, #164]	; (800580c <COE_Main+0xbc>)
 8005768:	8818      	ldrh	r0, [r3, #0]
 800576a:	4b29      	ldr	r3, [pc, #164]	; (8005810 <COE_Main+0xc0>)
 800576c:	7819      	ldrb	r1, [r3, #0]
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <COE_Main+0xc4>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b29      	ldr	r3, [pc, #164]	; (8005818 <COE_Main+0xc8>)
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <COE_Main+0xcc>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	462b      	mov	r3, r5
 800577e:	47a0      	blx	r4
 8005780:	4603      	mov	r3, r0
 8005782:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2bff      	cmp	r3, #255	; 0xff
 8005788:	d03a      	beq.n	8005800 <COE_Main+0xb0>
        {
            switch(u8PendingSdo)
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <COE_Main+0xd0>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b04      	cmp	r3, #4
 8005790:	dc21      	bgt.n	80057d6 <COE_Main+0x86>
 8005792:	2b03      	cmp	r3, #3
 8005794:	da16      	bge.n	80057c4 <COE_Main+0x74>
 8005796:	2b01      	cmp	r3, #1
 8005798:	d00d      	beq.n	80057b6 <COE_Main+0x66>
 800579a:	2b02      	cmp	r3, #2
 800579c:	d11b      	bne.n	80057d6 <COE_Main+0x86>
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <COE_Main+0xd4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <COE_Main+0x66>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <COE_Main+0xd4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f005 ff14 	bl	800b5d8 <free>
                        pSdoSegData = NULL;
 80057b0:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <COE_Main+0xd4>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f005 f927 	bl	800aa10 <SDOS_SdoRes>
                break;
 80057c2:	e008      	b.n	80057d6 <COE_Main+0x86>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <COE_Main+0xc4>)
 80057c6:	6819      	ldr	r1, [r3, #0]
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <COE_Main+0xc8>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f005 f91e 	bl	800aa10 <SDOS_SdoRes>
                    break;
 80057d4:	bf00      	nop

            }

            u8PendingSdo = 0;
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <COE_Main+0xd0>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <COE_Main+0xbc>)
 80057de:	2200      	movs	r2, #0
 80057e0:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <COE_Main+0xc0>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <COE_Main+0xc4>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <COE_Main+0xc8>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <COE_Main+0xcc>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 80057fa:	4b03      	ldr	r3, [pc, #12]	; (8005808 <COE_Main+0xb8>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
        }
    }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bdb0      	pop	{r4, r5, r7, pc}
 8005808:	20000ec8 	.word	0x20000ec8
 800580c:	20000efe 	.word	0x20000efe
 8005810:	20000f00 	.word	0x20000f00
 8005814:	20000edc 	.word	0x20000edc
 8005818:	20000eb8 	.word	0x20000eb8
 800581c:	20000ecd 	.word	0x20000ecd
 8005820:	20000ecc 	.word	0x20000ecc
 8005824:	20000ee0 	.word	0x20000ee0

08005828 <__NVIC_EnableIRQ>:
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	db0b      	blt.n	8005852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 021f 	and.w	r2, r3, #31
 8005840:	4907      	ldr	r1, [pc, #28]	; (8005860 <__NVIC_EnableIRQ+0x38>)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	2001      	movs	r0, #1
 800584a:	fa00 f202 	lsl.w	r2, r0, r2
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000e100 	.word	0xe000e100

08005864 <__NVIC_DisableIRQ>:
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	db12      	blt.n	800589c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	490a      	ldr	r1, [pc, #40]	; (80058a8 <__NVIC_DisableIRQ+0x44>)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2001      	movs	r0, #1
 8005886:	fa00 f202 	lsl.w	r2, r0, r2
 800588a:	3320      	adds	r3, #32
 800588c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005890:	f3bf 8f4f 	dsb	sy
}
 8005894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005896:	f3bf 8f6f 	isb	sy
}
 800589a:	bf00      	nop
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	e000e100 	.word	0xe000e100

080058ac <PDO_InputMapping>:
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
    APPL_InputMapping((UINT16*)aPdInputData);
 80058b0:	4806      	ldr	r0, [pc, #24]	; (80058cc <PDO_InputMapping+0x20>)
 80058b2:	f7ff f9c1 	bl	8004c38 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <PDO_InputMapping+0x24>)
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	4a06      	ldr	r2, [pc, #24]	; (80058d4 <PDO_InputMapping+0x28>)
 80058bc:	8812      	ldrh	r2, [r2, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	4802      	ldr	r0, [pc, #8]	; (80058cc <PDO_InputMapping+0x20>)
 80058c2:	f7ff fd3b 	bl	800533c <HW_EscWriteIsr>
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000af4 	.word	0x20000af4
 80058d0:	20000b8c 	.word	0x20000b8c
 80058d4:	20000b74 	.word	0x20000b74

080058d8 <PDO_OutputMapping>:
\brief    This function will copies the outputs from the ESC memory to the local memory
          to the hardware. This function is only called in case of an SM2 
          (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <PDO_OutputMapping+0x20>)
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	4a06      	ldr	r2, [pc, #24]	; (80058fc <PDO_OutputMapping+0x24>)
 80058e2:	8812      	ldrh	r2, [r2, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4806      	ldr	r0, [pc, #24]	; (8005900 <PDO_OutputMapping+0x28>)
 80058e8:	f7ff fcc2 	bl	8005270 <HW_EscReadIsr>

    APPL_OutputMapping((UINT16*) aPdOutputData);
 80058ec:	4804      	ldr	r0, [pc, #16]	; (8005900 <PDO_OutputMapping+0x28>)
 80058ee:	f7ff f9e5 	bl	8004cbc <APPL_OutputMapping>
}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000b5c 	.word	0x20000b5c
 80058fc:	20000b4e 	.word	0x20000b4e
 8005900:	20000aac 	.word	0x20000aac

08005904 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <ECAT_CheckTimer+0x44>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <ECAT_CheckTimer+0x48>)
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <ECAT_CheckTimer+0x48>)
 800591a:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <ECAT_CheckTimer+0x4c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00d      	beq.n	8005940 <ECAT_CheckTimer+0x3c>
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <ECAT_CheckTimer+0x50>)
 8005926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd08      	ble.n	8005940 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <ECAT_CheckTimer+0x50>)
 8005930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	b21a      	sxth	r2, r3
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <ECAT_CheckTimer+0x50>)
 800593e:	801a      	strh	r2, [r3, #0]
    }



     DC_CheckWatchdog();
 8005940:	f001 ffc6 	bl	80078d0 <DC_CheckWatchdog>
}
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000e68 	.word	0x20000e68
 800594c:	20000b40 	.word	0x20000b40
 8005950:	20000b72 	.word	0x20000b72
 8005954:	20000b7c 	.word	0x20000b7c

08005958 <HandleBusCycleCalculation>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief    This function is called from the PDI_Isr and is used to calculate the bus cycle time 
  *////////////////////////////////////////////////////////////////////////////////////////
void HandleBusCycleCalculation(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
    /*calculate the cycle time if device is in SM Sync mode and Cycle time was not calculated yet*/
    if ( !bDcSyncActive && bEscIntEnabled)
 800595e:	4b2d      	ldr	r3, [pc, #180]	; (8005a14 <HandleBusCycleCalculation+0xbc>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d150      	bne.n	8005a08 <HandleBusCycleCalculation+0xb0>
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <HandleBusCycleCalculation+0xc0>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d04c      	beq.n	8005a08 <HandleBusCycleCalculation+0xb0>
    {
        BOOL bTiggerCalcCycleTime = FALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]

        if(sSyncManOutPar.u16GetCycleTime == 1)
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <HandleBusCycleCalculation+0xc4>)
 8005974:	8b9b      	ldrh	r3, [r3, #28]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HandleBusCycleCalculation+0x26>
            bTiggerCalcCycleTime = TRUE;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
        if(bTiggerCalcCycleTime)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d017      	beq.n	80059b4 <HandleBusCycleCalculation+0x5c>
        {
            /*get bus cycle time triggered */
            sSyncManOutPar.u32CycleTime = 0;
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HandleBusCycleCalculation+0xc4>)
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
            sSyncManOutPar.u16GetCycleTime = 0;
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HandleBusCycleCalculation+0xc4>)
 800598c:	2200      	movs	r2, #0
 800598e:	839a      	strh	r2, [r3, #28]

            sSyncManInPar.u32CycleTime  = 0;
 8005990:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HandleBusCycleCalculation+0xc8>)
 8005992:	2200      	movs	r2, #0
 8005994:	605a      	str	r2, [r3, #4]
            sSyncManInPar.u16GetCycleTime = 0;
 8005996:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <HandleBusCycleCalculation+0xc8>)
 8005998:	2200      	movs	r2, #0
 800599a:	839a      	strh	r2, [r3, #28]
            
            u16BusCycleCntMs = 0;
 800599c:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <HandleBusCycleCalculation+0xcc>)
 800599e:	2200      	movs	r2, #0
 80059a0:	801a      	strh	r2, [r3, #0]
            bCycleTimeMeasurementStarted = TRUE;
 80059a2:	4b21      	ldr	r3, [pc, #132]	; (8005a28 <HandleBusCycleCalculation+0xd0>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
            StartTimerCnt = (UINT32) HW_GetTimer();
 80059a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <HandleBusCycleCalculation+0xd4>)
 80059b0:	6013      	str	r3, [r2, #0]
/*ECATCHANGE_END(V5.11) ECAT3*/
            /* CiA402 Motion controller cycle time is only set if DC Synchronisation is active*/
            }
        }
    }
}
 80059b2:	e029      	b.n	8005a08 <HandleBusCycleCalculation+0xb0>
            if(bCycleTimeMeasurementStarted == TRUE)
 80059b4:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <HandleBusCycleCalculation+0xd0>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d125      	bne.n	8005a08 <HandleBusCycleCalculation+0xb0>
                UINT32 CurTimerCnt = (UINT32)HW_GetTimer();
 80059bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	60bb      	str	r3, [r7, #8]
                UINT32 CalcCycleTime = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	607b      	str	r3, [r7, #4]
                CalcCycleTime = (UINT32)u16BusCycleCntMs * 1000000 + (((INT32)(CurTimerCnt-StartTimerCnt))*1000000/ECAT_TIMER_INC_P_MS);    //get elapsed cycle time in ns
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <HandleBusCycleCalculation+0xcc>)
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <HandleBusCycleCalculation+0xd8>)
 80059d0:	fb03 f302 	mul.w	r3, r3, r2
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <HandleBusCycleCalculation+0xd4>)
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	1a8a      	subs	r2, r1, r2
 80059dc:	4611      	mov	r1, r2
 80059de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059e2:	fb02 f201 	mul.w	r2, r2, r1
 80059e6:	4413      	add	r3, r2
 80059e8:	607b      	str	r3, [r7, #4]
                sSyncManOutPar.u32CycleTime = CalcCycleTime;
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <HandleBusCycleCalculation+0xc4>)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6053      	str	r3, [r2, #4]
                sSyncManInPar.u32CycleTime  = CalcCycleTime;
 80059f0:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <HandleBusCycleCalculation+0xc8>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6053      	str	r3, [r2, #4]
                u16BusCycleCntMs = 0;
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <HandleBusCycleCalculation+0xcc>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	801a      	strh	r2, [r3, #0]
                StartTimerCnt = 0;
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HandleBusCycleCalculation+0xd4>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
                bCycleTimeMeasurementStarted = FALSE;
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HandleBusCycleCalculation+0xd0>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000b7e 	.word	0x20000b7e
 8005a18:	20000b85 	.word	0x20000b85
 8005a1c:	20000e68 	.word	0x20000e68
 8005a20:	20000e24 	.word	0x20000e24
 8005a24:	20000b40 	.word	0x20000b40
 8005a28:	20000a9c 	.word	0x20000a9c
 8005a2c:	20000a98 	.word	0x20000a98
 8005a30:	000f4240 	.word	0x000f4240

08005a34 <PDI_Isr>:
/*ECATCHANGE_END(V5.11) ECAT6*/

void PDI_Isr(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 8005a3a:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <PDI_Isr+0x120>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8084 	beq.w	8005b4c <PDI_Isr+0x118>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8005a44:	f7ff fbd6 	bl	80051f4 <HW_GetALEventRegister_Isr>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d034      	beq.n	8005ac0 <PDI_Isr+0x8c>
        {
            if(bDcRunning && bDcSyncActive)
 8005a56:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <PDI_Isr+0x124>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <PDI_Isr+0x38>
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <PDI_Isr+0x128>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8005a66:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <PDI_Isr+0x12c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 8005a6c:	4b3d      	ldr	r3, [pc, #244]	; (8005b64 <PDI_Isr+0x130>)
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <PDI_Isr+0x4c>
                sSyncManOutPar.u16SmEventMissedCounter--;
 8005a74:	4b3b      	ldr	r3, [pc, #236]	; (8005b64 <PDI_Isr+0x130>)
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <PDI_Isr+0x130>)
 8005a7e:	851a      	strh	r2, [r3, #40]	; 0x28


/*ECATCHANGE_START(V5.11) ECAT6*/
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8005a80:	f7ff ff6a 	bl	8005958 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT6*/

        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8005a84:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <PDI_Isr+0x134>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8005a8a:	4b38      	ldr	r3, [pc, #224]	; (8005b6c <PDI_Isr+0x138>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <PDI_Isr+0x64>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8005a92:	f7ff ff21 	bl	80058d8 <PDO_OutputMapping>
 8005a96:	e013      	b.n	8005ac0 <PDI_Isr+0x8c>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8005a98:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <PDI_Isr+0x13c>)
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4834      	ldr	r0, [pc, #208]	; (8005b74 <PDI_Isr+0x140>)
 8005aa2:	f7ff fbe5 	bl	8005270 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8005aa6:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <PDI_Isr+0x13c>)
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <PDI_Isr+0x144>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	4413      	add	r3, r2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b02      	subs	r3, #2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	482e      	ldr	r0, [pc, #184]	; (8005b74 <PDI_Isr+0x140>)
 8005abc:	f7ff fbd8 	bl	8005270 <HW_EscReadIsr>
        }
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if (( ALEvent & PROCESS_INPUT_EVENT ) && (nPdOutputSize == 0))
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <PDI_Isr+0xa2>
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <PDI_Isr+0x144>)
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <PDI_Isr+0xa2>
        {
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8005ad2:	f7ff ff41 	bl	8005958 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT4*/

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 8005ad6:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <PDI_Isr+0x130>)
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <PDI_Isr+0xae>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8005ade:	f000 f99d 	bl	8005e1c <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <PDI_Isr+0x148>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <PDI_Isr+0xca>
/*ECATCHANGE_START(V5.11) ESM7*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8005aea:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <PDI_Isr+0x14c>)
 8005aec:	885b      	ldrh	r3, [r3, #2]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d003      	beq.n	8005afa <PDI_Isr+0xc6>
 8005af2:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <PDI_Isr+0x14c>)
 8005af4:	885b      	ldrh	r3, [r3, #2]
 8005af6:	2b22      	cmp	r3, #34	; 0x22
 8005af8:	d101      	bne.n	8005afe <PDI_Isr+0xca>
/*ECATCHANGE_END(V5.11) ESM7*/
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8005afa:	f7ff fed7 	bl	80058ac <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8005afe:	f7ff fb79 	bl	80051f4 <HW_GetALEventRegister_Isr>
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01d      	beq.n	8005b4c <PDI_Isr+0x118>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <PDI_Isr+0x130>)
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	3301      	adds	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <PDI_Isr+0x130>)
 8005b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <PDI_Isr+0x130>)
 8005b1e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <PDI_Isr+0x14c>)
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8005b24:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <PDI_Isr+0x13c>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4811      	ldr	r0, [pc, #68]	; (8005b74 <PDI_Isr+0x140>)
 8005b2e:	f7ff fb9f 	bl	8005270 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <PDI_Isr+0x13c>)
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <PDI_Isr+0x144>)
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b02      	subs	r3, #2
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2202      	movs	r2, #2
 8005b44:	4619      	mov	r1, r3
 8005b46:	480b      	ldr	r0, [pc, #44]	; (8005b74 <PDI_Isr+0x140>)
 8005b48:	f7ff fb92 	bl	8005270 <HW_EscReadIsr>
    }
    } //if(bEscIntEnabled)
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000b85 	.word	0x20000b85
 8005b58:	20000b66 	.word	0x20000b66
 8005b5c:	20000b7e 	.word	0x20000b7e
 8005b60:	20000b88 	.word	0x20000b88
 8005b64:	20000e68 	.word	0x20000e68
 8005b68:	20000b7a 	.word	0x20000b7a
 8005b6c:	20000b7f 	.word	0x20000b7f
 8005b70:	20000b5c 	.word	0x20000b5c
 8005b74:	20000b54 	.word	0x20000b54
 8005b78:	20000b4e 	.word	0x20000b4e
 8005b7c:	20000b84 	.word	0x20000b84
 8005b80:	20000e24 	.word	0x20000e24

08005b84 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 8005b8a:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <Sync0_Isr+0x11c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8005b90:	4b44      	ldr	r3, [pc, #272]	; (8005ca4 <Sync0_Isr+0x120>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d07f      	beq.n	8005c98 <Sync0_Isr+0x114>
    {

        if ( bEcatInputUpdateRunning )
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <Sync0_Isr+0x124>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <Sync0_Isr+0x28>
        {
            LatchInputSync0Counter++;
 8005ba0:	4b42      	ldr	r3, [pc, #264]	; (8005cac <Sync0_Isr+0x128>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <Sync0_Isr+0x128>)
 8005baa:	801a      	strh	r2, [r3, #0]
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if(u16SmSync0Value > 0)
 8005bac:	4b40      	ldr	r3, [pc, #256]	; (8005cb0 <Sync0_Isr+0x12c>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d04e      	beq.n	8005c52 <Sync0_Isr+0xce>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8005bb4:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <Sync0_Isr+0x130>)
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <Sync0_Isr+0x12c>)
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d923      	bls.n	8005c08 <Sync0_Isr+0x84>
           {
              /*ECATCHANGE_START(V5.11) COE3*/
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8005bc0:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <Sync0_Isr+0x134>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <Sync0_Isr+0x5c>
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <Sync0_Isr+0x138>)
 8005bca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005bcc:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <Sync0_Isr+0x13c>)
 8005bce:	891b      	ldrh	r3, [r3, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d805      	bhi.n	8005be0 <Sync0_Isr+0x5c>
              {
                 /*ECATCHANGE_END(V5.11) COE3*/
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <Sync0_Isr+0x138>)
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	3303      	adds	r3, #3
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <Sync0_Isr+0x138>)
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
              }

/*ECATCHANGE_START(V5.11) COE3*/
           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8005be0:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <Sync0_Isr+0x140>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <Sync0_Isr+0x84>
 8005be8:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <Sync0_Isr+0x134>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <Sync0_Isr+0x84>
 8005bf0:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <Sync0_Isr+0x144>)
 8005bf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <Sync0_Isr+0x13c>)
 8005bf6:	891b      	ldrh	r3, [r3, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d805      	bhi.n	8005c08 <Sync0_Isr+0x84>
           {
/*ECATCHANGE_END(V5.11) COE3*/
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8005bfc:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <Sync0_Isr+0x144>)
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3303      	adds	r3, #3
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <Sync0_Isr+0x144>)
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 8005c08:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <Sync0_Isr+0x134>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11a      	bne.n	8005c46 <Sync0_Isr+0xc2>
 8005c10:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <Sync0_Isr+0x140>)
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d016      	beq.n	8005c46 <Sync0_Isr+0xc2>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8005c18:	f7ff faec 	bl	80051f4 <HW_GetALEventRegister_Isr>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <Sync0_Isr+0xb4>
              {
                 /* no input data was read by the master, increment the sm missed counter*/
                 u16SmSync0Counter++;
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <Sync0_Isr+0x130>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <Sync0_Isr+0x130>)
 8005c34:	801a      	strh	r2, [r3, #0]
           {
 8005c36:	e00c      	b.n	8005c52 <Sync0_Isr+0xce>
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8005c38:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <Sync0_Isr+0x130>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 8005c3e:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <Sync0_Isr+0x144>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
           {
 8005c44:	e005      	b.n	8005c52 <Sync0_Isr+0xce>

              }
           }
           else
           {
              u16SmSync0Counter++;
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <Sync0_Isr+0x130>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <Sync0_Isr+0x130>)
 8005c50:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled
/*ECATCHANGE_END(V5.11) ECAT4*/


        if(!bEscIntEnabled && bEcatOutputUpdateRunning)
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <Sync0_Isr+0x148>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <Sync0_Isr+0xe2>
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <Sync0_Isr+0x14c>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <Sync0_Isr+0xe2>
        {
            /* Output mapping was not done by the PDI ISR */
            PDO_OutputMapping();
 8005c62:	f7ff fe39 	bl	80058d8 <PDO_OutputMapping>
        }

        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8005c66:	f000 f8d9 	bl	8005e1c <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <Sync0_Isr+0x124>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <Sync0_Isr+0x114>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 8005c72:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <Sync0_Isr+0x150>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <Sync0_Isr+0x114>
 8005c7a:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <Sync0_Isr+0x150>)
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <Sync0_Isr+0x128>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d108      	bne.n	8005c98 <Sync0_Isr+0x114>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8005c86:	f7ff fe11 	bl	80058ac <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <Sync0_Isr+0x150>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d102      	bne.n	8005c98 <Sync0_Isr+0x114>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <Sync0_Isr+0x128>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	801a      	strh	r2, [r3, #0]
            }
        }

    }
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000b52 	.word	0x20000b52
 8005ca4:	20000b7e 	.word	0x20000b7e
 8005ca8:	20000b84 	.word	0x20000b84
 8005cac:	20000b58 	.word	0x20000b58
 8005cb0:	20000b76 	.word	0x20000b76
 8005cb4:	20000b88 	.word	0x20000b88
 8005cb8:	20000b4e 	.word	0x20000b4e
 8005cbc:	20000e68 	.word	0x20000e68
 8005cc0:	20000528 	.word	0x20000528
 8005cc4:	20000b74 	.word	0x20000b74
 8005cc8:	20000e24 	.word	0x20000e24
 8005ccc:	20000b85 	.word	0x20000b85
 8005cd0:	20000b7f 	.word	0x20000b7f
 8005cd4:	20000b70 	.word	0x20000b70

08005cd8 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <Sync1_Isr+0x30>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <Sync1_Isr+0x34>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <Sync1_Isr+0x38>)
 8005cec:	885b      	ldrh	r3, [r3, #2]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d105      	bne.n	8005cfe <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <Sync1_Isr+0x3c>)
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8005cfa:	f7ff fdd7 	bl	80058ac <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <Sync1_Isr+0x40>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	801a      	strh	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000b80 	.word	0x20000b80
 8005d0c:	20000b84 	.word	0x20000b84
 8005d10:	20000e24 	.word	0x20000e24
 8005d14:	20000b70 	.word	0x20000b70
 8005d18:	20000b58 	.word	0x20000b58

08005d1c <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	80fb      	strh	r3, [r7, #6]
    SET_EEPROM_PTR
#endif
/*ECATCHANGE_END(V5.11) EEPROM1*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 8005d26:	f001 feb3 	bl	8007a90 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 8005d2a:	f7ff fb75 	bl	8005418 <COE_ObjInit>


    /*Timer initialization*/
    u16BusCycleCntMs = 0;
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <MainInit+0x34>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	801a      	strh	r2, [r3, #0]
    StartTimerCnt = 0;
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <MainInit+0x38>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    bCycleTimeMeasurementStarted = FALSE;
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <MainInit+0x3c>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]

    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <MainInit+0x40>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]

/*Application Init need to be called from the application layer*/
     return Error;
 8005d46:	88fb      	ldrh	r3, [r7, #6]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000b40 	.word	0x20000b40
 8005d54:	20000a98 	.word	0x20000a98
 8005d58:	20000a9c 	.word	0x20000a9c
 8005d5c:	200005d0 	.word	0x200005d0

08005d60 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <MainLoop+0xa0>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d043      	beq.n	8005df6 <MainLoop+0x96>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE,  bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE,  bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8005d6e:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <MainLoop+0xa4>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
        if (
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <MainLoop+0x1e>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8005d76:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <MainLoop+0xa8>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d134      	bne.n	8005de8 <MainLoop+0x88>
          && !bDcSyncActive                                     /* DC-Synchronous */
 8005d7e:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <MainLoop+0xac>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d130      	bne.n	8005de8 <MainLoop+0x88>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 8005d86:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <MainLoop+0xa4>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11e      	bne.n	8005dcc <MainLoop+0x6c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 8005d8e:	f7ff fa27 	bl	80051e0 <HW_GetALEventRegister>
 8005d92:	4603      	mov	r3, r0
 8005d94:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <MainLoop+0x54>
                {
                    /* set the flag for the state machine behaviour */
                    bEcatFirstOutputsReceived = TRUE;
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <MainLoop+0xa8>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <MainLoop+0xb0>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <MainLoop+0x6c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 8005dae:	f7ff fd93 	bl	80058d8 <PDO_OutputMapping>
 8005db2:	e00b      	b.n	8005dcc <MainLoop+0x6c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <MainLoop+0xb4>)
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <MainLoop+0x6c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <MainLoop+0x6c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <MainLoop+0xa8>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
 8005dcc:	2017      	movs	r0, #23
 8005dce:	f7ff fd49 	bl	8005864 <__NVIC_DisableIRQ>
            ECAT_Application();
 8005dd2:	f000 f823 	bl	8005e1c <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <MainLoop+0xb8>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MainLoop+0x82>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 8005dde:	f7ff fd65 	bl	80058ac <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
 8005de2:	2017      	movs	r0, #23
 8005de4:	f7ff fd20 	bl	8005828 <__NVIC_EnableIRQ>

            }
        }
#endif
        /* call EtherCAT functions */
        ECAT_Main();
 8005de8:	f001 fefc 	bl	8007be4 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 8005dec:	f7ff fcb0 	bl	8005750 <COE_Main>
       CheckIfEcatError();
 8005df0:	f001 fdfc 	bl	80079ec <CheckIfEcatError>
 8005df4:	e000      	b.n	8005df8 <MainLoop+0x98>
        return;
 8005df6:	bf00      	nop

}
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200005d0 	.word	0x200005d0
 8005e04:	20000b85 	.word	0x20000b85
 8005e08:	20000b7a 	.word	0x20000b7a
 8005e0c:	20000b7e 	.word	0x20000b7e
 8005e10:	20000b7f 	.word	0x20000b7f
 8005e14:	20000b4e 	.word	0x20000b4e
 8005e18:	20000b84 	.word	0x20000b84

08005e1c <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
    {
        APPL_Application();
 8005e20:	f7fe ff7c 	bl	8004d1c <APPL_Application>
    }
/* PDO Input mapping is called from the specific trigger ISR */
}
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <COE_Init+0x1c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <COE_Init+0x20>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	801a      	strh	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000b44 	.word	0x20000b44
 8005e48:	20000ed4 	.word	0x20000ed4

08005e4c <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	88db      	ldrh	r3, [r3, #6]
 8005e5c:	0b1b      	lsrs	r3, r3, #12
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	2b07      	cmp	r3, #7
 8005e64:	d821      	bhi.n	8005eaa <COE_ServiceInd+0x5e>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <COE_ServiceInd+0x20>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ea5 	.word	0x08005ea5
 8005e88:	08005e99 	.word	0x08005e99
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f004 fb0b 	bl	800a4a8 <SDOS_SdoInd>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
        break;
 8005e96:	e00b      	b.n	8005eb0 <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f004 fe47 	bl	800ab2c <SDOS_SdoInfoInd>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 8005ea2:	e005      	b.n	8005eb0 <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea8:	e002      	b.n	8005eb0 <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8005eaa:	2305      	movs	r3, #5
 8005eac:	73fb      	strb	r3, [r7, #15]
        break;
 8005eae:	bf00      	nop
    }
    return result;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop

08005ebc <COE_ContinueInd>:
*////////////////////////////////////////////////////////////////////////////////////////

/*ECATCHANGE_START(V5.11) COE4*/
UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
/*ECATCHANGE_END(V5.11) COE4*/
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <COE_ContinueInd+0x54>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <COE_ContinueInd+0x54>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f002 fa66 	bl	80083a4 <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <COE_ContinueInd+0x54>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e012      	b.n	8005f06 <COE_ContinueInd+0x4a>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 8005ee0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ee4:	f005 fb70 	bl	800b5c8 <malloc>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
/*ECATCHANGE_START(V5.11) COE4*/
        if (pMbx == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <COE_ContinueInd+0x3a>
        {
            return MBXERR_NOMOREMEMORY;
 8005ef2:	2307      	movs	r3, #7
 8005ef4:	e008      	b.n	8005f08 <COE_ContinueInd+0x4c>
        }
        else
/*ECATCHANGE_END(V5.11) COE4*/
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8005ef6:	220e      	movs	r2, #14
 8005ef8:	4906      	ldr	r1, [pc, #24]	; (8005f14 <COE_ContinueInd+0x58>)
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f005 fb74 	bl	800b5e8 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f004 fe13 	bl	800ab2c <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000b44 	.word	0x20000b44
 8005f14:	20000ee8 	.word	0x20000ee8

08005f18 <__NVIC_EnableIRQ>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	db0b      	blt.n	8005f42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	4907      	ldr	r1, [pc, #28]	; (8005f50 <__NVIC_EnableIRQ+0x38>)
 8005f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2001      	movs	r0, #1
 8005f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	e000e100 	.word	0xe000e100

08005f54 <__NVIC_DisableIRQ>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	db12      	blt.n	8005f8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	f003 021f 	and.w	r2, r3, #31
 8005f6c:	490a      	ldr	r1, [pc, #40]	; (8005f98 <__NVIC_DisableIRQ+0x44>)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2001      	movs	r0, #1
 8005f76:	fa00 f202 	lsl.w	r2, r0, r2
 8005f7a:	3320      	adds	r3, #32
 8005f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f80:	f3bf 8f4f 	dsb	sy
}
 8005f84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f86:	f3bf 8f6f 	isb	sy
}
 8005f8a:	bf00      	nop
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000e100 	.word	0xe000e100

08005f9c <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8005fa6:	f107 030e 	add.w	r3, r7, #14
 8005faa:	2202      	movs	r2, #2
 8005fac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff f929 	bl	8005208 <HW_EscRead>
    
    mask &= intMask;
 8005fb6:	89fa      	ldrh	r2, [r7, #14]
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8005fc0:	2017      	movs	r0, #23
 8005fc2:	f7ff ffc7 	bl	8005f54 <__NVIC_DisableIRQ>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8005fc6:	f107 030e 	add.w	r3, r7, #14
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff f981 	bl	80052d8 <HW_EscWrite>
    ENABLE_ESC_INT();
 8005fd6:	2017      	movs	r0, #23
 8005fd8:	f7ff ff9e 	bl	8005f18 <__NVIC_EnableIRQ>
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8005fee:	f107 030e 	add.w	r3, r7, #14
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff f905 	bl	8005208 <HW_EscRead>
    
    mask |= intMask;
 8005ffe:	89fa      	ldrh	r2, [r7, #14]
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	4313      	orrs	r3, r2
 8006004:	b29b      	uxth	r3, r3
 8006006:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8006008:	2017      	movs	r0, #23
 800600a:	f7ff ffa3 	bl	8005f54 <__NVIC_DisableIRQ>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 800600e:	f107 030e 	add.w	r3, r7, #14
 8006012:	2202      	movs	r2, #2
 8006014:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff f95d 	bl	80052d8 <HW_EscWrite>
    ENABLE_ESC_INT();
 800601e:	2017      	movs	r0, #23
 8006020:	f7ff ff7a 	bl	8005f18 <__NVIC_EnableIRQ>
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
    {
       UINT16 TmpVar = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	80fb      	strh	r3, [r7, #6]
       //read EEPROM loaded information
       HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8006036:	1dbb      	adds	r3, r7, #6
 8006038:	2202      	movs	r2, #2
 800603a:	f240 5102 	movw	r1, #1282	; 0x502
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff f8e2 	bl	8005208 <HW_EscRead>
       TmpVar = SWAPWORD(TmpVar);
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	80fb      	strh	r3, [r7, #6]

       if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc04      	bgt.n	800605c <UpdateEEPROMLoadedState+0x30>
          || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006058:	2b00      	cmp	r3, #0
 800605a:	dd03      	ble.n	8006064 <UpdateEEPROMLoadedState+0x38>
       {
          EepromLoaded = FALSE;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <UpdateEEPROMLoadedState+0x48>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e003      	b.n	800606c <UpdateEEPROMLoadedState+0x40>
       }
       else
       {
          EepromLoaded = TRUE;
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <UpdateEEPROMLoadedState+0x48>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
       }
    }
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200005d4 	.word	0x200005d4

08006078 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006088:	b29b      	uxth	r3, r3
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	b29b      	uxth	r3, r3
 800608e:	2208      	movs	r2, #8
 8006090:	4619      	mov	r1, r3
 8006092:	4804      	ldr	r0, [pc, #16]	; (80060a4 <GetSyncMan+0x2c>)
 8006094:	f7ff f8b8 	bl	8005208 <HW_EscRead>


    return &SyncManInfo;
 8006098:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <GetSyncMan+0x2c>)
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000b68 	.word	0x20000b68

080060a8 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = SM_SETTING_PDI_DISABLE;
 80060b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b6:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f603 0306 	addw	r3, r3, #2054	; 0x806
 80060c4:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 80060c6:	89f9      	ldrh	r1, [r7, #14]
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	2202      	movs	r2, #2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff f902 	bl	80052d8 <HW_EscWrite>
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadWord(smStatus, Offset);
 80060d4:	89f9      	ldrh	r1, [r7, #14]
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	2202      	movs	r2, #2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff f893 	bl	8005208 <HW_EscRead>
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 80060e2:	89bb      	ldrh	r3, [r7, #12]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f2      	beq.n	80060d4 <DisableSyncManChannel+0x2c>
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = 0x0000;
 8006102:	2300      	movs	r3, #0
 8006104:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	b29b      	uxth	r3, r3
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	b29b      	uxth	r3, r3
 800610e:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8006112:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 8006114:	89f9      	ldrh	r1, [r7, #14]
 8006116:	f107 030c 	add.w	r3, r7, #12
 800611a:	2202      	movs	r2, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f8db 	bl	80052d8 <HW_EscWrite>
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadWord(smStatus,Offset);
 8006122:	89f9      	ldrh	r1, [r7, #14]
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	2202      	movs	r2, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff f86c 	bl	8005208 <HW_EscRead>

    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f2      	bne.n	8006122 <EnableSyncManChannel+0x2a>
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	827b      	strh	r3, [r7, #18]

    //Check if max address defines are within the available ESC address range
    if((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 800615e:	4ba9      	ldr	r3, [pc, #676]	; (8006404 <CheckSmSettings+0x2bc>)
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8006166:	4293      	cmp	r3, r2
 8006168:	d911      	bls.n	800618e <CheckSmSettings+0x46>
        ||(nMaxEscAddress < MAX_PD_READ_ADDRESS)
 800616a:	4ba6      	ldr	r3, [pc, #664]	; (8006404 <CheckSmSettings+0x2bc>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8006172:	4293      	cmp	r3, r2
 8006174:	d90b      	bls.n	800618e <CheckSmSettings+0x46>
/*ECATCHANGE_START(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8006176:	4ba3      	ldr	r3, [pc, #652]	; (8006404 <CheckSmSettings+0x2bc>)
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 800617e:	4293      	cmp	r3, r2
 8006180:	d905      	bls.n	800618e <CheckSmSettings+0x46>
/*ECATCHANGE_END(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 8006182:	4ba0      	ldr	r3, [pc, #640]	; (8006404 <CheckSmSettings+0x2bc>)
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 800618a:	4293      	cmp	r3, r2
 800618c:	d801      	bhi.n	8006192 <CheckSmSettings+0x4a>
    {
        /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
        It may be also required to adapt the SM settings in the ESI file*/

        return ALSTATUSCODE_NOVALIDFIRMWARE;
 800618e:	2314      	movs	r3, #20
 8006190:	e1c2      	b.n	8006518 <CheckSmSettings+0x3d0>
    }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8006192:	2000      	movs	r0, #0
 8006194:	f7ff ff70 	bl	8006078 <GetSyncMan>
 8006198:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	885b      	ldrh	r3, [r3, #2]
 800619e:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80061a6:	8abb      	ldrh	r3, [r7, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd01      	ble.n	80061b4 <CheckSmSettings+0x6c>
        return ALSTATUSCODE_INVALIDSMCFG;
 80061b0:	2317      	movs	r3, #23
 80061b2:	e1b1      	b.n	8006518 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 80061b4:	8a7b      	ldrh	r3, [r7, #18]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dd01      	ble.n	80061c2 <CheckSmSettings+0x7a>
        return ALSTATUSCODE_INVALIDSMCFG;
 80061be:	2317      	movs	r3, #23
 80061c0:	e1aa      	b.n	8006518 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88db      	ldrh	r3, [r3, #6]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <CheckSmSettings+0x8c>
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80061ce:	2316      	movs	r3, #22
 80061d0:	75bb      	strb	r3, [r7, #22]
 80061d2:	e02b      	b.n	800622c <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	889b      	ldrh	r3, [r3, #4]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d002      	beq.n	80061e6 <CheckSmSettings+0x9e>
       /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80061e0:	2316      	movs	r3, #22
 80061e2:	75bb      	strb	r3, [r7, #22]
 80061e4:	e022      	b.n	800622c <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	889b      	ldrh	r3, [r3, #4]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <CheckSmSettings+0xb0>
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80061f2:	2316      	movs	r3, #22
 80061f4:	75bb      	strb	r3, [r7, #22]
 80061f6:	e019      	b.n	800622c <CheckSmSettings+0xe4>
    else if ( SMLength < MIN_MBX_SIZE )
 80061f8:	8abb      	ldrh	r3, [r7, #20]
 80061fa:	2b21      	cmp	r3, #33	; 0x21
 80061fc:	d802      	bhi.n	8006204 <CheckSmSettings+0xbc>
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80061fe:	2316      	movs	r3, #22
 8006200:	75bb      	strb	r3, [r7, #22]
 8006202:	e013      	b.n	800622c <CheckSmSettings+0xe4>
    else if ( SMLength > MAX_MBX_SIZE )
 8006204:	8abb      	ldrh	r3, [r7, #20]
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d902      	bls.n	8006212 <CheckSmSettings+0xca>
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800620c:	2316      	movs	r3, #22
 800620e:	75bb      	strb	r3, [r7, #22]
 8006210:	e00c      	b.n	800622c <CheckSmSettings+0xe4>
     else if ( SMAddress < MIN_MBX_WRITE_ADDRESS )
 8006212:	8a7b      	ldrh	r3, [r7, #18]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d202      	bcs.n	8006220 <CheckSmSettings+0xd8>
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800621a:	2316      	movs	r3, #22
 800621c:	75bb      	strb	r3, [r7, #22]
 800621e:	e005      	b.n	800622c <CheckSmSettings+0xe4>
    else if ( SMAddress > MAX_MBX_WRITE_ADDRESS)
 8006220:	8a7b      	ldrh	r3, [r7, #18]
 8006222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006226:	d301      	bcc.n	800622c <CheckSmSettings+0xe4>
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8006228:	2316      	movs	r3, #22
 800622a:	75bb      	strb	r3, [r7, #22]


    if ( result == 0 )
 800622c:	7dbb      	ldrb	r3, [r7, #22]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d14c      	bne.n	80062cc <CheckSmSettings+0x184>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8006232:	2001      	movs	r0, #1
 8006234:	f7ff ff20 	bl	8006078 <GetSyncMan>
 8006238:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	885b      	ldrh	r3, [r3, #2]
 800623e:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 8006246:	8abb      	ldrh	r3, [r7, #20]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd01      	ble.n	8006254 <CheckSmSettings+0x10c>
        return ALSTATUSCODE_INVALIDSMCFG;
 8006250:	2317      	movs	r3, #23
 8006252:	e161      	b.n	8006518 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 8006254:	8a7b      	ldrh	r3, [r7, #18]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd01      	ble.n	8006262 <CheckSmSettings+0x11a>
        return ALSTATUSCODE_INVALIDSMCFG;
 800625e:	2317      	movs	r3, #23
 8006260:	e15a      	b.n	8006518 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

      if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <CheckSmSettings+0x12c>
            /* send mailbox is not enabled */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800626e:	2316      	movs	r3, #22
 8006270:	75bb      	strb	r3, [r7, #22]
 8006272:	e02b      	b.n	80062cc <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	889b      	ldrh	r3, [r3, #4]
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <CheckSmSettings+0x13e>
           /* receive mailbox is not readable by the master*/
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8006280:	2316      	movs	r3, #22
 8006282:	75bb      	strb	r3, [r7, #22]
 8006284:	e022      	b.n	80062cc <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	889b      	ldrh	r3, [r3, #4]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <CheckSmSettings+0x150>
            /* receive mailbox is not in one buffer mode */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8006292:	2316      	movs	r3, #22
 8006294:	75bb      	strb	r3, [r7, #22]
 8006296:	e019      	b.n	80062cc <CheckSmSettings+0x184>
        else if ( SMLength < MIN_MBX_SIZE )
 8006298:	8abb      	ldrh	r3, [r7, #20]
 800629a:	2b21      	cmp	r3, #33	; 0x21
 800629c:	d802      	bhi.n	80062a4 <CheckSmSettings+0x15c>
            /* send mailbox size is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800629e:	2316      	movs	r3, #22
 80062a0:	75bb      	strb	r3, [r7, #22]
 80062a2:	e013      	b.n	80062cc <CheckSmSettings+0x184>
        else if ( SMLength > MAX_MBX_SIZE )
 80062a4:	8abb      	ldrh	r3, [r7, #20]
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062aa:	d902      	bls.n	80062b2 <CheckSmSettings+0x16a>
            /* send mailbox size is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80062ac:	2316      	movs	r3, #22
 80062ae:	75bb      	strb	r3, [r7, #22]
 80062b0:	e00c      	b.n	80062cc <CheckSmSettings+0x184>
         else if ( SMAddress < MIN_MBX_READ_ADDRESS )
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b8:	d202      	bcs.n	80062c0 <CheckSmSettings+0x178>
            /* send mailbox address is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80062ba:	2316      	movs	r3, #22
 80062bc:	75bb      	strb	r3, [r7, #22]
 80062be:	e005      	b.n	80062cc <CheckSmSettings+0x184>
        else if ( SMAddress > MAX_MBX_READ_ADDRESS )
 80062c0:	8a7b      	ldrh	r3, [r7, #18]
 80062c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062c6:	d301      	bcc.n	80062cc <CheckSmSettings+0x184>
            /* send mailbox address is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80062c8:	2316      	movs	r3, #22
 80062ca:	75bb      	strb	r3, [r7, #22]

    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 80062cc:	7dbb      	ldrb	r3, [r7, #22]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d177      	bne.n	80063c2 <CheckSmSettings+0x27a>
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d974      	bls.n	80063c2 <CheckSmSettings+0x27a>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <CheckSmSettings+0x2c0>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80062de:	2003      	movs	r0, #3
 80062e0:	f7ff feca 	bl	8006078 <GetSyncMan>
 80062e4:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	885b      	ldrh	r3, [r3, #2]
 80062ea:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80062f2:	8abb      	ldrh	r3, [r7, #20]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dd01      	ble.n	8006300 <CheckSmSettings+0x1b8>
        return ALSTATUSCODE_INVALIDSMCFG;
 80062fc:	2317      	movs	r3, #23
 80062fe:	e10b      	b.n	8006518 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 8006300:	8a7b      	ldrh	r3, [r7, #18]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd01      	ble.n	800630e <CheckSmSettings+0x1c6>
        return ALSTATUSCODE_INVALIDSMCFG;
 800630a:	2317      	movs	r3, #23
 800630c:	e104      	b.n	8006518 <CheckSmSettings+0x3d0>
/* ECATCHANGE_END(V5.11) HW2*/

        if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <CheckSmSettings+0x1de>
 800631a:	8abb      	ldrh	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <CheckSmSettings+0x1de>
            /* the SM3 size is 0 and the SM3 is active */
            result = SYNCMANCHSETTINGS+1;
 8006320:	2304      	movs	r3, #4
 8006322:	75bb      	strb	r3, [r7, #22]
 8006324:	e048      	b.n	80063b8 <CheckSmSettings+0x270>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	88db      	ldrh	r3, [r3, #6]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d039      	beq.n	80063a6 <CheckSmSettings+0x25e>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
            if ( SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <CheckSmSettings+0x2c4>)
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	8aba      	ldrh	r2, [r7, #20]
 8006338:	429a      	cmp	r2, r3
 800633a:	d106      	bne.n	800634a <CheckSmSettings+0x202>
 800633c:	4b33      	ldr	r3, [pc, #204]	; (800640c <CheckSmSettings+0x2c4>)
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <CheckSmSettings+0x202>
 8006344:	8abb      	ldrh	r3, [r7, #20]
 8006346:	2b44      	cmp	r3, #68	; 0x44
 8006348:	d902      	bls.n	8006350 <CheckSmSettings+0x208>
                /* sizes don't match */
                result = SYNCMANCHSIZE+1;
 800634a:	2303      	movs	r3, #3
 800634c:	75bb      	strb	r3, [r7, #22]
 800634e:	e033      	b.n	80063b8 <CheckSmSettings+0x270>
            else
                /* sizes matches */
            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	889b      	ldrh	r3, [r3, #4]
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b00      	cmp	r3, #0
 800635a:	d121      	bne.n	80063a0 <CheckSmSettings+0x258>
            {
                /* settings match */
                if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_READ_ADDRESS )&&( SMAddress <= MAX_PD_READ_ADDRESS ) )
 800635c:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <CheckSmSettings+0x2c8>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d107      	bne.n	8006374 <CheckSmSettings+0x22c>
 8006364:	8a7b      	ldrh	r3, [r7, #18]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d303      	bcc.n	8006374 <CheckSmSettings+0x22c>
 800636c:	8a7b      	ldrh	r3, [r7, #18]
 800636e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006372:	d308      	bcc.n	8006386 <CheckSmSettings+0x23e>
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
 8006374:	4b26      	ldr	r3, [pc, #152]	; (8006410 <CheckSmSettings+0x2c8>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d00e      	beq.n	800639a <CheckSmSettings+0x252>
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <CheckSmSettings+0x2cc>)
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	8a7a      	ldrh	r2, [r7, #18]
 8006382:	429a      	cmp	r2, r3
 8006384:	d109      	bne.n	800639a <CheckSmSettings+0x252>
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	889b      	ldrh	r3, [r3, #4]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <CheckSmSettings+0x270>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <CheckSmSettings+0x2c0>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8006398:	e00e      	b.n	80063b8 <CheckSmSettings+0x270>
                }
                else
                    /* input address is out of the allowed area or has changed in SAFEOP or OP */
                    result = SYNCMANCHADDRESS+1;
 800639a:	2302      	movs	r3, #2
 800639c:	75bb      	strb	r3, [r7, #22]
 800639e:	e00b      	b.n	80063b8 <CheckSmSettings+0x270>
            }
            else
                /* input settings do not match */
                result = SYNCMANCHSETTINGS+1;
 80063a0:	2304      	movs	r3, #4
 80063a2:	75bb      	strb	r3, [r7, #22]
 80063a4:	e008      	b.n	80063b8 <CheckSmSettings+0x270>
        }
        else if ( SMLength != 0 || nPdInputSize != 0 )
 80063a6:	8abb      	ldrh	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <CheckSmSettings+0x26c>
 80063ac:	4b17      	ldr	r3, [pc, #92]	; (800640c <CheckSmSettings+0x2c4>)
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <CheckSmSettings+0x270>
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 80063b4:	2303      	movs	r3, #3
 80063b6:	75bb      	strb	r3, [r7, #22]



        if ( result != 0 )
 80063b8:	7dbb      	ldrb	r3, [r7, #22]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <CheckSmSettings+0x27a>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 80063be:	231e      	movs	r3, #30
 80063c0:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if ( result == 0 && maxChannel > PROCESS_DATA_OUT )
 80063c2:	7dbb      	ldrb	r3, [r7, #22]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 808f 	bne.w	80064e8 <CheckSmSettings+0x3a0>
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f240 808b 	bls.w	80064e8 <CheckSmSettings+0x3a0>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 80063d2:	2002      	movs	r0, #2
 80063d4:	f7ff fe50 	bl	8006078 <GetSyncMan>
 80063d8:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	885b      	ldrh	r3, [r3, #2]
 80063de:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80063e6:	8abb      	ldrh	r3, [r7, #20]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd01      	ble.n	80063f4 <CheckSmSettings+0x2ac>
        return ALSTATUSCODE_INVALIDSMCFG;
 80063f0:	2317      	movs	r3, #23
 80063f2:	e091      	b.n	8006518 <CheckSmSettings+0x3d0>

    if ((SMAddress & 0x1) > 0)
 80063f4:	8a7b      	ldrh	r3, [r7, #18]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dd0c      	ble.n	8006418 <CheckSmSettings+0x2d0>
        return ALSTATUSCODE_INVALIDSMCFG;
 80063fe:	2317      	movs	r3, #23
 8006400:	e08a      	b.n	8006518 <CheckSmSettings+0x3d0>
 8006402:	bf00      	nop
 8006404:	20000b78 	.word	0x20000b78
 8006408:	20000b48 	.word	0x20000b48
 800640c:	20000b74 	.word	0x20000b74
 8006410:	20000b4d 	.word	0x20000b4d
 8006414:	20000b8c 	.word	0x20000b8c
/* ECATCHANGE_END(V5.11) HW2*/

    if ( (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88db      	ldrh	r3, [r3, #6]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <CheckSmSettings+0x2e8>
 8006424:	8abb      	ldrh	r3, [r7, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <CheckSmSettings+0x2e8>
            /* the SM2 size is 0 and the SM2 is active */
            result = SYNCMANCHSETTINGS+1;
 800642a:	2304      	movs	r3, #4
 800642c:	75bb      	strb	r3, [r7, #22]
 800642e:	e056      	b.n	80064de <CheckSmSettings+0x396>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d047      	beq.n	80064cc <CheckSmSettings+0x384>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 800643c:	4b38      	ldr	r3, [pc, #224]	; (8006520 <CheckSmSettings+0x3d8>)
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	8aba      	ldrh	r2, [r7, #20]
 8006442:	429a      	cmp	r2, r3
 8006444:	d13f      	bne.n	80064c6 <CheckSmSettings+0x37e>
 8006446:	4b36      	ldr	r3, [pc, #216]	; (8006520 <CheckSmSettings+0x3d8>)
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d03b      	beq.n	80064c6 <CheckSmSettings+0x37e>
 800644e:	8abb      	ldrh	r3, [r7, #20]
 8006450:	2b44      	cmp	r3, #68	; 0x44
 8006452:	d838      	bhi.n	80064c6 <CheckSmSettings+0x37e>

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	889b      	ldrh	r3, [r3, #4]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b04      	cmp	r3, #4
 800645e:	d12e      	bne.n	80064be <CheckSmSettings+0x376>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8006460:	4b30      	ldr	r3, [pc, #192]	; (8006524 <CheckSmSettings+0x3dc>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d107      	bne.n	8006478 <CheckSmSettings+0x330>
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d303      	bcc.n	8006478 <CheckSmSettings+0x330>
 8006470:	8a7b      	ldrh	r3, [r7, #18]
 8006472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006476:	d308      	bcc.n	800648a <CheckSmSettings+0x342>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <CheckSmSettings+0x3dc>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d01b      	beq.n	80064b8 <CheckSmSettings+0x370>
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <CheckSmSettings+0x3e0>)
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	8a7a      	ldrh	r2, [r7, #18]
 8006486:	429a      	cmp	r2, r3
 8006488:	d116      	bne.n	80064b8 <CheckSmSettings+0x370>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	889b      	ldrh	r3, [r3, #4]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <CheckSmSettings+0x356>
                            {
                                bWdTrigger = TRUE;
 8006496:	4b25      	ldr	r3, [pc, #148]	; (800652c <CheckSmSettings+0x3e4>)
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	e002      	b.n	80064a4 <CheckSmSettings+0x35c>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 800649e:	4b23      	ldr	r3, [pc, #140]	; (800652c <CheckSmSettings+0x3e4>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	889b      	ldrh	r3, [r3, #4]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <CheckSmSettings+0x37c>
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <CheckSmSettings+0x3e8>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80064b6:	e005      	b.n	80064c4 <CheckSmSettings+0x37c>
                        }
                    }
                    else
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS+1;
 80064b8:	2302      	movs	r3, #2
 80064ba:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80064bc:	e00f      	b.n	80064de <CheckSmSettings+0x396>
                }
                else
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
 80064be:	2304      	movs	r3, #4
 80064c0:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80064c2:	e00c      	b.n	80064de <CheckSmSettings+0x396>
 80064c4:	e00b      	b.n	80064de <CheckSmSettings+0x396>
            }
            else
                /* output sizes don't match */
                result = SYNCMANCHSIZE+1;
 80064c6:	2303      	movs	r3, #3
 80064c8:	75bb      	strb	r3, [r7, #22]
 80064ca:	e008      	b.n	80064de <CheckSmSettings+0x396>
        }
        else if ( SMLength != 0 || nPdOutputSize != 0 )
 80064cc:	8abb      	ldrh	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <CheckSmSettings+0x392>
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <CheckSmSettings+0x3d8>)
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <CheckSmSettings+0x396>
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 80064da:	2303      	movs	r3, #3
 80064dc:	75bb      	strb	r3, [r7, #22]

        if ( result != 0 )
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <CheckSmSettings+0x3a0>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 80064e4:	231d      	movs	r3, #29
 80064e6:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 80064e8:	7dbb      	ldrb	r3, [r7, #22]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d113      	bne.n	8006516 <CheckSmSettings+0x3ce>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	75fb      	strb	r3, [r7, #23]
 80064f2:	e00b      	b.n	800650c <CheckSmSettings+0x3c4>
        {
/*ECATCHANGE_START(V5.11) HW1*/
            pSyncMan = GetSyncMan(i);
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fdbe 	bl	8006078 <GetSyncMan>
 80064fc:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	88da      	ldrh	r2, [r3, #6]
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <CheckSmSettings+0x3ec>)
 8006504:	801a      	strh	r2, [r3, #0]
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	3301      	adds	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <CheckSmSettings+0x3f0>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	7dfa      	ldrb	r2, [r7, #23]
 8006512:	429a      	cmp	r2, r3
 8006514:	d3ee      	bcc.n	80064f4 <CheckSmSettings+0x3ac>
        }
    }
    return result;
 8006516:	7dbb      	ldrb	r3, [r7, #22]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000b4e 	.word	0x20000b4e
 8006524:	20000b4d 	.word	0x20000b4d
 8006528:	20000b5c 	.word	0x20000b5c
 800652c:	20000b86 	.word	0x20000b86
 8006530:	20000b48 	.word	0x20000b48
 8006534:	200005d2 	.word	0x200005d2
 8006538:	20000b8a 	.word	0x20000b8a

0800653c <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT16        dcControl;
    UINT16     wdiv = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	823b      	strh	r3, [r7, #16]
/*ECATCHANGE_START(V5.11) ECAT4*/
    UINT16     wd = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
    UINT32     cycleTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
    BOOL bSubordinatedCycles = FALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    UINT16    nPdInputBuffer = 3;
 8006558:	2303      	movs	r3, #3
 800655a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16    nPdOutputBuffer = 3;
 800655c:	2303      	movs	r3, #3
 800655e:	857b      	strh	r3, [r7, #42]	; 0x2a

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8006560:	2300      	movs	r3, #0
 8006562:	853b      	strh	r3, [r7, #40]	; 0x28
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8006564:	2300      	movs	r3, #0
 8006566:	84fb      	strh	r3, [r7, #38]	; 0x26

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8006568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800656c:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 800656e:	4ba4      	ldr	r3, [pc, #656]	; (8006800 <StartInputHandler+0x2c4>)
 8006570:	899a      	ldrh	r2, [r3, #12]
 8006572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006574:	4013      	ands	r3, r2
 8006576:	84bb      	strh	r3, [r7, #36]	; 0x24
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8006578:	4ba2      	ldr	r3, [pc, #648]	; (8006804 <StartInputHandler+0x2c8>)
 800657a:	899a      	ldrh	r2, [r3, #12]
 800657c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800657e:	4013      	ands	r3, r2
 8006580:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16ALEventMask = 0;
 8006582:	4ba1      	ldr	r3, [pc, #644]	; (8006808 <StartInputHandler+0x2cc>)
 8006584:	2200      	movs	r2, #0
 8006586:	801a      	strh	r2, [r3, #0]

    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8006588:	4ba0      	ldr	r3, [pc, #640]	; (800680c <StartInputHandler+0x2d0>)
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 800658e:	2002      	movs	r0, #2
 8006590:	f7ff fd72 	bl	8006078 <GetSyncMan>
 8006594:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	4b9d      	ldr	r3, [pc, #628]	; (8006810 <StartInputHandler+0x2d4>)
 800659c:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	889b      	ldrh	r3, [r3, #4]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <StartInputHandler+0x72>
    {
       nPdOutputBuffer = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80065ae:	2003      	movs	r0, #3
 80065b0:	f7ff fd62 	bl	8006078 <GetSyncMan>
 80065b4:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	881a      	ldrh	r2, [r3, #0]
 80065ba:	4b96      	ldr	r3, [pc, #600]	; (8006814 <StartInputHandler+0x2d8>)
 80065bc:	801a      	strh	r2, [r3, #0]
    
    /* get the number of input buffer used for calculating the address areas */
    if ( pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	889b      	ldrh	r3, [r3, #4]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <StartInputHandler+0x92>
        nPdInputBuffer = 1;
 80065ca:	2301      	movs	r3, #1
 80065cc:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80065ce:	4b91      	ldr	r3, [pc, #580]	; (8006814 <StartInputHandler+0x2d8>)
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b90      	ldr	r3, [pc, #576]	; (8006818 <StartInputHandler+0x2dc>)
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065dc:	fb03 f301 	mul.w	r3, r3, r1
 80065e0:	4413      	add	r3, r2
 80065e2:	4a8e      	ldr	r2, [pc, #568]	; (800681c <StartInputHandler+0x2e0>)
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	dd0a      	ble.n	8006600 <StartInputHandler+0xc4>
 80065ea:	4b8a      	ldr	r3, [pc, #552]	; (8006814 <StartInputHandler+0x2d8>)
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b8a      	ldr	r3, [pc, #552]	; (800681c <StartInputHandler+0x2e0>)
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	4619      	mov	r1, r3
 80065f6:	4b8a      	ldr	r3, [pc, #552]	; (8006820 <StartInputHandler+0x2e4>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	440b      	add	r3, r1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	db18      	blt.n	8006632 <StartInputHandler+0xf6>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8006600:	4b84      	ldr	r3, [pc, #528]	; (8006814 <StartInputHandler+0x2d8>)
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	4b84      	ldr	r3, [pc, #528]	; (8006818 <StartInputHandler+0x2dc>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800660e:	fb03 f301 	mul.w	r3, r3, r1
 8006612:	4413      	add	r3, r2
 8006614:	4a83      	ldr	r2, [pc, #524]	; (8006824 <StartInputHandler+0x2e8>)
 8006616:	8812      	ldrh	r2, [r2, #0]
 8006618:	4293      	cmp	r3, r2
 800661a:	dd0c      	ble.n	8006636 <StartInputHandler+0xfa>
 800661c:	4b7d      	ldr	r3, [pc, #500]	; (8006814 <StartInputHandler+0x2d8>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	4b80      	ldr	r3, [pc, #512]	; (8006824 <StartInputHandler+0x2e8>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	4b7f      	ldr	r3, [pc, #508]	; (8006828 <StartInputHandler+0x2ec>)
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	440b      	add	r3, r1
 800662e:	429a      	cmp	r2, r3
 8006630:	da01      	bge.n	8006636 <StartInputHandler+0xfa>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8006632:	231e      	movs	r3, #30
 8006634:	e31b      	b.n	8006c6e <StartInputHandler+0x732>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <StartInputHandler+0x2d4>)
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	4b7b      	ldr	r3, [pc, #492]	; (800682c <StartInputHandler+0x2f0>)
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006644:	fb03 f301 	mul.w	r3, r3, r1
 8006648:	4413      	add	r3, r2
 800664a:	4a74      	ldr	r2, [pc, #464]	; (800681c <StartInputHandler+0x2e0>)
 800664c:	8812      	ldrh	r2, [r2, #0]
    if (
 800664e:	4293      	cmp	r3, r2
 8006650:	dd0a      	ble.n	8006668 <StartInputHandler+0x12c>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8006652:	4b6f      	ldr	r3, [pc, #444]	; (8006810 <StartInputHandler+0x2d4>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	4b70      	ldr	r3, [pc, #448]	; (800681c <StartInputHandler+0x2e0>)
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	4619      	mov	r1, r3
 800665e:	4b70      	ldr	r3, [pc, #448]	; (8006820 <StartInputHandler+0x2e4>)
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	440b      	add	r3, r1
 8006664:	429a      	cmp	r2, r3
 8006666:	db31      	blt.n	80066cc <StartInputHandler+0x190>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8006668:	4b69      	ldr	r3, [pc, #420]	; (8006810 <StartInputHandler+0x2d4>)
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	4b6f      	ldr	r3, [pc, #444]	; (800682c <StartInputHandler+0x2f0>)
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006676:	fb03 f301 	mul.w	r3, r3, r1
 800667a:	4413      	add	r3, r2
 800667c:	4a69      	ldr	r2, [pc, #420]	; (8006824 <StartInputHandler+0x2e8>)
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	4293      	cmp	r3, r2
 8006682:	dd0a      	ble.n	800669a <StartInputHandler+0x15e>
 8006684:	4b62      	ldr	r3, [pc, #392]	; (8006810 <StartInputHandler+0x2d4>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	4b66      	ldr	r3, [pc, #408]	; (8006824 <StartInputHandler+0x2e8>)
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	4619      	mov	r1, r3
 8006690:	4b65      	ldr	r3, [pc, #404]	; (8006828 <StartInputHandler+0x2ec>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	440b      	add	r3, r1
 8006696:	429a      	cmp	r2, r3
 8006698:	db18      	blt.n	80066cc <StartInputHandler+0x190>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 800669a:	4b5d      	ldr	r3, [pc, #372]	; (8006810 <StartInputHandler+0x2d4>)
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	4b62      	ldr	r3, [pc, #392]	; (800682c <StartInputHandler+0x2f0>)
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066a8:	fb03 f301 	mul.w	r3, r3, r1
 80066ac:	4413      	add	r3, r2
 80066ae:	4a59      	ldr	r2, [pc, #356]	; (8006814 <StartInputHandler+0x2d8>)
 80066b0:	8812      	ldrh	r2, [r2, #0]
        ||
 80066b2:	4293      	cmp	r3, r2
 80066b4:	dd0c      	ble.n	80066d0 <StartInputHandler+0x194>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80066b6:	4b56      	ldr	r3, [pc, #344]	; (8006810 <StartInputHandler+0x2d4>)
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b55      	ldr	r3, [pc, #340]	; (8006814 <StartInputHandler+0x2d8>)
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	4619      	mov	r1, r3
 80066c2:	4b55      	ldr	r3, [pc, #340]	; (8006818 <StartInputHandler+0x2dc>)
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	440b      	add	r3, r1
 80066c8:	429a      	cmp	r2, r3
 80066ca:	da01      	bge.n	80066d0 <StartInputHandler+0x194>
        )
    {
        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 80066cc:	231d      	movs	r3, #29
 80066ce:	e2ce      	b.n	8006c6e <StartInputHandler+0x732>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read registers 0x980:0x981 (corresponding masks are adapted)*/
    HW_EscReadWord(dcControl, ESC_DC_UNIT_CONTROL_OFFSET);
 80066d0:	f107 0312 	add.w	r3, r7, #18
 80066d4:	2202      	movs	r2, #2
 80066d6:	f44f 6118 	mov.w	r1, #2432	; 0x980
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fd94 	bl	8005208 <HW_EscRead>
    dcControl = SWAPWORD(dcControl);
 80066e0:	8a7b      	ldrh	r3, [r7, #18]
 80066e2:	827b      	strh	r3, [r7, #18]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	2204      	movs	r2, #4
 80066ea:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fd8a 	bl	8005208 <HW_EscRead>
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	60bb      	str	r3, [r7, #8]

    // Cycle time for Sync1
        HW_EscReadDWord(cycleTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	2204      	movs	r2, #4
 80066fc:	f640 11a4 	movw	r1, #2468	; 0x9a4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fd81 	bl	8005208 <HW_EscRead>
        cycleTimeSync1 = SWAPDWORD(cycleTimeSync1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	607b      	str	r3, [r7, #4]


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 800670a:	4b3d      	ldr	r3, [pc, #244]	; (8006800 <StartInputHandler+0x2c4>)
 800670c:	885b      	ldrh	r3, [r3, #2]
 800670e:	853b      	strh	r3, [r7, #40]	; 0x28
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8006710:	4b3c      	ldr	r3, [pc, #240]	; (8006804 <StartInputHandler+0x2c8>)
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 8006716:	8a7b      	ldrh	r3, [r7, #18]
 8006718:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 800671c:	2b00      	cmp	r3, #0
 800671e:	d057      	beq.n	80067d0 <StartInputHandler+0x294>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8006720:	8a7b      	ldrh	r3, [r7, #18]
 8006722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <StartInputHandler+0x1f2>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 800672a:	2330      	movs	r3, #48	; 0x30
 800672c:	e29f      	b.n	8006c6e <StartInputHandler+0x732>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 800672e:	8a7b      	ldrh	r3, [r7, #18]
 8006730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <StartInputHandler+0x20a>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8006738:	8a7b      	ldrh	r3, [r7, #18]
 800673a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <StartInputHandler+0x20a>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8006742:	2330      	movs	r3, #48	; 0x30
 8006744:	e293      	b.n	8006c6e <StartInputHandler+0x732>
        }

        if(u16MinSuppSyncType != 0)
 8006746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <StartInputHandler+0x23c>
        {
/*ECATCHANGE_START(V5.11) ESM2*/
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 800674c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <StartInputHandler+0x224>
 8006756:	8a7b      	ldrh	r3, [r7, #18]
 8006758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <StartInputHandler+0x238>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8006760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <StartInputHandler+0x23c>
 800676a:	8a7b      	ldrh	r3, [r7, #18]
 800676c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <StartInputHandler+0x23c>
/*ECATCHANGE_END(V5.11) ESM2*/
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8006774:	2330      	movs	r3, #48	; 0x30
 8006776:	e27a      	b.n	8006c6e <StartInputHandler+0x732>
    }
        }

        /*Check if Sync0 cycle time is supported*/
        if ( cycleTimeSync0 != 0 && (cycleTimeSync0 < MIN_PD_CYCLE_TIME || cycleTimeSync0 > MAX_PD_CYCLE_TIME) )
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <StartInputHandler+0x256>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a2b      	ldr	r2, [pc, #172]	; (8006830 <StartInputHandler+0x2f4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d903      	bls.n	800678e <StartInputHandler+0x252>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4a2a      	ldr	r2, [pc, #168]	; (8006834 <StartInputHandler+0x2f8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <StartInputHandler+0x256>
            return ALSTATUSCODE_DCSYNC0CYCLETIME;
 800678e:	2336      	movs	r3, #54	; 0x36
 8006790:	e26d      	b.n	8006c6e <StartInputHandler+0x732>


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <StartInputHandler+0x27e>
 800679c:	8a7b      	ldrh	r3, [r7, #18]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <StartInputHandler+0x27e>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
/*ECATCHANGE_START(V5.11) ESM1*/
            if((cycleTimeSync1 > 0) && (cycleTimeSync1 >= cycleTimeSync0))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <StartInputHandler+0x27e>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <StartInputHandler+0x27e>
/*ECATCHANGE_END(V5.11) ESM1*/
            {
                bSubordinatedCycles = TRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 80067ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d006      	beq.n	80067d0 <StartInputHandler+0x294>
 80067c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <StartInputHandler+0x294>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80067cc:	2330      	movs	r3, #48	; 0x30
 80067ce:	e24e      	b.n	8006c6e <StartInputHandler+0x732>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <StartInputHandler+0x2fc>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d04b      	beq.n	8006870 <StartInputHandler+0x334>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 80067d8:	8a7b      	ldrh	r3, [r7, #18]
 80067da:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d12c      	bne.n	800683c <StartInputHandler+0x300>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80067e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d009      	beq.n	80067fc <StartInputHandler+0x2c0>
 80067e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d006      	beq.n	80067fc <StartInputHandler+0x2c0>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 80067ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d003      	beq.n	80067fc <StartInputHandler+0x2c0>
 80067f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	f040 8081 	bne.w	80068fe <StartInputHandler+0x3c2>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80067fc:	2330      	movs	r3, #48	; 0x30
 80067fe:	e236      	b.n	8006c6e <StartInputHandler+0x732>
 8006800:	20000e68 	.word	0x20000e68
 8006804:	20000e24 	.word	0x20000e24
 8006808:	20000b64 	.word	0x20000b64
 800680c:	20000b7a 	.word	0x20000b7a
 8006810:	20000b5c 	.word	0x20000b5c
 8006814:	20000b8c 	.word	0x20000b8c
 8006818:	20000b74 	.word	0x20000b74
 800681c:	20000e12 	.word	0x20000e12
 8006820:	20000e08 	.word	0x20000e08
 8006824:	20000e00 	.word	0x20000e00
 8006828:	20000e1a 	.word	0x20000e1a
 800682c:	20000b4e 	.word	0x20000b4e
 8006830:	0007a11f 	.word	0x0007a11f
 8006834:	c3500000 	.word	0xc3500000
 8006838:	20000eac 	.word	0x20000eac
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 800683c:	8a7b      	ldrh	r3, [r7, #18]
 800683e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <StartInputHandler+0x31a>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8006846:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006848:	2b03      	cmp	r3, #3
 800684a:	d002      	beq.n	8006852 <StartInputHandler+0x316>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 800684c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800684e:	2b03      	cmp	r3, #3
 8006850:	d101      	bne.n	8006856 <StartInputHandler+0x31a>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8006852:	2330      	movs	r3, #48	; 0x30
 8006854:	e20b      	b.n	8006c6e <StartInputHandler+0x732>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8006856:	8a7b      	ldrh	r3, [r7, #18]
 8006858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685c:	2b00      	cmp	r3, #0
 800685e:	d14e      	bne.n	80068fe <StartInputHandler+0x3c2>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 8006860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006862:	2b02      	cmp	r3, #2
 8006864:	d002      	beq.n	800686c <StartInputHandler+0x330>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8006866:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006868:	2b02      	cmp	r3, #2
 800686a:	d148      	bne.n	80068fe <StartInputHandler+0x3c2>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 800686c:	2330      	movs	r3, #48	; 0x30
 800686e:	e1fe      	b.n	8006c6e <StartInputHandler+0x732>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8006870:	8a7b      	ldrh	r3, [r7, #18]
 8006872:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8006876:	2b00      	cmp	r3, #0
 8006878:	d120      	bne.n	80068bc <StartInputHandler+0x380>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 800687a:	4b97      	ldr	r3, [pc, #604]	; (8006ad8 <StartInputHandler+0x59c>)
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <StartInputHandler+0x35e>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8006882:	2301      	movs	r3, #1
 8006884:	853b      	strh	r3, [r7, #40]	; 0x28
                
                if (nPdInputSize > 0)
 8006886:	4b95      	ldr	r3, [pc, #596]	; (8006adc <StartInputHandler+0x5a0>)
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <StartInputHandler+0x358>
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 800688e:	2322      	movs	r3, #34	; 0x22
 8006890:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006892:	e00f      	b.n	80068b4 <StartInputHandler+0x378>
                else
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8006894:	2300      	movs	r3, #0
 8006896:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006898:	e00c      	b.n	80068b4 <StartInputHandler+0x378>
            }
            else if (nPdInputSize > 0)
 800689a:	4b90      	ldr	r3, [pc, #576]	; (8006adc <StartInputHandler+0x5a0>)
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <StartInputHandler+0x370>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 80068a2:	2300      	movs	r3, #0
 80068a4:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 80068a6:	2301      	movs	r3, #1
 80068a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068aa:	e003      	b.n	80068b4 <StartInputHandler+0x378>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 80068ac:	2300      	movs	r3, #0
 80068ae:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80068b0:	2300      	movs	r3, #0
 80068b2:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            sSyncManOutPar.u16GetCycleTime = 1;
 80068b4:	4b8a      	ldr	r3, [pc, #552]	; (8006ae0 <StartInputHandler+0x5a4>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	839a      	strh	r2, [r3, #28]
 80068ba:	e020      	b.n	80068fe <StartInputHandler+0x3c2>

        }
        else
        {
            if (nPdOutputSize > 0)
 80068bc:	4b86      	ldr	r3, [pc, #536]	; (8006ad8 <StartInputHandler+0x59c>)
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <StartInputHandler+0x39c>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 80068c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <StartInputHandler+0x396>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 80068cc:	2303      	movs	r3, #3
 80068ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80068d0:	e004      	b.n	80068dc <StartInputHandler+0x3a0>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 80068d2:	2302      	movs	r3, #2
 80068d4:	853b      	strh	r3, [r7, #40]	; 0x28
 80068d6:	e001      	b.n	80068dc <StartInputHandler+0x3a0>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 80068d8:	2300      	movs	r3, #0
 80068da:	853b      	strh	r3, [r7, #40]	; 0x28
            }


            if (nPdInputSize > 0)
 80068dc:	4b7f      	ldr	r3, [pc, #508]	; (8006adc <StartInputHandler+0x5a0>)
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <StartInputHandler+0x3be>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 80068e4:	8a7b      	ldrh	r3, [r7, #18]
 80068e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <StartInputHandler+0x3b8>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 80068ee:	2303      	movs	r3, #3
 80068f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068f2:	e004      	b.n	80068fe <StartInputHandler+0x3c2>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 80068f4:	2302      	movs	r3, #2
 80068f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068f8:	e001      	b.n	80068fe <StartInputHandler+0x3c2>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 80068fa:	2300      	movs	r3, #0
 80068fc:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80068fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006900:	2b03      	cmp	r3, #3
 8006902:	d106      	bne.n	8006912 <StartInputHandler+0x3d6>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a76      	ldr	r2, [pc, #472]	; (8006ae0 <StartInputHandler+0x5a4>)
 8006908:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4a75      	ldr	r2, [pc, #468]	; (8006ae4 <StartInputHandler+0x5a8>)
 800690e:	6253      	str	r3, [r2, #36]	; 0x24
 8006910:	e00a      	b.n	8006928 <StartInputHandler+0x3ec>
/*ECATCHANGE_END(V5.11) ECAT4*/
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8006912:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006914:	2b02      	cmp	r3, #2
 8006916:	d107      	bne.n	8006928 <StartInputHandler+0x3ec>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a71      	ldr	r2, [pc, #452]	; (8006ae0 <StartInputHandler+0x5a4>)
 800691c:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT16)cycleTimeSync0;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	b29b      	uxth	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	4b6f      	ldr	r3, [pc, #444]	; (8006ae4 <StartInputHandler+0x5a8>)
 8006926:	625a      	str	r2, [r3, #36]	; 0x24
/*ECATCHANGE_END(V5.11) ECAT4*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8006928:	4b6f      	ldr	r3, [pc, #444]	; (8006ae8 <StartInputHandler+0x5ac>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d107      	bne.n	8006940 <StartInputHandler+0x404>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8006930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <StartInputHandler+0x400>
 8006936:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <StartInputHandler+0x404>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 800693c:	2329      	movs	r3, #41	; 0x29
 800693e:	e196      	b.n	8006c6e <StartInputHandler+0x732>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8006940:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <StartInputHandler+0x410>
 8006946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <StartInputHandler+0x416>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 800694c:	4b67      	ldr	r3, [pc, #412]	; (8006aec <StartInputHandler+0x5b0>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8006952:	4b66      	ldr	r3, [pc, #408]	; (8006aec <StartInputHandler+0x5b0>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <StartInputHandler+0x440>
        {
            if(nPdOutputSize > 0)
 800695a:	4b5f      	ldr	r3, [pc, #380]	; (8006ad8 <StartInputHandler+0x59c>)
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <StartInputHandler+0x430>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8006962:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <StartInputHandler+0x5b4>)
 8006964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e007      	b.n	800697c <StartInputHandler+0x440>
            }
            else if(nPdInputSize > 0)
 800696c:	4b5b      	ldr	r3, [pc, #364]	; (8006adc <StartInputHandler+0x5a0>)
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <StartInputHandler+0x440>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8006974:	4b5e      	ldr	r3, [pc, #376]	; (8006af0 <StartInputHandler+0x5b4>)
 8006976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697a:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 800697c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800697e:	2b02      	cmp	r3, #2
 8006980:	d008      	beq.n	8006994 <StartInputHandler+0x458>
 8006982:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006984:	2b03      	cmp	r3, #3
 8006986:	d005      	beq.n	8006994 <StartInputHandler+0x458>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8006988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800698a:	2b02      	cmp	r3, #2
 800698c:	d002      	beq.n	8006994 <StartInputHandler+0x458>
 800698e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006990:	2b03      	cmp	r3, #3
 8006992:	d109      	bne.n	80069a8 <StartInputHandler+0x46c>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8006994:	4b57      	ldr	r3, [pc, #348]	; (8006af4 <StartInputHandler+0x5b8>)
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.11) ECAT4*/
            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 800699a:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <StartInputHandler+0x59c>)
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <StartInputHandler+0x46c>
            {
               u16ALEventMask = 0;
 80069a2:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <StartInputHandler+0x5b4>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	801a      	strh	r2, [r3, #0]
            }
/*ECATCHANGE_END(V5.11) ECAT4*/
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 80069a8:	4a4d      	ldr	r2, [pc, #308]	; (8006ae0 <StartInputHandler+0x5a4>)
 80069aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069ac:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 80069ae:	4a4d      	ldr	r2, [pc, #308]	; (8006ae4 <StartInputHandler+0x5a8>)
 80069b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069b2:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 80069b4:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <StartInputHandler+0x5bc>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 80069ba:	4b50      	ldr	r3, [pc, #320]	; (8006afc <StartInputHandler+0x5c0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 80069c0:	4b4f      	ldr	r3, [pc, #316]	; (8006b00 <StartInputHandler+0x5c4>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 80069c6:	4b4f      	ldr	r3, [pc, #316]	; (8006b04 <StartInputHandler+0x5c8>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 80069cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d134      	bne.n	8006a3e <StartInputHandler+0x502>
    {
        /* get the number of Sync0 event within on SM cycle */
        if(cycleTimeSync1 >= cycleTimeSync0)
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d316      	bcc.n	8006a0a <StartInputHandler+0x4ce>
        {
            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	4b46      	ldr	r3, [pc, #280]	; (8006b00 <StartInputHandler+0x5c4>)
 80069e8:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f2:	fb02 f201 	mul.w	r2, r2, r1
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <StartInputHandler+0x4d4>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 80069fc:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <StartInputHandler+0x5c4>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <StartInputHandler+0x5c4>)
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e002      	b.n	8006a10 <StartInputHandler+0x4d4>
        }
        }
        else
        {
            u16SmSync0Value = 1;
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <StartInputHandler+0x5c4>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	4b37      	ldr	r3, [pc, #220]	; (8006af8 <StartInputHandler+0x5bc>)
 8006a1c:	801a      	strh	r2, [r3, #0]

        if((cycleTimeSync1 % cycleTimeSync0) > 0)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a26:	fb02 f201 	mul.w	r2, r2, r1
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <StartInputHandler+0x51a>
            LatchInputSync0Value++;
 8006a30:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <StartInputHandler+0x5bc>)
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <StartInputHandler+0x5bc>)
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e00b      	b.n	8006a56 <StartInputHandler+0x51a>

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8006a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d102      	bne.n	8006a4a <StartInputHandler+0x50e>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8006a44:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <StartInputHandler+0x5c4>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8006a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d002      	beq.n	8006a56 <StartInputHandler+0x51a>
        {
            LatchInputSync0Value = 1;
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <StartInputHandler+0x5bc>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8006a56:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <StartInputHandler+0x5cc>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	801a      	strh	r2, [r3, #0]
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
/*ECATCHANGE_START(V5.11) ECAT4*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8006a5c:	f107 030e 	add.w	r3, r7, #14
 8006a60:	2202      	movs	r2, #2
 8006a62:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fbce 	bl	8005208 <HW_EscRead>
    wd = SWAPWORD(wd);
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/

    if (nPdOutputSize > 0 &&  wd != 0 )
 8006a70:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <StartInputHandler+0x59c>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d04d      	beq.n	8006b14 <StartInputHandler+0x5d8>
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04a      	beq.n	8006b14 <StartInputHandler+0x5d8>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	2202      	movs	r2, #2
 8006a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fbbd 	bl	8005208 <HW_EscRead>
    wdiv = SWAPWORD(wdiv);
 8006a8e:	8a3b      	ldrh	r3, [r7, #16]
 8006a90:	823b      	strh	r3, [r7, #16]
        if ( wdiv != 0 )
 8006a92:	8a3b      	ldrh	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d019      	beq.n	8006acc <StartInputHandler+0x590>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8006a98:	8a3b      	ldrh	r3, [r7, #16]
 8006a9a:	3302      	adds	r3, #2
 8006a9c:	61fb      	str	r3, [r7, #28]

            d *= wd;
 8006a9e:	89fb      	ldrh	r3, [r7, #14]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	61fb      	str	r3, [r7, #28]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8006ab0:	3327      	adds	r3, #39	; 0x27
 8006ab2:	61fb      	str	r3, [r7, #28]
            d /= 25000;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <StartInputHandler+0x5d0>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	61fb      	str	r3, [r7, #28]
            EcatWdValue = (UINT16) d;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	4b12      	ldr	r3, [pc, #72]	; (8006b10 <StartInputHandler+0x5d4>)
 8006ac8:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8006aca:	e028      	b.n	8006b1e <StartInputHandler+0x5e2>
        }
        else
        {
            wd = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	81fb      	strh	r3, [r7, #14]
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <StartInputHandler+0x5d4>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8006ad6:	e022      	b.n	8006b1e <StartInputHandler+0x5e2>
 8006ad8:	20000b4e 	.word	0x20000b4e
 8006adc:	20000b74 	.word	0x20000b74
 8006ae0:	20000e68 	.word	0x20000e68
 8006ae4:	20000e24 	.word	0x20000e24
 8006ae8:	20000b48 	.word	0x20000b48
 8006aec:	20000b85 	.word	0x20000b85
 8006af0:	20000b64 	.word	0x20000b64
 8006af4:	20000b7e 	.word	0x20000b7e
 8006af8:	20000b70 	.word	0x20000b70
 8006afc:	20000b58 	.word	0x20000b58
 8006b00:	20000b76 	.word	0x20000b76
 8006b04:	20000b88 	.word	0x20000b88
 8006b08:	20000eb0 	.word	0x20000eb0
 8006b0c:	14f8b589 	.word	0x14f8b589
 8006b10:	20000b82 	.word	0x20000b82
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	823b      	strh	r3, [r7, #16]
        EcatWdValue = 0;
 8006b18:	4b57      	ldr	r3, [pc, #348]	; (8006c78 <StartInputHandler+0x73c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8006b1e:	4b56      	ldr	r3, [pc, #344]	; (8006c78 <StartInputHandler+0x73c>)
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <StartInputHandler+0x5f2>
 8006b26:	4b55      	ldr	r3, [pc, #340]	; (8006c7c <StartInputHandler+0x740>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d107      	bne.n	8006b3e <StartInputHandler+0x602>
 8006b2e:	4b52      	ldr	r3, [pc, #328]	; (8006c78 <StartInputHandler+0x73c>)
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <StartInputHandler+0x606>
 8006b36:	4b51      	ldr	r3, [pc, #324]	; (8006c7c <StartInputHandler+0x740>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <StartInputHandler+0x606>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 8006b3e:	231f      	movs	r3, #31
 8006b40:	e095      	b.n	8006c6e <StartInputHandler+0x732>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8006b42:	4b4f      	ldr	r3, [pc, #316]	; (8006c80 <StartInputHandler+0x744>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <StartInputHandler+0x624>
 8006b4a:	4b4e      	ldr	r3, [pc, #312]	; (8006c84 <StartInputHandler+0x748>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d006      	beq.n	8006b60 <StartInputHandler+0x624>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8006b52:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <StartInputHandler+0x74c>)
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	4b4a      	ldr	r3, [pc, #296]	; (8006c88 <StartInputHandler+0x74c>)
 8006b5e:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 8006b60:	4b4a      	ldr	r3, [pc, #296]	; (8006c8c <StartInputHandler+0x750>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8006b66:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <StartInputHandler+0x754>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8006b6c:	4b49      	ldr	r3, [pc, #292]	; (8006c94 <StartInputHandler+0x758>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8006b72:	4b49      	ldr	r3, [pc, #292]	; (8006c98 <StartInputHandler+0x75c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8006b78:	4b48      	ldr	r3, [pc, #288]	; (8006c9c <StartInputHandler+0x760>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8006b7e:	4b48      	ldr	r3, [pc, #288]	; (8006ca0 <StartInputHandler+0x764>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8006b84:	4b47      	ldr	r3, [pc, #284]	; (8006ca4 <StartInputHandler+0x768>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8006b8a:	4b47      	ldr	r3, [pc, #284]	; (8006ca8 <StartInputHandler+0x76c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/
    sSyncManOutPar.u8SyncError = 0;
 8006b92:	4b46      	ldr	r3, [pc, #280]	; (8006cac <StartInputHandler+0x770>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8006b9a:	4b44      	ldr	r3, [pc, #272]	; (8006cac <StartInputHandler+0x770>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 8006ba0:	8a7b      	ldrh	r3, [r7, #18]
 8006ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d050      	beq.n	8006c4c <StartInputHandler+0x710>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <StartInputHandler+0x67c>
        {
            Sync0WdValue = 0;
 8006bb0:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <StartInputHandler+0x750>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	e018      	b.n	8006bea <StartInputHandler+0x6ae>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	4a3c      	ldr	r2, [pc, #240]	; (8006cb0 <StartInputHandler+0x774>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	09db      	lsrs	r3, r3, #7
 8006bc4:	61bb      	str	r3, [r7, #24]
            if(Sync0Cycle < 5)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d803      	bhi.n	8006bd4 <StartInputHandler+0x698>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 8006bcc:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <StartInputHandler+0x750>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e00a      	b.n	8006bea <StartInputHandler+0x6ae>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4a35      	ldr	r2, [pc, #212]	; (8006cb4 <StartInputHandler+0x778>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <StartInputHandler+0x750>)
 8006be8:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 8006bea:	8a7b      	ldrh	r3, [r7, #18]
 8006bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02b      	beq.n	8006c4c <StartInputHandler+0x710>
        {
            if(cycleTimeSync1 < cycleTimeSync0)
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d204      	bcs.n	8006c06 <StartInputHandler+0x6ca>
						{
										/* Sync 1 has the same cycle time than Sync0 (maybe with a shift (cycleTimeSync1 > 0))*/
										Sync1WdValue = Sync0WdValue;
 8006bfc:	4b23      	ldr	r3, [pc, #140]	; (8006c8c <StartInputHandler+0x750>)
 8006bfe:	881a      	ldrh	r2, [r3, #0]
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <StartInputHandler+0x75c>)
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e022      	b.n	8006c4c <StartInputHandler+0x710>
						}
						else
						{
										/* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
										UINT32 Sync1Cycle = cycleTimeSync1/100000;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <StartInputHandler+0x774>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	09db      	lsrs	r3, r3, #7
 8006c12:	617b      	str	r3, [r7, #20]
										if(Sync1Cycle < 5)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d803      	bhi.n	8006c22 <StartInputHandler+0x6e6>
										{
												/*Sync0 cycle less than 500us*/
												Sync1WdValue = 1;
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <StartInputHandler+0x75c>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e00a      	b.n	8006c38 <StartInputHandler+0x6fc>
										}
										else
										{
												Sync1WdValue = (UINT16)(Sync1Cycle*2)/10;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <StartInputHandler+0x778>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	08db      	lsrs	r3, r3, #3
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	4b18      	ldr	r3, [pc, #96]	; (8006c98 <StartInputHandler+0x75c>)
 8006c36:	801a      	strh	r2, [r3, #0]
										}

												/* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
													Sync1WdValue += Sync0WdValue/2;
 8006c38:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <StartInputHandler+0x750>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <StartInputHandler+0x75c>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <StartInputHandler+0x75c>)
 8006c4a:	801a      	strh	r2, [r3, #0]





    if(nPdOutputSize > 0)
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <StartInputHandler+0x748>)
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <StartInputHandler+0x71e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_OUT);
 8006c54:	2002      	movs	r0, #2
 8006c56:	f7ff fa4f 	bl	80060f8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <StartInputHandler+0x77c>)
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <StartInputHandler+0x72c>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_IN);
 8006c62:	2003      	movs	r0, #3
 8006c64:	f7ff fa48 	bl	80060f8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /*write initial input data*/
    PDO_InputMapping();
 8006c68:	f7fe fe20 	bl	80058ac <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3730      	adds	r7, #48	; 0x30
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000b82 	.word	0x20000b82
 8006c7c:	20000b86 	.word	0x20000b86
 8006c80:	20000b85 	.word	0x20000b85
 8006c84:	20000b4e 	.word	0x20000b4e
 8006c88:	20000b64 	.word	0x20000b64
 8006c8c:	20000b5e 	.word	0x20000b5e
 8006c90:	20000b52 	.word	0x20000b52
 8006c94:	20000b80 	.word	0x20000b80
 8006c98:	20000b62 	.word	0x20000b62
 8006c9c:	20000b66 	.word	0x20000b66
 8006ca0:	20000b7b 	.word	0x20000b7b
 8006ca4:	20000b60 	.word	0x20000b60
 8006ca8:	20000e24 	.word	0x20000e24
 8006cac:	20000e68 	.word	0x20000e68
 8006cb0:	0a7c5ac5 	.word	0x0a7c5ac5
 8006cb4:	cccccccd 	.word	0xcccccccd
 8006cb8:	20000b74 	.word	0x20000b74

08006cbc <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) ESM6*/
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8006cc2:	23ff      	movs	r3, #255	; 0xff
 8006cc4:	80fb      	strh	r3, [r7, #6]
/*ECATCHANGE_END(V5.11) ESM6*/
    if(bLocalErrorFlag)
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <StartOutputHandler+0x3c>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <StartOutputHandler+0x40>)
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	e00a      	b.n	8006cea <StartOutputHandler+0x2e>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <StartOutputHandler+0x44>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <StartOutputHandler+0x48>)
 8006cde:	22c8      	movs	r2, #200	; 0xc8
 8006ce0:	801a      	strh	r2, [r3, #0]
        i16WaitForPllRunningCnt = 0;
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <StartOutputHandler+0x4c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	801a      	strh	r2, [r3, #0]
    }


    return result;
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000b56 	.word	0x20000b56
 8006cfc:	20000b50 	.word	0x20000b50
 8006d00:	20000b7e 	.word	0x20000b7e
 8006d04:	20000b60 	.word	0x20000b60
 8006d08:	20000b5a 	.word	0x20000b5a

08006d0c <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <StopOutputHandler+0x1c>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <StopOutputHandler+0x20>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000b7a 	.word	0x20000b7a
 8006d2c:	20000b7f 	.word	0x20000b7f

08006d30 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 8006d36:	4b2c      	ldr	r3, [pc, #176]	; (8006de8 <StopInputHandler+0xb8>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_END(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_OUT);
 8006d3e:	2002      	movs	r0, #2
 8006d40:	f7ff f9b2 	bl	80060a8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8006d44:	4b29      	ldr	r3, [pc, #164]	; (8006dec <StopInputHandler+0xbc>)
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	f7ff f9ab 	bl	80060a8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 8006d52:	230c      	movs	r3, #12
 8006d54:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d5c:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d64:	80fb      	strh	r3, [r7, #6]

/*ECATCHANGE_START(V5.11) HW1*/
    ResetALEventMask( ~(ResetMask) );
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff f915 	bl	8005f9c <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <StopInputHandler+0xc0>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 8006d78:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <StopInputHandler+0xc4>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <StopInputHandler+0xc8>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8006d84:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <StopInputHandler+0xcc>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <StopInputHandler+0xd0>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8006d90:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <StopInputHandler+0xd4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <StopInputHandler+0xd8>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 8006d9c:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <StopInputHandler+0xdc>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <StopInputHandler+0xe0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8006da8:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <StopInputHandler+0xe4>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8006dae:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <StopInputHandler+0xe8>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8006db4:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <StopInputHandler+0xec>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8006dba:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <StopInputHandler+0xf0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8006dc0:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <StopInputHandler+0xf4>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    i16WaitForPllRunningTimeout = 0;
 8006dc8:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <StopInputHandler+0xf8>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <StopInputHandler+0xfc>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <StopInputHandler+0x100>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <StopInputHandler+0x104>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000b4e 	.word	0x20000b4e
 8006dec:	20000b74 	.word	0x20000b74
 8006df0:	20000b7a 	.word	0x20000b7a
 8006df4:	20000b85 	.word	0x20000b85
 8006df8:	20000b7e 	.word	0x20000b7e
 8006dfc:	20000b66 	.word	0x20000b66
 8006e00:	20000b7b 	.word	0x20000b7b
 8006e04:	20000b76 	.word	0x20000b76
 8006e08:	20000b88 	.word	0x20000b88
 8006e0c:	20000b5e 	.word	0x20000b5e
 8006e10:	20000b52 	.word	0x20000b52
 8006e14:	20000b80 	.word	0x20000b80
 8006e18:	20000b62 	.word	0x20000b62
 8006e1c:	20000b70 	.word	0x20000b70
 8006e20:	20000b58 	.word	0x20000b58
 8006e24:	20000e24 	.word	0x20000e24
 8006e28:	20000b60 	.word	0x20000b60
 8006e2c:	20000b86 	.word	0x20000b86
 8006e30:	20000b84 	.word	0x20000b84
 8006e34:	20000eac 	.word	0x20000eac

08006e38 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 8006e3c:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <BackToInitTransition+0x14>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000eac 	.word	0x20000eac

08006e50 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	460a      	mov	r2, r1
 8006e5a:	71fb      	strb	r3, [r7, #7]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8006e60:	88bb      	ldrh	r3, [r7, #4]
 8006e62:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <SetALStatus+0x68>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	79fa      	ldrb	r2, [r7, #7]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d002      	beq.n	8006e74 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <SetALStatus+0x68>)
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8006e74:	88bb      	ldrh	r3, [r7, #4]
 8006e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <SetALStatus+0x42>
    {
        Value = SWAPWORD(Value);
 8006e7e:	89fb      	ldrh	r3, [r7, #14]
 8006e80:	81fb      	strh	r3, [r7, #14]

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8006e82:	f107 030e 	add.w	r3, r7, #14
 8006e86:	2202      	movs	r2, #2
 8006e88:	f44f 719a 	mov.w	r1, #308	; 0x134
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe fa23 	bl	80052d8 <HW_EscWrite>
    }

    Value = nAlStatus;
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <SetALStatus+0x68>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
 8006e9a:	89fb      	ldrh	r3, [r7, #14]
 8006e9c:	81fb      	strh	r3, [r7, #14]
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 8006e9e:	f107 030e 	add.w	r3, r7, #14
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fa15 	bl	80052d8 <HW_EscWrite>

}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000b4d 	.word	0x20000b4d

08006ebc <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8006ed4:	4bdf      	ldr	r3, [pc, #892]	; (8007254 <AL_ControlInd+0x398>)
 8006ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eda:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 8006edc:	4bde      	ldr	r3, [pc, #888]	; (8007258 <AL_ControlInd+0x39c>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 8006ef0:	4bda      	ldr	r3, [pc, #872]	; (800725c <AL_ControlInd+0x3a0>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	4bd8      	ldr	r3, [pc, #864]	; (800725c <AL_ControlInd+0x3a0>)
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e012      	b.n	8006f26 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ( (nAlStatus & STATE_CHANGE)
 8006f00:	4bd6      	ldr	r3, [pc, #856]	; (800725c <AL_ControlInd+0x3a0>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <AL_ControlInd+0x5c>
    // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
    //               (the error was acknowledged with the same state before independent of the acknowledge flag)
    /*Error Acknowledge with 0xX1 is allowed*/
           && (alControl & STATE_MASK) != STATE_INIT )
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	f040 8374 	bne.w	8007600 <AL_ControlInd+0x744>
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
    else
    {
        nAlStatus &= STATE_MASK;
 8006f18:	4bd0      	ldr	r3, [pc, #832]	; (800725c <AL_ControlInd+0x3a0>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4bce      	ldr	r3, [pc, #824]	; (800725c <AL_ControlInd+0x3a0>)
 8006f24:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 8006f2e:	4bcb      	ldr	r3, [pc, #812]	; (800725c <AL_ControlInd+0x3a0>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8006f34:	7b3b      	ldrb	r3, [r7, #12]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 8006f3a:	7b3a      	ldrb	r2, [r7, #12]
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	4413      	add	r3, r2
 8006f40:	733b      	strb	r3, [r7, #12]


    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8006f42:	7b3b      	ldrb	r3, [r7, #12]
 8006f44:	2b88      	cmp	r3, #136	; 0x88
 8006f46:	d074      	beq.n	8007032 <AL_ControlInd+0x176>
 8006f48:	2b88      	cmp	r3, #136	; 0x88
 8006f4a:	dc7b      	bgt.n	8007044 <AL_ControlInd+0x188>
 8006f4c:	2b84      	cmp	r3, #132	; 0x84
 8006f4e:	d070      	beq.n	8007032 <AL_ControlInd+0x176>
 8006f50:	2b84      	cmp	r3, #132	; 0x84
 8006f52:	dc77      	bgt.n	8007044 <AL_ControlInd+0x188>
 8006f54:	2b82      	cmp	r3, #130	; 0x82
 8006f56:	d05d      	beq.n	8007014 <AL_ControlInd+0x158>
 8006f58:	2b82      	cmp	r3, #130	; 0x82
 8006f5a:	dc73      	bgt.n	8007044 <AL_ControlInd+0x188>
 8006f5c:	2b12      	cmp	r3, #18
 8006f5e:	d059      	beq.n	8007014 <AL_ControlInd+0x158>
 8006f60:	2b12      	cmp	r3, #18
 8006f62:	db6f      	blt.n	8007044 <AL_ControlInd+0x188>
 8006f64:	2b48      	cmp	r3, #72	; 0x48
 8006f66:	dc6d      	bgt.n	8007044 <AL_ControlInd+0x188>
 8006f68:	2b22      	cmp	r3, #34	; 0x22
 8006f6a:	db6b      	blt.n	8007044 <AL_ControlInd+0x188>
 8006f6c:	3b22      	subs	r3, #34	; 0x22
 8006f6e:	2b26      	cmp	r3, #38	; 0x26
 8006f70:	d868      	bhi.n	8007044 <AL_ControlInd+0x188>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <AL_ControlInd+0xbc>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08007015 	.word	0x08007015
 8006f7c:	08007045 	.word	0x08007045
 8006f80:	08007021 	.word	0x08007021
 8006f84:	08007045 	.word	0x08007045
 8006f88:	08007045 	.word	0x08007045
 8006f8c:	08007045 	.word	0x08007045
 8006f90:	08007045 	.word	0x08007045
 8006f94:	08007045 	.word	0x08007045
 8006f98:	08007045 	.word	0x08007045
 8006f9c:	08007045 	.word	0x08007045
 8006fa0:	08007045 	.word	0x08007045
 8006fa4:	08007045 	.word	0x08007045
 8006fa8:	08007045 	.word	0x08007045
 8006fac:	08007045 	.word	0x08007045
 8006fb0:	08007045 	.word	0x08007045
 8006fb4:	08007045 	.word	0x08007045
 8006fb8:	08007045 	.word	0x08007045
 8006fbc:	08007045 	.word	0x08007045
 8006fc0:	08007045 	.word	0x08007045
 8006fc4:	08007045 	.word	0x08007045
 8006fc8:	08007045 	.word	0x08007045
 8006fcc:	08007045 	.word	0x08007045
 8006fd0:	08007045 	.word	0x08007045
 8006fd4:	08007045 	.word	0x08007045
 8006fd8:	08007045 	.word	0x08007045
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	08007045 	.word	0x08007045
 8006fe4:	08007045 	.word	0x08007045
 8006fe8:	08007045 	.word	0x08007045
 8006fec:	08007045 	.word	0x08007045
 8006ff0:	08007045 	.word	0x08007045
 8006ff4:	08007045 	.word	0x08007045
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	08007045 	.word	0x08007045
 8007000:	08007033 	.word	0x08007033
 8007004:	08007045 	.word	0x08007045
 8007008:	08007045 	.word	0x08007045
 800700c:	08007045 	.word	0x08007045
 8007010:	08007033 	.word	0x08007033
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 8007014:	2002      	movs	r0, #2
 8007016:	f7ff f897 	bl	8006148 <CheckSmSettings>
 800701a:	4603      	mov	r3, r0
 800701c:	81fb      	strh	r3, [r7, #14]
        break;
 800701e:	e011      	b.n	8007044 <AL_ControlInd+0x188>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8007020:	498f      	ldr	r1, [pc, #572]	; (8007260 <AL_ControlInd+0x3a4>)
 8007022:	4890      	ldr	r0, [pc, #576]	; (8007264 <AL_ControlInd+0x3a8>)
 8007024:	f7fd fd54 	bl	8004ad0 <APPL_GenerateMapping>
 8007028:	4603      	mov	r3, r0
 800702a:	81fb      	strh	r3, [r7, #14]

        if (result != 0)
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <AL_ControlInd+0x186>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 8007032:	4b8d      	ldr	r3, [pc, #564]	; (8007268 <AL_ControlInd+0x3ac>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f886 	bl	8006148 <CheckSmSettings>
 800703c:	4603      	mov	r3, r0
 800703e:	81fb      	strh	r3, [r7, #14]
        break;
 8007040:	e000      	b.n	8007044 <AL_ControlInd+0x188>
            break;
 8007042:	bf00      	nop
    }

    if ( result == 0 )
 8007044:	89fb      	ldrh	r3, [r7, #14]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 8203 	bne.w	8007452 <AL_ControlInd+0x596>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 800704c:	4b87      	ldr	r3, [pc, #540]	; (800726c <AL_ControlInd+0x3b0>)
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8007052:	7b3b      	ldrb	r3, [r7, #12]
 8007054:	3b11      	subs	r3, #17
 8007056:	2b77      	cmp	r3, #119	; 0x77
 8007058:	f200 81f8 	bhi.w	800744c <AL_ControlInd+0x590>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <AL_ControlInd+0x1a8>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	080073fb 	.word	0x080073fb
 8007068:	08007271 	.word	0x08007271
 800706c:	08007245 	.word	0x08007245
 8007070:	08007447 	.word	0x08007447
 8007074:	0800744d 	.word	0x0800744d
 8007078:	0800744d 	.word	0x0800744d
 800707c:	0800744d 	.word	0x0800744d
 8007080:	08007447 	.word	0x08007447
 8007084:	0800744d 	.word	0x0800744d
 8007088:	0800744d 	.word	0x0800744d
 800708c:	0800744d 	.word	0x0800744d
 8007090:	0800744d 	.word	0x0800744d
 8007094:	0800744d 	.word	0x0800744d
 8007098:	0800744d 	.word	0x0800744d
 800709c:	0800744d 	.word	0x0800744d
 80070a0:	0800744d 	.word	0x0800744d
 80070a4:	080073e9 	.word	0x080073e9
 80070a8:	080073ff 	.word	0x080073ff
 80070ac:	08007447 	.word	0x08007447
 80070b0:	080072d3 	.word	0x080072d3
 80070b4:	0800744d 	.word	0x0800744d
 80070b8:	0800744d 	.word	0x0800744d
 80070bc:	0800744d 	.word	0x0800744d
 80070c0:	08007447 	.word	0x08007447
 80070c4:	0800744d 	.word	0x0800744d
 80070c8:	0800744d 	.word	0x0800744d
 80070cc:	0800744d 	.word	0x0800744d
 80070d0:	0800744d 	.word	0x0800744d
 80070d4:	0800744d 	.word	0x0800744d
 80070d8:	0800744d 	.word	0x0800744d
 80070dc:	0800744d 	.word	0x0800744d
 80070e0:	0800744d 	.word	0x0800744d
 80070e4:	0800724b 	.word	0x0800724b
 80070e8:	08007447 	.word	0x08007447
 80070ec:	0800744d 	.word	0x0800744d
 80070f0:	08007447 	.word	0x08007447
 80070f4:	0800744d 	.word	0x0800744d
 80070f8:	0800744d 	.word	0x0800744d
 80070fc:	0800744d 	.word	0x0800744d
 8007100:	08007447 	.word	0x08007447
 8007104:	0800744d 	.word	0x0800744d
 8007108:	0800744d 	.word	0x0800744d
 800710c:	0800744d 	.word	0x0800744d
 8007110:	0800744d 	.word	0x0800744d
 8007114:	0800744d 	.word	0x0800744d
 8007118:	0800744d 	.word	0x0800744d
 800711c:	0800744d 	.word	0x0800744d
 8007120:	0800744d 	.word	0x0800744d
 8007124:	080073cd 	.word	0x080073cd
 8007128:	080073a1 	.word	0x080073a1
 800712c:	08007447 	.word	0x08007447
 8007130:	080073ff 	.word	0x080073ff
 8007134:	0800744d 	.word	0x0800744d
 8007138:	0800744d 	.word	0x0800744d
 800713c:	0800744d 	.word	0x0800744d
 8007140:	08007329 	.word	0x08007329
 8007144:	0800744d 	.word	0x0800744d
 8007148:	0800744d 	.word	0x0800744d
 800714c:	0800744d 	.word	0x0800744d
 8007150:	0800744d 	.word	0x0800744d
 8007154:	0800744d 	.word	0x0800744d
 8007158:	0800744d 	.word	0x0800744d
 800715c:	0800744d 	.word	0x0800744d
 8007160:	0800744d 	.word	0x0800744d
 8007164:	0800744d 	.word	0x0800744d
 8007168:	0800744d 	.word	0x0800744d
 800716c:	0800744d 	.word	0x0800744d
 8007170:	0800744d 	.word	0x0800744d
 8007174:	0800744d 	.word	0x0800744d
 8007178:	0800744d 	.word	0x0800744d
 800717c:	0800744d 	.word	0x0800744d
 8007180:	0800744d 	.word	0x0800744d
 8007184:	0800744d 	.word	0x0800744d
 8007188:	0800744d 	.word	0x0800744d
 800718c:	0800744d 	.word	0x0800744d
 8007190:	0800744d 	.word	0x0800744d
 8007194:	0800744d 	.word	0x0800744d
 8007198:	0800744d 	.word	0x0800744d
 800719c:	0800744d 	.word	0x0800744d
 80071a0:	0800744d 	.word	0x0800744d
 80071a4:	0800744d 	.word	0x0800744d
 80071a8:	0800744d 	.word	0x0800744d
 80071ac:	0800744d 	.word	0x0800744d
 80071b0:	0800744d 	.word	0x0800744d
 80071b4:	0800744d 	.word	0x0800744d
 80071b8:	0800744d 	.word	0x0800744d
 80071bc:	0800744d 	.word	0x0800744d
 80071c0:	0800744d 	.word	0x0800744d
 80071c4:	0800744d 	.word	0x0800744d
 80071c8:	0800744d 	.word	0x0800744d
 80071cc:	0800744d 	.word	0x0800744d
 80071d0:	0800744d 	.word	0x0800744d
 80071d4:	0800744d 	.word	0x0800744d
 80071d8:	0800744d 	.word	0x0800744d
 80071dc:	0800744d 	.word	0x0800744d
 80071e0:	0800744d 	.word	0x0800744d
 80071e4:	0800744d 	.word	0x0800744d
 80071e8:	0800744d 	.word	0x0800744d
 80071ec:	0800744d 	.word	0x0800744d
 80071f0:	0800744d 	.word	0x0800744d
 80071f4:	0800744d 	.word	0x0800744d
 80071f8:	0800744d 	.word	0x0800744d
 80071fc:	0800744d 	.word	0x0800744d
 8007200:	0800744d 	.word	0x0800744d
 8007204:	0800744d 	.word	0x0800744d
 8007208:	0800744d 	.word	0x0800744d
 800720c:	0800744d 	.word	0x0800744d
 8007210:	0800744d 	.word	0x0800744d
 8007214:	0800744d 	.word	0x0800744d
 8007218:	0800744d 	.word	0x0800744d
 800721c:	0800744d 	.word	0x0800744d
 8007220:	0800744d 	.word	0x0800744d
 8007224:	080073b1 	.word	0x080073b1
 8007228:	08007383 	.word	0x08007383
 800722c:	08007447 	.word	0x08007447
 8007230:	08007373 	.word	0x08007373
 8007234:	0800744d 	.word	0x0800744d
 8007238:	0800744d 	.word	0x0800744d
 800723c:	0800744d 	.word	0x0800744d
 8007240:	080073ff 	.word	0x080073ff
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8007244:	2313      	movs	r3, #19
 8007246:	81fb      	strh	r3, [r7, #14]
            break;
 8007248:	e130      	b.n	80074ac <AL_ControlInd+0x5f0>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 800724a:	2313      	movs	r3, #19
 800724c:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 800724e:	f7ff fdf3 	bl	8006e38 <BackToInitTransition>

            break;
 8007252:	e12b      	b.n	80074ac <AL_ControlInd+0x5f0>
 8007254:	20000b7c 	.word	0x20000b7c
 8007258:	20000b4c 	.word	0x20000b4c
 800725c:	20000b4d 	.word	0x20000b4d
 8007260:	20000b4e 	.word	0x20000b4e
 8007264:	20000b74 	.word	0x20000b74
 8007268:	20000b8a 	.word	0x20000b8a
 800726c:	20000b4a 	.word	0x20000b4a
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8007270:	f7fe fedc 	bl	800602c <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8007274:	4ba5      	ldr	r3, [pc, #660]	; (800750c <AL_ControlInd+0x650>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <AL_ControlInd+0x3c4>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 800727c:	2351      	movs	r3, #81	; 0x51
 800727e:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8007280:	89fb      	ldrh	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 8107 	bne.w	8007496 <AL_ControlInd+0x5da>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8007288:	f000 fe52 	bl	8007f30 <MBX_StartMailboxHandler>
 800728c:	4603      	mov	r3, r0
 800728e:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8007290:	89fb      	ldrh	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10c      	bne.n	80072b0 <AL_ControlInd+0x3f4>
            {
                bApplEsmPending = FALSE;
 8007296:	4b9e      	ldr	r3, [pc, #632]	; (8007510 <AL_ControlInd+0x654>)
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 800729c:	f7fd fb73 	bl	8004986 <APPL_StartMailboxHandler>
 80072a0:	4603      	mov	r3, r0
 80072a2:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <AL_ControlInd+0x3f4>
                {
                    bMbxRunning = TRUE;
 80072aa:	4b9a      	ldr	r3, [pc, #616]	; (8007514 <AL_ControlInd+0x658>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80ef 	beq.w	8007496 <AL_ControlInd+0x5da>
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	2bff      	cmp	r3, #255	; 0xff
 80072bc:	f000 80eb 	beq.w	8007496 <AL_ControlInd+0x5da>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                if(!bApplEsmPending)
 80072c0:	4b93      	ldr	r3, [pc, #588]	; (8007510 <AL_ControlInd+0x654>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <AL_ControlInd+0x410>
                    APPL_StopMailboxHandler();
 80072c8:	f7fd fb65 	bl	8004996 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 80072cc:	f000 fea6 	bl	800801c <MBX_StopMailboxHandler>
            }

            }
            break;
 80072d0:	e0e1      	b.n	8007496 <AL_ControlInd+0x5da>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 80072d2:	f7ff f933 	bl	800653c <StartInputHandler>
 80072d6:	4603      	mov	r3, r0
 80072d8:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 80072da:	89fb      	ldrh	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d112      	bne.n	8007306 <AL_ControlInd+0x44a>
            {
                bApplEsmPending = FALSE;
 80072e0:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <AL_ControlInd+0x654>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 80072e6:	488c      	ldr	r0, [pc, #560]	; (8007518 <AL_ControlInd+0x65c>)
 80072e8:	f7fd fb5d 	bl	80049a6 <APPL_StartInputHandler>
 80072ec:	4603      	mov	r3, r0
 80072ee:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <AL_ControlInd+0x44a>
                {
                    /* initialize the AL Event Mask register (0x204) */
/*ECATCHANGE_START(V5.11) HW1*/
                    SetALEventMask( u16ALEventMask );
 80072f6:	4b88      	ldr	r3, [pc, #544]	; (8007518 <AL_ControlInd+0x65c>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fe72 	bl	8005fe4 <SetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/

                    bEcatInputUpdateRunning = TRUE;
 8007300:	4b86      	ldr	r3, [pc, #536]	; (800751c <AL_ControlInd+0x660>)
 8007302:	2201      	movs	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 8007306:	89fb      	ldrh	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80c6 	beq.w	800749a <AL_ControlInd+0x5de>
 800730e:	89fb      	ldrh	r3, [r7, #14]
 8007310:	2bff      	cmp	r3, #255	; 0xff
 8007312:	f000 80c2 	beq.w	800749a <AL_ControlInd+0x5de>
            {
                if(!bApplEsmPending)
 8007316:	4b7e      	ldr	r3, [pc, #504]	; (8007510 <AL_ControlInd+0x654>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <AL_ControlInd+0x466>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 800731e:	f7fd fb4d 	bl	80049bc <APPL_StopInputHandler>
                }

                StopInputHandler();
 8007322:	f7ff fd05 	bl	8006d30 <StopInputHandler>
            }
            break;
 8007326:	e0b8      	b.n	800749a <AL_ControlInd+0x5de>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8007328:	f7ff fcc8 	bl	8006cbc <StartOutputHandler>
 800732c:	4603      	mov	r3, r0
 800732e:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10c      	bne.n	8007350 <AL_ControlInd+0x494>
            {
                bApplEsmPending = FALSE;
 8007336:	4b76      	ldr	r3, [pc, #472]	; (8007510 <AL_ControlInd+0x654>)
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 800733c:	f7fd fb46 	bl	80049cc <APPL_StartOutputHandler>
 8007340:	4603      	mov	r3, r0
 8007342:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <AL_ControlInd+0x494>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 800734a:	4b75      	ldr	r3, [pc, #468]	; (8007520 <AL_ControlInd+0x664>)
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8007350:	89fb      	ldrh	r3, [r7, #14]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 80a3 	beq.w	800749e <AL_ControlInd+0x5e2>
 8007358:	89fb      	ldrh	r3, [r7, #14]
 800735a:	2bff      	cmp	r3, #255	; 0xff
 800735c:	f000 809f 	beq.w	800749e <AL_ControlInd+0x5e2>
            {
                if(!bApplEsmPending)
 8007360:	4b6b      	ldr	r3, [pc, #428]	; (8007510 <AL_ControlInd+0x654>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <AL_ControlInd+0x4b0>
                    APPL_StopOutputHandler();
 8007368:	f7fd fb38 	bl	80049dc <APPL_StopOutputHandler>

                StopOutputHandler();
 800736c:	f7ff fcce 	bl	8006d0c <StopOutputHandler>
            }

            break;
 8007370:	e095      	b.n	800749e <AL_ControlInd+0x5e2>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8007372:	f7fd fb33 	bl	80049dc <APPL_StopOutputHandler>

            StopOutputHandler();
 8007376:	f7ff fcc9 	bl	8006d0c <StopOutputHandler>

            bApplEsmPending = FALSE;
 800737a:	4b65      	ldr	r3, [pc, #404]	; (8007510 <AL_ControlInd+0x654>)
 800737c:	2200      	movs	r2, #0
 800737e:	701a      	strb	r2, [r3, #0]

            break;
 8007380:	e094      	b.n	80074ac <AL_ControlInd+0x5f0>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8007382:	f7fd fb2b 	bl	80049dc <APPL_StopOutputHandler>
 8007386:	4603      	mov	r3, r0
 8007388:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 800738a:	f7ff fcbf 	bl	8006d0c <StopOutputHandler>

            bApplEsmPending = FALSE;
 800738e:	4b60      	ldr	r3, [pc, #384]	; (8007510 <AL_ControlInd+0x654>)
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 8083 	bne.w	80074a2 <AL_ControlInd+0x5e6>
                break;

            stateTrans = SAFEOP_2_PREOP;
 800739c:	2342      	movs	r3, #66	; 0x42
 800739e:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 80073a0:	f7fd fb0c 	bl	80049bc <APPL_StopInputHandler>
           
            StopInputHandler();
 80073a4:	f7ff fcc4 	bl	8006d30 <StopInputHandler>

            bApplEsmPending = FALSE;
 80073a8:	4b59      	ldr	r3, [pc, #356]	; (8007510 <AL_ControlInd+0x654>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]

            break;
 80073ae:	e07d      	b.n	80074ac <AL_ControlInd+0x5f0>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 80073b0:	f7fd fb14 	bl	80049dc <APPL_StopOutputHandler>
 80073b4:	4603      	mov	r3, r0
 80073b6:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80073b8:	f7ff fca8 	bl	8006d0c <StopOutputHandler>

            bApplEsmPending = FALSE;
 80073bc:	4b54      	ldr	r3, [pc, #336]	; (8007510 <AL_ControlInd+0x654>)
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80073c2:	89fb      	ldrh	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d16e      	bne.n	80074a6 <AL_ControlInd+0x5ea>
                break;
            
            stateTrans = SAFEOP_2_INIT;
 80073c8:	2341      	movs	r3, #65	; 0x41
 80073ca:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 80073cc:	f7fd faf6 	bl	80049bc <APPL_StopInputHandler>
 80073d0:	4603      	mov	r3, r0
 80073d2:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 80073d4:	f7ff fcac 	bl	8006d30 <StopInputHandler>

            bApplEsmPending = FALSE;
 80073d8:	4b4d      	ldr	r3, [pc, #308]	; (8007510 <AL_ControlInd+0x654>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80073de:	89fb      	ldrh	r3, [r7, #14]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d162      	bne.n	80074aa <AL_ControlInd+0x5ee>
                break;
            stateTrans = PREOP_2_INIT;
 80073e4:	2321      	movs	r3, #33	; 0x21
 80073e6:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 80073e8:	f000 fe18 	bl	800801c <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 80073ec:	f7fd fad3 	bl	8004996 <APPL_StopMailboxHandler>
 80073f0:	4603      	mov	r3, r0
 80073f2:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 80073f4:	f7ff fd20 	bl	8006e38 <BackToInitTransition>
            break;
 80073f8:	e058      	b.n	80074ac <AL_ControlInd+0x5f0>

        case INIT_2_INIT:
            BackToInitTransition();
 80073fa:	f7ff fd1d 	bl	8006e38 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 80073fe:	7b7b      	ldrb	r3, [r7, #13]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <AL_ControlInd+0x552>
                APPL_AckErrorInd(stateTrans);
 8007404:	7b3b      	ldrb	r3, [r7, #12]
 8007406:	b29b      	uxth	r3, r3
 8007408:	4618      	mov	r0, r3
 800740a:	f7fd fab1 	bl	8004970 <APPL_AckErrorInd>

            if(!bLocalErrorFlag)
 800740e:	4b45      	ldr	r3, [pc, #276]	; (8007524 <AL_ControlInd+0x668>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d114      	bne.n	8007440 <AL_ControlInd+0x584>
            {
                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8007416:	4b44      	ldr	r3, [pc, #272]	; (8007528 <AL_ControlInd+0x66c>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 030c 	and.w	r3, r3, #12
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <AL_ControlInd+0x584>
                {
                    if(nPdOutputSize > 0)
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <AL_ControlInd+0x670>)
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <AL_ControlInd+0x576>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 800742a:	2002      	movs	r0, #2
 800742c:	f7fe fe64 	bl	80060f8 <EnableSyncManChannel>
 8007430:	e006      	b.n	8007440 <AL_ControlInd+0x584>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                    else 
                    if(nPdInputSize > 0)
 8007432:	4b3f      	ldr	r3, [pc, #252]	; (8007530 <AL_ControlInd+0x674>)
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <AL_ControlInd+0x584>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_IN);
 800743a:	2003      	movs	r0, #3
 800743c:	f7fe fe5c 	bl	80060f8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                }
            }
            result = NOERROR_NOSTATECHANGE;
 8007440:	23fe      	movs	r3, #254	; 0xfe
 8007442:	81fb      	strh	r3, [r7, #14]
            break;
 8007444:	e032      	b.n	80074ac <AL_ControlInd+0x5f0>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8007446:	2311      	movs	r3, #17
 8007448:	81fb      	strh	r3, [r7, #14]
            break;
 800744a:	e02f      	b.n	80074ac <AL_ControlInd+0x5f0>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 800744c:	2312      	movs	r3, #18
 800744e:	81fb      	strh	r3, [r7, #14]
            break;
 8007450:	e02c      	b.n	80074ac <AL_ControlInd+0x5f0>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8007452:	4b35      	ldr	r3, [pc, #212]	; (8007528 <AL_ControlInd+0x66c>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b08      	cmp	r3, #8
 8007458:	d006      	beq.n	8007468 <AL_ControlInd+0x5ac>
 800745a:	2b08      	cmp	r3, #8
 800745c:	dc26      	bgt.n	80074ac <AL_ControlInd+0x5f0>
 800745e:	2b02      	cmp	r3, #2
 8007460:	d00a      	beq.n	8007478 <AL_ControlInd+0x5bc>
 8007462:	2b04      	cmp	r3, #4
 8007464:	d004      	beq.n	8007470 <AL_ControlInd+0x5b4>
 8007466:	e021      	b.n	80074ac <AL_ControlInd+0x5f0>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8007468:	f7fd fab8 	bl	80049dc <APPL_StopOutputHandler>
            StopOutputHandler();
 800746c:	f7ff fc4e 	bl	8006d0c <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8007470:	f7fd faa4 	bl	80049bc <APPL_StopInputHandler>

            StopInputHandler();
 8007474:	f7ff fc5c 	bl	8006d30 <StopInputHandler>

        case STATE_PREOP:

            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8007478:	89fb      	ldrh	r3, [r7, #14]
 800747a:	2b16      	cmp	r3, #22
 800747c:	d107      	bne.n	800748e <AL_ControlInd+0x5d2>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 800747e:	f000 fdcd 	bl	800801c <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8007482:	f7fd fa88 	bl	8004996 <APPL_StopMailboxHandler>

                nAlStatus = STATE_INIT;
 8007486:	4b28      	ldr	r3, [pc, #160]	; (8007528 <AL_ControlInd+0x66c>)
 8007488:	2201      	movs	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e00e      	b.n	80074ac <AL_ControlInd+0x5f0>
            }
            else
                nAlStatus = STATE_PREOP;
 800748e:	4b26      	ldr	r3, [pc, #152]	; (8007528 <AL_ControlInd+0x66c>)
 8007490:	2202      	movs	r2, #2
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e00a      	b.n	80074ac <AL_ControlInd+0x5f0>
            break;
 8007496:	bf00      	nop
 8007498:	e008      	b.n	80074ac <AL_ControlInd+0x5f0>
            break;
 800749a:	bf00      	nop
 800749c:	e006      	b.n	80074ac <AL_ControlInd+0x5f0>
            break;
 800749e:	bf00      	nop
 80074a0:	e004      	b.n	80074ac <AL_ControlInd+0x5f0>
                break;
 80074a2:	bf00      	nop
 80074a4:	e002      	b.n	80074ac <AL_ControlInd+0x5f0>
                break;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <AL_ControlInd+0x5f0>
                break;
 80074aa:	bf00      	nop
        }
    }

    if ( result == NOERROR_INWORK )
 80074ac:	89fb      	ldrh	r3, [r7, #14]
 80074ae:	2bff      	cmp	r3, #255	; 0xff
 80074b0:	d146      	bne.n	8007540 <AL_ControlInd+0x684>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 80074b2:	4b20      	ldr	r3, [pc, #128]	; (8007534 <AL_ControlInd+0x678>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 80074b8:	7b3b      	ldrb	r3, [r7, #12]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	4b1e      	ldr	r3, [pc, #120]	; (8007538 <AL_ControlInd+0x67c>)
 80074be:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 80074c0:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <AL_ControlInd+0x67c>)
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	2b48      	cmp	r3, #72	; 0x48
 80074c6:	d00e      	beq.n	80074e6 <AL_ControlInd+0x62a>
 80074c8:	2b48      	cmp	r3, #72	; 0x48
 80074ca:	dc11      	bgt.n	80074f0 <AL_ControlInd+0x634>
 80074cc:	2b13      	cmp	r3, #19
 80074ce:	dc02      	bgt.n	80074d6 <AL_ControlInd+0x61a>
 80074d0:	2b12      	cmp	r3, #18
 80074d2:	da03      	bge.n	80074dc <AL_ControlInd+0x620>
 80074d4:	e00c      	b.n	80074f0 <AL_ControlInd+0x634>
 80074d6:	2b24      	cmp	r3, #36	; 0x24
 80074d8:	d005      	beq.n	80074e6 <AL_ControlInd+0x62a>
 80074da:	e009      	b.n	80074f0 <AL_ControlInd+0x634>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 80074dc:	4b17      	ldr	r3, [pc, #92]	; (800753c <AL_ControlInd+0x680>)
 80074de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80074e2:	801a      	strh	r2, [r3, #0]
            break;
 80074e4:	e008      	b.n	80074f8 <AL_ControlInd+0x63c>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 80074e6:	4b15      	ldr	r3, [pc, #84]	; (800753c <AL_ControlInd+0x680>)
 80074e8:	f242 3228 	movw	r2, #9000	; 0x2328
 80074ec:	801a      	strh	r2, [r3, #0]
                break;
 80074ee:	e003      	b.n	80074f8 <AL_ControlInd+0x63c>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 80074f0:	4b12      	ldr	r3, [pc, #72]	; (800753c <AL_ControlInd+0x680>)
 80074f2:	22c8      	movs	r2, #200	; 0xc8
 80074f4:	801a      	strh	r2, [r3, #0]
                break;
 80074f6:	bf00      	nop
        }
        EsmTimeoutCounter -= 50; //subtract 50ms from the timeout to react before the master runs into a timeout.
 80074f8:	4b10      	ldr	r3, [pc, #64]	; (800753c <AL_ControlInd+0x680>)
 80074fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b32      	subs	r3, #50	; 0x32
 8007502:	b29b      	uxth	r3, r3
 8007504:	b21a      	sxth	r2, r3
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <AL_ControlInd+0x680>)
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e07a      	b.n	8007602 <AL_ControlInd+0x746>
 800750c:	200005d4 	.word	0x200005d4
 8007510:	20000b4c 	.word	0x20000b4c
 8007514:	20000dfe 	.word	0x20000dfe
 8007518:	20000b64 	.word	0x20000b64
 800751c:	20000b84 	.word	0x20000b84
 8007520:	20000b7f 	.word	0x20000b7f
 8007524:	20000b56 	.word	0x20000b56
 8007528:	20000b4d 	.word	0x20000b4d
 800752c:	20000b4e 	.word	0x20000b4e
 8007530:	20000b74 	.word	0x20000b74
 8007534:	20000b72 	.word	0x20000b72
 8007538:	20000b4a 	.word	0x20000b4a
 800753c:	20000b7c 	.word	0x20000b7c

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8007540:	79fa      	ldrb	r2, [r7, #7]
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <AL_ControlInd+0x74c>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	429a      	cmp	r2, r3
 800754c:	d04e      	beq.n	80075ec <AL_ControlInd+0x730>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 800754e:	89fb      	ldrh	r3, [r7, #14]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <AL_ControlInd+0x69e>
 8007554:	88bb      	ldrh	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01f      	beq.n	800759a <AL_ControlInd+0x6de>
 800755a:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <AL_ControlInd+0x74c>)
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	4313      	orrs	r3, r2
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d016      	beq.n	800759a <AL_ControlInd+0x6de>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 800756c:	4b27      	ldr	r3, [pc, #156]	; (800760c <AL_ControlInd+0x750>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <AL_ControlInd+0x6c0>
            {
                APPL_StopOutputHandler();
 8007574:	f7fd fa32 	bl	80049dc <APPL_StopOutputHandler>

                StopOutputHandler();
 8007578:	f7ff fbc8 	bl	8006d0c <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 800757c:	4b24      	ldr	r3, [pc, #144]	; (8007610 <AL_ControlInd+0x754>)
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <AL_ControlInd+0x6d0>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8007584:	2002      	movs	r0, #2
 8007586:	f7fe fd8f 	bl	80060a8 <DisableSyncManChannel>
 800758a:	e006      	b.n	800759a <AL_ControlInd+0x6de>
/*ECATCHANGE_END(V5.11) HW1*/
            }
            else
                if(nPdInputSize > 0)
 800758c:	4b21      	ldr	r3, [pc, #132]	; (8007614 <AL_ControlInd+0x758>)
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <AL_ControlInd+0x6de>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8007594:	2003      	movs	r0, #3
 8007596:	f7fe fd87 	bl	80060a8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
            }

        }
        if ( result != 0 )
 800759a:	89fb      	ldrh	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00e      	beq.n	80075be <AL_ControlInd+0x702>
        {
            if ( nAlStatus == STATE_OP )
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <AL_ControlInd+0x74c>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d102      	bne.n	80075ae <AL_ControlInd+0x6f2>
                nAlStatus = STATE_SAFEOP;
 80075a8:	4b17      	ldr	r3, [pc, #92]	; (8007608 <AL_ControlInd+0x74c>)
 80075aa:	2204      	movs	r2, #4
 80075ac:	701a      	strb	r2, [r3, #0]
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <AL_ControlInd+0x74c>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f043 0310 	orr.w	r3, r3, #16
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b13      	ldr	r3, [pc, #76]	; (8007608 <AL_ControlInd+0x74c>)
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e00b      	b.n	80075d6 <AL_ControlInd+0x71a>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 80075be:	88bb      	ldrh	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <AL_ControlInd+0x714>
            {
                /* state change request from the user */
                result = alStatusCode;
 80075c4:	88bb      	ldrh	r3, [r7, #4]
 80075c6:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	f043 0310 	orr.w	r3, r3, #16
 80075ce:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 80075d0:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <AL_ControlInd+0x74c>)
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <AL_ControlInd+0x75c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <AL_ControlInd+0x74c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	89fa      	ldrh	r2, [r7, #14]
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fc33 	bl	8006e50 <SetALStatus>
 80075ea:	e00a      	b.n	8007602 <AL_ControlInd+0x746>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 80075ec:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <AL_ControlInd+0x75c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <AL_ControlInd+0x74c>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2100      	movs	r1, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fc29 	bl	8006e50 <SetALStatus>
 80075fe:	e000      	b.n	8007602 <AL_ControlInd+0x746>
        return;
 8007600:	bf00      	nop
    }

}
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20000b4d 	.word	0x20000b4d
 800760c:	20000b7f 	.word	0x20000b7f
 8007610:	20000b4e 	.word	0x20000b4e
 8007614:	20000b74 	.word	0x20000b74
 8007618:	20000b72 	.word	0x20000b72

0800761c <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8007622:	4b9b      	ldr	r3, [pc, #620]	; (8007890 <AL_ControlRes+0x274>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 812d 	beq.w	8007886 <AL_ControlRes+0x26a>
    {
        UINT16 result = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8007638:	4b96      	ldr	r3, [pc, #600]	; (8007894 <AL_ControlRes+0x278>)
 800763a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d16d      	bne.n	800771e <AL_ControlRes+0x102>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8007642:	4b95      	ldr	r3, [pc, #596]	; (8007898 <AL_ControlRes+0x27c>)
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	b29b      	uxth	r3, r3
 800764a:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 800764c:	4b92      	ldr	r3, [pc, #584]	; (8007898 <AL_ControlRes+0x27c>)
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	2b48      	cmp	r3, #72	; 0x48
 8007652:	d030      	beq.n	80076b6 <AL_ControlRes+0x9a>
 8007654:	2b48      	cmp	r3, #72	; 0x48
 8007656:	f300 8103 	bgt.w	8007860 <AL_ControlRes+0x244>
 800765a:	2b13      	cmp	r3, #19
 800765c:	dc02      	bgt.n	8007664 <AL_ControlRes+0x48>
 800765e:	2b12      	cmp	r3, #18
 8007660:	da03      	bge.n	800766a <AL_ControlRes+0x4e>
 8007662:	e0fd      	b.n	8007860 <AL_ControlRes+0x244>
 8007664:	2b24      	cmp	r3, #36	; 0x24
 8007666:	d013      	beq.n	8007690 <AL_ControlRes+0x74>
 8007668:	e0fa      	b.n	8007860 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                    if(!bApplEsmPending)
 800766a:	4b8c      	ldr	r3, [pc, #560]	; (800789c <AL_ControlRes+0x280>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <AL_ControlRes+0x5a>
                        APPL_StopMailboxHandler();
 8007672:	f7fd f990 	bl	8004996 <APPL_StopMailboxHandler>

                    MBX_StopMailboxHandler();
 8007676:	f000 fcd1 	bl	800801c <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 800767a:	4b89      	ldr	r3, [pc, #548]	; (80078a0 <AL_ControlRes+0x284>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <AL_ControlRes+0x6e>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <AL_ControlRes+0x288>)
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8007688:	e0ea      	b.n	8007860 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	80bb      	strh	r3, [r7, #4]
                break;
 800768e:	e0e7      	b.n	8007860 <AL_ControlRes+0x244>
                case PREOP_2_SAFEOP:
                    if(!bApplEsmPending)
 8007690:	4b82      	ldr	r3, [pc, #520]	; (800789c <AL_ControlRes+0x280>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <AL_ControlRes+0x80>
                        APPL_StopInputHandler();
 8007698:	f7fd f990 	bl	80049bc <APPL_StopInputHandler>

                    StopInputHandler();
 800769c:	f7ff fb48 	bl	8006d30 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 80076a0:	4b7f      	ldr	r3, [pc, #508]	; (80078a0 <AL_ControlRes+0x284>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <AL_ControlRes+0x94>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80076a8:	4b7e      	ldr	r3, [pc, #504]	; (80078a4 <AL_ControlRes+0x288>)
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80076ae:	e0d7      	b.n	8007860 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	80bb      	strh	r3, [r7, #4]
                break;
 80076b4:	e0d4      	b.n	8007860 <AL_ControlRes+0x244>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 80076b6:	4b7c      	ldr	r3, [pc, #496]	; (80078a8 <AL_ControlRes+0x28c>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d014      	beq.n	80076e8 <AL_ControlRes+0xcc>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning) //
 80076be:	4b7b      	ldr	r3, [pc, #492]	; (80078ac <AL_ControlRes+0x290>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <AL_ControlRes+0xb0>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 80076c6:	232d      	movs	r3, #45	; 0x2d
 80076c8:	80bb      	strh	r3, [r7, #4]
 80076ca:	e01b      	b.n	8007704 <AL_ControlRes+0xe8>
                        }
/*ECATCHANGE_START(V5.11) ECAT4*/
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 80076cc:	4b78      	ldr	r3, [pc, #480]	; (80078b0 <AL_ControlRes+0x294>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <AL_ControlRes+0xc6>
 80076d4:	4b77      	ldr	r3, [pc, #476]	; (80078b4 <AL_ControlRes+0x298>)
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <AL_ControlRes+0xc6>
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 80076dc:	231b      	movs	r3, #27
 80076de:	80bb      	strh	r3, [r7, #4]
 80076e0:	e010      	b.n	8007704 <AL_ControlRes+0xe8>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 80076e2:	231a      	movs	r3, #26
 80076e4:	80bb      	strh	r3, [r7, #4]
 80076e6:	e00d      	b.n	8007704 <AL_ControlRes+0xe8>
                        }
                    }
                    else
                    {
/*ECATCHANGE_START(V5.11) ECAT4*/
                        if (nPdOutputSize > 0)
 80076e8:	4b72      	ldr	r3, [pc, #456]	; (80078b4 <AL_ControlRes+0x298>)
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <AL_ControlRes+0xda>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 80076f0:	231b      	movs	r3, #27
 80076f2:	80bb      	strh	r3, [r7, #4]
 80076f4:	e006      	b.n	8007704 <AL_ControlRes+0xe8>
                        }
                        else
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 80076f6:	2308      	movs	r3, #8
 80076f8:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 80076fe:	4b6e      	ldr	r3, [pc, #440]	; (80078b8 <AL_ControlRes+0x29c>)
 8007700:	2201      	movs	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8007704:	88bb      	ldrh	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80a3 	beq.w	8007852 <AL_ControlRes+0x236>
                    {
                        if(!bApplEsmPending)
 800770c:	4b63      	ldr	r3, [pc, #396]	; (800789c <AL_ControlRes+0x280>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <AL_ControlRes+0xfc>
                            APPL_StopOutputHandler();
 8007714:	f7fd f962 	bl	80049dc <APPL_StopOutputHandler>

                        StopOutputHandler();
 8007718:	f7ff faf8 	bl	8006d0c <StopOutputHandler>
                    }
                break;
 800771c:	e099      	b.n	8007852 <AL_ControlRes+0x236>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 800771e:	4b5e      	ldr	r3, [pc, #376]	; (8007898 <AL_ControlRes+0x27c>)
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	2b48      	cmp	r3, #72	; 0x48
 8007724:	d048      	beq.n	80077b8 <AL_ControlRes+0x19c>
 8007726:	2b48      	cmp	r3, #72	; 0x48
 8007728:	f300 809a 	bgt.w	8007860 <AL_ControlRes+0x244>
 800772c:	2b13      	cmp	r3, #19
 800772e:	dc02      	bgt.n	8007736 <AL_ControlRes+0x11a>
 8007730:	2b12      	cmp	r3, #18
 8007732:	da03      	bge.n	800773c <AL_ControlRes+0x120>
 8007734:	e094      	b.n	8007860 <AL_ControlRes+0x244>
 8007736:	2b24      	cmp	r3, #36	; 0x24
 8007738:	d021      	beq.n	800777e <AL_ControlRes+0x162>
 800773a:	e091      	b.n	8007860 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 800773c:	4b57      	ldr	r3, [pc, #348]	; (800789c <AL_ControlRes+0x280>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8088 	beq.w	8007856 <AL_ControlRes+0x23a>
                    {
                        bApplEsmPending = FALSE;
 8007746:	4b55      	ldr	r3, [pc, #340]	; (800789c <AL_ControlRes+0x280>)
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 800774c:	f7fd f91b 	bl	8004986 <APPL_StartMailboxHandler>
 8007750:	4603      	mov	r3, r0
 8007752:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8007754:	887b      	ldrh	r3, [r7, #2]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <AL_ControlRes+0x152>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 800775a:	4b58      	ldr	r3, [pc, #352]	; (80078bc <AL_ControlRes+0x2a0>)
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8007760:	4b4d      	ldr	r3, [pc, #308]	; (8007898 <AL_ControlRes+0x27c>)
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	71fb      	strb	r3, [r7, #7]
                                APPL_StopMailboxHandler();
                                MBX_StopMailboxHandler();
                            }
                        }
                    }
                break;
 800776c:	e073      	b.n	8007856 <AL_ControlRes+0x23a>
                            if(result != NOERROR_INWORK)
 800776e:	887b      	ldrh	r3, [r7, #2]
 8007770:	2bff      	cmp	r3, #255	; 0xff
 8007772:	d070      	beq.n	8007856 <AL_ControlRes+0x23a>
                                APPL_StopMailboxHandler();
 8007774:	f7fd f90f 	bl	8004996 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8007778:	f000 fc50 	bl	800801c <MBX_StopMailboxHandler>
                break;
 800777c:	e06b      	b.n	8007856 <AL_ControlRes+0x23a>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 800777e:	4b47      	ldr	r3, [pc, #284]	; (800789c <AL_ControlRes+0x280>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d069      	beq.n	800785a <AL_ControlRes+0x23e>
                    {
                        bApplEsmPending = FALSE;
 8007786:	4b45      	ldr	r3, [pc, #276]	; (800789c <AL_ControlRes+0x280>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 800778c:	484c      	ldr	r0, [pc, #304]	; (80078c0 <AL_ControlRes+0x2a4>)
 800778e:	f7fd f90a 	bl	80049a6 <APPL_StartInputHandler>
 8007792:	4603      	mov	r3, r0
 8007794:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8007796:	887b      	ldrh	r3, [r7, #2]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <AL_ControlRes+0x18c>
                        {
                            bEcatInputUpdateRunning = TRUE;
 800779c:	4b49      	ldr	r3, [pc, #292]	; (80078c4 <AL_ControlRes+0x2a8>)
 800779e:	2201      	movs	r2, #1
 80077a0:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 80077a2:	2304      	movs	r3, #4
 80077a4:	71fb      	strb	r3, [r7, #7]
                                APPL_StopInputHandler();
                                StopInputHandler();
                            }
                        }
                    }
                break;
 80077a6:	e058      	b.n	800785a <AL_ControlRes+0x23e>
                            if(result != NOERROR_INWORK)
 80077a8:	887b      	ldrh	r3, [r7, #2]
 80077aa:	2bff      	cmp	r3, #255	; 0xff
 80077ac:	d055      	beq.n	800785a <AL_ControlRes+0x23e>
                                APPL_StopInputHandler();
 80077ae:	f7fd f905 	bl	80049bc <APPL_StopInputHandler>
                                StopInputHandler();
 80077b2:	f7ff fabd 	bl	8006d30 <StopInputHandler>
                break;
 80077b6:	e050      	b.n	800785a <AL_ControlRes+0x23e>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 80077b8:	4b38      	ldr	r3, [pc, #224]	; (800789c <AL_ControlRes+0x280>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d04e      	beq.n	800785e <AL_ControlRes+0x242>
                    {
                        if(bDcSyncActive)
 80077c0:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <AL_ControlRes+0x28c>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d027      	beq.n	8007818 <AL_ControlRes+0x1fc>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 80077c8:	4b3f      	ldr	r3, [pc, #252]	; (80078c8 <AL_ControlRes+0x2ac>)
 80077ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd45      	ble.n	800785e <AL_ControlRes+0x242>
 80077d2:	4b3d      	ldr	r3, [pc, #244]	; (80078c8 <AL_ControlRes+0x2ac>)
 80077d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80077d8:	4b3c      	ldr	r3, [pc, #240]	; (80078cc <AL_ControlRes+0x2b0>)
 80077da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077de:	429a      	cmp	r2, r3
 80077e0:	dc3d      	bgt.n	800785e <AL_ControlRes+0x242>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 80077e2:	4b39      	ldr	r3, [pc, #228]	; (80078c8 <AL_ControlRes+0x2ac>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 80077e8:	4b38      	ldr	r3, [pc, #224]	; (80078cc <AL_ControlRes+0x2b0>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	801a      	strh	r2, [r3, #0]

                                result = APPL_StartOutputHandler();
 80077ee:	f7fd f8ed 	bl	80049cc <APPL_StartOutputHandler>
 80077f2:	4603      	mov	r3, r0
 80077f4:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 80077f6:	887b      	ldrh	r3, [r7, #2]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <AL_ControlRes+0x1ec>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 80077fc:	4b2e      	ldr	r3, [pc, #184]	; (80078b8 <AL_ControlRes+0x29c>)
 80077fe:	2201      	movs	r2, #1
 8007800:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8007802:	2308      	movs	r3, #8
 8007804:	71fb      	strb	r3, [r7, #7]
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8007806:	e02a      	b.n	800785e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8007808:	887b      	ldrh	r3, [r7, #2]
 800780a:	2bff      	cmp	r3, #255	; 0xff
 800780c:	d027      	beq.n	800785e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 800780e:	f7fd f8e5 	bl	80049dc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8007812:	f7ff fa7b 	bl	8006d0c <StopOutputHandler>
                break;
 8007816:	e022      	b.n	800785e <AL_ControlRes+0x242>
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8007818:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <AL_ControlRes+0x298>)
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <AL_ControlRes+0x20c>
 8007820:	4b23      	ldr	r3, [pc, #140]	; (80078b0 <AL_ControlRes+0x294>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01a      	beq.n	800785e <AL_ControlRes+0x242>
                                result = APPL_StartOutputHandler();
 8007828:	f7fd f8d0 	bl	80049cc <APPL_StartOutputHandler>
 800782c:	4603      	mov	r3, r0
 800782e:	807b      	strh	r3, [r7, #2]
                                if(result == 0)
 8007830:	887b      	ldrh	r3, [r7, #2]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <AL_ControlRes+0x226>
                                    bEcatOutputUpdateRunning = TRUE;
 8007836:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <AL_ControlRes+0x29c>)
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 800783c:	2308      	movs	r3, #8
 800783e:	71fb      	strb	r3, [r7, #7]
                break;
 8007840:	e00d      	b.n	800785e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8007842:	887b      	ldrh	r3, [r7, #2]
 8007844:	2bff      	cmp	r3, #255	; 0xff
 8007846:	d00a      	beq.n	800785e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 8007848:	f7fd f8c8 	bl	80049dc <APPL_StopOutputHandler>
                                        StopOutputHandler();
 800784c:	f7ff fa5e 	bl	8006d0c <StopOutputHandler>
                break;
 8007850:	e005      	b.n	800785e <AL_ControlRes+0x242>
                break;
 8007852:	bf00      	nop
 8007854:	e004      	b.n	8007860 <AL_ControlRes+0x244>
                break;
 8007856:	bf00      	nop
 8007858:	e002      	b.n	8007860 <AL_ControlRes+0x244>
                break;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <AL_ControlRes+0x244>
                break;
 800785e:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00f      	beq.n	8007886 <AL_ControlRes+0x26a>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <AL_ControlRes+0x274>)
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 800786c:	88bb      	ldrh	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <AL_ControlRes+0x25e>
            {
                Status |= STATE_CHANGE;
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	f043 0310 	orr.w	r3, r3, #16
 8007878:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 800787a:	88ba      	ldrh	r2, [r7, #4]
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fae5 	bl	8006e50 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000b72 	.word	0x20000b72
 8007894:	20000b7c 	.word	0x20000b7c
 8007898:	20000b4a 	.word	0x20000b4a
 800789c:	20000b4c 	.word	0x20000b4c
 80078a0:	20000b56 	.word	0x20000b56
 80078a4:	20000b50 	.word	0x20000b50
 80078a8:	20000b7e 	.word	0x20000b7e
 80078ac:	20000b66 	.word	0x20000b66
 80078b0:	20000b7a 	.word	0x20000b7a
 80078b4:	20000b4e 	.word	0x20000b4e
 80078b8:	20000b7f 	.word	0x20000b7f
 80078bc:	20000dfe 	.word	0x20000dfe
 80078c0:	20000b64 	.word	0x20000b64
 80078c4:	20000b84 	.word	0x20000b84
 80078c8:	20000b60 	.word	0x20000b60
 80078cc:	20000b5a 	.word	0x20000b5a

080078d0 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
    if(bDcSyncActive)
 80078d4:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <DC_CheckWatchdog+0xf0>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d06b      	beq.n	80079b4 <DC_CheckWatchdog+0xe4>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 80078dc:	4b39      	ldr	r3, [pc, #228]	; (80079c4 <DC_CheckWatchdog+0xf4>)
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <DC_CheckWatchdog+0x28>
 80078e4:	4b38      	ldr	r3, [pc, #224]	; (80079c8 <DC_CheckWatchdog+0xf8>)
 80078e6:	881a      	ldrh	r2, [r3, #0]
 80078e8:	4b36      	ldr	r3, [pc, #216]	; (80079c4 <DC_CheckWatchdog+0xf4>)
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d303      	bcc.n	80078f8 <DC_CheckWatchdog+0x28>
        {
                /*Sync0 watchdog expired*/

					bDcRunning = FALSE;        
 80078f0:	4b36      	ldr	r3, [pc, #216]	; (80079cc <DC_CheckWatchdog+0xfc>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e00e      	b.n	8007916 <DC_CheckWatchdog+0x46>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 80078f8:	4b33      	ldr	r3, [pc, #204]	; (80079c8 <DC_CheckWatchdog+0xf8>)
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	4b31      	ldr	r3, [pc, #196]	; (80079c4 <DC_CheckWatchdog+0xf4>)
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d205      	bcs.n	8007910 <DC_CheckWatchdog+0x40>
            {
                Sync0WdCounter ++;
 8007904:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <DC_CheckWatchdog+0xf8>)
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <DC_CheckWatchdog+0xf8>)
 800790e:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8007910:	4b2e      	ldr	r3, [pc, #184]	; (80079cc <DC_CheckWatchdog+0xfc>)
 8007912:	2201      	movs	r2, #1
 8007914:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 8007916:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <DC_CheckWatchdog+0xfc>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <DC_CheckWatchdog+0x76>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 800791e:	4b2c      	ldr	r3, [pc, #176]	; (80079d0 <DC_CheckWatchdog+0x100>)
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <DC_CheckWatchdog+0x76>
            {
                if(Sync1WdCounter < Sync1WdValue)
 8007926:	4b2b      	ldr	r3, [pc, #172]	; (80079d4 <DC_CheckWatchdog+0x104>)
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <DC_CheckWatchdog+0x100>)
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d206      	bcs.n	8007940 <DC_CheckWatchdog+0x70>
                {
                    Sync1WdCounter ++;
 8007932:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <DC_CheckWatchdog+0x104>)
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	4b26      	ldr	r3, [pc, #152]	; (80079d4 <DC_CheckWatchdog+0x104>)
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	e002      	b.n	8007946 <DC_CheckWatchdog+0x76>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8007940:	4b22      	ldr	r3, [pc, #136]	; (80079cc <DC_CheckWatchdog+0xfc>)
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 8007946:	4b21      	ldr	r3, [pc, #132]	; (80079cc <DC_CheckWatchdog+0xfc>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d02b      	beq.n	80079a6 <DC_CheckWatchdog+0xd6>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 800794e:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <DC_CheckWatchdog+0x108>)
 8007950:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007952:	4b22      	ldr	r3, [pc, #136]	; (80079dc <DC_CheckWatchdog+0x10c>)
 8007954:	891b      	ldrh	r3, [r3, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d211      	bcs.n	800797e <DC_CheckWatchdog+0xae>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <DC_CheckWatchdog+0x110>)
 800795c:	2201      	movs	r2, #1
 800795e:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8007960:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <DC_CheckWatchdog+0x114>)
 8007962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dd24      	ble.n	80079b4 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt++;
 800796a:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <DC_CheckWatchdog+0x118>)
 800796c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007970:	b29b      	uxth	r3, r3
 8007972:	3301      	adds	r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	b21a      	sxth	r2, r3
 8007978:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <DC_CheckWatchdog+0x118>)
 800797a:	801a      	strh	r2, [r3, #0]
        {
            bSmSyncSequenceValid = FALSE;
        }

    }
}
 800797c:	e01a      	b.n	80079b4 <DC_CheckWatchdog+0xe4>
            else if(bSmSyncSequenceValid)
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <DC_CheckWatchdog+0x110>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d016      	beq.n	80079b4 <DC_CheckWatchdog+0xe4>
                bSmSyncSequenceValid = FALSE;
 8007986:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <DC_CheckWatchdog+0x110>)
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 800798c:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <DC_CheckWatchdog+0x108>)
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                if(i16WaitForPllRunningTimeout > 0)
 8007994:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <DC_CheckWatchdog+0x114>)
 8007996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd0a      	ble.n	80079b4 <DC_CheckWatchdog+0xe4>
                    i16WaitForPllRunningCnt = 0;
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <DC_CheckWatchdog+0x118>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	801a      	strh	r2, [r3, #0]
}
 80079a4:	e006      	b.n	80079b4 <DC_CheckWatchdog+0xe4>
        else if(bSmSyncSequenceValid)
 80079a6:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <DC_CheckWatchdog+0x110>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <DC_CheckWatchdog+0xe4>
            bSmSyncSequenceValid = FALSE;
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <DC_CheckWatchdog+0x110>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000b7e 	.word	0x20000b7e
 80079c4:	20000b5e 	.word	0x20000b5e
 80079c8:	20000b52 	.word	0x20000b52
 80079cc:	20000b66 	.word	0x20000b66
 80079d0:	20000b62 	.word	0x20000b62
 80079d4:	20000b80 	.word	0x20000b80
 80079d8:	20000e68 	.word	0x20000e68
 80079dc:	20000528 	.word	0x20000528
 80079e0:	20000b7b 	.word	0x20000b7b
 80079e4:	20000b60 	.word	0x20000b60
 80079e8:	20000b5a 	.word	0x20000b5a

080079ec <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 80079f2:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <CheckIfEcatError+0x88>)
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01f      	beq.n	8007a3a <CheckIfEcatError+0x4e>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 80079fe:	1dbb      	adds	r3, r7, #6
 8007a00:	2202      	movs	r2, #2
 8007a02:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd fbfe 	bl	8005208 <HW_EscRead>
      WdStatusOK = SWAPWORD(WdStatusOK);
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	80fb      	strh	r3, [r7, #6]

      /*ECATCHANGE_START(V5.11) ECAT4*/
      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10f      	bne.n	8007a3a <CheckIfEcatError+0x4e>
 8007a1a:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <CheckIfEcatError+0x8c>)
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <CheckIfEcatError+0x4e>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning)
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <CheckIfEcatError+0x90>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <CheckIfEcatError+0x48>
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8007a2a:	211b      	movs	r1, #27
 8007a2c:	2004      	movs	r0, #4
 8007a2e:	f7ff fa45 	bl	8006ebc <AL_ControlInd>
 8007a32:	e01c      	b.n	8007a6e <CheckIfEcatError+0x82>
            return;
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 8007a34:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <CheckIfEcatError+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
         }
      }
      /*ECATCHANGE_END(V5.11) ECAT4*/
   }
 
   if(bDcSyncActive)
 8007a3a:	4b12      	ldr	r3, [pc, #72]	; (8007a84 <CheckIfEcatError+0x98>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 8007a42:	4b0e      	ldr	r3, [pc, #56]	; (8007a7c <CheckIfEcatError+0x90>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d011      	beq.n	8007a6e <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <CheckIfEcatError+0x9c>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <CheckIfEcatError+0x70>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	2004      	movs	r0, #4
 8007a56:	f7ff fa31 	bl	8006ebc <AL_ControlInd>
               return;
 8007a5a:	e008      	b.n	8007a6e <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <CheckIfEcatError+0xa0>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8007a64:	211a      	movs	r1, #26
 8007a66:	2004      	movs	r0, #4
 8007a68:	f7ff fa28 	bl	8006ebc <AL_ControlInd>
               return;
 8007a6c:	bf00      	nop
           }
        
       }
   }
}
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20000b82 	.word	0x20000b82
 8007a78:	20000b4e 	.word	0x20000b4e
 8007a7c:	20000b7f 	.word	0x20000b7f
 8007a80:	20000b7a 	.word	0x20000b7a
 8007a84:	20000b7e 	.word	0x20000b7e
 8007a88:	20000b66 	.word	0x20000b66
 8007a8c:	20000b7b 	.word	0x20000b7b

08007a90 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    {
		UINT16 TmpVar = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	80bb      	strh	r3, [r7, #4]

		HW_EscReadWord(TmpVar, ESC_COMM_INFO_OFFSET);
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	2104      	movs	r1, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd fbb1 	bl	8005208 <HW_EscRead>

		TmpVar = SWAPWORD(TmpVar);
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	80bb      	strh	r3, [r7, #4]
		nMaxSyncMan = (UINT8) ((TmpVar & ESC_SM_CHANNELS_MASK)>> ESC_SM_CHANNELS_SHIFT);
 8007aaa:	88bb      	ldrh	r3, [r7, #4]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4b36      	ldr	r3, [pc, #216]	; (8007b8c <ECAT_Init+0xfc>)
 8007ab4:	701a      	strb	r2, [r3, #0]

		HW_EscReadWord(TmpVar, ESC_DPRAM_SIZE_OFFSET);
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	2202      	movs	r2, #2
 8007aba:	2106      	movs	r1, #6
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd fba3 	bl	8005208 <HW_EscRead>
		TmpVar = SWAPWORD(TmpVar);
 8007ac2:	88bb      	ldrh	r3, [r7, #4]
 8007ac4:	80bb      	strh	r3, [r7, #4]

		//get max address (register + DPRAM size in Byte (in the register it is stored in KB))
		/* ECATCHANGE_START(V5.11) ESC1*/
		nMaxEscAddress = (UINT16) ((TmpVar & ESC_DPRAM_SIZE_MASK) << 10) + 0xFFF;
 8007ac6:	88bb      	ldrh	r3, [r7, #4]
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	4b2f      	ldr	r3, [pc, #188]	; (8007b90 <ECAT_Init+0x100>)
 8007ad4:	801a      	strh	r2, [r3, #0]
		/* ECATCHANGE_END(V5.11) ESC1*/
    }

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8007ad6:	f7fe faa9 	bl	800602c <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	71fb      	strb	r3, [r7, #7]
 8007ade:	e006      	b.n	8007aee <ECAT_Init+0x5e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(i);
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fae0 	bl	80060a8 <DisableSyncManChannel>
    for (i = 0; i < nMaxSyncMan; i++)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	3301      	adds	r3, #1
 8007aec:	71fb      	strb	r3, [r7, #7]
 8007aee:	4b27      	ldr	r3, [pc, #156]	; (8007b8c <ECAT_Init+0xfc>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	79fa      	ldrb	r2, [r7, #7]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d3f3      	bcc.n	8007ae0 <ECAT_Init+0x50>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8007af8:	f000 f99a 	bl	8007e30 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <ECAT_Init+0x104>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8007b02:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <ECAT_Init+0x108>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8007b08:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <ECAT_Init+0x10c>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <ECAT_Init+0x110>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8007b14:	4b23      	ldr	r3, [pc, #140]	; (8007ba4 <ECAT_Init+0x114>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8007b1a:	4b23      	ldr	r3, [pc, #140]	; (8007ba8 <ECAT_Init+0x118>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8007b20:	4b22      	ldr	r3, [pc, #136]	; (8007bac <ECAT_Init+0x11c>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8007b26:	4b22      	ldr	r3, [pc, #136]	; (8007bb0 <ECAT_Init+0x120>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 8007b2c:	4b21      	ldr	r3, [pc, #132]	; (8007bb4 <ECAT_Init+0x124>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <ECAT_Init+0x128>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8007b38:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <ECAT_Init+0x12c>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 8007b3e:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <ECAT_Init+0x130>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8007b44:	4b1f      	ldr	r3, [pc, #124]	; (8007bc4 <ECAT_Init+0x134>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8007b4a:	4b1f      	ldr	r3, [pc, #124]	; (8007bc8 <ECAT_Init+0x138>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 8007b50:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <ECAT_Init+0x13c>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8007b56:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <ECAT_Init+0x140>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <ECAT_Init+0x144>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8007b62:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <ECAT_Init+0x148>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8007b68:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <ECAT_Init+0x148>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff f96e 	bl	8006e50 <SetALStatus>
    nEcatStateTrans = 0;
 8007b74:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <ECAT_Init+0x14c>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	801a      	strh	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) ECAT5*/
    bEscIntEnabled = FALSE;
 8007b7a:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <ECAT_Init+0x150>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) ECAT5*/

    /* initialize the COE part */
    COE_Init();
 8007b80:	f7fe f952 	bl	8005e28 <COE_Init>
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000b8a 	.word	0x20000b8a
 8007b90:	20000b78 	.word	0x20000b78
 8007b94:	20000b4c 	.word	0x20000b4c
 8007b98:	20000b72 	.word	0x20000b72
 8007b9c:	20000b7a 	.word	0x20000b7a
 8007ba0:	20000b7f 	.word	0x20000b7f
 8007ba4:	20000b84 	.word	0x20000b84
 8007ba8:	20000b86 	.word	0x20000b86
 8007bac:	20000b82 	.word	0x20000b82
 8007bb0:	20000b52 	.word	0x20000b52
 8007bb4:	20000b5e 	.word	0x20000b5e
 8007bb8:	20000b80 	.word	0x20000b80
 8007bbc:	20000b62 	.word	0x20000b62
 8007bc0:	20000b7e 	.word	0x20000b7e
 8007bc4:	20000b56 	.word	0x20000b56
 8007bc8:	20000b50 	.word	0x20000b50
 8007bcc:	20000b64 	.word	0x20000b64
 8007bd0:	20000b4e 	.word	0x20000b4e
 8007bd4:	20000b74 	.word	0x20000b74
 8007bd8:	20000b4d 	.word	0x20000b4d
 8007bdc:	20000b4a 	.word	0x20000b4a
 8007be0:	20000b85 	.word	0x20000b85

08007be4 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 8007bea:	2300      	movs	r3, #0
 8007bec:	80bb      	strh	r3, [r7, #4]
    UINT16 sm1Activate = SM_SETTING_ENABLE_VALUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	807b      	strh	r3, [r7, #2]

    /* check if services are stored in the mailbox */
    MBX_Main();
 8007bf2:	f000 fd6f 	bl	80086d4 <MBX_Main>

    if ( bMbxRunning )
 8007bf6:	4b5d      	ldr	r3, [pc, #372]	; (8007d6c <ECAT_Main+0x188>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <ECAT_Main+0x2c>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8007bfe:	1cbb      	adds	r3, r7, #2
 8007c00:	2202      	movs	r2, #2
 8007c02:	f640 010e 	movw	r1, #2062	; 0x80e
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd fafe 	bl	8005208 <HW_EscRead>
        sm1Activate = SWAPWORD(sm1Activate);
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	807b      	strh	r3, [r7, #2]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8007c10:	f7fd fae6 	bl	80051e0 <HW_GetALEventRegister>
 8007c14:	4603      	mov	r3, r0
 8007c16:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);

    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <ECAT_Main+0x6c>
 8007c22:	4b53      	ldr	r3, [pc, #332]	; (8007d70 <ECAT_Main+0x18c>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d112      	bne.n	8007c50 <ECAT_Main+0x6c>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadWord( EscAlControl, ESC_AL_CONTROL_OFFSET);
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fd fae8 	bl	8005208 <HW_EscRead>
        EscAlControl = SWAPWORD(EscAlControl);
 8007c38:	88bb      	ldrh	r3, [r7, #4]
 8007c3a:	80bb      	strh	r3, [r7, #4]


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	f023 0311 	bic.w	r3, r3, #17
 8007c42:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 8007c44:	88bb      	ldrh	r3, [r7, #4]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff f936 	bl	8006ebc <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01c      	beq.n	8007c94 <ECAT_Main+0xb0>
 8007c5a:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <ECAT_Main+0x18c>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d118      	bne.n	8007c94 <ECAT_Main+0xb0>
 8007c62:	4b44      	ldr	r3, [pc, #272]	; (8007d74 <ECAT_Main+0x190>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d112      	bne.n	8007c94 <ECAT_Main+0xb0>
 8007c6e:	4b41      	ldr	r3, [pc, #260]	; (8007d74 <ECAT_Main+0x190>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f023 0310 	bic.w	r3, r3, #16
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d00c      	beq.n	8007c94 <ECAT_Main+0xb0>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	f023 0310 	bic.w	r3, r3, #16
 8007c80:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8007c82:	4b3c      	ldr	r3, [pc, #240]	; (8007d74 <ECAT_Main+0x190>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff f914 	bl	8006ebc <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8007c94:	4b36      	ldr	r3, [pc, #216]	; (8007d70 <ECAT_Main+0x18c>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <ECAT_Main+0xbc>
    {
        AL_ControlRes();
 8007c9c:	f7ff fcbe 	bl	800761c <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8007ca0:	4b32      	ldr	r3, [pc, #200]	; (8007d6c <ECAT_Main+0x188>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d05d      	beq.n	8007d64 <ECAT_Main+0x180>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
        if(!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d108      	bne.n	8007cc4 <ECAT_Main+0xe0>
            AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8007cb2:	4b30      	ldr	r3, [pc, #192]	; (8007d74 <ECAT_Main+0x190>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f8fc 	bl	8006ebc <AL_ControlInd>

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00f      	beq.n	8007cee <ECAT_Main+0x10a>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u16dummy = 0;
 8007cce:	4b2a      	ldr	r3, [pc, #168]	; (8007d78 <ECAT_Main+0x194>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	801a      	strh	r2, [r3, #0]
            HW_EscWriteWord(u16dummy,u16EscAddrSendMbx);
 8007cd4:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <ECAT_Main+0x198>)
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4826      	ldr	r0, [pc, #152]	; (8007d78 <ECAT_Main+0x194>)
 8007cde:	f7fd fafb 	bl	80052d8 <HW_EscWrite>

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ce8:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 8007cea:	f000 fab5 	bl	8008258 <MBX_MailboxReadInd>
        }

        DISABLE_MBX_INT;
        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 8007cee:	887b      	ldrh	r3, [r7, #2]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <ECAT_Main+0x11c>
 8007cf8:	4b21      	ldr	r3, [pc, #132]	; (8007d80 <ECAT_Main+0x19c>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <ECAT_Main+0x12e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8007d00:	887b      	ldrh	r3, [r7, #2]
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d11d      	bne.n	8007d46 <ECAT_Main+0x162>
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <ECAT_Main+0x19c>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d019      	beq.n	8007d46 <ECAT_Main+0x162>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8007d12:	f000 fb09 	bl	8008328 <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            if(bMbxRepeatToggle)
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <ECAT_Main+0x19c>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <ECAT_Main+0x146>
                sm1Activate |= SM_SETTING_REPEAT_ACK; //set repeat acknowledge bit (bit 9)
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	807b      	strh	r3, [r7, #2]
 8007d28:	e004      	b.n	8007d34 <ECAT_Main+0x150>
            else
                sm1Activate &= ~SM_SETTING_REPEAT_ACK; //clear repeat acknowledge bit (bit 9)
 8007d2a:	887b      	ldrh	r3, [r7, #2]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	807b      	strh	r3, [r7, #2]

            sm1Activate = SWAPWORD(sm1Activate);
 8007d34:	887b      	ldrh	r3, [r7, #2]
 8007d36:	807b      	strh	r3, [r7, #2]
            HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8007d38:	1cbb      	adds	r3, r7, #2
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f640 010e 	movw	r1, #2062	; 0x80e
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fd fac9 	bl	80052d8 <HW_EscWrite>
        }
        ENABLE_MBX_INT;

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8007d46:	f7fd fa4b 	bl	80051e0 <HW_GetALEventRegister>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <ECAT_Main+0x180>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d5e:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8007d60:	f000 fb8c 	bl	800847c <MBX_CheckAndCopyMailbox>

        }
    }
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000dfe 	.word	0x20000dfe
 8007d70:	20000b72 	.word	0x20000b72
 8007d74:	20000b4d 	.word	0x20000b4d
 8007d78:	20000b54 	.word	0x20000b54
 8007d7c:	20000e12 	.word	0x20000e12
 8007d80:	20000e1c 	.word	0x20000e1c

08007d84 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	885b      	ldrh	r3, [r3, #2]
 8007d92:	3301      	adds	r3, #1
 8007d94:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	889b      	ldrh	r3, [r3, #4]
 8007d9a:	89fa      	ldrh	r2, [r7, #14]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d101      	bne.n	8007da4 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	89fa      	ldrh	r2, [r7, #14]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d101      	bne.n	8007db2 <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8007dae:	2307      	movs	r3, #7
 8007db0:	e00b      	b.n	8007dca <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	885b      	ldrh	r3, [r3, #2]
 8007db6:	461a      	mov	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	3202      	adds	r2, #2
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	89fa      	ldrh	r2, [r7, #14]
 8007dc6:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	881a      	ldrh	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d018      	beq.n	8007e1c <GetOutOfMbxQueue+0x46>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8007df0:	897a      	ldrh	r2, [r7, #10]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3202      	adds	r2, #2
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 8007dfc:	897b      	ldrh	r3, [r7, #10]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	897a      	ldrh	r2, [r7, #10]
 8007e06:	801a      	strh	r2, [r3, #0]
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	881a      	ldrh	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	889b      	ldrh	r3, [r3, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d105      	bne.n	8007e20 <GetOutOfMbxQueue+0x4a>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e001      	b.n	8007e20 <GetOutOfMbxQueue+0x4a>
        }
    }
    else
        pMbx = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8007e20:	68fb      	ldr	r3, [r7, #12]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8007e36:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <MBX_Init+0xbc>)
 8007e38:	2222      	movs	r2, #34	; 0x22
 8007e3a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 8007e3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ef0 <MBX_Init+0xc0>)
 8007e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e42:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8007e44:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <MBX_Init+0xc4>)
 8007e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e4a:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 8007e4c:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <MBX_Init+0xc8>)
 8007e4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e52:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8007e54:	4b29      	ldr	r3, [pc, #164]	; (8007efc <MBX_Init+0xcc>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8007e5a:	4b28      	ldr	r3, [pc, #160]	; (8007efc <MBX_Init+0xcc>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <MBX_Init+0xcc>)
 8007e62:	220a      	movs	r2, #10
 8007e64:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8007e66:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <MBX_Init+0xd0>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <MBX_Init+0xd0>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8007e72:	4b23      	ldr	r3, [pc, #140]	; (8007f00 <MBX_Init+0xd0>)
 8007e74:	220a      	movs	r2, #10
 8007e76:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8007e78:	4b22      	ldr	r3, [pc, #136]	; (8007f04 <MBX_Init+0xd4>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 8007e7e:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <MBX_Init+0xd8>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8007e84:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <MBX_Init+0xdc>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8007e8a:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <MBX_Init+0xe0>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <MBX_Init+0xe4>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8007e9a:	1dbb      	adds	r3, r7, #6
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f640 010e 	movw	r1, #2062	; 0x80e
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fd f9b0 	bl	8005208 <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8007eb2:	1dbb      	adds	r3, r7, #6
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f640 010e 	movw	r1, #2062	; 0x80e
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd fa0c 	bl	80052d8 <HW_EscWrite>
    }
    bMbxRunning = FALSE;
 8007ec0:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <MBX_Init+0xe8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8007ec6:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <MBX_Init+0xec>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <MBX_Init+0xf0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <MBX_Init+0xf4>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <MBX_Init+0xf8>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <MBX_Init+0xfc>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000e1a 	.word	0x20000e1a
 8007ef0:	20000e08 	.word	0x20000e08
 8007ef4:	20000e00 	.word	0x20000e00
 8007ef8:	20000e12 	.word	0x20000e12
 8007efc:	20000dc8 	.word	0x20000dc8
 8007f00:	20000d94 	.word	0x20000d94
 8007f04:	20000e14 	.word	0x20000e14
 8007f08:	20000e20 	.word	0x20000e20
 8007f0c:	20000e0c 	.word	0x20000e0c
 8007f10:	20000e04 	.word	0x20000e04
 8007f14:	20000e1c 	.word	0x20000e1c
 8007f18:	20000dfe 	.word	0x20000dfe
 8007f1c:	20000dfd 	.word	0x20000dfd
 8007f20:	20000e10 	.word	0x20000e10
 8007f24:	20000e19 	.word	0x20000e19
 8007f28:	20000e18 	.word	0x20000e18
 8007f2c:	20000d90 	.word	0x20000d90

08007f30 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	80fb      	strh	r3, [r7, #6]
    /* get address of the receive mailbox sync manager (SM0) */
/*ECATCHANGE_START(V5.11) HW1*/
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f7fe f89c 	bl	8006078 <GetSyncMan>
 8007f40:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885a      	ldrh	r2, [r3, #2]
 8007f46:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <MBX_StartMailboxHandler+0xd4>)
 8007f48:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	881a      	ldrh	r2, [r3, #0]
 8007f4e:	4b2e      	ldr	r3, [pc, #184]	; (8008008 <MBX_StartMailboxHandler+0xd8>)
 8007f50:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8007f52:	2001      	movs	r0, #1
 8007f54:	f7fe f890 	bl	8006078 <GetSyncMan>
 8007f58:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885a      	ldrh	r2, [r3, #2]
 8007f5e:	4b2b      	ldr	r3, [pc, #172]	; (800800c <MBX_StartMailboxHandler+0xdc>)
 8007f60:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	881a      	ldrh	r2, [r3, #0]
 8007f66:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <MBX_StartMailboxHandler+0xe0>)
 8007f68:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <MBX_StartMailboxHandler+0xd8>)
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4b24      	ldr	r3, [pc, #144]	; (8008004 <MBX_StartMailboxHandler+0xd4>)
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	4a26      	ldr	r2, [pc, #152]	; (8008010 <MBX_StartMailboxHandler+0xe0>)
 8007f78:	8812      	ldrh	r2, [r2, #0]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	dd0c      	ble.n	8007f98 <MBX_StartMailboxHandler+0x68>
 8007f7e:	4b22      	ldr	r3, [pc, #136]	; (8008008 <MBX_StartMailboxHandler+0xd8>)
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <MBX_StartMailboxHandler+0xe0>)
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4b20      	ldr	r3, [pc, #128]	; (800800c <MBX_StartMailboxHandler+0xdc>)
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	440b      	add	r3, r1
 8007f90:	429a      	cmp	r2, r3
 8007f92:	da01      	bge.n	8007f98 <MBX_StartMailboxHandler+0x68>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8007f94:	2316      	movs	r3, #22
 8007f96:	e031      	b.n	8007ffc <MBX_StartMailboxHandler+0xcc>
    }

    /* enable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    EnableSyncManChannel(MAILBOX_WRITE);
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f7fe f8ad 	bl	80060f8 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f7fe f8aa 	bl	80060f8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

/* ECATCHANGE_START(V5.11) MBX2*/
        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <MBX_StartMailboxHandler+0xd4>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f003 fb0d 	bl	800b5c8 <malloc>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007fb4:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8007fb6:	4b17      	ldr	r3, [pc, #92]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d115      	bne.n	8007fea <MBX_StartMailboxHandler+0xba>
        {
            bNoMbxMemoryAvailable = TRUE;
 8007fbe:	4b16      	ldr	r3, [pc, #88]	; (8008018 <MBX_StartMailboxHandler+0xe8>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8007fc4:	200a      	movs	r0, #10
 8007fc6:	f003 faff 	bl	800b5c8 <malloc>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007fd0:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8007fd2:	4b10      	ldr	r3, [pc, #64]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <MBX_StartMailboxHandler+0xae>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	80fb      	strh	r3, [r7, #6]
            }
           
            APPL_FreeMailboxBuffer(psWriteMbx);
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f003 faf8 	bl	800b5d8 <free>
 8007fe8:	e007      	b.n	8007ffa <MBX_StartMailboxHandler+0xca>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <MBX_StartMailboxHandler+0xe8>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8007ff0:	4b08      	ldr	r3, [pc, #32]	; (8008014 <MBX_StartMailboxHandler+0xe4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f003 faef 	bl	800b5d8 <free>
        }
/* ECATCHANGE_END(V5.11) MBX2*/

    return result;
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000e1a 	.word	0x20000e1a
 8008008:	20000e00 	.word	0x20000e00
 800800c:	20000e08 	.word	0x20000e08
 8008010:	20000e12 	.word	0x20000e12
 8008014:	20000e14 	.word	0x20000e14
 8008018:	20000dfc 	.word	0x20000dfc

0800801c <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8008022:	4b44      	ldr	r3, [pc, #272]	; (8008134 <MBX_StopMailboxHandler+0x118>)
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    DisableSyncManChannel(MAILBOX_WRITE);
 8008028:	2000      	movs	r0, #0
 800802a:	f7fe f83d 	bl	80060a8 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 800802e:	2001      	movs	r0, #1
 8008030:	f7fe f83a 	bl	80060a8 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8008034:	4b40      	ldr	r3, [pc, #256]	; (8008138 <MBX_StopMailboxHandler+0x11c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <MBX_StopMailboxHandler+0x2a>
        APPL_FreeMailboxBuffer(psRepeatMbx);
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <MBX_StopMailboxHandler+0x11c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f003 fac9 	bl	800b5d8 <free>

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8008046:	4b3d      	ldr	r3, [pc, #244]	; (800813c <MBX_StopMailboxHandler+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <MBX_StopMailboxHandler+0x48>
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <MBX_StopMailboxHandler+0x120>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b39      	ldr	r3, [pc, #228]	; (8008138 <MBX_StopMailboxHandler+0x11c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d004      	beq.n	8008064 <MBX_StopMailboxHandler+0x48>
        APPL_FreeMailboxBuffer(psStoreMbx);
 800805a:	4b38      	ldr	r3, [pc, #224]	; (800813c <MBX_StopMailboxHandler+0x120>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f003 faba 	bl	800b5d8 <free>

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <MBX_StopMailboxHandler+0x124>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d010      	beq.n	800808e <MBX_StopMailboxHandler+0x72>
 800806c:	4b34      	ldr	r3, [pc, #208]	; (8008140 <MBX_StopMailboxHandler+0x124>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b31      	ldr	r3, [pc, #196]	; (8008138 <MBX_StopMailboxHandler+0x11c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d00a      	beq.n	800808e <MBX_StopMailboxHandler+0x72>
 8008078:	4b31      	ldr	r3, [pc, #196]	; (8008140 <MBX_StopMailboxHandler+0x124>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	4b2f      	ldr	r3, [pc, #188]	; (800813c <MBX_StopMailboxHandler+0x120>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d004      	beq.n	800808e <MBX_StopMailboxHandler+0x72>
        APPL_FreeMailboxBuffer(psReadMbx);
 8008084:	4b2e      	ldr	r3, [pc, #184]	; (8008140 <MBX_StopMailboxHandler+0x124>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f003 faa5 	bl	800b5d8 <free>


    psRepeatMbx = NULL;
 800808e:	4b2a      	ldr	r3, [pc, #168]	; (8008138 <MBX_StopMailboxHandler+0x11c>)
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 8008094:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <MBX_StopMailboxHandler+0x124>)
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 800809a:	4b28      	ldr	r3, [pc, #160]	; (800813c <MBX_StopMailboxHandler+0x120>)
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80080a0:	4b28      	ldr	r3, [pc, #160]	; (8008144 <MBX_StopMailboxHandler+0x128>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	807b      	strh	r3, [r7, #2]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80080aa:	1cbb      	adds	r3, r7, #2
 80080ac:	2202      	movs	r2, #2
 80080ae:	f640 010e 	movw	r1, #2062	; 0x80e
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd f8a8 	bl	8005208 <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080be:	b29b      	uxth	r3, r3
 80080c0:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80080c2:	1cbb      	adds	r3, r7, #2
 80080c4:	2202      	movs	r2, #2
 80080c6:	f640 010e 	movw	r1, #2062	; 0x80e
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fd f904 	bl	80052d8 <HW_EscWrite>
    }
    bSendMbxIsFull         = FALSE;
 80080d0:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <MBX_StopMailboxHandler+0x12c>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 80080d6:	4b1d      	ldr	r3, [pc, #116]	; (800814c <MBX_StopMailboxHandler+0x130>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 80080dc:	4b1c      	ldr	r3, [pc, #112]	; (8008150 <MBX_StopMailboxHandler+0x134>)
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <MBX_StopMailboxHandler+0x138>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 80080e8:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <MBX_StopMailboxHandler+0x13c>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80080ee:	481b      	ldr	r0, [pc, #108]	; (800815c <MBX_StopMailboxHandler+0x140>)
 80080f0:	f7ff fe71 	bl	8007dd6 <GetOutOfMbxQueue>
 80080f4:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <MBX_StopMailboxHandler+0xea>
        {
            APPL_FreeMailboxBuffer(pMbx);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f003 fa6b 	bl	800b5d8 <free>
            pMbx = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f0      	bne.n	80080ee <MBX_StopMailboxHandler+0xd2>
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 800810c:	4814      	ldr	r0, [pc, #80]	; (8008160 <MBX_StopMailboxHandler+0x144>)
 800810e:	f7ff fe62 	bl	8007dd6 <GetOutOfMbxQueue>
 8008112:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <MBX_StopMailboxHandler+0x108>
        {
            APPL_FreeMailboxBuffer(pMbx);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f003 fa5c 	bl	800b5d8 <free>
            pMbx = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <MBX_StopMailboxHandler+0xf0>

}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000dfe 	.word	0x20000dfe
 8008138:	20000e20 	.word	0x20000e20
 800813c:	20000e04 	.word	0x20000e04
 8008140:	20000e0c 	.word	0x20000e0c
 8008144:	20000e1c 	.word	0x20000e1c
 8008148:	20000dfd 	.word	0x20000dfd
 800814c:	20000e10 	.word	0x20000e10
 8008150:	20000e19 	.word	0x20000e19
 8008154:	20000e18 	.word	0x20000e18
 8008158:	20000d90 	.word	0x20000d90
 800815c:	20000dc8 	.word	0x20000dc8
 8008160:	20000d94 	.word	0x20000d94

08008164 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	889b      	ldrh	r3, [r3, #4]
 8008170:	121b      	asrs	r3, r3, #8
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	2b03      	cmp	r3, #3
 8008178:	d105      	bne.n	8008186 <MailboxServiceInd+0x22>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fd fe66 	bl	8005e4c <COE_ServiceInd>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
        break;
 8008184:	e002      	b.n	800818c <MailboxServiceInd+0x28>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8008186:	2302      	movs	r3, #2
 8008188:	73fb      	strb	r3, [r7, #15]
        break;
 800818a:	bf00      	nop
    }

    return result;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	889b      	ldrh	r3, [r3, #4]
 80081a8:	0b1b      	lsrs	r3, r3, #12
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 80081b4:	89bb      	ldrh	r3, [r7, #12]
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d914      	bls.n	80081e6 <MBX_MailboxWriteInd+0x4e>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2204      	movs	r2, #4
 80081c0:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	809a      	strh	r2, [r3, #4]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2208      	movs	r2, #8
 80081da:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8e0 	bl	80083a4 <MBX_MailboxSendReq>
    else
    {
        APPL_FreeMailboxBuffer(pMbx);
        pMbx = NULL;
    }
}
 80081e4:	e02f      	b.n	8008246 <MBX_MailboxWriteInd+0xae>
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <MBX_MailboxWriteInd+0x5e>
 80081ec:	4b18      	ldr	r3, [pc, #96]	; (8008250 <MBX_MailboxWriteInd+0xb8>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	7bba      	ldrb	r2, [r7, #14]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d021      	beq.n	800823a <MBX_MailboxWriteInd+0xa2>
        u8MbxWriteCounter = mbxCounter;
 80081f6:	4a16      	ldr	r2, [pc, #88]	; (8008250 <MBX_MailboxWriteInd+0xb8>)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	7013      	strb	r3, [r2, #0]
            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 80081fc:	4915      	ldr	r1, [pc, #84]	; (8008254 <MBX_MailboxWriteInd+0xbc>)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fdc0 	bl	8007d84 <PutInMbxQueue>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
        if ( result != 0 )
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01b      	beq.n	8008246 <MBX_MailboxWriteInd+0xae>
            pMbx->MbxHeader.Length     = 4;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2204      	movs	r2, #4
 8008212:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	889b      	ldrh	r3, [r3, #4]
 8008218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800821c:	b29a      	uxth	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8008230:	2100      	movs	r1, #0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f8b6 	bl	80083a4 <MBX_MailboxSendReq>
        if ( result != 0 )
 8008238:	e005      	b.n	8008246 <MBX_MailboxWriteInd+0xae>
        APPL_FreeMailboxBuffer(pMbx);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f003 f9cc 	bl	800b5d8 <free>
        pMbx = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	607b      	str	r3, [r7, #4]
}
 8008244:	e7ff      	b.n	8008246 <MBX_MailboxWriteInd+0xae>
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000e18 	.word	0x20000e18
 8008254:	20000dc8 	.word	0x20000dc8

08008258 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 800825e:	4b2b      	ldr	r3, [pc, #172]	; (800830c <MBX_MailboxReadInd+0xb4>)
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8008264:	4b2a      	ldr	r3, [pc, #168]	; (8008310 <MBX_MailboxReadInd+0xb8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <MBX_MailboxReadInd+0x2c>
 800826c:	4b29      	ldr	r3, [pc, #164]	; (8008314 <MBX_MailboxReadInd+0xbc>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d107      	bne.n	8008284 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8008274:	4b26      	ldr	r3, [pc, #152]	; (8008310 <MBX_MailboxReadInd+0xb8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f003 f9ad 	bl	800b5d8 <free>
        psRepeatMbx = NULL;
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <MBX_MailboxReadInd+0xb8>)
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8008284:	4b24      	ldr	r3, [pc, #144]	; (8008318 <MBX_MailboxReadInd+0xc0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a21      	ldr	r2, [pc, #132]	; (8008310 <MBX_MailboxReadInd+0xb8>)
 800828a:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 800828c:	4b21      	ldr	r3, [pc, #132]	; (8008314 <MBX_MailboxReadInd+0xbc>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d008      	beq.n	80082a6 <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <MBX_MailboxReadInd+0xbc>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f991 	bl	80085c0 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 800829e:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <MBX_MailboxReadInd+0xbc>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e009      	b.n	80082ba <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80082a6:	481d      	ldr	r0, [pc, #116]	; (800831c <MBX_MailboxReadInd+0xc4>)
 80082a8:	f7ff fd95 	bl	8007dd6 <GetOutOfMbxQueue>
 80082ac:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f983 	bl	80085c0 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 80082ba:	4b19      	ldr	r3, [pc, #100]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01f      	beq.n	8008302 <MBX_MailboxReadInd+0xaa>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80082c2:	4b17      	ldr	r3, [pc, #92]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d019      	beq.n	8008302 <MBX_MailboxReadInd+0xaa>
        {
           UINT8 result = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 80082d2:	4b13      	ldr	r3, [pc, #76]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	f023 0302 	bic.w	r3, r3, #2
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	4b10      	ldr	r3, [pc, #64]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 80082de:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <MBX_MailboxReadInd+0xcc>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fd fde9 	bl	8005ebc <COE_ContinueInd>
 80082ea:	4603      	mov	r3, r0
 80082ec:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <MBX_MailboxReadInd+0xaa>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 80082f4:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f043 0302 	orr.w	r3, r3, #2
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <MBX_MailboxReadInd+0xc8>)
 8008300:	701a      	strb	r2, [r3, #0]
        }
        else
        {
        }
    }
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000dfd 	.word	0x20000dfd
 8008310:	20000e20 	.word	0x20000e20
 8008314:	20000e04 	.word	0x20000e04
 8008318:	20000e0c 	.word	0x20000e0c
 800831c:	20000d94 	.word	0x20000d94
 8008320:	20000e19 	.word	0x20000e19
 8008324:	20000e14 	.word	0x20000e14

08008328 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <MBX_MailboxRepeatReq+0x68>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01d      	beq.n	8008372 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8008336:	4b16      	ldr	r3, [pc, #88]	; (8008390 <MBX_MailboxRepeatReq+0x68>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 800833c:	4b15      	ldr	r3, [pc, #84]	; (8008394 <MBX_MailboxRepeatReq+0x6c>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d010      	beq.n	8008366 <MBX_MailboxRepeatReq+0x3e>
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <MBX_MailboxRepeatReq+0x70>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
/*ECATCHANGE_START(V5.11) HW1*/
            DisableSyncManChannel(MAILBOX_READ);
 800834c:	2001      	movs	r0, #1
 800834e:	f7fd feab 	bl	80060a8 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <MBX_MailboxRepeatReq+0x74>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a10      	ldr	r2, [pc, #64]	; (8008398 <MBX_MailboxRepeatReq+0x70>)
 8008358:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 800835a:	2001      	movs	r0, #1
 800835c:	f7fd fecc 	bl	80060f8 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8008360:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <MBX_MailboxRepeatReq+0x6c>)
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f92a 	bl	80085c0 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 800836c:	4b08      	ldr	r3, [pc, #32]	; (8008390 <MBX_MailboxRepeatReq+0x68>)
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <MBX_MailboxRepeatReq+0x78>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf0c      	ite	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	2300      	movne	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <MBX_MailboxRepeatReq+0x78>)
 8008384:	701a      	strb	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000e20 	.word	0x20000e20
 8008394:	20000dfd 	.word	0x20000dfd
 8008398:	20000e04 	.word	0x20000e04
 800839c:	20000e0c 	.word	0x20000e0c
 80083a0:	20000e1c 	.word	0x20000e1c

080083a4 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <MBX_MailboxSendReq+0xc8>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <MBX_MailboxSendReq+0x20>
        return ERROR_INVALIDSTATE;
 80083c0:	23f0      	movs	r3, #240	; 0xf0
 80083c2:	e04e      	b.n	8008462 <MBX_MailboxSendReq+0xbe>
    ENTER_MBX_CRITICAL;
    DISABLE_MBX_INT;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	889b      	ldrh	r3, [r3, #4]
 80083c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	809a      	strh	r2, [r3, #4]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 80083d2:	4b27      	ldr	r3, [pc, #156]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <MBX_MailboxSendReq+0x40>
        u8MbxReadCounter = 1;
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	701a      	strb	r2, [r3, #0]

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	889b      	ldrh	r3, [r3, #4]
 80083e8:	b21a      	sxth	r2, r3
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	b21b      	sxth	r3, r3
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	809a      	strh	r2, [r3, #4]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f8df 	bl	80085c0 <MBX_CopyToSendMailbox>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d014      	beq.n	8008432 <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8008408:	491a      	ldr	r1, [pc, #104]	; (8008474 <MBX_MailboxSendReq+0xd0>)
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fcba 	bl	8007d84 <PutInMbxQueue>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d004      	beq.n	8008424 <MBX_MailboxSendReq+0x80>
            flags |= FRAGMENTS_FOLLOW;
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008420:	70fb      	strb	r3, [r7, #3]
 8008422:	e00c      	b.n	800843e <MBX_MailboxSendReq+0x9a>
        else
            u8MbxReadCounter++;
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e005      	b.n	800843e <MBX_MailboxSendReq+0x9a>
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <MBX_MailboxSendReq+0xcc>)
 800843c:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 800843e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da0c      	bge.n	8008460 <MBX_MailboxSendReq+0xbc>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8008446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800844a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844e:	b25a      	sxtb	r2, r3
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <MBX_MailboxSendReq+0xd4>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b25b      	sxtb	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b25b      	sxtb	r3, r3
 800845a:	b2da      	uxtb	r2, r3
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <MBX_MailboxSendReq+0xd4>)
 800845e:	701a      	strb	r2, [r3, #0]
    }

    ENABLE_MBX_INT;
    LEAVE_MBX_CRITICAL;

    return result;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000b4d 	.word	0x20000b4d
 8008470:	20000d90 	.word	0x20000d90
 8008474:	20000d94 	.word	0x20000d94
 8008478:	20000e19 	.word	0x20000e19

0800847c <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 8008482:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <MBX_CheckAndCopyMailbox+0x124>)
 8008484:	8819      	ldrh	r1, [r3, #0]
 8008486:	1cbb      	adds	r3, r7, #2
 8008488:	2202      	movs	r2, #2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fc febc 	bl	8005208 <HW_EscRead>
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	807b      	strh	r3, [r7, #2]

/* ECATCHANGE_START(V5.11) MBX2*/
    if(bNoMbxMemoryAvailable == TRUE)
 8008494:	4b43      	ldr	r3, [pc, #268]	; (80085a4 <MBX_CheckAndCopyMailbox+0x128>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d123      	bne.n	80084e4 <MBX_CheckAndCopyMailbox+0x68>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 800849c:	200a      	movs	r0, #10
 800849e:	f003 f893 	bl	800b5c8 <malloc>
 80084a2:	4603      	mov	r3, r0
 80084a4:	607b      	str	r3, [r7, #4]

        if(pMbx != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01b      	beq.n	80084e4 <MBX_CheckAndCopyMailbox+0x68>
        {
            HMEMSET(pMbx,0x00,10);
 80084ac:	220a      	movs	r2, #10
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 f8a7 	bl	800b604 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2204      	movs	r2, #4
 80084ba:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	889b      	ldrh	r3, [r3, #4]
 80084c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2207      	movs	r2, #7
 80084d4:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ff63 	bl	80083a4 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f003 f87a 	bl	800b5d8 <free>
        }
    }
/* ECATCHANGE_END(V5.11) MBX2*/
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 80084e4:	887b      	ldrh	r3, [r7, #2]
 80084e6:	3306      	adds	r3, #6
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	807b      	strh	r3, [r7, #2]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 80084ec:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <MBX_CheckAndCopyMailbox+0x12c>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <MBX_CheckAndCopyMailbox+0x80>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 80084f4:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <MBX_CheckAndCopyMailbox+0x130>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <MBX_CheckAndCopyMailbox+0x88>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 80084fc:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <MBX_CheckAndCopyMailbox+0x134>)
 80084fe:	2201      	movs	r2, #1
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	e04a      	b.n	800859a <MBX_CheckAndCopyMailbox+0x11e>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 8008504:	4b2a      	ldr	r3, [pc, #168]	; (80085b0 <MBX_CheckAndCopyMailbox+0x134>)
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 800850a:	887a      	ldrh	r2, [r7, #2]
 800850c:	4b29      	ldr	r3, [pc, #164]	; (80085b4 <MBX_CheckAndCopyMailbox+0x138>)
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d902      	bls.n	800851a <MBX_CheckAndCopyMailbox+0x9e>
            mbxLen = u16ReceiveMbxSize;
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <MBX_CheckAndCopyMailbox+0x138>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	807b      	strh	r3, [r7, #2]

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <MBX_CheckAndCopyMailbox+0x138>)
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f003 f852 	bl	800b5c8 <malloc>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <MBX_CheckAndCopyMailbox+0x13c>)
 800852a:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 800852c:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <MBX_CheckAndCopyMailbox+0x13c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <MBX_CheckAndCopyMailbox+0xc0>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 8008534:	4b1e      	ldr	r3, [pc, #120]	; (80085b0 <MBX_CheckAndCopyMailbox+0x134>)
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e02e      	b.n	800859a <MBX_CheckAndCopyMailbox+0x11e>
            return;
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 800853c:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <MBX_CheckAndCopyMailbox+0x13c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a17      	ldr	r2, [pc, #92]	; (80085a0 <MBX_CheckAndCopyMailbox+0x124>)
 8008542:	8811      	ldrh	r1, [r2, #0]
 8008544:	887a      	ldrh	r2, [r7, #2]
 8008546:	4618      	mov	r0, r3
 8008548:	f7fc fe5e 	bl	8005208 <HW_EscRead>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT16 smstate = 0x00;
 800854c:	2300      	movs	r3, #0
 800854e:	803b      	strh	r3, [r7, #0]
        HW_EscReadWord(smstate,ESC_SYNCMAN_CONTROL_OFFSET);
 8008550:	463b      	mov	r3, r7
 8008552:	2202      	movs	r2, #2
 8008554:	f640 0104 	movw	r1, #2052	; 0x804
 8008558:	4618      	mov	r0, r3
 800855a:	f7fc fe55 	bl	8005208 <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800855e:	883b      	ldrh	r3, [r7, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	803b      	strh	r3, [r7, #0]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8008564:	883b      	ldrh	r3, [r7, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <MBX_CheckAndCopyMailbox+0x114>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u16dummy = 0;
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <MBX_CheckAndCopyMailbox+0x140>)
 8008572:	2200      	movs	r2, #0
 8008574:	801a      	strh	r2, [r3, #0]
            HW_EscReadWord(u16dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 2));
 8008576:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <MBX_CheckAndCopyMailbox+0x124>)
 8008578:	881a      	ldrh	r2, [r3, #0]
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <MBX_CheckAndCopyMailbox+0x138>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	4413      	add	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b02      	subs	r3, #2
 8008584:	b29b      	uxth	r3, r3
 8008586:	2202      	movs	r2, #2
 8008588:	4619      	mov	r1, r3
 800858a:	480c      	ldr	r0, [pc, #48]	; (80085bc <MBX_CheckAndCopyMailbox+0x140>)
 800858c:	f7fc fe3c 	bl	8005208 <HW_EscRead>
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <MBX_CheckAndCopyMailbox+0x13c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fdff 	bl	8008198 <MBX_MailboxWriteInd>

    }
}
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000e00 	.word	0x20000e00
 80085a4:	20000dfc 	.word	0x20000dfc
 80085a8:	20000dfd 	.word	0x20000dfd
 80085ac:	20000e19 	.word	0x20000e19
 80085b0:	20000e10 	.word	0x20000e10
 80085b4:	20000e1a 	.word	0x20000e1a
 80085b8:	20000e14 	.word	0x20000e14
 80085bc:	20000b54 	.word	0x20000b54

080085c0 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 80085c8:	4b39      	ldr	r3, [pc, #228]	; (80086b0 <MBX_CopyToSendMailbox+0xf0>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80085d4:	23f0      	movs	r3, #240	; 0xf0
 80085d6:	e067      	b.n	80086a8 <MBX_CopyToSendMailbox+0xe8>
    }


    if ( !bMbxRunning )
 80085d8:	4b36      	ldr	r3, [pc, #216]	; (80086b4 <MBX_CopyToSendMailbox+0xf4>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <MBX_CopyToSendMailbox+0x24>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80085e0:	23f0      	movs	r3, #240	; 0xf0
 80085e2:	e061      	b.n	80086a8 <MBX_CopyToSendMailbox+0xe8>
    }

    if ( bSendMbxIsFull )
 80085e4:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <MBX_CopyToSendMailbox+0xf8>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MBX_CopyToSendMailbox+0x30>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 80085ec:	2307      	movs	r3, #7
 80085ee:	e05b      	b.n	80086a8 <MBX_CopyToSendMailbox+0xe8>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	82fb      	strh	r3, [r7, #22]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 80085f6:	4b31      	ldr	r3, [pc, #196]	; (80086bc <MBX_CopyToSendMailbox+0xfc>)
 80085f8:	8819      	ldrh	r1, [r3, #0]
 80085fa:	8afb      	ldrh	r3, [r7, #22]
 80085fc:	3306      	adds	r3, #6
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fc fe68 	bl	80052d8 <HW_EscWrite>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT16 smstate = 0x00;
 8008608:	2300      	movs	r3, #0
 800860a:	81fb      	strh	r3, [r7, #14]
        HW_EscReadWord(smstate,(ESC_SYNCMAN_CONTROL_OFFSET + SIZEOF_SM_REGISTER));
 800860c:	f107 030e 	add.w	r3, r7, #14
 8008610:	2202      	movs	r2, #2
 8008612:	f640 010c 	movw	r1, #2060	; 0x80c
 8008616:	4618      	mov	r0, r3
 8008618:	f7fc fdf6 	bl	8005208 <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	b29b      	uxth	r3, r3
 8008620:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 8008622:	89fb      	ldrh	r3, [r7, #14]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800862a:	2b00      	cmp	r3, #0
 800862c:	d12a      	bne.n	8008684 <MBX_CopyToSendMailbox+0xc4>
        {
            UINT8 BytesLeft = u16SendMbxSize - (mbxSize + MBX_HEADER_SIZE);
 800862e:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <MBX_CopyToSendMailbox+0x100>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	8afb      	ldrh	r3, [r7, #22]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	b2db      	uxtb	r3, r3
 800863c:	3b06      	subs	r3, #6
 800863e:	757b      	strb	r3, [r7, #21]

            /*Write last Byte to trigger mailbox full flag*/
            /*Read last 2 Bytes and write them again (required if low Byte of the WORD were written before)*/
            u16dummy = 0;
 8008640:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <MBX_CopyToSendMailbox+0x104>)
 8008642:	2200      	movs	r2, #0
 8008644:	801a      	strh	r2, [r3, #0]
            if(BytesLeft < 2)
 8008646:	7d7b      	ldrb	r3, [r7, #21]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d80e      	bhi.n	800866a <MBX_CopyToSendMailbox+0xaa>
            {
                /*The last 2Bytes are overlapping the already written buffer*/
                                
                /*Get the valid 16Bit address*/
                UINT32 LastDataAddress = ((mbxSize + MBX_HEADER_SIZE)/2)*2;
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	3306      	adds	r3, #6
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	613b      	str	r3, [r7, #16]
            
                /*Copy the buffer to overwrite*/
                MEMCPY((UINT16 *)&u16dummy,(((UINT8 *)pMbx) + LastDataAddress),(2 - BytesLeft));
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	18d1      	adds	r1, r2, r3
 800865c:	7d7b      	ldrb	r3, [r7, #21]
 800865e:	f1c3 0302 	rsb	r3, r3, #2
 8008662:	461a      	mov	r2, r3
 8008664:	4817      	ldr	r0, [pc, #92]	; (80086c4 <MBX_CopyToSendMailbox+0x104>)
 8008666:	f002 ffbf 	bl	800b5e8 <memcpy>
            }
            
            HW_EscWriteWord(u16dummy,(u16EscAddrSendMbx + u16SendMbxSize - 2));
 800866a:	4b14      	ldr	r3, [pc, #80]	; (80086bc <MBX_CopyToSendMailbox+0xfc>)
 800866c:	881a      	ldrh	r2, [r3, #0]
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <MBX_CopyToSendMailbox+0x100>)
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	4413      	add	r3, r2
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b02      	subs	r3, #2
 8008678:	b29b      	uxth	r3, r3
 800867a:	2202      	movs	r2, #2
 800867c:	4619      	mov	r1, r3
 800867e:	4811      	ldr	r0, [pc, #68]	; (80086c4 <MBX_CopyToSendMailbox+0x104>)
 8008680:	f7fc fe2a 	bl	80052d8 <HW_EscWrite>
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 8008684:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <MBX_CopyToSendMailbox+0x108>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <MBX_CopyToSendMailbox+0xd4>
            psWriteMbx = NULL;
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <MBX_CopyToSendMailbox+0x10c>)
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e002      	b.n	800869a <MBX_CopyToSendMailbox+0xda>
        else
        {
            /* only the first time after the INIT2PREOP-transition */
            psWriteMbx = &asMbx[1];
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <MBX_CopyToSendMailbox+0x10c>)
 8008696:	4a0e      	ldr	r2, [pc, #56]	; (80086d0 <MBX_CopyToSendMailbox+0x110>)
 8008698:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 800869a:	4a0b      	ldr	r2, [pc, #44]	; (80086c8 <MBX_CopyToSendMailbox+0x108>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <MBX_CopyToSendMailbox+0xf8>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]


        return 0;
 80086a6:	2300      	movs	r3, #0
    }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000b4d 	.word	0x20000b4d
 80086b4:	20000dfe 	.word	0x20000dfe
 80086b8:	20000dfd 	.word	0x20000dfd
 80086bc:	20000e12 	.word	0x20000e12
 80086c0:	20000e08 	.word	0x20000e08
 80086c4:	20000b54 	.word	0x20000b54
 80086c8:	20000e0c 	.word	0x20000e0c
 80086cc:	20000e14 	.word	0x20000e14
 80086d0:	20000c90 	.word	0x20000c90

080086d4 <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80086e2:	4818      	ldr	r0, [pc, #96]	; (8008744 <MBX_Main+0x70>)
 80086e4:	f7ff fb77 	bl	8007dd6 <GetOutOfMbxQueue>
 80086e8:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <MBX_Main+0x26>
            result = MailboxServiceInd(pMbx);
 80086f0:	6838      	ldr	r0, [r7, #0]
 80086f2:	f7ff fd37 	bl	8008164 <MailboxServiceInd>
 80086f6:	4603      	mov	r3, r0
 80086f8:	71fb      	strb	r3, [r7, #7]

        if ( result != 0 )
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d014      	beq.n	800872a <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2204      	movs	r2, #4
 8008704:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	889b      	ldrh	r3, [r3, #4]
 800870a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800870e:	b29a      	uxth	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2201      	movs	r2, #1
 8008718:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	b29a      	uxth	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8008722:	2100      	movs	r1, #0
 8008724:	6838      	ldr	r0, [r7, #0]
 8008726:	f7ff fe3d 	bl	80083a4 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1d6      	bne.n	80086de <MBX_Main+0xa>



      if ( bReceiveMbxIsLocked )
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <MBX_Main+0x74>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 8008738:	f7ff fea0 	bl	800847c <MBX_CheckAndCopyMailbox>
      }
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000dc8 	.word	0x20000dc8
 8008748:	20000e10 	.word	0x20000e10

0800874c <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8008756:	f7fc fe53 	bl	8005400 <COE_GetObjectDictionary>
 800875a:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 800875c:	e009      	b.n	8008772 <OBJ_GetObjectHandle+0x26>
    {
        if (pObjEntry->Index == index)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	891b      	ldrh	r3, [r3, #8]
 8008762:	88fa      	ldrh	r2, [r7, #6]
 8008764:	429a      	cmp	r2, r3
 8008766:	d101      	bne.n	800876c <OBJ_GetObjectHandle+0x20>
            return pObjEntry;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e006      	b.n	800877a <OBJ_GetObjectHandle+0x2e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	60fb      	str	r3, [r7, #12]
    while (pObjEntry!= NULL)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f2      	bne.n	800875e <OBJ_GetObjectHandle+0x12>
    }
    return 0;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	603a      	str	r2, [r7, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	4603      	mov	r3, r0
 800878e:	80fb      	strh	r3, [r7, #6]
 8008790:	460b      	mov	r3, r1
 8008792:	717b      	strb	r3, [r7, #5]
 8008794:	4613      	mov	r3, r2
 8008796:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	899b      	ldrh	r3, [r3, #12]
 800879c:	121b      	asrs	r3, r3, #8
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	72bb      	strb	r3, [r7, #10]
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	899b      	ldrh	r3, [r3, #12]
 80087aa:	727b      	strb	r3, [r7, #9]
    UINT32 size = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 80087b0:	793b      	ldrb	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d043      	beq.n	800883e <OBJ_GetObjectLength+0xbc>
    {
        if ( objCode == OBJCODE_VAR )
 80087b6:	7abb      	ldrb	r3, [r7, #10]
 80087b8:	2b07      	cmp	r3, #7
 80087ba:	d101      	bne.n	80087c0 <OBJ_GetObjectLength+0x3e>
            return 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	e061      	b.n	8008884 <OBJ_GetObjectLength+0x102>
        else if ((objCode == OBJCODE_ARR)
 80087c0:	7abb      	ldrb	r3, [r7, #10]
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d118      	bne.n	80087f8 <OBJ_GetObjectLength+0x76>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	3306      	adds	r3, #6
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	461a      	mov	r2, r3
 80087d8:	7a7b      	ldrb	r3, [r7, #9]
 80087da:	fb03 f302 	mul.w	r3, r3, r2
 80087de:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3307      	adds	r3, #7
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 80087e8:	797b      	ldrb	r3, [r7, #5]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <OBJ_GetObjectLength+0x72>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3302      	adds	r3, #2
 80087f2:	60fb      	str	r3, [r7, #12]
            }
            return size;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	e045      	b.n	8008884 <OBJ_GetObjectLength+0x102>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 80087f8:	2301      	movs	r3, #1
 80087fa:	72fb      	strb	r3, [r7, #11]
 80087fc:	e00f      	b.n	800881e <OBJ_GetObjectLength+0x9c>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6919      	ldr	r1, [r3, #16]
 8008802:	7afa      	ldrb	r2, [r7, #11]
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	440b      	add	r3, r1
 800880e:	885b      	ldrh	r3, [r3, #2]
 8008810:	461a      	mov	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
            for (i = 1; i <= maxSubindex; i++)
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
 800881e:	7afa      	ldrb	r2, [r7, #11]
 8008820:	7a7b      	ldrb	r3, [r7, #9]
 8008822:	429a      	cmp	r2, r3
 8008824:	d9eb      	bls.n	80087fe <OBJ_GetObjectLength+0x7c>
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3307      	adds	r3, #7
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 800882e:	797b      	ldrb	r3, [r7, #5]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <OBJ_GetObjectLength+0xb8>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3302      	adds	r3, #2
 8008838:	60fb      	str	r3, [r7, #12]
            }
            return size;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	e022      	b.n	8008884 <OBJ_GetObjectLength+0x102>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 800883e:	7abb      	ldrb	r3, [r7, #10]
 8008840:	2b07      	cmp	r3, #7
 8008842:	d105      	bne.n	8008850 <OBJ_GetObjectLength+0xce>
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	3307      	adds	r3, #7
 800884c:	10db      	asrs	r3, r3, #3
 800884e:	e019      	b.n	8008884 <OBJ_GetObjectLength+0x102>

        }
        else if ( subindex == 0 )
 8008850:	797b      	ldrb	r3, [r7, #5]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <OBJ_GetObjectLength+0xd8>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8008856:	2301      	movs	r3, #1
 8008858:	e014      	b.n	8008884 <OBJ_GetObjectLength+0x102>
        }
        else if((objCode == OBJCODE_ARR)
 800885a:	7abb      	ldrb	r3, [r7, #10]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d106      	bne.n	800886e <OBJ_GetObjectLength+0xec>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	3306      	adds	r3, #6
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	3307      	adds	r3, #7
 800886a:	10db      	asrs	r3, r3, #3
 800886c:	e00a      	b.n	8008884 <OBJ_GetObjectLength+0x102>
        }
        else
        {
                return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6919      	ldr	r1, [r3, #16]
 8008872:	797a      	ldrb	r2, [r7, #5]
 8008874:	4613      	mov	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	4413      	add	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	440b      	add	r3, r1
 800887e:	885b      	ldrh	r3, [r3, #2]
 8008880:	3307      	adds	r3, #7
 8008882:	10db      	asrs	r3, r3, #3
        }
    }
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3302      	adds	r3, #2
 80088a0:	2230      	movs	r2, #48	; 0x30
 80088a2:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	491d      	ldr	r1, [pc, #116]	; (8008920 <OBJ_CopyNumberToString+0x90>)
 80088ac:	fba1 1303 	umull	r1, r3, r1, r3
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	4a18      	ldr	r2, [pc, #96]	; (8008920 <OBJ_CopyNumberToString+0x90>)
 80088c0:	fba2 1203 	umull	r1, r2, r2, r3
 80088c4:	0952      	lsrs	r2, r2, #5
 80088c6:	2164      	movs	r1, #100	; 0x64
 80088c8:	fb01 f202 	mul.w	r2, r1, r2
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	7819      	ldrb	r1, [r3, #0]
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	4a12      	ldr	r2, [pc, #72]	; (8008924 <OBJ_CopyNumberToString+0x94>)
 80088da:	fba2 2303 	umull	r2, r3, r2, r3
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3301      	adds	r3, #1
 80088e6:	440a      	add	r2, r1
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3302      	adds	r3, #2
 80088f0:	7818      	ldrb	r0, [r3, #0]
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <OBJ_CopyNumberToString+0x94>)
 80088f6:	fba3 1302 	umull	r1, r3, r3, r2
 80088fa:	08d9      	lsrs	r1, r3, #3
 80088fc:	460b      	mov	r3, r1
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	b2da      	uxtb	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3302      	adds	r3, #2
 800890c:	4402      	add	r2, r0
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	51eb851f 	.word	0x51eb851f
 8008924:	cccccccd 	.word	0xcccccccd

08008928 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	2220      	movs	r2, #32
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 800893c:	f7fc fd60 	bl	8005400 <COE_GetObjectDictionary>
 8008940:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8008946:	e032      	b.n	80089ae <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	891b      	ldrh	r3, [r3, #8]
 800894c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008950:	d32a      	bcc.n	80089a8 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	747b      	strb	r3, [r7, #17]
            if ( t )
 8008956:	7c7b      	ldrb	r3, [r7, #17]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01f      	beq.n	800899c <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	899b      	ldrh	r3, [r3, #12]
 8008960:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8008966:	e011      	b.n	800898c <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8008968:	89fb      	ldrh	r3, [r7, #14]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	4619      	mov	r1, r3
 800896e:	6978      	ldr	r0, [r7, #20]
 8008970:	f000 f934 	bl	8008bdc <OBJ_GetEntryDesc>
 8008974:	4603      	mov	r3, r0
 8008976:	889a      	ldrh	r2, [r3, #4]
 8008978:	89bb      	ldrh	r3, [r7, #12]
 800897a:	4013      	ands	r3, r2
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <OBJ_GetNoOfObjects+0x5e>
                        t = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	747b      	strb	r3, [r7, #17]
                    i++;
 8008986:	89fb      	ldrh	r3, [r7, #14]
 8008988:	3301      	adds	r3, #1
 800898a:	81fb      	strh	r3, [r7, #14]
                while ( t && i <= maxSubindex )
 800898c:	7c7b      	ldrb	r3, [r7, #17]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <OBJ_GetNoOfObjects+0x74>
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	b29b      	uxth	r3, r3
 8008996:	89fa      	ldrh	r2, [r7, #14]
 8008998:	429a      	cmp	r2, r3
 800899a:	d9e5      	bls.n	8008968 <OBJ_GetNoOfObjects+0x40>
                }
            }
            if ( !t )
 800899c:	7c7b      	ldrb	r3, [r7, #17]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	3301      	adds	r3, #1
 80089a6:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	617b      	str	r3, [r7, #20]
    while (pObjEntry != NULL)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1c9      	bne.n	8008948 <OBJ_GetNoOfObjects+0x20>
    }

    return n;
 80089b4:	8a7b      	ldrh	r3, [r7, #18]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607b      	str	r3, [r7, #4]
 80089ca:	4603      	mov	r3, r0
 80089cc:	81fb      	strh	r3, [r7, #14]
 80089ce:	4613      	mov	r3, r2
 80089d0:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	2220      	movs	r2, #32
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d10c      	bne.n	8008a00 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 80089e6:	f7fc fd0b 	bl	8005400 <COE_GetObjectDictionary>
 80089ea:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <OBJ_GetObjectList+0x46>
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	221b      	movs	r2, #27
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e002      	b.n	8008a06 <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 8008a00:	4b2c      	ldr	r3, [pc, #176]	; (8008ab4 <OBJ_GetObjectList+0xf4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d03e      	beq.n	8008a8a <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 8008a0c:	e037      	b.n	8008a7e <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	891b      	ldrh	r3, [r3, #8]
 8008a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a16:	d32f      	bcc.n	8008a78 <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	837b      	strh	r3, [r7, #26]
                if ( t )
 8008a1c:	8b7b      	ldrh	r3, [r7, #26]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01d      	beq.n	8008a5e <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	899b      	ldrh	r3, [r3, #12]
 8008a26:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 8008a2c:	e010      	b.n	8008a50 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 8008a2e:	7e7b      	ldrb	r3, [r7, #25]
 8008a30:	4619      	mov	r1, r3
 8008a32:	69f8      	ldr	r0, [r7, #28]
 8008a34:	f000 f8d2 	bl	8008bdc <OBJ_GetEntryDesc>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	889a      	ldrh	r2, [r3, #4]
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <OBJ_GetObjectList+0x8a>
                            t = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	837b      	strh	r3, [r7, #26]
                        i++;
 8008a4a:	7e7b      	ldrb	r3, [r7, #25]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	767b      	strb	r3, [r7, #25]
                    while ( t && i <= maxSubindex )
 8008a50:	8b7b      	ldrh	r3, [r7, #26]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <OBJ_GetObjectList+0x9e>
 8008a56:	7e7a      	ldrb	r2, [r7, #25]
 8008a58:	7d7b      	ldrb	r3, [r7, #21]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d9e7      	bls.n	8008a2e <OBJ_GetObjectList+0x6e>
                    }
                }
                if ( !t )
 8008a5e:	8b7b      	ldrh	r3, [r7, #26]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d109      	bne.n	8008a78 <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	891a      	ldrh	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	801a      	strh	r2, [r3, #0]
                    pData++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8008a72:	89bb      	ldrh	r3, [r7, #12]
 8008a74:	3b02      	subs	r3, #2
 8008a76:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	61fb      	str	r3, [r7, #28]
        while (pObjEntry != NULL && size > 1 )
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <OBJ_GetObjectList+0xca>
 8008a84:	89bb      	ldrh	r3, [r7, #12]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d8c1      	bhi.n	8008a0e <OBJ_GetObjectList+0x4e>
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	891a      	ldrh	r2, [r3, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e003      	b.n	8008aa2 <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aa0:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8008aa2:	4a04      	ldr	r2, [pc, #16]	; (8008ab4 <OBJ_GetObjectList+0xf4>)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 8008aa8:	89bb      	ldrh	r3, [r7, #12]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000ed0 	.word	0x20000ed0

08008ab8 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 8008ab8:	b590      	push	{r4, r7, lr}
 8008aba:	b08d      	sub	sp, #52	; 0x34
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60ba      	str	r2, [r7, #8]
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	81fb      	strh	r3, [r7, #14]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	899b      	ldrh	r3, [r3, #12]
 8008ad8:	121b      	asrs	r3, r3, #8
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8008ae4:	7b7b      	ldrb	r3, [r7, #13]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <OBJ_GetDesc+0x3a>
 8008aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aee:	2b07      	cmp	r3, #7
 8008af0:	d10e      	bne.n	8008b10 <OBJ_GetDesc+0x58>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );
 8008af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af4:	f7f7 fb68 	bl	80001c8 <strlen>
 8008af8:	4603      	mov	r3, r0
 8008afa:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d064      	beq.n	8008bcc <OBJ_GetDesc+0x114>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 8008b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b04:	461a      	mov	r2, r3
 8008b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f002 fd6d 	bl	800b5e8 <memcpy>
        if ( pData )
 8008b0e:	e05d      	b.n	8008bcc <OBJ_GetDesc+0x114>
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 8008b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d13c      	bne.n	8008b92 <OBJ_GetDesc+0xda>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 8008b1c:	7b7b      	ldrb	r3, [r7, #13]
 8008b1e:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8008b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b22:	f7f7 fb51 	bl	80001c8 <strlen>
 8008b26:	4603      	mov	r3, r0
 8008b28:	3301      	adds	r3, #1
 8008b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2c:	4413      	add	r3, r2
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 8008b30:	e023      	b.n	8008b7a <OBJ_GetDesc+0xc2>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
            {
                if ( i == tmpSubindex )
 8008b32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b34:	8c3b      	ldrh	r3, [r7, #32]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d114      	bne.n	8008b64 <OBJ_GetDesc+0xac>
                {
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
 8008b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3c:	f7f7 fb44 	bl	80001c8 <strlen>
 8008b40:	4603      	mov	r3, r0
 8008b42:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <OBJ_GetDesc+0xa6>
 8008b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d006      	beq.n	8008b5e <OBJ_GetDesc+0xa6>
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8008b50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b52:	461a      	mov	r2, r3
 8008b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f002 fd46 	bl	800b5e8 <memcpy>
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8008b5c:	e019      	b.n	8008b92 <OBJ_GetDesc+0xda>
                        strSize = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    break;
 8008b62:	e016      	b.n	8008b92 <OBJ_GetDesc+0xda>
                }
                else
                {
                    i++;
 8008b64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b66:	3301      	adds	r3, #1
 8008b68:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8008b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6c:	f7f7 fb2c 	bl	80001c8 <strlen>
 8008b70:	4603      	mov	r3, r0
 8008b72:	3301      	adds	r3, #1
 8008b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b76:	4413      	add	r3, r2
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 8008b7a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b7c:	8c3b      	ldrh	r3, [r7, #32]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d807      	bhi.n	8008b92 <OBJ_GetDesc+0xda>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d003      	beq.n	8008b92 <OBJ_GetDesc+0xda>
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2bfe      	cmp	r3, #254	; 0xfe
 8008b90:	d1cf      	bne.n	8008b32 <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 8008b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d119      	bne.n	8008bcc <OBJ_GetDesc+0x114>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 8008b98:	230c      	movs	r3, #12
 8008b9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d014      	beq.n	8008bcc <OBJ_GetDesc+0x114>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <OBJ_GetDesc+0x120>)
 8008ba4:	f107 0410 	add.w	r4, r7, #16
 8008ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008baa:	c407      	stmia	r4!, {r0, r1, r2}
 8008bac:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8008bae:	7b7a      	ldrb	r2, [r7, #13]
 8008bb0:	f107 0310 	add.w	r3, r7, #16
 8008bb4:	3309      	adds	r3, #9
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fe69 	bl	8008890 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 8008bbe:	f107 0310 	add.w	r3, r7, #16
 8008bc2:	220d      	movs	r2, #13
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f002 fd0e 	bl	800b5e8 <memcpy>
            }
        }
    }

    return strSize;
 8008bcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3734      	adds	r7, #52	; 0x34
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd90      	pop	{r4, r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000534 	.word	0x20000534

08008bdc <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	899b      	ldrh	r3, [r3, #12]
 8008bec:	121b      	asrs	r3, r3, #8
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d10b      	bne.n	8008c14 <OBJ_GetEntryDesc+0x38>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <OBJ_GetEntryDesc+0x2e>
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e00d      	b.n	8008c26 <OBJ_GetEntryDesc+0x4a>
        else
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	3306      	adds	r3, #6
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e008      	b.n	8008c26 <OBJ_GetEntryDesc+0x4a>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6919      	ldr	r1, [r3, #16]
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	4413      	add	r3, r2
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	440b      	add	r3, r1
 8008c24:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 8008c26:	68fb      	ldr	r3, [r7, #12]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	330a      	adds	r3, #10
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
/*ECATCHANGE_START(V5.11) OBJ1*/
    UINT16 bitOffset = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	899b      	ldrh	r3, [r3, #12]
 8008c60:	121b      	asrs	r3, r3, #8
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    if(subindex > 0)
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <OBJ_GetEntryOffset+0x2a>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8008c70:	8abb      	ldrh	r3, [r7, #20]
 8008c72:	3310      	adds	r3, #16
 8008c74:	82bb      	strh	r3, [r7, #20]
    }
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b07      	cmp	r3, #7
 8008c7a:	d101      	bne.n	8008c80 <OBJ_GetEntryOffset+0x34>
        return 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e0e0      	b.n	8008e42 <OBJ_GetEntryOffset+0x1f6>

    for (i = 1; i <= subindex; i++)
 8008c80:	2301      	movs	r3, #1
 8008c82:	82fb      	strh	r3, [r7, #22]
 8008c84:	e0d6      	b.n	8008e34 <OBJ_GetEntryOffset+0x1e8>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d104      	bne.n	8008c96 <OBJ_GetEntryOffset+0x4a>
           )
            pEntry = &pObjEntry->pEntryDesc[1];
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	3306      	adds	r3, #6
 8008c92:	613b      	str	r3, [r7, #16]
 8008c94:	e008      	b.n	8008ca8 <OBJ_GetEntryOffset+0x5c>
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	6919      	ldr	r1, [r3, #16]
 8008c9a:	8afa      	ldrh	r2, [r7, #22]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	4413      	add	r3, r2
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	440b      	add	r3, r1
 8008ca6:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 8008cb0:	f280 80ad 	bge.w	8008e0e <OBJ_GetEntryOffset+0x1c2>
 8008cb4:	f240 2262 	movw	r2, #610	; 0x262
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	f280 8087 	bge.w	8008dcc <OBJ_GetEntryOffset+0x180>
 8008cbe:	2b2f      	cmp	r3, #47	; 0x2f
 8008cc0:	dc64      	bgt.n	8008d8c <OBJ_GetEntryOffset+0x140>
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	f2c0 80a3 	blt.w	8008e0e <OBJ_GetEntryOffset+0x1c2>
 8008cc8:	3b03      	subs	r3, #3
 8008cca:	2b2c      	cmp	r3, #44	; 0x2c
 8008ccc:	f200 809f 	bhi.w	8008e0e <OBJ_GetEntryOffset+0x1c2>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <OBJ_GetEntryOffset+0x8c>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d93 	.word	0x08008d93
 8008cdc:	08008dcd 	.word	0x08008dcd
 8008ce0:	08008e0f 	.word	0x08008e0f
 8008ce4:	08008d93 	.word	0x08008d93
 8008ce8:	08008dcd 	.word	0x08008dcd
 8008cec:	08008dcd 	.word	0x08008dcd
 8008cf0:	08008e0f 	.word	0x08008e0f
 8008cf4:	08008e0f 	.word	0x08008e0f
 8008cf8:	08008d93 	.word	0x08008d93
 8008cfc:	08008e0f 	.word	0x08008e0f
 8008d00:	08008e0f 	.word	0x08008e0f
 8008d04:	08008e0f 	.word	0x08008e0f
 8008d08:	08008e0f 	.word	0x08008e0f
 8008d0c:	08008e0f 	.word	0x08008e0f
 8008d10:	08008e0f 	.word	0x08008e0f
 8008d14:	08008e0f 	.word	0x08008e0f
 8008d18:	08008e0f 	.word	0x08008e0f
 8008d1c:	08008e0f 	.word	0x08008e0f
 8008d20:	08008e0f 	.word	0x08008e0f
 8008d24:	08008e0f 	.word	0x08008e0f
 8008d28:	08008e0f 	.word	0x08008e0f
 8008d2c:	08008e0f 	.word	0x08008e0f
 8008d30:	08008e0f 	.word	0x08008e0f
 8008d34:	08008e0f 	.word	0x08008e0f
 8008d38:	08008e0f 	.word	0x08008e0f
 8008d3c:	08008e0f 	.word	0x08008e0f
 8008d40:	08008e0f 	.word	0x08008e0f
 8008d44:	08008e0f 	.word	0x08008e0f
 8008d48:	08008d93 	.word	0x08008d93
 8008d4c:	08008dcd 	.word	0x08008dcd
 8008d50:	08008e0f 	.word	0x08008e0f
 8008d54:	08008e0f 	.word	0x08008e0f
 8008d58:	08008e0f 	.word	0x08008e0f
 8008d5c:	08008e0f 	.word	0x08008e0f
 8008d60:	08008e0f 	.word	0x08008e0f
 8008d64:	08008e0f 	.word	0x08008e0f
 8008d68:	08008e0f 	.word	0x08008e0f
 8008d6c:	08008e0f 	.word	0x08008e0f
 8008d70:	08008e0f 	.word	0x08008e0f
 8008d74:	08008e0f 	.word	0x08008e0f
 8008d78:	08008e0f 	.word	0x08008e0f
 8008d7c:	08008e0f 	.word	0x08008e0f
 8008d80:	08008e0f 	.word	0x08008e0f
 8008d84:	08008d93 	.word	0x08008d93
 8008d88:	08008dcd 	.word	0x08008dcd
 8008d8c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8008d90:	d13d      	bne.n	8008e0e <OBJ_GetEntryOffset+0x1c2>
/*ECATCHANGE_END(V5.11) SDO9*/

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8008d92:	8abb      	ldrh	r3, [r7, #20]
 8008d94:	330f      	adds	r3, #15
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f023 030f 	bic.w	r3, r3, #15
 8008d9c:	82bb      	strh	r3, [r7, #20]
#endif


/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	8afa      	ldrh	r2, [r7, #22]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d23d      	bcs.n	8008e24 <OBJ_GetEntryOffset+0x1d8>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	2b0b      	cmp	r3, #11
 8008dae:	d004      	beq.n	8008dba <OBJ_GetEntryOffset+0x16e>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8008db8:	d104      	bne.n	8008dc4 <OBJ_GetEntryOffset+0x178>
                {
                    bitOffset += pEntry->BitLength;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	885a      	ldrh	r2, [r3, #2]
 8008dbe:	8abb      	ldrh	r3, [r7, #20]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 8008dc4:	8abb      	ldrh	r3, [r7, #20]
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8008dca:	e02b      	b.n	8008e24 <OBJ_GetEntryOffset+0x1d8>
        case    DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 8008dcc:	8abb      	ldrh	r3, [r7, #20]
 8008dce:	331f      	adds	r3, #31
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f023 031f 	bic.w	r3, r3, #31
 8008dd6:	82bb      	strh	r3, [r7, #20]
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8afa      	ldrh	r2, [r7, #22]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d222      	bcs.n	8008e28 <OBJ_GetEntryOffset+0x1dc>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	f240 2262 	movw	r2, #610	; 0x262
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d005      	beq.n	8008dfa <OBJ_GetEntryOffset+0x1ae>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	f240 2263 	movw	r2, #611	; 0x263
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d105      	bne.n	8008e06 <OBJ_GetEntryOffset+0x1ba>
                {
                    bitOffset += pEntry->BitLength;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	885a      	ldrh	r2, [r3, #2]
 8008dfe:	8abb      	ldrh	r3, [r7, #20]
 8008e00:	4413      	add	r3, r2
 8008e02:	82bb      	strh	r3, [r7, #20]
                }
                else
                   bitOffset += 32;
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8008e04:	e010      	b.n	8008e28 <OBJ_GetEntryOffset+0x1dc>
                   bitOffset += 32;
 8008e06:	8abb      	ldrh	r3, [r7, #20]
 8008e08:	3320      	adds	r3, #32
 8008e0a:	82bb      	strh	r3, [r7, #20]
            break;
 8008e0c:	e00c      	b.n	8008e28 <OBJ_GetEntryOffset+0x1dc>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8afa      	ldrh	r2, [r7, #22]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d209      	bcs.n	8008e2c <OBJ_GetEntryOffset+0x1e0>
                bitOffset += pEntry->BitLength;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	885a      	ldrh	r2, [r3, #2]
 8008e1c:	8abb      	ldrh	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	82bb      	strh	r3, [r7, #20]
            break;
 8008e22:	e003      	b.n	8008e2c <OBJ_GetEntryOffset+0x1e0>
            break;
 8008e24:	bf00      	nop
 8008e26:	e002      	b.n	8008e2e <OBJ_GetEntryOffset+0x1e2>
            break;
 8008e28:	bf00      	nop
 8008e2a:	e000      	b.n	8008e2e <OBJ_GetEntryOffset+0x1e2>
            break;
 8008e2c:	bf00      	nop
    for (i = 1; i <= subindex; i++)
 8008e2e:	8afb      	ldrh	r3, [r7, #22]
 8008e30:	3301      	adds	r3, #1
 8008e32:	82fb      	strh	r3, [r7, #22]
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8afa      	ldrh	r2, [r7, #22]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	f67f af23 	bls.w	8008c86 <OBJ_GetEntryOffset+0x3a>
        }
    }

    return bitOffset;
 8008e40:	8abb      	ldrh	r3, [r7, #20]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	460a      	mov	r2, r1
 8008e5a:	80fb      	strh	r3, [r7, #6]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	80bb      	strh	r3, [r7, #4]
    /*ECATCHANGE_START(V5.11) ESM7*/
    switch (NewSyncType)
 8008e60:	88bb      	ldrh	r3, [r7, #4]
 8008e62:	2b22      	cmp	r3, #34	; 0x22
 8008e64:	f200 80be 	bhi.w	8008fe4 <CheckSyncTypeValue+0x194>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <CheckSyncTypeValue+0x20>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008efd 	.word	0x08008efd
 8008e74:	08008f01 	.word	0x08008f01
 8008e78:	08008f6f 	.word	0x08008f6f
 8008e7c:	08008fa3 	.word	0x08008fa3
 8008e80:	08008fe5 	.word	0x08008fe5
 8008e84:	08008fe5 	.word	0x08008fe5
 8008e88:	08008fe5 	.word	0x08008fe5
 8008e8c:	08008fe5 	.word	0x08008fe5
 8008e90:	08008fe5 	.word	0x08008fe5
 8008e94:	08008fe5 	.word	0x08008fe5
 8008e98:	08008fe5 	.word	0x08008fe5
 8008e9c:	08008fe5 	.word	0x08008fe5
 8008ea0:	08008fe5 	.word	0x08008fe5
 8008ea4:	08008fe5 	.word	0x08008fe5
 8008ea8:	08008fe5 	.word	0x08008fe5
 8008eac:	08008fe5 	.word	0x08008fe5
 8008eb0:	08008fe5 	.word	0x08008fe5
 8008eb4:	08008fe5 	.word	0x08008fe5
 8008eb8:	08008fe5 	.word	0x08008fe5
 8008ebc:	08008fe5 	.word	0x08008fe5
 8008ec0:	08008fe5 	.word	0x08008fe5
 8008ec4:	08008fe5 	.word	0x08008fe5
 8008ec8:	08008fe5 	.word	0x08008fe5
 8008ecc:	08008fe5 	.word	0x08008fe5
 8008ed0:	08008fe5 	.word	0x08008fe5
 8008ed4:	08008fe5 	.word	0x08008fe5
 8008ed8:	08008fe5 	.word	0x08008fe5
 8008edc:	08008fe5 	.word	0x08008fe5
 8008ee0:	08008fe5 	.word	0x08008fe5
 8008ee4:	08008fe5 	.word	0x08008fe5
 8008ee8:	08008fe5 	.word	0x08008fe5
 8008eec:	08008fe5 	.word	0x08008fe5
 8008ef0:	08008fe5 	.word	0x08008fe5
 8008ef4:	08008fe5 	.word	0x08008fe5
 8008ef8:	08008f4d 	.word	0x08008f4d
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8008efc:	2300      	movs	r3, #0
 8008efe:	e072      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        break;

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	f641 4232 	movw	r2, #7218	; 0x1c32
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10b      	bne.n	8008f22 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8008f0a:	4b3a      	ldr	r3, [pc, #232]	; (8008ff4 <CheckSyncTypeValue+0x1a4>)
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8008f12:	4b39      	ldr	r3, [pc, #228]	; (8008ff8 <CheckSyncTypeValue+0x1a8>)
 8008f14:	899b      	ldrh	r3, [r3, #12]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dd01      	ble.n	8008f22 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e061      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) 
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d154      	bne.n	8008fd6 <CheckSyncTypeValue+0x186>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <CheckSyncTypeValue+0x1ac>)
 8008f2e:	899b      	ldrh	r3, [r3, #12]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dd4e      	ble.n	8008fd6 <CheckSyncTypeValue+0x186>
            && (nPdOutputSize == 0) 
 8008f38:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <CheckSyncTypeValue+0x1a4>)
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d14a      	bne.n	8008fd6 <CheckSyncTypeValue+0x186>
            && (nPdInputSize > 0))
 8008f40:	4b2f      	ldr	r3, [pc, #188]	; (8009000 <CheckSyncTypeValue+0x1b0>)
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d046      	beq.n	8008fd6 <CheckSyncTypeValue+0x186>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e04c      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d141      	bne.n	8008fda <CheckSyncTypeValue+0x18a>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8008f56:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <CheckSyncTypeValue+0x1ac>)
 8008f58:	899b      	ldrh	r3, [r3, #12]
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd3b      	ble.n	8008fda <CheckSyncTypeValue+0x18a>
            && (nPdOutputSize > 0))
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <CheckSyncTypeValue+0x1a4>)
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d037      	beq.n	8008fda <CheckSyncTypeValue+0x18a>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e03b      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8008f6e:	88fb      	ldrh	r3, [r7, #6]
 8008f70:	f641 4232 	movw	r2, #7218	; 0x1c32
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d107      	bne.n	8008f88 <CheckSyncTypeValue+0x138>
 8008f78:	4b1f      	ldr	r3, [pc, #124]	; (8008ff8 <CheckSyncTypeValue+0x1a8>)
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dd01      	ble.n	8008f88 <CheckSyncTypeValue+0x138>
        {
            return 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e02e      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d125      	bne.n	8008fde <CheckSyncTypeValue+0x18e>
 8008f92:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <CheckSyncTypeValue+0x1ac>)
 8008f94:	899b      	ldrh	r3, [r3, #12]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd1f      	ble.n	8008fde <CheckSyncTypeValue+0x18e>
        {
            return 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e021      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        }
        break;

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	f641 4232 	movw	r2, #7218	; 0x1c32
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d107      	bne.n	8008fbc <CheckSyncTypeValue+0x16c>
 8008fac:	4b12      	ldr	r3, [pc, #72]	; (8008ff8 <CheckSyncTypeValue+0x1a8>)
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	f003 0308 	and.w	r3, r3, #8
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dd01      	ble.n	8008fbc <CheckSyncTypeValue+0x16c>
        {
            return 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e014      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	f641 4233 	movw	r2, #7219	; 0x1c33
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d10d      	bne.n	8008fe2 <CheckSyncTypeValue+0x192>
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <CheckSyncTypeValue+0x1ac>)
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dd07      	ble.n	8008fe2 <CheckSyncTypeValue+0x192>
        {
            return 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e007      	b.n	8008fe6 <CheckSyncTypeValue+0x196>
        break;
 8008fd6:	bf00      	nop
 8008fd8:	e004      	b.n	8008fe4 <CheckSyncTypeValue+0x194>
        break;
 8008fda:	bf00      	nop
 8008fdc:	e002      	b.n	8008fe4 <CheckSyncTypeValue+0x194>
        break;
 8008fde:	bf00      	nop
 8008fe0:	e000      	b.n	8008fe4 <CheckSyncTypeValue+0x194>
        }
        break;
 8008fe2:	bf00      	nop
    } //switch 
/*ECATCHANGE_END(V5.11) ESM7*/
    return ABORTIDX_VALUE_EXCEEDED;
 8008fe4:	2312      	movs	r3, #18

}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000b4e 	.word	0x20000b4e
 8008ff8:	20000e68 	.word	0x20000e68
 8008ffc:	20000e24 	.word	0x20000e24
 8009000:	20000b74 	.word	0x20000b74

08009004 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b091      	sub	sp, #68	; 0x44
 8009008:	af02      	add	r7, sp, #8
 800900a:	60ba      	str	r2, [r7, #8]
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	4603      	mov	r3, r0
 8009010:	81fb      	strh	r3, [r7, #14]
 8009012:	460b      	mov	r3, r1
 8009014:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8009016:	7b7b      	ldrb	r3, [r7, #13]
 8009018:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	899b      	ldrh	r3, [r3, #12]
 800901e:	121b      	asrs	r3, r3, #8
 8009020:	b2db      	uxtb	r3, r3
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	899b      	ldrh	r3, [r3, #12]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8009032:	7b7b      	ldrb	r3, [r7, #13]
 8009034:	84bb      	strh	r3, [r7, #36]	; 0x24

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8009036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800903a:	2b07      	cmp	r3, #7
 800903c:	d008      	beq.n	8009050 <OBJ_Read+0x4c>
 800903e:	89fb      	ldrh	r3, [r7, #14]
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	d304      	bcc.n	8009050 <OBJ_Read+0x4c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 8009050:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00c      	beq.n	8009072 <OBJ_Read+0x6e>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 8009058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800905c:	2b07      	cmp	r3, #7
 800905e:	d003      	beq.n	8009068 <OBJ_Read+0x64>
 8009060:	89fb      	ldrh	r3, [r7, #14]
 8009062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009066:	d201      	bcs.n	800906c <OBJ_Read+0x68>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8009068:	2305      	movs	r3, #5
 800906a:	e319      	b.n	80096a0 <OBJ_Read+0x69c>
        }

        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 800906c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800906e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009070:	e315      	b.n	800969e <OBJ_Read+0x69a>
    }
    else
    {
        if ( subindex > maxSubindex )
 8009072:	7b7b      	ldrb	r3, [r7, #13]
 8009074:	b29b      	uxth	r3, r3
 8009076:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009078:	429a      	cmp	r2, r3
 800907a:	d201      	bcs.n	8009080 <OBJ_Read+0x7c>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 800907c:	2311      	movs	r3, #17
 800907e:	e30f      	b.n	80096a0 <OBJ_Read+0x69c>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8009080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fda8 	bl	8008bdc <OBJ_GetEntryDesc>
 800908c:	6238      	str	r0, [r7, #32]

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	889b      	ldrh	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <OBJ_Read+0xc0>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) < (nAlStatus & STATE_MASK) )
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	889b      	ldrh	r3, [r3, #4]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 020e 	and.w	r2, r3, #14
 80090a4:	4b87      	ldr	r3, [pc, #540]	; (80092c4 <OBJ_Read+0x2c0>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	f003 030f 	and.w	r3, r3, #15
 80090ac:	429a      	cmp	r2, r3
 80090ae:	da09      	bge.n	80090c4 <OBJ_Read+0xc0>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	889b      	ldrh	r3, [r3, #4]
 80090b4:	f003 0307 	and.w	r3, r3, #7
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <OBJ_Read+0xbc>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 80090bc:	2306      	movs	r3, #6
 80090be:	e2ef      	b.n	80096a0 <OBJ_Read+0x69c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80090c0:	231a      	movs	r3, #26
 80090c2:	e2ed      	b.n	80096a0 <OBJ_Read+0x69c>
                    }
                }
            }
        }
        if ( pObjEntry->Read != NULL )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <OBJ_Read+0xe0>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69dc      	ldr	r4, [r3, #28]
 80090d0:	7b79      	ldrb	r1, [r7, #13]
 80090d2:	89f8      	ldrh	r0, [r7, #14]
 80090d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	47a0      	blx	r4
 80090e0:	4603      	mov	r3, r0
 80090e2:	e2dd      	b.n	80096a0 <OBJ_Read+0x69c>
        }
        else if ( index < 0x1000 && subindex != 0 )
 80090e4:	89fb      	ldrh	r3, [r7, #14]
 80090e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ea:	d27b      	bcs.n	80091e4 <OBJ_Read+0x1e0>
 80090ec:	7b7b      	ldrb	r3, [r7, #13]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d078      	beq.n	80091e4 <OBJ_Read+0x1e0>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	633b      	str	r3, [r7, #48]	; 0x30
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 80090f8:	7b7b      	ldrb	r3, [r7, #13]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fd6d 	bl	8008bdc <OBJ_GetEntryDesc>
 8009102:	6238      	str	r0, [r7, #32]
            size = BIT2BYTE(pEntry->BitLength);
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	885b      	ldrh	r3, [r3, #2]
 8009108:	3307      	adds	r3, #7
 800910a:	10db      	asrs	r3, r3, #3
 800910c:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8009112:	7b7b      	ldrb	r3, [r7, #13]
 8009114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009118:	3b01      	subs	r3, #1
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	4413      	add	r3, r2
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	633b      	str	r3, [r7, #48]	; 0x30

            if( ( ((UINT32)pVarPtr) & 0x1 ) == 0x1 )
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d043      	beq.n	80091b6 <OBJ_Read+0x1b2>
            {
                /*enum is stored at an odd address*/
                UINT16 cnt = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	85fb      	strh	r3, [r7, #46]	; 0x2e

                //get last even WORD address
                /*ECATCHANGE_START(V5.11) SDO3*/
//                pVarPtr = (UINT16 MBXMEM *)( ((MEM_ADDR)pVarPtr) & ~(MEM_ADDR)0x1);
                pVarPtr = (UINT16 MBXMEM *)( ((UINT32)pVarPtr) & ~(UINT32)0x1);
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	633b      	str	r3, [r7, #48]	; 0x30
                /*ECATCHANGE_END(V5.11) SDO3*/

                for(cnt = 0; cnt < (size / 2);cnt++)
 800913a:	2300      	movs	r3, #0
 800913c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800913e:	e01b      	b.n	8009178 <OBJ_Read+0x174>
                {
                    //clear destination buffer
                    pData[0] = (pVarPtr[0] & 0xFF00) >> 8;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	b29a      	uxth	r2, r3
 8009148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914a:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[1] & 0xFF) << 8;
 800914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	b21a      	sxth	r2, r3
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	3302      	adds	r3, #2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	b21b      	sxth	r3, r3
 800915c:	4313      	orrs	r3, r2
 800915e:	b21b      	sxth	r3, r3
 8009160:	b29a      	uxth	r2, r3
 8009162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009164:	801a      	strh	r2, [r3, #0]

                    pData++;
 8009166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009168:	3302      	adds	r3, #2
 800916a:	64bb      	str	r3, [r7, #72]	; 0x48
                    pVarPtr++;
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	3302      	adds	r3, #2
 8009170:	633b      	str	r3, [r7, #48]	; 0x30
                for(cnt = 0; cnt < (size / 2);cnt++)
 8009172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009174:	3301      	adds	r3, #1
 8009176:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009178:	8bfb      	ldrh	r3, [r7, #30]
 800917a:	085b      	lsrs	r3, r3, #1
 800917c:	b29b      	uxth	r3, r3
 800917e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009180:	429a      	cmp	r2, r3
 8009182:	d3dd      	bcc.n	8009140 <OBJ_Read+0x13c>
                }

                if((size % 2) == 1)
 8009184:	8bfb      	ldrh	r3, [r7, #30]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8285 	beq.w	800969c <OBJ_Read+0x698>
                {
                    pData[0] &= 0xFF00; //Clear last Byte
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800919a:	b29a      	uxth	r2, r3
 800919c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919e:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[0] & 0xFF00) >> 8; //Write last byte
 80091a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a2:	881a      	ldrh	r2, [r3, #0]
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	0a1b      	lsrs	r3, r3, #8
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b2:	801a      	strh	r2, [r3, #0]
        {
 80091b4:	e272      	b.n	800969c <OBJ_Read+0x698>
                }
            }
            else
            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	881a      	ldrh	r2, [r3, #0]
 80091ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091bc:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 80091be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c0:	3302      	adds	r3, #2
 80091c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c4:	8852      	ldrh	r2, [r2, #2]
 80091c6:	801a      	strh	r2, [r3, #0]
            pData += 2;
 80091c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ca:	3304      	adds	r3, #4
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	3304      	adds	r3, #4
 80091d2:	633b      	str	r3, [r7, #48]	; 0x30

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 80091d4:	8bfb      	ldrh	r3, [r7, #30]
 80091d6:	3b04      	subs	r3, #4
 80091d8:	461a      	mov	r2, r3
 80091da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80091de:	f002 fa03 	bl	800b5e8 <memcpy>
        {
 80091e2:	e25b      	b.n	800969c <OBJ_Read+0x698>
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            UINT8 result = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 80091f0:	7b7b      	ldrb	r3, [r7, #13]
 80091f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80091f4:	e246      	b.n	8009684 <OBJ_Read+0x680>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	857b      	strh	r3, [r7, #42]	; 0x2a

                if (i == 0)
 8009200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <OBJ_Read+0x21a>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 8009206:	89fb      	ldrh	r3, [r7, #14]
 8009208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920c:	d307      	bcc.n	800921e <OBJ_Read+0x21a>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800920e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009210:	b2db      	uxtb	r3, r3
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff fd19 	bl	8008c4c <OBJ_GetEntryOffset>
 800921a:	4603      	mov	r3, r0
 800921c:	857b      	strh	r3, [r7, #42]	; 0x2a
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 800921e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009220:	091b      	lsrs	r3, r3, #4
 8009222:	b29b      	uxth	r3, r3
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	4413      	add	r3, r2
 800922a:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 800922c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fcd2 	bl	8008bdc <OBJ_GetEntryDesc>
 8009238:	6238      	str	r0, [r7, #32]

                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) >= (nAlStatus & STATE_MASK) )
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 020e 	and.w	r2, r3, #14
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <OBJ_Read+0x2c0>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	429a      	cmp	r2, r3
 8009252:	f2c0 81cf 	blt.w	80095f4 <OBJ_Read+0x5f0>
                {
                    if ( i == subindex                                     /* requested entry */
 8009256:	7b7b      	ldrb	r3, [r7, #13]
 8009258:	b29b      	uxth	r3, r3
 800925a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800925c:	429a      	cmp	r2, r3
 800925e:	d00a      	beq.n	8009276 <OBJ_Read+0x272>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8009260:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 820a 	beq.w	800967e <OBJ_Read+0x67a>
 800926a:	7b7b      	ldrb	r3, [r7, #13]
 800926c:	b29b      	uxth	r3, r3
 800926e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009270:	429a      	cmp	r2, r3
 8009272:	f0c0 8204 	bcc.w	800967e <OBJ_Read+0x67a>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 8009276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <OBJ_Read+0x28e>
 800927c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009280:	2b07      	cmp	r3, #7
 8009282:	d006      	beq.n	8009292 <OBJ_Read+0x28e>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8009284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009288:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 800928a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800928c:	3302      	adds	r3, #2
 800928e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009290:	e1f5      	b.n	800967e <OBJ_Read+0x67a>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	853b      	strh	r3, [r7, #40]	; 0x28
                            if (pEntry->DataType >= 0x700)
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092a0:	d318      	bcc.n	80092d4 <OBJ_Read+0x2d0>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d804      	bhi.n	80092b4 <OBJ_Read+0x2b0>
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	332f      	adds	r3, #47	; 0x2f
 80092b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80092b2:	e00f      	b.n	80092d4 <OBJ_Read+0x2d0>
                                else if ( pEntry->BitLength == 16 )
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	d105      	bne.n	80092c8 <OBJ_Read+0x2c4>
                                    dataType = DEFTYPE_UNSIGNED16;
 80092bc:	2306      	movs	r3, #6
 80092be:	853b      	strh	r3, [r7, #40]	; 0x28
 80092c0:	e008      	b.n	80092d4 <OBJ_Read+0x2d0>
 80092c2:	bf00      	nop
 80092c4:	20000b4d 	.word	0x20000b4d
                                else if ( pEntry->BitLength == 32 )
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	885b      	ldrh	r3, [r3, #2]
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d101      	bne.n	80092d4 <OBJ_Read+0x2d0>
                                    dataType = DEFTYPE_UNSIGNED32;
 80092d0:	2307      	movs	r3, #7
 80092d2:	853b      	strh	r3, [r7, #40]	; 0x28
                            }

                            switch (dataType)
 80092d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092d6:	2b37      	cmp	r3, #55	; 0x37
 80092d8:	dc78      	bgt.n	80093cc <OBJ_Read+0x3c8>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f2c0 817f 	blt.w	80095de <OBJ_Read+0x5da>
 80092e0:	2b37      	cmp	r3, #55	; 0x37
 80092e2:	f200 817c 	bhi.w	80095de <OBJ_Read+0x5da>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <OBJ_Read+0x2e8>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080093d9 	.word	0x080093d9
 80092f0:	0800941d 	.word	0x0800941d
 80092f4:	0800941d 	.word	0x0800941d
 80092f8:	080094c1 	.word	0x080094c1
 80092fc:	080094df 	.word	0x080094df
 8009300:	0800941d 	.word	0x0800941d
 8009304:	080094c1 	.word	0x080094c1
 8009308:	080094df 	.word	0x080094df
 800930c:	080094df 	.word	0x080094df
 8009310:	08009591 	.word	0x08009591
 8009314:	08009543 	.word	0x08009543
 8009318:	08009543 	.word	0x08009543
 800931c:	080095df 	.word	0x080095df
 8009320:	080095df 	.word	0x080095df
 8009324:	080095df 	.word	0x080095df
 8009328:	080095df 	.word	0x080095df
 800932c:	080095df 	.word	0x080095df
 8009330:	08009507 	.word	0x08009507
 8009334:	080095df 	.word	0x080095df
 8009338:	080095df 	.word	0x080095df
 800933c:	080095df 	.word	0x080095df
 8009340:	08009507 	.word	0x08009507
 8009344:	080095df 	.word	0x080095df
 8009348:	080095df 	.word	0x080095df
 800934c:	080095df 	.word	0x080095df
 8009350:	080095df 	.word	0x080095df
 8009354:	080095df 	.word	0x080095df
 8009358:	08009507 	.word	0x08009507
 800935c:	080095df 	.word	0x080095df
 8009360:	080095df 	.word	0x080095df
 8009364:	0800941d 	.word	0x0800941d
 8009368:	080094c1 	.word	0x080094c1
 800936c:	080094df 	.word	0x080094df
 8009370:	080095df 	.word	0x080095df
 8009374:	080095df 	.word	0x080095df
 8009378:	080095df 	.word	0x080095df
 800937c:	080095df 	.word	0x080095df
 8009380:	080095df 	.word	0x080095df
 8009384:	080095df 	.word	0x080095df
 8009388:	080095df 	.word	0x080095df
 800938c:	080095df 	.word	0x080095df
 8009390:	080095df 	.word	0x080095df
 8009394:	080095df 	.word	0x080095df
 8009398:	080095df 	.word	0x080095df
 800939c:	080095df 	.word	0x080095df
 80093a0:	0800941d 	.word	0x0800941d
 80093a4:	080094c1 	.word	0x080094c1
 80093a8:	080094df 	.word	0x080094df
 80093ac:	0800941d 	.word	0x0800941d
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	0800941d 	.word	0x0800941d
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	0800941d 	.word	0x0800941d
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	0800941d 	.word	0x0800941d
 80093cc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	f200 8104 	bhi.w	80095de <OBJ_Read+0x5da>
 80093d6:	e0b4      	b.n	8009542 <OBJ_Read+0x53e>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 80093d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01b      	beq.n	8009418 <OBJ_Read+0x414>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	885b      	ldrh	r3, [r3, #2]
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dd0b      	ble.n	8009404 <OBJ_Read+0x400>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	885a      	ldrh	r2, [r3, #2]
 80093f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093f2:	4413      	add	r3, r2
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <OBJ_Read+0x400>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 80093fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009400:	3302      	adds	r3, #2
 8009402:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	111b      	asrs	r3, r3, #4
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009412:	4413      	add	r3, r2
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 8009416:	e0e9      	b.n	80095ec <OBJ_Read+0x5e8>
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8009418:	2318      	movs	r3, #24
 800941a:	e141      	b.n	80096a0 <OBJ_Read+0x69c>
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 800941c:	2300      	movs	r3, #0
 800941e:	827b      	strh	r3, [r7, #18]

                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	461a      	mov	r2, r3
 8009426:	4ba0      	ldr	r3, [pc, #640]	; (80096a8 <OBJ_Read+0x6a4>)
 8009428:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800942c:	461a      	mov	r2, r3
 800942e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 8009440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <OBJ_Read+0x44c>
                                    {
                                        pData[0] = 0;
 800944a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944c:	2200      	movs	r2, #0
 800944e:	801a      	strh	r2, [r3, #0]
                                    }

/* ECATCHANGE_START(V5.11) SDO7*/
                                    pData[0] = SWAPWORD(pData[0]);
 8009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009452:	881a      	ldrh	r2, [r3, #0]
 8009454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009456:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 8009458:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <OBJ_Read+0x472>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 8009460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	8a79      	ldrh	r1, [r7, #18]
 8009466:	8a3b      	ldrh	r3, [r7, #16]
 8009468:	400b      	ands	r3, r1
 800946a:	b29b      	uxth	r3, r3
 800946c:	4313      	orrs	r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	e012      	b.n	800949c <OBJ_Read+0x498>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 8009476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b21a      	sxth	r2, r3
 800947c:	8a79      	ldrh	r1, [r7, #18]
 800947e:	8a3b      	ldrh	r3, [r7, #16]
 8009480:	400b      	ands	r3, r1
 8009482:	b29b      	uxth	r3, r3
 8009484:	4619      	mov	r1, r3
 8009486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	fa41 f303 	asr.w	r3, r1, r3
 8009490:	b21b      	sxth	r3, r3
 8009492:	4313      	orrs	r3, r2
 8009494:	b21b      	sxth	r3, r3
 8009496:	b29a      	uxth	r2, r3
 8009498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949a:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 800949c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949e:	881a      	ldrh	r2, [r3, #0]
 80094a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a2:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO7*/
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	885a      	ldrh	r2, [r3, #2]
 80094a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094aa:	4413      	add	r3, r2
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f003 030f 	and.w	r3, r3, #15
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8095 	bne.w	80095e2 <OBJ_Read+0x5de>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 80094b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ba:	3302      	adds	r3, #2
 80094bc:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 80094be:	e090      	b.n	80095e2 <OBJ_Read+0x5de>
                            case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80094c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <OBJ_Read+0x4ca>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80094ca:	2305      	movs	r3, #5
 80094cc:	e0e8      	b.n	80096a0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	881a      	ldrh	r2, [r3, #0]
 80094d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d4:	801a      	strh	r2, [r3, #0]
                                pData++;
 80094d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d8:	3302      	adds	r3, #2
 80094da:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 80094dc:	e086      	b.n	80095ec <OBJ_Read+0x5e8>
                            case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80094de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <OBJ_Read+0x4e8>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80094e8:	2305      	movs	r3, #5
 80094ea:	e0d9      	b.n	80096a0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	881a      	ldrh	r2, [r3, #0]
 80094f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f2:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 80094f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f6:	3302      	adds	r3, #2
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	8852      	ldrh	r2, [r2, #2]
 80094fc:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 80094fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009500:	3304      	adds	r3, #4
 8009502:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8009504:	e072      	b.n	80095ec <OBJ_Read+0x5e8>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8009506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <OBJ_Read+0x510>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8009510:	2305      	movs	r3, #5
 8009512:	e0c5      	b.n	80096a0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	881a      	ldrh	r2, [r3, #0]
 8009518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951a:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 800951c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951e:	3302      	adds	r3, #2
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	8852      	ldrh	r2, [r2, #2]
 8009524:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 8009526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009528:	3304      	adds	r3, #4
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	8892      	ldrh	r2, [r2, #4]
 800952e:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8009530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009532:	3306      	adds	r3, #6
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	88d2      	ldrh	r2, [r2, #6]
 8009538:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 800953a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953c:	3308      	adds	r3, #8
 800953e:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8009540:	e054      	b.n	80095ec <OBJ_Read+0x5e8>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8009542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <OBJ_Read+0x54c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800954c:	2305      	movs	r3, #5
 800954e:	e0a7      	b.n	80096a0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	885b      	ldrh	r3, [r3, #2]
 8009554:	3307      	adds	r3, #7
 8009556:	10db      	asrs	r3, r3, #3
 8009558:	461a      	mov	r2, r3
 800955a:	6979      	ldr	r1, [r7, #20]
 800955c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800955e:	f002 f843 	bl	800b5e8 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	f023 030f 	bic.w	r3, r3, #15
 800956a:	330f      	adds	r3, #15
 800956c:	111b      	asrs	r3, r3, #4
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009572:	4413      	add	r3, r2
 8009574:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	885b      	ldrh	r3, [r3, #2]
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	2b00      	cmp	r3, #0
 8009580:	d031      	beq.n	80095e6 <OBJ_Read+0x5e2>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8009582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	b29a      	uxth	r2, r3
 800958a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958c:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/

                                break;
 800958e:	e02a      	b.n	80095e6 <OBJ_Read+0x5e2>
                            case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8009590:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <OBJ_Read+0x59a>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800959a:	2305      	movs	r3, #5
 800959c:	e080      	b.n	80096a0 <OBJ_Read+0x69c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	885b      	ldrh	r3, [r3, #2]
 80095a2:	3307      	adds	r3, #7
 80095a4:	10db      	asrs	r3, r3, #3
 80095a6:	461a      	mov	r2, r3
 80095a8:	6979      	ldr	r1, [r7, #20]
 80095aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80095ac:	f002 f81c 	bl	800b5e8 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	885b      	ldrh	r3, [r3, #2]
 80095b4:	f023 030f 	bic.w	r3, r3, #15
 80095b8:	330f      	adds	r3, #15
 80095ba:	111b      	asrs	r3, r3, #4
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c0:	4413      	add	r3, r2
 80095c2:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	885b      	ldrh	r3, [r3, #2]
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <OBJ_Read+0x5e6>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80095d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095da:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/
                                
                                break;
 80095dc:	e005      	b.n	80095ea <OBJ_Read+0x5e6>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80095de:	2318      	movs	r3, #24
 80095e0:	e05e      	b.n	80096a0 <OBJ_Read+0x69c>
                                break;
 80095e2:	bf00      	nop
 80095e4:	e002      	b.n	80095ec <OBJ_Read+0x5e8>
                                break;
 80095e6:	bf00      	nop
 80095e8:	e000      	b.n	80095ec <OBJ_Read+0x5e8>
                                break;
 80095ea:	bf00      	nop
                            } //switch (deftype)

                            bRead = 1;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80095f2:	e044      	b.n	800967e <OBJ_Read+0x67a>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 80095fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <OBJ_Read+0x606>
                    {
                        *pData = 0;
 8009604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009606:	2200      	movs	r2, #0
 8009608:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd0e      	ble.n	8009634 <OBJ_Read+0x630>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	885a      	ldrh	r2, [r3, #2]
 800961a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800961c:	4413      	add	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <OBJ_Read+0x630>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8009628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962a:	3302      	adds	r3, #2
 800962c:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 800962e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009630:	2200      	movs	r2, #0
 8009632:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8009634:	2300      	movs	r3, #0
 8009636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800963a:	e00a      	b.n	8009652 <OBJ_Read+0x64e>
                    {
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 800963c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800963e:	3302      	adds	r3, #2
 8009640:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 8009642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009644:	2200      	movs	r2, #0
 8009646:	801a      	strh	r2, [r3, #0]
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800964c:	3301      	adds	r3, #1
 800964e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009652:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	885b      	ldrh	r3, [r3, #2]
 800965a:	111b      	asrs	r3, r3, #4
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	429a      	cmp	r2, r3
 8009662:	dbeb      	blt.n	800963c <OBJ_Read+0x638>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	889b      	ldrh	r3, [r3, #4]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <OBJ_Read+0x674>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 8009670:	2306      	movs	r3, #6
 8009672:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8009676:	e002      	b.n	800967e <OBJ_Read+0x67a>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8009678:	231a      	movs	r3, #26
 800967a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            for (i = subindex; i <= lastSubindex; i++)
 800967e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009680:	3301      	adds	r3, #1
 8009682:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009684:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009688:	429a      	cmp	r2, r3
 800968a:	f67f adb4 	bls.w	80091f6 <OBJ_Read+0x1f2>
                    }
                }
            }

            if(bRead == 0)
 800968e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009692:	2b00      	cmp	r3, #0
 8009694:	d103      	bne.n	800969e <OBJ_Read+0x69a>
                return result;
 8009696:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800969a:	e001      	b.n	80096a0 <OBJ_Read+0x69c>
        {
 800969c:	bf00      	nop
        }
    }

    return 0;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	373c      	adds	r7, #60	; 0x3c
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd90      	pop	{r4, r7, pc}
 80096a8:	0800c170 	.word	0x0800c170

080096ac <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 80096ac:	b590      	push	{r4, r7, lr}
 80096ae:	b091      	sub	sp, #68	; 0x44
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60ba      	str	r2, [r7, #8]
 80096b4:	607b      	str	r3, [r7, #4]
 80096b6:	4603      	mov	r3, r0
 80096b8:	81fb      	strh	r3, [r7, #14]
 80096ba:	460b      	mov	r3, r1
 80096bc:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 80096be:	7b7b      	ldrb	r3, [r7, #13]
 80096c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	899b      	ldrh	r3, [r3, #12]
 80096c6:	121b      	asrs	r3, r3, #8
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	899b      	ldrh	r3, [r3, #12]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 80096e4:	7b7b      	ldrb	r3, [r7, #13]
 80096e6:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 80096e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096ec:	2b07      	cmp	r3, #7
 80096ee:	d023      	beq.n	8009738 <OBJ_Write+0x8c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	86bb      	strh	r3, [r7, #52]	; 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index)))
 80096fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11b      	bne.n	8009738 <OBJ_Write+0x8c>
 8009700:	89fb      	ldrh	r3, [r7, #14]
 8009702:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8009706:	4293      	cmp	r3, r2
 8009708:	d904      	bls.n	8009714 <OBJ_Write+0x68>
 800970a:	89fb      	ldrh	r3, [r7, #14]
 800970c:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8009710:	4293      	cmp	r3, r2
 8009712:	d90f      	bls.n	8009734 <OBJ_Write+0x88>
 8009714:	89fb      	ldrh	r3, [r7, #14]
 8009716:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800971a:	d303      	bcc.n	8009724 <OBJ_Write+0x78>
 800971c:	89fb      	ldrh	r3, [r7, #14]
 800971e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009722:	d307      	bcc.n	8009734 <OBJ_Write+0x88>
 8009724:	89fb      	ldrh	r3, [r7, #14]
 8009726:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800972a:	d305      	bcc.n	8009738 <OBJ_Write+0x8c>
 800972c:	89fb      	ldrh	r3, [r7, #14]
 800972e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009732:	d201      	bcs.n	8009738 <OBJ_Write+0x8c>
        {
            maxSubindex = maxConfiguredSubindex;
 8009734:	8c3b      	ldrh	r3, [r7, #32]
 8009736:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8009738:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800973c:	2b00      	cmp	r3, #0
 800973e:	d012      	beq.n	8009766 <OBJ_Write+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 8009740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009744:	2b07      	cmp	r3, #7
 8009746:	d101      	bne.n	800974c <OBJ_Write+0xa0>
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8009748:	2305      	movs	r3, #5
 800974a:	e306      	b.n	8009d5a <OBJ_Write+0x6ae>

        if ((subindex == 0) && (dataSize > 0))
 800974c:	7b7b      	ldrb	r3, [r7, #13]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <OBJ_Write+0xb4>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <OBJ_Write+0xb4>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 8009758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 8009760:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009762:	863b      	strh	r3, [r7, #48]	; 0x30
 8009764:	e022      	b.n	80097ac <OBJ_Write+0x100>
    }
    else
    if (subindex > maxSubindex)
 8009766:	7b7b      	ldrb	r3, [r7, #13]
 8009768:	b29b      	uxth	r3, r3
 800976a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800976c:	429a      	cmp	r2, r3
 800976e:	d201      	bcs.n	8009774 <OBJ_Write+0xc8>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8009770:	2311      	movs	r3, #17
 8009772:	e2f2      	b.n	8009d5a <OBJ_Write+0x6ae>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8009774:	7b7b      	ldrb	r3, [r7, #13]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fa2f 	bl	8008bdc <OBJ_GetEntryDesc>
 800977e:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) < (nAlStatus & STATE_MASK) )
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	889b      	ldrh	r3, [r3, #4]
 8009784:	109b      	asrs	r3, r3, #2
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 020e 	and.w	r2, r3, #14
 800978c:	4bb5      	ldr	r3, [pc, #724]	; (8009a64 <OBJ_Write+0x3b8>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	429a      	cmp	r2, r3
 8009796:	da09      	bge.n	80097ac <OBJ_Write+0x100>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	889b      	ldrh	r3, [r3, #4]
 800979c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <OBJ_Write+0xfc>
            {
                /* it is a read only entry */
                return ABORTIDX_READ_ONLY_ENTRY;
 80097a4:	2307      	movs	r3, #7
 80097a6:	e2d8      	b.n	8009d5a <OBJ_Write+0x6ae>
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80097a8:	231a      	movs	r3, #26
 80097aa:	e2d6      	b.n	8009d5a <OBJ_Write+0x6ae>
        }
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 80097ac:	7b7b      	ldrb	r3, [r7, #13]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d024      	beq.n	80097fc <OBJ_Write+0x150>
 80097b2:	89fb      	ldrh	r3, [r7, #14]
 80097b4:	f641 420f 	movw	r2, #7183	; 0x1c0f
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d904      	bls.n	80097c6 <OBJ_Write+0x11a>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index))
 80097bc:	89fb      	ldrh	r3, [r7, #14]
 80097be:	f641 422f 	movw	r2, #7215	; 0x1c2f
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d90f      	bls.n	80097e6 <OBJ_Write+0x13a>
 80097c6:	89fb      	ldrh	r3, [r7, #14]
 80097c8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80097cc:	d303      	bcc.n	80097d6 <OBJ_Write+0x12a>
 80097ce:	89fb      	ldrh	r3, [r7, #14]
 80097d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80097d4:	d307      	bcc.n	80097e6 <OBJ_Write+0x13a>
 80097d6:	89fb      	ldrh	r3, [r7, #14]
 80097d8:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80097dc:	d30e      	bcc.n	80097fc <OBJ_Write+0x150>
 80097de:	89fb      	ldrh	r3, [r7, #14]
 80097e0:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80097e4:	d20a      	bcs.n	80097fc <OBJ_Write+0x150>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 80097f0:	8b7b      	ldrh	r3, [r7, #26]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <OBJ_Write+0x150>
            bClearSubindex0Required = TRUE;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    if ( pObjEntry->Write != NULL )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <OBJ_Write+0x170>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1c      	ldr	r4, [r3, #32]
 8009808:	7b79      	ldrb	r1, [r7, #13]
 800980a:	89f8      	ldrh	r0, [r7, #14]
 800980c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	47a0      	blx	r4
 8009818:	4603      	mov	r3, r0
 800981a:	e29e      	b.n	8009d5a <OBJ_Write+0x6ae>
    }
    else
    {
        UINT8 bWritten = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 8009822:	2307      	movs	r3, #7
 8009824:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

/*ECATCHANGE_START(V5.11) ECAT*/
        if (dataSize == 0)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <OBJ_Write+0x186>
        {
           return 0; //no error
 800982e:	2300      	movs	r3, #0
 8009830:	e293      	b.n	8009d5a <OBJ_Write+0x6ae>
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8009832:	7b7b      	ldrb	r3, [r7, #13]
 8009834:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009836:	e283      	b.n	8009d40 <OBJ_Write+0x694>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 8009842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009844:	b2db      	uxtb	r3, r3
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff f9c7 	bl	8008bdc <OBJ_GetEntryDesc>
 800984e:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8009850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009852:	b2db      	uxtb	r3, r3
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff f9f8 	bl	8008c4c <OBJ_GetEntryOffset>
 800985c:	4603      	mov	r3, r0
 800985e:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if ( ((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) >= (nAlStatus & STATE_MASK) )
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	889b      	ldrh	r3, [r3, #4]
 8009864:	109b      	asrs	r3, r3, #2
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 020e 	and.w	r2, r3, #14
 800986c:	4b7d      	ldr	r3, [pc, #500]	; (8009a64 <OBJ_Write+0x3b8>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	429a      	cmp	r2, r3
 8009876:	f2c0 8238 	blt.w	8009cea <OBJ_Write+0x63e>
            {
                /* we have write access for this entry */
                if (i != 0)
 800987a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <OBJ_Write+0x1e2>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 8009880:	8b3b      	ldrh	r3, [r7, #24]
 8009882:	091b      	lsrs	r3, r3, #4
 8009884:	b29b      	uxth	r3, r3
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988a:	4413      	add	r3, r2
 800988c:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 800988e:	7b7b      	ldrb	r3, [r7, #13]
 8009890:	b29b      	uxth	r3, r3
 8009892:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009894:	429a      	cmp	r2, r3
 8009896:	d00a      	beq.n	80098ae <OBJ_Write+0x202>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8009898:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 824c 	beq.w	8009d3a <OBJ_Write+0x68e>
 80098a2:	7b7b      	ldrb	r3, [r7, #13]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80098a8:	429a      	cmp	r2, r3
 80098aa:	f0c0 8246 	bcc.w	8009d3a <OBJ_Write+0x68e>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 80098ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d115      	bne.n	80098e0 <OBJ_Write+0x234>
 80098b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098b8:	2b07      	cmp	r3, #7
 80098ba:	d011      	beq.n	80098e0 <OBJ_Write+0x234>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 80098bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	75fb      	strb	r3, [r7, #23]
                        if(maxConfiguredSubindex < NewSubindex0)
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	8c3a      	ldrh	r2, [r7, #32]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d201      	bcs.n	80098d0 <OBJ_Write+0x224>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 80098cc:	2313      	movs	r3, #19
 80098ce:	e244      	b.n	8009d5a <OBJ_Write+0x6ae>
                        }

                        /* subindex 0 of an array or record shall be written */
/* ECATCHANGE_START(V5.11) SDO5*/
                        pVarPtr[0] = SWAPWORD(pData[0]);
 80098d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d2:	881a      	ldrh	r2, [r3, #0]
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO5*/
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 80098d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098da:	3302      	adds	r3, #2
 80098dc:	64bb      	str	r3, [r7, #72]	; 0x48
                    {
 80098de:	e200      	b.n	8009ce2 <OBJ_Write+0x636>
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098ee:	d315      	bcc.n	800991c <OBJ_Write+0x270>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	885b      	ldrh	r3, [r3, #2]
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d804      	bhi.n	8009902 <OBJ_Write+0x256>
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	332f      	adds	r3, #47	; 0x2f
 80098fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009900:	e00c      	b.n	800991c <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 16 )
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	885b      	ldrh	r3, [r3, #2]
 8009906:	2b10      	cmp	r3, #16
 8009908:	d102      	bne.n	8009910 <OBJ_Write+0x264>
                                dataType = DEFTYPE_UNSIGNED16;
 800990a:	2306      	movs	r3, #6
 800990c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800990e:	e005      	b.n	800991c <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 32 )
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	885b      	ldrh	r3, [r3, #2]
 8009914:	2b20      	cmp	r3, #32
 8009916:	d101      	bne.n	800991c <OBJ_Write+0x270>
                                dataType = DEFTYPE_UNSIGNED32;
 8009918:	2307      	movs	r3, #7
 800991a:	84fb      	strh	r3, [r7, #38]	; 0x26
                        }

                        switch (dataType)
 800991c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800991e:	2b37      	cmp	r3, #55	; 0x37
 8009920:	dc78      	bgt.n	8009a14 <OBJ_Write+0x368>
 8009922:	2b00      	cmp	r3, #0
 8009924:	f2c0 81da 	blt.w	8009cdc <OBJ_Write+0x630>
 8009928:	2b37      	cmp	r3, #55	; 0x37
 800992a:	f200 81d7 	bhi.w	8009cdc <OBJ_Write+0x630>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <OBJ_Write+0x288>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009a21 	.word	0x08009a21
 8009938:	08009a69 	.word	0x08009a69
 800993c:	08009a69 	.word	0x08009a69
 8009940:	08009b25 	.word	0x08009b25
 8009944:	08009be5 	.word	0x08009be5
 8009948:	08009a69 	.word	0x08009a69
 800994c:	08009b25 	.word	0x08009b25
 8009950:	08009be5 	.word	0x08009be5
 8009954:	08009be5 	.word	0x08009be5
 8009958:	08009c71 	.word	0x08009c71
 800995c:	08009ca7 	.word	0x08009ca7
 8009960:	08009ca7 	.word	0x08009ca7
 8009964:	08009cdd 	.word	0x08009cdd
 8009968:	08009cdd 	.word	0x08009cdd
 800996c:	08009cdd 	.word	0x08009cdd
 8009970:	08009cdd 	.word	0x08009cdd
 8009974:	08009cdd 	.word	0x08009cdd
 8009978:	08009c35 	.word	0x08009c35
 800997c:	08009cdd 	.word	0x08009cdd
 8009980:	08009cdd 	.word	0x08009cdd
 8009984:	08009cdd 	.word	0x08009cdd
 8009988:	08009c35 	.word	0x08009c35
 800998c:	08009cdd 	.word	0x08009cdd
 8009990:	08009cdd 	.word	0x08009cdd
 8009994:	08009cdd 	.word	0x08009cdd
 8009998:	08009cdd 	.word	0x08009cdd
 800999c:	08009cdd 	.word	0x08009cdd
 80099a0:	08009c35 	.word	0x08009c35
 80099a4:	08009cdd 	.word	0x08009cdd
 80099a8:	08009cdd 	.word	0x08009cdd
 80099ac:	08009a69 	.word	0x08009a69
 80099b0:	08009b25 	.word	0x08009b25
 80099b4:	08009be5 	.word	0x08009be5
 80099b8:	08009cdd 	.word	0x08009cdd
 80099bc:	08009cdd 	.word	0x08009cdd
 80099c0:	08009cdd 	.word	0x08009cdd
 80099c4:	08009cdd 	.word	0x08009cdd
 80099c8:	08009cdd 	.word	0x08009cdd
 80099cc:	08009cdd 	.word	0x08009cdd
 80099d0:	08009cdd 	.word	0x08009cdd
 80099d4:	08009cdd 	.word	0x08009cdd
 80099d8:	08009cdd 	.word	0x08009cdd
 80099dc:	08009cdd 	.word	0x08009cdd
 80099e0:	08009cdd 	.word	0x08009cdd
 80099e4:	08009cdd 	.word	0x08009cdd
 80099e8:	08009a69 	.word	0x08009a69
 80099ec:	08009b25 	.word	0x08009b25
 80099f0:	08009be5 	.word	0x08009be5
 80099f4:	08009a69 	.word	0x08009a69
 80099f8:	08009a69 	.word	0x08009a69
 80099fc:	08009a69 	.word	0x08009a69
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a69 	.word	0x08009a69
 8009a08:	08009a69 	.word	0x08009a69
 8009a0c:	08009a69 	.word	0x08009a69
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	f200 815f 	bhi.w	8009cdc <OBJ_Write+0x630>
 8009a1e:	e142      	b.n	8009ca6 <OBJ_Write+0x5fa>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 8009a20:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01b      	beq.n	8009a60 <OBJ_Write+0x3b4>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	885b      	ldrh	r3, [r3, #2]
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dd0b      	ble.n	8009a4c <OBJ_Write+0x3a0>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	885a      	ldrh	r2, [r3, #2]
 8009a38:	8b3b      	ldrh	r3, [r7, #24]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <OBJ_Write+0x3a0>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8009a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a48:	3302      	adds	r3, #2
 8009a4a:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	885b      	ldrh	r3, [r3, #2]
 8009a50:	111b      	asrs	r3, r3, #4
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a5a:	4413      	add	r3, r2
 8009a5c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 8009a5e:	e140      	b.n	8009ce2 <OBJ_Write+0x636>
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8009a60:	2318      	movs	r3, #24
 8009a62:	e17a      	b.n	8009d5a <OBJ_Write+0x6ae>
 8009a64:	20000b4d 	.word	0x20000b4d
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	885b      	ldrh	r3, [r3, #2]
 8009a70:	461a      	mov	r2, r3
 8009a72:	4ba1      	ldr	r3, [pc, #644]	; (8009cf8 <OBJ_Write+0x64c>)
 8009a74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	8b3b      	ldrh	r3, [r7, #24]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	827b      	strh	r3, [r7, #18]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8009a8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a90:	43db      	mvns	r3, r3
 8009a92:	b21a      	sxth	r2, r3
 8009a94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009a98:	4013      	ands	r3, r2
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	84bb      	strh	r3, [r7, #36]	; 0x24

/* ECATCHANGE_START(V5.11) SDO7*/
                            if (bCompleteAccess) 
 8009a9e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d008      	beq.n	8009ab8 <OBJ_Write+0x40c>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8009aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	8a7b      	ldrh	r3, [r7, #18]
 8009aac:	4013      	ands	r3, r2
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ab6:	e024      	b.n	8009b02 <OBJ_Write+0x456>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8009ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4b8c      	ldr	r3, [pc, #560]	; (8009cf8 <OBJ_Write+0x64c>)
 8009ac6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009aca:	43db      	mvns	r3, r3
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <OBJ_Write+0x42a>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 8009ad2:	2312      	movs	r3, #18
 8009ad4:	e141      	b.n	8009d5a <OBJ_Write+0x6ae>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8009ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad8:	881a      	ldrh	r2, [r3, #0]
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4b85      	ldr	r3, [pc, #532]	; (8009cf8 <OBJ_Write+0x64c>)
 8009ae2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	8b3b      	ldrh	r3, [r7, #24]
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	fa02 f303 	lsl.w	r3, r2, r3
 8009af6:	b21a      	sxth	r2, r3
 8009af8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009afc:	4313      	orrs	r3, r2
 8009afe:	b21b      	sxth	r3, r3
 8009b00:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }
/* ECATCHANGE_END(V5.11) SDO7*/

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b06:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	885a      	ldrh	r2, [r3, #2]
 8009b0c:	8b3b      	ldrh	r3, [r7, #24]
 8009b0e:	4413      	add	r3, r2
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	f003 030f 	and.w	r3, r3, #15
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 80e2 	bne.w	8009ce0 <OBJ_Write+0x634>
                                /* we have reached the UINT16 border */
                                pData++;
 8009b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1e:	3302      	adds	r3, #2
 8009b20:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                            break;
 8009b22:	e0dd      	b.n	8009ce0 <OBJ_Write+0x634>
                        case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8009b24:	8b3b      	ldrh	r3, [r7, #24]
 8009b26:	f003 030f 	and.w	r3, r3, #15
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <OBJ_Write+0x486>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8009b2e:	2305      	movs	r3, #5
 8009b30:	e113      	b.n	8009d5a <OBJ_Write+0x6ae>
/*ECATCHANGE_END(V5.11) SDO1*/

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8009b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8009b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d006      	beq.n	8009b4e <OBJ_Write+0x4a2>
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	8aba      	ldrh	r2, [r7, #20]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d001      	beq.n	8009b4e <OBJ_Write+0x4a2>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8009b4a:	231c      	movs	r3, #28
 8009b4c:	e105      	b.n	8009d5a <OBJ_Write+0x6ae>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 8009b4e:	89fb      	ldrh	r3, [r7, #14]
 8009b50:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d919      	bls.n	8009b8c <OBJ_Write+0x4e0>
 8009b58:	89fb      	ldrh	r3, [r7, #14]
 8009b5a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d814      	bhi.n	8009b8c <OBJ_Write+0x4e0>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8009b62:	8abb      	ldrh	r3, [r7, #20]
 8009b64:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8009b68:	d303      	bcc.n	8009b72 <OBJ_Write+0x4c6>
 8009b6a:	8abb      	ldrh	r3, [r7, #20]
 8009b6c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009b70:	d30c      	bcc.n	8009b8c <OBJ_Write+0x4e0>
 8009b72:	8abb      	ldrh	r3, [r7, #20]
 8009b74:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8009b78:	d303      	bcc.n	8009b82 <OBJ_Write+0x4d6>
 8009b7a:	8abb      	ldrh	r3, [r7, #20]
 8009b7c:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009b80:	d304      	bcc.n	8009b8c <OBJ_Write+0x4e0>
 8009b82:	8abb      	ldrh	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <OBJ_Write+0x4e0>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8009b88:	2312      	movs	r3, #18
 8009b8a:	e0e6      	b.n	8009d5a <OBJ_Write+0x6ae>
                                }
                            }

                            if((index == 0x1C32 || index == 0x1C33) && (i == 1))
 8009b8c:	89fb      	ldrh	r3, [r7, #14]
 8009b8e:	f641 4232 	movw	r2, #7218	; 0x1c32
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <OBJ_Write+0x4f4>
 8009b96:	89fb      	ldrh	r3, [r7, #14]
 8009b98:	f641 4233 	movw	r2, #7219	; 0x1c33
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d11a      	bne.n	8009bd6 <OBJ_Write+0x52a>
 8009ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d117      	bne.n	8009bd6 <OBJ_Write+0x52a>
                            {
                                /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                if(pVarPtr[0] != u16NewData)
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	8aba      	ldrh	r2, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d00f      	beq.n	8009bd0 <OBJ_Write+0x524>
                                {
                                    result = CheckSyncTypeValue(index,u16NewData);
 8009bb0:	8aba      	ldrh	r2, [r7, #20]
 8009bb2:	89fb      	ldrh	r3, [r7, #14]
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff f94a 	bl	8008e50 <CheckSyncTypeValue>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                    if(result != 0)
 8009bc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <OBJ_Write+0x524>
                                        return result;
 8009bca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009bce:	e0c4      	b.n	8009d5a <OBJ_Write+0x6ae>
                                }

                                /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                bSyncSetByUser = TRUE;
 8009bd0:	4b4a      	ldr	r3, [pc, #296]	; (8009cfc <OBJ_Write+0x650>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	701a      	strb	r2, [r3, #0]
                            }

                            pVarPtr[0] = u16NewData;
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	8aba      	ldrh	r2, [r7, #20]
 8009bda:	801a      	strh	r2, [r3, #0]
                            pData++;
 8009bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bde:	3302      	adds	r3, #2
 8009be0:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8009be2:	e07e      	b.n	8009ce2 <OBJ_Write+0x636>
                        case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8009be4:	8b3b      	ldrh	r3, [r7, #24]
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <OBJ_Write+0x546>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8009bee:	2305      	movs	r3, #5
 8009bf0:	e0b3      	b.n	8009d5a <OBJ_Write+0x6ae>
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8009bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00f      	beq.n	8009c1a <OBJ_Write+0x56e>
                                ((pVarPtr[0] != pData[0])
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	881a      	ldrh	r2, [r3, #0]
 8009bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c00:	881b      	ldrh	r3, [r3, #0]
                            if(bClearSubindex0Required && 
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d107      	bne.n	8009c16 <OBJ_Write+0x56a>
                                || (pVarPtr[1] != pData[1])))
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	3302      	adds	r3, #2
 8009c0a:	881a      	ldrh	r2, [r3, #0]
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0e:	3302      	adds	r3, #2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d001      	beq.n	8009c1a <OBJ_Write+0x56e>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8009c16:	231c      	movs	r3, #28
 8009c18:	e09f      	b.n	8009d5a <OBJ_Write+0x6ae>
                            }

                            pVarPtr[0] = pData[0];
 8009c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1c:	881a      	ldrh	r2, [r3, #0]
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	3302      	adds	r3, #2
 8009c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c28:	8852      	ldrh	r2, [r2, #2]
 8009c2a:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8009c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c2e:	3304      	adds	r3, #4
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8009c32:	e056      	b.n	8009ce2 <OBJ_Write+0x636>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8009c34:	8b3b      	ldrh	r3, [r7, #24]
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <OBJ_Write+0x596>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8009c3e:	2305      	movs	r3, #5
 8009c40:	e08b      	b.n	8009d5a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8009c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c50:	8852      	ldrh	r2, [r2, #2]
 8009c52:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	3304      	adds	r3, #4
 8009c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c5a:	8892      	ldrh	r2, [r2, #4]
 8009c5c:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	3306      	adds	r3, #6
 8009c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c64:	88d2      	ldrh	r2, [r2, #6]
 8009c66:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 8009c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 8009c6e:	e038      	b.n	8009ce2 <OBJ_Write+0x636>
                        case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8009c70:	8b3b      	ldrh	r3, [r7, #24]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <OBJ_Write+0x5d2>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8009c7a:	2305      	movs	r3, #5
 8009c7c:	e06d      	b.n	8009d5a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	3307      	adds	r3, #7
 8009c84:	10db      	asrs	r3, r3, #3
 8009c86:	461a      	mov	r2, r3
 8009c88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8c:	f001 fcac 	bl	800b5e8 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	885b      	ldrh	r3, [r3, #2]
 8009c94:	f023 030f 	bic.w	r3, r3, #15
 8009c98:	330f      	adds	r3, #15
 8009c9a:	111b      	asrs	r3, r3, #4
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca0:	4413      	add	r3, r2
 8009ca2:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/
                            break;
 8009ca4:	e01d      	b.n	8009ce2 <OBJ_Write+0x636>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8009ca6:	8b3b      	ldrh	r3, [r7, #24]
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <OBJ_Write+0x608>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8009cb0:	2305      	movs	r3, #5
 8009cb2:	e052      	b.n	8009d5a <OBJ_Write+0x6ae>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	885b      	ldrh	r3, [r3, #2]
 8009cb8:	3307      	adds	r3, #7
 8009cba:	10db      	asrs	r3, r3, #3
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f001 fc91 	bl	800b5e8 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	f023 030f 	bic.w	r3, r3, #15
 8009cce:	330f      	adds	r3, #15
 8009cd0:	111b      	asrs	r3, r3, #4
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cd6:	4413      	add	r3, r2
 8009cd8:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/

                            break;
 8009cda:	e002      	b.n	8009ce2 <OBJ_Write+0x636>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8009cdc:	2318      	movs	r3, #24
 8009cde:	e03c      	b.n	8009d5a <OBJ_Write+0x6ae>
                            break;
 8009ce0:	bf00      	nop
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ce8:	e027      	b.n	8009d3a <OBJ_Write+0x68e>

                }
            }
            else
            {
                if(i == 0)
 8009cea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <OBJ_Write+0x654>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8009cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf2:	3302      	adds	r3, #2
 8009cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cf6:	e01d      	b.n	8009d34 <OBJ_Write+0x688>
 8009cf8:	0800c170 	.word	0x0800c170
 8009cfc:	20000eac 	.word	0x20000eac
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	885b      	ldrh	r3, [r3, #2]
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dd0b      	ble.n	8009d24 <OBJ_Write+0x678>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	885a      	ldrh	r2, [r3, #2]
 8009d10:	8b3b      	ldrh	r3, [r7, #24]
 8009d12:	4413      	add	r3, r2
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <OBJ_Write+0x678>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8009d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d20:	3302      	adds	r3, #2
 8009d22:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
/*ECATCHANGE_START(V5.11) SDO9*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d30:	4413      	add	r3, r2
 8009d32:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO9*/
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8009d34:	2318      	movs	r3, #24
 8009d36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        for (i = subindex; i <= lastSubindex; i++)
 8009d3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009d40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009d42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009d44:	429a      	cmp	r2, r3
 8009d46:	f67f ad77 	bls.w	8009838 <OBJ_Write+0x18c>
            }
        }

        if (bWritten == 0)
 8009d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <OBJ_Write+0x6ac>
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8009d52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009d56:	e000      	b.n	8009d5a <OBJ_Write+0x6ae>
    }

    return 0;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	373c      	adds	r7, #60	; 0x3c
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd90      	pop	{r4, r7, pc}
 8009d62:	bf00      	nop

08009d64 <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8009d64:	b5b0      	push	{r4, r5, r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	613b      	str	r3, [r7, #16]

    if ( (pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	891b      	ldrh	r3, [r3, #8]
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	4a99      	ldr	r2, [pc, #612]	; (8009fe4 <SdoDownloadSegmentInd+0x280>)
 8009d7e:	7812      	ldrb	r2, [r2, #0]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d102      	bne.n	8009d8a <SdoDownloadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8009d84:	2301      	movs	r3, #1
 8009d86:	75fb      	strb	r3, [r7, #23]
 8009d88:	e156      	b.n	800a038 <SdoDownloadSegmentInd+0x2d4>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8009d8a:	4b97      	ldr	r3, [pc, #604]	; (8009fe8 <SdoDownloadSegmentInd+0x284>)
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	3b09      	subs	r3, #9
 8009d90:	81bb      	strh	r3, [r7, #12]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	891b      	ldrh	r3, [r3, #8]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	4b91      	ldr	r3, [pc, #580]	; (8009fe4 <SdoDownloadSegmentInd+0x280>)
 8009da0:	701a      	strb	r2, [r3, #0]

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 8009da2:	4b92      	ldr	r3, [pc, #584]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8144 	beq.w	800a034 <SdoDownloadSegmentInd+0x2d0>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8009dac:	4b90      	ldr	r3, [pc, #576]	; (8009ff0 <SdoDownloadSegmentInd+0x28c>)
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	4b90      	ldr	r3, [pc, #576]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	891b      	ldrh	r3, [r3, #8]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d02a      	beq.n	8009e1a <SdoDownloadSegmentInd+0xb6>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 8009dc4:	89bb      	ldrh	r3, [r7, #12]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d823      	bhi.n	8009e14 <SdoDownloadSegmentInd+0xb0>
                {
/* ECATCHANGE_START(V5.11) ECAT7*/
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	817b      	strh	r3, [r7, #10]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8009dd2:	897b      	ldrh	r3, [r7, #10]
 8009dd4:	3b03      	subs	r3, #3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d80a      	bhi.n	8009df4 <SdoDownloadSegmentInd+0x90>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	891b      	ldrh	r3, [r3, #8]
 8009de2:	105b      	asrs	r3, r3, #1
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	43db      	mvns	r3, r3
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d008      	beq.n	8009e06 <SdoDownloadSegmentInd+0xa2>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2b07      	cmp	r3, #7
 8009df8:	d909      	bls.n	8009e0e <SdoDownloadSegmentInd+0xaa>
                        && (bytesToSave == (mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	3b03      	subs	r3, #3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d103      	bne.n	8009e0e <SdoDownloadSegmentInd+0xaa>
                        ) )
/* ECATCHANGE_END(V5.11) ECAT7*/
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 8009e06:	4b7c      	ldr	r3, [pc, #496]	; (8009ff8 <SdoDownloadSegmentInd+0x294>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e011      	b.n	8009e32 <SdoDownloadSegmentInd+0xce>
                    }
                    else
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8009e0e:	230e      	movs	r3, #14
 8009e10:	75fb      	strb	r3, [r7, #23]
 8009e12:	e00e      	b.n	8009e32 <SdoDownloadSegmentInd+0xce>
                }
                else
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8009e14:	230e      	movs	r3, #14
 8009e16:	75fb      	strb	r3, [r7, #23]
 8009e18:	e00b      	b.n	8009e32 <SdoDownloadSegmentInd+0xce>
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 8009e1a:	4b77      	ldr	r3, [pc, #476]	; (8009ff8 <SdoDownloadSegmentInd+0x294>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 8009e20:	89bb      	ldrh	r3, [r7, #12]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d802      	bhi.n	8009e2e <SdoDownloadSegmentInd+0xca>
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8009e28:	230e      	movs	r3, #14
 8009e2a:	75fb      	strb	r3, [r7, #23]
 8009e2c:	e001      	b.n	8009e32 <SdoDownloadSegmentInd+0xce>
                else
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 8009e2e:	89bb      	ldrh	r3, [r7, #12]
 8009e30:	613b      	str	r3, [r7, #16]
            }

            if ( abort == 0 )
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 80ff 	bne.w	800a038 <SdoDownloadSegmentInd+0x2d4>
            {
                /* the received data is copied in the buffer */
                UINT16 i = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	81fb      	strh	r3, [r7, #14]

                if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 8009e3e:	4b6d      	ldr	r3, [pc, #436]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d03c      	beq.n	8009ec4 <SdoDownloadSegmentInd+0x160>
                {	
                    // Data0 will be copied to an odd address of pSdoSegData, Data1 to an even address (Segment 2, 4, ...)
                    // Read Data0
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] &= ~SEGHDATA_MASK;
 8009e4a:	4b68      	ldr	r3, [pc, #416]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	4b69      	ldr	r3, [pc, #420]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	8819      	ldrh	r1, [r3, #0]
 8009e5a:	4b64      	ldr	r3, [pc, #400]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4b65      	ldr	r3, [pc, #404]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	085b      	lsrs	r3, r3, #1
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	b2ca      	uxtb	r2, r1
 8009e6a:	b292      	uxth	r2, r2
 8009e6c:	801a      	strh	r2, [r3, #0]
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] |= (pSdoInd->SdoHeader.SegHeader & SEGHDATA_MASK);
 8009e6e:	4b5f      	ldr	r3, [pc, #380]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b60      	ldr	r3, [pc, #384]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b21a      	sxth	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	891b      	ldrh	r3, [r3, #8]
 8009e84:	b21b      	sxth	r3, r3
 8009e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e8a:	b21b      	sxth	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b219      	sxth	r1, r3
 8009e90:	4b56      	ldr	r3, [pc, #344]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b57      	ldr	r3, [pc, #348]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	085b      	lsrs	r3, r3, #1
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	4413      	add	r3, r2
 8009e9e:	b28a      	uxth	r2, r1
 8009ea0:	801a      	strh	r2, [r3, #0]
                    // Copy Data1 - DataN
                    MBXMEMCPY(&pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1],pSdoInd->SdoHeader.Data, bytesToSave - 1 );
 8009ea2:	4b52      	ldr	r3, [pc, #328]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b53      	ldr	r3, [pc, #332]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	3301      	adds	r3, #1
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	18d0      	adds	r0, r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 010a 	add.w	r1, r3, #10
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f001 fb93 	bl	800b5e8 <memcpy>
 8009ec2:	e03e      	b.n	8009f42 <SdoDownloadSegmentInd+0x1de>
                }
                else
                {	// Data0 will be copied to an even address of pSdoSegData, Data1 to an odd address (Segment 1, 3,...)
                    // Read Data0 and Data1
                    pSdoSegData[( nSdoSegBytesToHandle >> 1)] = ((pSdoInd->SdoHeader.SegHeader >> SEGDATASHIFT) &~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[0] << 8) & SEGHDATA_MASK);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	0a1b      	lsrs	r3, r3, #8
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	b21a      	sxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	895b      	ldrh	r3, [r3, #10]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	b219      	sxth	r1, r3
 8009eda:	4b44      	ldr	r3, [pc, #272]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b45      	ldr	r3, [pc, #276]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	b28a      	uxth	r2, r1
 8009eea:	801a      	strh	r2, [r3, #0]
                    
                    // Copy Data2 - DataN
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 8009eec:	2301      	movs	r3, #1
 8009eee:	81fb      	strh	r3, [r7, #14]
 8009ef0:	e021      	b.n	8009f36 <SdoDownloadSegmentInd+0x1d2>
                    {
                        pSdoSegData[(nSdoSegBytesToHandle >> 1) + i] = ((pSdoInd->SdoHeader.Data[i - 1] >> SEGDATASHIFT) & ~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[i] << 8) & SEGHDATA_MASK);
 8009ef2:	89fb      	ldrh	r3, [r7, #14]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	4413      	add	r3, r2
 8009efe:	885b      	ldrh	r3, [r3, #2]
 8009f00:	0a1b      	lsrs	r3, r3, #8
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	b21a      	sxth	r2, r3
 8009f06:	89fb      	ldrh	r3, [r7, #14]
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	440b      	add	r3, r1
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	b21b      	sxth	r3, r3
 8009f16:	4313      	orrs	r3, r2
 8009f18:	b218      	sxth	r0, r3
 8009f1a:	4b34      	ldr	r3, [pc, #208]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b35      	ldr	r3, [pc, #212]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	0859      	lsrs	r1, r3, #1
 8009f24:	89fb      	ldrh	r3, [r7, #14]
 8009f26:	440b      	add	r3, r1
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	b282      	uxth	r2, r0
 8009f2e:	801a      	strh	r2, [r3, #0]
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	3301      	adds	r3, #1
 8009f34:	81fb      	strh	r3, [r7, #14]
 8009f36:	89fa      	ldrh	r2, [r7, #14]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	085b      	lsrs	r3, r3, #1
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d3d7      	bcc.n	8009ef2 <SdoDownloadSegmentInd+0x18e>
                            // (If bytesToSave is odd, one byte too much is copied. But, that is not a problem.)
                    }
                }

                if ( bSdoSegFollows == FALSE    )
 8009f42:	4b2d      	ldr	r3, [pc, #180]	; (8009ff8 <SdoDownloadSegmentInd+0x294>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d176      	bne.n	800a038 <SdoDownloadSegmentInd+0x2d4>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 8009f4a:	4b2c      	ldr	r3, [pc, #176]	; (8009ffc <SdoDownloadSegmentInd+0x298>)
 8009f4c:	8818      	ldrh	r0, [r3, #0]
 8009f4e:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <SdoDownloadSegmentInd+0x29c>)
 8009f50:	7819      	ldrb	r1, [r3, #0]
 8009f52:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <SdoDownloadSegmentInd+0x28c>)
 8009f54:	681c      	ldr	r4, [r3, #0]
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <SdoDownloadSegmentInd+0x2a0>)
 8009f58:	681d      	ldr	r5, [r3, #0]
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a2a      	ldr	r2, [pc, #168]	; (800a008 <SdoDownloadSegmentInd+0x2a4>)
 8009f60:	7812      	ldrb	r2, [r2, #0]
 8009f62:	9201      	str	r2, [sp, #4]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462b      	mov	r3, r5
 8009f68:	4622      	mov	r2, r4
 8009f6a:	f7ff fb9f 	bl	80096ac <OBJ_Write>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	2bff      	cmp	r3, #255	; 0xff
 8009f76:	d12c      	bne.n	8009fd2 <SdoDownloadSegmentInd+0x26e>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8009f78:	4b24      	ldr	r3, [pc, #144]	; (800a00c <SdoDownloadSegmentInd+0x2a8>)
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 8009f7e:	4b22      	ldr	r3, [pc, #136]	; (800a008 <SdoDownloadSegmentInd+0x2a4>)
 8009f80:	781a      	ldrb	r2, [r3, #0]
 8009f82:	4b23      	ldr	r3, [pc, #140]	; (800a010 <SdoDownloadSegmentInd+0x2ac>)
 8009f84:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 8009f86:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <SdoDownloadSegmentInd+0x29c>)
 8009f88:	781a      	ldrb	r2, [r3, #0]
 8009f8a:	4b22      	ldr	r3, [pc, #136]	; (800a014 <SdoDownloadSegmentInd+0x2b0>)
 8009f8c:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	; (8009ffc <SdoDownloadSegmentInd+0x298>)
 8009f90:	881a      	ldrh	r2, [r3, #0]
 8009f92:	4b21      	ldr	r3, [pc, #132]	; (800a018 <SdoDownloadSegmentInd+0x2b4>)
 8009f94:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 8009f96:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <SdoDownloadSegmentInd+0x28c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a20      	ldr	r2, [pc, #128]	; (800a01c <SdoDownloadSegmentInd+0x2b8>)
 8009f9c:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 8009f9e:	4b13      	ldr	r3, [pc, #76]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1f      	ldr	r2, [pc, #124]	; (800a020 <SdoDownloadSegmentInd+0x2bc>)
 8009fa4:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 8009fa6:	4b17      	ldr	r3, [pc, #92]	; (800a004 <SdoDownloadSegmentInd+0x2a0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	4a1d      	ldr	r2, [pc, #116]	; (800a024 <SdoDownloadSegmentInd+0x2c0>)
 8009fae:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <SdoDownloadSegmentInd+0x2c4>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	; (800a02c <SdoDownloadSegmentInd+0x2c8>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <SdoDownloadSegmentInd+0x294>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	; (800a030 <SdoDownloadSegmentInd+0x2cc>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <SdoDownloadSegmentInd+0x290>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 8009fce:	23ff      	movs	r3, #255	; 0xff
 8009fd0:	e079      	b.n	800a0c6 <SdoDownloadSegmentInd+0x362>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8009fd2:	4b06      	ldr	r3, [pc, #24]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fafe 	bl	800b5d8 <free>
                        pSdoSegData = NULL;
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <SdoDownloadSegmentInd+0x288>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	e029      	b.n	800a038 <SdoDownloadSegmentInd+0x2d4>
 8009fe4:	20000ece 	.word	0x20000ece
 8009fe8:	20000e1a 	.word	0x20000e1a
 8009fec:	20000ee0 	.word	0x20000ee0
 8009ff0:	20000ec4 	.word	0x20000ec4
 8009ff4:	20000ebc 	.word	0x20000ebc
 8009ff8:	20000ec1 	.word	0x20000ec1
 8009ffc:	20000ee4 	.word	0x20000ee4
 800a000:	20000efc 	.word	0x20000efc
 800a004:	20000ef8 	.word	0x20000ef8
 800a008:	20000ec0 	.word	0x20000ec0
 800a00c:	20000ecc 	.word	0x20000ecc
 800a010:	20000ecd 	.word	0x20000ecd
 800a014:	20000f00 	.word	0x20000f00
 800a018:	20000efe 	.word	0x20000efe
 800a01c:	20000edc 	.word	0x20000edc
 800a020:	20000eb8 	.word	0x20000eb8
 800a024:	20000ec8 	.word	0x20000ec8
 800a028:	200005d5 	.word	0x200005d5
 800a02c:	20000ed8 	.word	0x20000ed8
 800a030:	20000ecf 	.word	0x20000ecf
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800a034:	2303      	movs	r3, #3
 800a036:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d12d      	bne.n	800a09a <SdoDownloadSegmentInd+0x336>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	220a      	movs	r2, #10
 800a042:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	88db      	ldrh	r3, [r3, #6]
 800a048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	88db      	ldrh	r3, [r3, #6]
 800a056:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
        if ( bSdoSegLastToggle )
 800a060:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <SdoDownloadSegmentInd+0x36c>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <SdoDownloadSegmentInd+0x30c>
        {
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2230      	movs	r2, #48	; 0x30
 800a06c:	811a      	strh	r2, [r3, #8]
 800a06e:	e002      	b.n	800a076 <SdoDownloadSegmentInd+0x312>
        }
        else
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	811a      	strh	r2, [r3, #8]

        if ( bSdoSegFollows == TRUE )
 800a076:	4b17      	ldr	r3, [pc, #92]	; (800a0d4 <SdoDownloadSegmentInd+0x370>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d106      	bne.n	800a08c <SdoDownloadSegmentInd+0x328>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 800a07e:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <SdoDownloadSegmentInd+0x374>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	4413      	add	r3, r2
 800a086:	4a14      	ldr	r2, [pc, #80]	; (800a0d8 <SdoDownloadSegmentInd+0x374>)
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e01b      	b.n	800a0c4 <SdoDownloadSegmentInd+0x360>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 800a08c:	4b12      	ldr	r3, [pc, #72]	; (800a0d8 <SdoDownloadSegmentInd+0x374>)
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <SdoDownloadSegmentInd+0x378>)
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	e014      	b.n	800a0c4 <SdoDownloadSegmentInd+0x360>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 800a09a:	4b0e      	ldr	r3, [pc, #56]	; (800a0d4 <SdoDownloadSegmentInd+0x370>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 800a0a0:	4b0e      	ldr	r3, [pc, #56]	; (800a0dc <SdoDownloadSegmentInd+0x378>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 800a0a6:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <SdoDownloadSegmentInd+0x37c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <SdoDownloadSegmentInd+0x35a>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <SdoDownloadSegmentInd+0x37c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 fa90 	bl	800b5d8 <free>
            pSdoSegData = NULL;
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <SdoDownloadSegmentInd+0x37c>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 800a0be:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <SdoDownloadSegmentInd+0x374>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
    }

    return abort;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000ece 	.word	0x20000ece
 800a0d4:	20000ec1 	.word	0x20000ec1
 800a0d8:	20000ebc 	.word	0x20000ebc
 800a0dc:	20000ecf 	.word	0x20000ecf
 800a0e0:	20000ee0 	.word	0x20000ee0

0800a0e4 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	77fb      	strb	r3, [r7, #31]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	613b      	str	r3, [r7, #16]

   if ( (pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7a1b      	ldrb	r3, [r3, #8]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	4a84      	ldr	r2, [pc, #528]	; (800a310 <SdoUploadSegmentInd+0x22c>)
 800a0fe:	7812      	ldrb	r2, [r2, #0]
 800a100:	4293      	cmp	r3, r2
 800a102:	d102      	bne.n	800a10a <SdoUploadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 800a104:	2301      	movs	r3, #1
 800a106:	77fb      	strb	r3, [r7, #31]
 800a108:	e0fc      	b.n	800a304 <SdoUploadSegmentInd+0x220>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
        UINT16 maxData;
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 800a10e:	4b81      	ldr	r3, [pc, #516]	; (800a314 <SdoUploadSegmentInd+0x230>)
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	3b09      	subs	r3, #9
 800a114:	81fb      	strh	r3, [r7, #14]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7a1b      	ldrb	r3, [r3, #8]
 800a11a:	f003 0310 	and.w	r3, r3, #16
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	4b7b      	ldr	r3, [pc, #492]	; (800a310 <SdoUploadSegmentInd+0x22c>)
 800a122:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 800a124:	89fa      	ldrh	r2, [r7, #14]
 800a126:	4b7c      	ldr	r3, [pc, #496]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	441a      	add	r2, r3
 800a12c:	4b7b      	ldr	r3, [pc, #492]	; (800a31c <SdoUploadSegmentInd+0x238>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d909      	bls.n	800a148 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 800a134:	4b79      	ldr	r3, [pc, #484]	; (800a31c <SdoUploadSegmentInd+0x238>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b77      	ldr	r3, [pc, #476]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = FALSE;
 800a140:	4b77      	ldr	r3, [pc, #476]	; (800a320 <SdoUploadSegmentInd+0x23c>)
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e004      	b.n	800a152 <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = TRUE;
 800a14c:	4b74      	ldr	r3, [pc, #464]	; (800a320 <SdoUploadSegmentInd+0x23c>)
 800a14e:	2201      	movs	r2, #1
 800a150:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        // Clear Data0
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHDATA_MASK;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	891b      	ldrh	r3, [r3, #8]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	b29a      	uxth	r2, r3
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	811a      	strh	r2, [r3, #8]
        if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 800a15e:	4b6e      	ldr	r3, [pc, #440]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d024      	beq.n	800a1b4 <SdoUploadSegmentInd+0xd0>
        {	// Data starts at odd byte number (Segment 2, 4,...): Data0 is at high byte, Data1 lies at an even address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= (pSdoSegData[(nSdoSegBytesToHandle >> 1)] & SEGHDATA_MASK);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	b21a      	sxth	r2, r3
 800a170:	4b6c      	ldr	r3, [pc, #432]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	4b68      	ldr	r3, [pc, #416]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	085b      	lsrs	r3, r3, #1
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	440b      	add	r3, r1
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b21b      	sxth	r3, r3
 800a182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a186:	b21b      	sxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b21b      	sxth	r3, r3
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], size - 1);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f103 000a 	add.w	r0, r3, #10
 800a198:	4b62      	ldr	r3, [pc, #392]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	4b5e      	ldr	r3, [pc, #376]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	18d1      	adds	r1, r2, r3
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f001 fa1b 	bl	800b5e8 <memcpy>
 800a1b2:	e045      	b.n	800a240 <SdoUploadSegmentInd+0x15c>
        }
        else
        {	
            UINT16 i = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	82fb      	strh	r3, [r7, #22]
            UINT32 nIndexOffset = nSdoSegBytesToHandle >> 1;
 800a1b8:	4b57      	ldr	r3, [pc, #348]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	085b      	lsrs	r3, r3, #1
 800a1be:	60bb      	str	r3, [r7, #8]
            // Data starts at even byte number (Segment 1,3, ...): Data0 is at low byte, Data1 lies at an odd address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= ((pSdoSegData[(nSdoSegBytesToHandle >> 1)] << SEGDATASHIFT) & SEGHDATA_MASK);
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	891b      	ldrh	r3, [r3, #8]
 800a1c4:	b21a      	sxth	r2, r3
 800a1c6:	4b57      	ldr	r3, [pc, #348]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a1c8:	6819      	ldr	r1, [r3, #0]
 800a1ca:	4b53      	ldr	r3, [pc, #332]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	440b      	add	r3, r1
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	b21b      	sxth	r3, r3
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	b21b      	sxth	r3, r3
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            
            for (i = 0; i < (size >> 1);i++)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	82fb      	strh	r3, [r7, #22]
 800a1e8:	e025      	b.n	800a236 <SdoUploadSegmentInd+0x152>
            {
                pSdoSegRes->SdoHeader.Data[i] = ((pSdoSegData[i + nIndexOffset] & SEGHDATA_MASK) >> 8) | ((pSdoSegData[i + nIndexOffset + 1] & ~SEGHDATA_MASK) << 8);
 800a1ea:	4b4e      	ldr	r3, [pc, #312]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	8af9      	ldrh	r1, [r7, #22]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	440b      	add	r3, r1
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	4413      	add	r3, r2
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	b21a      	sxth	r2, r3
 800a200:	4b48      	ldr	r3, [pc, #288]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	8af8      	ldrh	r0, [r7, #22]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4403      	add	r3, r0
 800a20a:	3301      	adds	r3, #1
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	440b      	add	r3, r1
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b21b      	sxth	r3, r3
 800a216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a21a:	b21b      	sxth	r3, r3
 800a21c:	4313      	orrs	r3, r2
 800a21e:	b21a      	sxth	r2, r3
 800a220:	8afb      	ldrh	r3, [r7, #22]
 800a222:	b291      	uxth	r1, r2
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	3304      	adds	r3, #4
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	4413      	add	r3, r2
 800a22c:	460a      	mov	r2, r1
 800a22e:	805a      	strh	r2, [r3, #2]
            for (i = 0; i < (size >> 1);i++)
 800a230:	8afb      	ldrh	r3, [r7, #22]
 800a232:	3301      	adds	r3, #1
 800a234:	82fb      	strh	r3, [r7, #22]
 800a236:	8afa      	ldrh	r2, [r7, #22]
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d3d4      	bcc.n	800a1ea <SdoUploadSegmentInd+0x106>
                    // (If size is even, one byte too much is copied. But, that is not a problem.)
            }
        }
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	88db      	ldrh	r3, [r3, #6]
 800a244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a248:	b29a      	uxth	r2, r3
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a256:	b29a      	uxth	r2, r3
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	891b      	ldrh	r3, [r3, #8]
 800a260:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a264:	b29a      	uxth	r2, r3
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	811a      	strh	r2, [r3, #8]
        if (bSdoSegFollows)
 800a26a:	4b2d      	ldr	r3, [pc, #180]	; (800a320 <SdoUploadSegmentInd+0x23c>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d009      	beq.n	800a286 <SdoUploadSegmentInd+0x1a2>
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	891a      	ldrh	r2, [r3, #8]
 800a276:	4b26      	ldr	r3, [pc, #152]	; (800a310 <SdoUploadSegmentInd+0x22c>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	811a      	strh	r2, [r3, #8]
 800a284:	e00b      	b.n	800a29e <SdoUploadSegmentInd+0x1ba>
        else
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	891a      	ldrh	r2, [r3, #8]
 800a28a:	4b21      	ldr	r3, [pc, #132]	; (800a310 <SdoUploadSegmentInd+0x22c>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	b29b      	uxth	r3, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	811a      	strh	r2, [r3, #8]

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b06      	cmp	r3, #6
 800a2a2:	d810      	bhi.n	800a2c6 <SdoUploadSegmentInd+0x1e2>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	220a      	movs	r2, #10
 800a2a8:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	891a      	ldrh	r2, [r3, #8]
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f1c3 0307 	rsb	r3, r3, #7
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	811a      	strh	r2, [r3, #8]
 800a2c4:	e005      	b.n	800a2d2 <SdoUploadSegmentInd+0x1ee>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	3303      	adds	r3, #3
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <SdoUploadSegmentInd+0x23c>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d106      	bne.n	800a2e8 <SdoUploadSegmentInd+0x204>
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	4a0d      	ldr	r2, [pc, #52]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	e00d      	b.n	800a304 <SdoUploadSegmentInd+0x220>
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 800a2e8:	4b0e      	ldr	r3, [pc, #56]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 f973 	bl	800b5d8 <free>
            pSdoSegData = NULL;
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <SdoUploadSegmentInd+0x240>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <SdoUploadSegmentInd+0x234>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 800a2fe:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <SdoUploadSegmentInd+0x244>)
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 800a304:	7ffb      	ldrb	r3, [r7, #31]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20000ece 	.word	0x20000ece
 800a314:	20000e08 	.word	0x20000e08
 800a318:	20000ebc 	.word	0x20000ebc
 800a31c:	20000ec4 	.word	0x20000ec4
 800a320:	20000ec1 	.word	0x20000ec1
 800a324:	20000ee0 	.word	0x20000ee0
 800a328:	20000ecf 	.word	0x20000ecf

0800a32c <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 800a32c:	b590      	push	{r4, r7, lr}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4623      	mov	r3, r4
 800a33c:	71fb      	strb	r3, [r7, #7]
 800a33e:	4603      	mov	r3, r0
 800a340:	71bb      	strb	r3, [r7, #6]
 800a342:	460b      	mov	r3, r1
 800a344:	717b      	strb	r3, [r7, #5]
 800a346:	4613      	mov	r3, r2
 800a348:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 800a34a:	79bb      	ldrb	r3, [r7, #6]
 800a34c:	2b60      	cmp	r3, #96	; 0x60
 800a34e:	d009      	beq.n	800a364 <SdoRes+0x38>
 800a350:	79bb      	ldrb	r3, [r7, #6]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <SdoRes+0x38>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= 0xFF00;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	891b      	ldrh	r3, [r3, #8]
 800a35a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a35e:	b29a      	uxth	r2, r3
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	811a      	strh	r2, [r3, #8]
    }
    if ( abort == 0 )
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d172      	bne.n	800a450 <SdoRes+0x124>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	88db      	ldrh	r3, [r3, #6]
 800a36e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a372:	b29a      	uxth	r2, r3
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	88db      	ldrh	r3, [r3, #6]
 800a37c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a380:	b29a      	uxth	r2, r3
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800a386:	79bb      	ldrb	r3, [r7, #6]
 800a388:	2b40      	cmp	r3, #64	; 0x40
 800a38a:	d145      	bne.n	800a418 <SdoRes+0xec>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d81d      	bhi.n	800a3ce <SdoRes+0xa2>
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01a      	beq.n	800a3ce <SdoRes+0xa2>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	220a      	movs	r2, #10
 800a39c:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	891a      	ldrh	r2, [r3, #8]
                                                                                        SDOHEADER_TRANSFERTYPE        |
                                                                                        completeAccess |
 800a3a2:	797b      	ldrb	r3, [r7, #5]
 800a3a4:	f043 0303 	orr.w	r3, r3, #3
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	b219      	sxth	r1, r3
                                                                                        ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f1c3 0304 	rsb	r3, r3, #4
 800a3b4:	009b      	lsls	r3, r3, #2
                                                                                        completeAccess |
 800a3b6:	b21b      	sxth	r3, r3
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	b21b      	sxth	r3, r3
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	811a      	strh	r2, [r3, #8]
 800a3cc:	e05a      	b.n	800a484 <SdoRes+0x158>
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 800a3ce:	887b      	ldrh	r3, [r7, #2]
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d905      	bls.n	800a3e2 <SdoRes+0xb6>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	330a      	adds	r3, #10
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	e005      	b.n	800a3ee <SdoRes+0xc2>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	330a      	adds	r3, #10
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	0c1b      	lsrs	r3, r3, #16
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	81da      	strh	r2, [r3, #14]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	891a      	ldrh	r2, [r3, #8]
 800a404:	797b      	ldrb	r3, [r7, #5]
 800a406:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4313      	orrs	r3, r2
 800a410:	b29a      	uxth	r2, r3
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	811a      	strh	r2, [r3, #8]
 800a416:	e035      	b.n	800a484 <SdoRes+0x158>
                                                                                        completeAccess |
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 800a418:	79bb      	ldrb	r3, [r7, #6]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <SdoRes+0x108>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	220a      	movs	r2, #10
 800a422:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_DOWNLOADSEGMENTRES;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	891b      	ldrh	r3, [r3, #8]
 800a428:	f043 0320 	orr.w	r3, r3, #32
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	811a      	strh	r2, [r3, #8]
 800a432:	e027      	b.n	800a484 <SdoRes+0x158>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 800a434:	79bb      	ldrb	r3, [r7, #6]
 800a436:	2b60      	cmp	r3, #96	; 0x60
 800a438:	d024      	beq.n	800a484 <SdoRes+0x158>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	220a      	movs	r2, #10
 800a43e:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_INITIATEDOWNLOADRES;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	891b      	ldrh	r3, [r3, #8]
 800a444:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a448:	b29a      	uxth	r2, r3
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	811a      	strh	r2, [r3, #8]
 800a44e:	e019      	b.n	800a484 <SdoRes+0x158>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	220a      	movs	r2, #10
 800a454:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	88db      	ldrh	r3, [r3, #6]
 800a45a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a45e:	b29a      	uxth	r2, r3
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	88db      	ldrh	r3, [r3, #6]
 800a468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	80da      	strh	r2, [r3, #6]
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    = SDOSERVICE_ABORTTRANSFER;
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2280      	movs	r2, #128	; 0x80
 800a476:	811a      	strh	r2, [r3, #8]
        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <SdoRes+0x174>)
 800a47c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 800a484:	2102      	movs	r1, #2
 800a486:	69f8      	ldr	r0, [r7, #28]
 800a488:	f7fd ff8c 	bl	80083a4 <MBX_MailboxSendReq>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <SdoRes+0x16c>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 800a492:	4a04      	ldr	r2, [pc, #16]	; (800a4a4 <SdoRes+0x178>)
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	6013      	str	r3, [r2, #0]
    }
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	0800c190 	.word	0x0800c190
 800a4a4:	20000b44 	.word	0x20000b44

0800a4a8 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 800a4a8:	b590      	push	{r4, r7, lr}
 800a4aa:	b08f      	sub	sp, #60	; 0x3c
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    UINT8 sdoHeader = pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	76bb      	strb	r3, [r7, #26]
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 800a4bc:	7ebb      	ldrb	r3, [r7, #26]
 800a4be:	f023 031f 	bic.w	r3, r3, #31
 800a4c2:	767b      	strb	r3, [r7, #25]
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	82fb      	strh	r3, [r7, #22]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    UINT32 objLength = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 dataSize = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24

    if ( bSdoInWork )
 800a4d8:	4b99      	ldr	r3, [pc, #612]	; (800a740 <SDOS_SdoInd+0x298>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <SDOS_SdoInd+0x3c>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 800a4e0:	2309      	movs	r3, #9
 800a4e2:	e272      	b.n	800a9ca <SDOS_SdoInd+0x522>
    }


    switch (command)
 800a4e4:	7e7b      	ldrb	r3, [r7, #25]
 800a4e6:	2b60      	cmp	r3, #96	; 0x60
 800a4e8:	f000 823b 	beq.w	800a962 <SDOS_SdoInd+0x4ba>
 800a4ec:	2b60      	cmp	r3, #96	; 0x60
 800a4ee:	f300 8252 	bgt.w	800a996 <SDOS_SdoInd+0x4ee>
 800a4f2:	2b40      	cmp	r3, #64	; 0x40
 800a4f4:	d008      	beq.n	800a508 <SDOS_SdoInd+0x60>
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	f300 824d 	bgt.w	800a996 <SDOS_SdoInd+0x4ee>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8230 	beq.w	800a962 <SDOS_SdoInd+0x4ba>
 800a502:	2b20      	cmp	r3, #32
 800a504:	f040 8247 	bne.w	800a996 <SDOS_SdoInd+0x4ee>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
        index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	895b      	ldrh	r3, [r3, #10]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	82bb      	strh	r3, [r7, #20]
        index <<= 8;
 800a510:	8abb      	ldrh	r3, [r7, #20]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	82bb      	strh	r3, [r7, #20]
        index += pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	891b      	ldrh	r3, [r3, #8]
 800a51a:	0a1b      	lsrs	r3, r3, #8
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	8abb      	ldrh	r3, [r7, #20]
 800a520:	4413      	add	r3, r2
 800a522:	82bb      	strh	r3, [r7, #20]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex    = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	895b      	ldrh	r3, [r3, #10]
 800a528:	0a1b      	lsrs	r3, r3, #8
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	74fb      	strb	r3, [r7, #19]

        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 800a52e:	8abb      	ldrh	r3, [r7, #20]
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe f90b 	bl	800874c <OBJ_GetObjectHandle>
 800a536:	60f8      	str	r0, [r7, #12]

        if ( pObjEntry )
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 820d 	beq.w	800a95a <SDOS_SdoInd+0x4b2>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	61fb      	str	r3, [r7, #28]
            UINT8 segTransfer = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	76fb      	strb	r3, [r7, #27]

            {
                dataSize = objLength = OBJ_GetObjectLength( index, subindex, pObjEntry, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS) );
 800a54e:	7ebb      	ldrb	r3, [r7, #26]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	b2db      	uxtb	r3, r3
 800a556:	7cf9      	ldrb	r1, [r7, #19]
 800a558:	8ab8      	ldrh	r0, [r7, #20]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	f7fe f911 	bl	8008782 <OBJ_GetObjectLength>
 800a560:	62b8      	str	r0, [r7, #40]	; 0x28
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	627b      	str	r3, [r7, #36]	; 0x24

                if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800a566:	7e7b      	ldrb	r3, [r7, #25]
 800a568:	2b40      	cmp	r3, #64	; 0x40
 800a56a:	d127      	bne.n	800a5bc <SDOS_SdoInd+0x114>
                {
                    /* SDO Upload */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 800a56c:	8afb      	ldrh	r3, [r7, #22]
 800a56e:	2b0a      	cmp	r3, #10
 800a570:	d001      	beq.n	800a576 <SDOS_SdoInd+0xce>
                        /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 800a572:	2308      	movs	r3, #8
 800a574:	e229      	b.n	800a9ca <SDOS_SdoInd+0x522>
                    /* distinguish between expedited and normal upload response within the length of the response data */
                    if ( (objLength <= MAX_EXPEDITED_DATA) && objLength != 0 )
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d810      	bhi.n	800a59e <SDOS_SdoInd+0xf6>
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00d      	beq.n	800a59e <SDOS_SdoInd+0xf6>
                    {
                        /* Expedited Upload */
                        bTransferType = 1;
 800a582:	2301      	movs	r3, #1
 800a584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* pData is the pointer where the object data has to be copied for the response */
                        pData = ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	330c      	adds	r3, #12
 800a58c:	61fb      	str	r3, [r7, #28]
                        /* initialize the 4 data bytes of the SDO upload response because the requested object data
                           could be less than 4 */
                        pData[0] = 0;
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	2200      	movs	r2, #0
 800a592:	801a      	strh	r2, [r3, #0]
                        pData[1] = 0;
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	3302      	adds	r3, #2
 800a598:	2200      	movs	r2, #0
 800a59a:	801a      	strh	r2, [r3, #0]
 800a59c:	e013      	b.n	800a5c6 <SDOS_SdoInd+0x11e>
                    }
                    else
                    {
                        /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                    dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 800a59e:	4b69      	ldr	r3, [pc, #420]	; (800a744 <SDOS_SdoInd+0x29c>)
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	3b10      	subs	r3, #16
 800a5a4:	627b      	str	r3, [r7, #36]	; 0x24
                        if ( dataSize < objLength )
 800a5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d202      	bcs.n	800a5b4 <SDOS_SdoInd+0x10c>
                            /* Segmented Upload */
                            segTransfer = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	76fb      	strb	r3, [r7, #27]
 800a5b2:	e008      	b.n	800a5c6 <SDOS_SdoInd+0x11e>
                        else
                            /* Normal Upload */
                            pData = ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3310      	adds	r3, #16
 800a5b8:	61fb      	str	r3, [r7, #28]
 800a5ba:	e004      	b.n	800a5c6 <SDOS_SdoInd+0x11e>
                    }
                }
                else
                {
                    /* SDO-Download: store if the request is a expedited or normal request  */
                    bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 800a5bc:	7ebb      	ldrb	r3, [r7, #26]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
            }

            if ( command == SDOSERVICE_INITIATEDOWNLOADREQ )
 800a5c6:	7e7b      	ldrb	r3, [r7, #25]
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	d13b      	bne.n	800a644 <SDOS_SdoInd+0x19c>
            {
                /* SDO Download */
                if ( bTransferType )
 800a5cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00f      	beq.n	800a5f4 <SDOS_SdoInd+0x14c>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 800a5d4:	8afb      	ldrh	r3, [r7, #22]
 800a5d6:	2b0a      	cmp	r3, #10
 800a5d8:	d001      	beq.n	800a5de <SDOS_SdoInd+0x136>
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 800a5da:	2308      	movs	r3, #8
 800a5dc:	e1f5      	b.n	800a9ca <SDOS_SdoInd+0x522>
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 800a5de:	7ebb      	ldrb	r3, [r7, #26]
 800a5e0:	109b      	asrs	r3, r3, #2
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	f1c3 0304 	rsb	r3, r3, #4
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	e027      	b.n	800a644 <SDOS_SdoInd+0x19c>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	89db      	ldrh	r3, [r3, #14]
 800a5f8:	041b      	lsls	r3, r3, #16
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	8992      	ldrh	r2, [r2, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	3310      	adds	r3, #16
 800a606:	4a50      	ldr	r2, [pc, #320]	; (800a748 <SDOS_SdoInd+0x2a0>)
 800a608:	8812      	ldrh	r2, [r2, #0]
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d907      	bls.n	800a61e <SDOS_SdoInd+0x176>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 800a60e:	8afa      	ldrh	r2, [r7, #22]
 800a610:	4b4d      	ldr	r3, [pc, #308]	; (800a748 <SDOS_SdoInd+0x2a0>)
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	3b06      	subs	r3, #6
 800a616:	429a      	cmp	r2, r3
 800a618:	d008      	beq.n	800a62c <SDOS_SdoInd+0x184>
                            return MBXERR_INVALIDSIZE;
 800a61a:	2308      	movs	r3, #8
 800a61c:	e1d5      	b.n	800a9ca <SDOS_SdoInd+0x522>
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 800a61e:	8afa      	ldrh	r2, [r7, #22]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	330a      	adds	r3, #10
 800a624:	429a      	cmp	r2, r3
 800a626:	d001      	beq.n	800a62c <SDOS_SdoInd+0x184>
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 800a628:	2308      	movs	r3, #8
 800a62a:	e1ce      	b.n	800a9ca <SDOS_SdoInd+0x522>
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3310      	adds	r3, #16
 800a630:	61fb      	str	r3, [r7, #28]
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 800a636:	8afb      	ldrh	r3, [r7, #22]
 800a638:	3b0a      	subs	r3, #10
 800a63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d901      	bls.n	800a644 <SDOS_SdoInd+0x19c>
                        /* Segmented Download */
                        segTransfer = 1;
 800a640:	2301      	movs	r3, #1
 800a642:	76fb      	strb	r3, [r7, #27]
                }
            }

            if ( sdoHeader & SDOHEADER_COMPLETEACCESS )
 800a644:	7ebb      	ldrb	r3, [r7, #26]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d008      	beq.n	800a660 <SDOS_SdoInd+0x1b8>
            {
                bCompleteAccess = 1;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 800a654:	7cfb      	ldrb	r3, [r7, #19]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d902      	bls.n	800a660 <SDOS_SdoInd+0x1b8>
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800a65a:	2305      	movs	r3, #5
 800a65c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if ( abort == 0 )
 800a660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a664:	2b00      	cmp	r3, #0
 800a666:	f040 819a 	bne.w	800a99e <SDOS_SdoInd+0x4f6>
            {
                if ( segTransfer )
 800a66a:	7efb      	ldrb	r3, [r7, #27]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80d2 	beq.w	800a816 <SDOS_SdoInd+0x36e>
                {
                    bSdoSegFollows         = TRUE;
 800a672:	4b36      	ldr	r3, [pc, #216]	; (800a74c <SDOS_SdoInd+0x2a4>)
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 800a678:	4b35      	ldr	r3, [pc, #212]	; (800a750 <SDOS_SdoInd+0x2a8>)
 800a67a:	2201      	movs	r2, #1
 800a67c:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 800a67e:	4a35      	ldr	r2, [pc, #212]	; (800a754 <SDOS_SdoInd+0x2ac>)
 800a680:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a684:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 800a686:	4a34      	ldr	r2, [pc, #208]	; (800a758 <SDOS_SdoInd+0x2b0>)
 800a688:	8abb      	ldrh	r3, [r7, #20]
 800a68a:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 800a68c:	4a33      	ldr	r2, [pc, #204]	; (800a75c <SDOS_SdoInd+0x2b4>)
 800a68e:	7cfb      	ldrb	r3, [r7, #19]
 800a690:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 800a692:	4a33      	ldr	r2, [pc, #204]	; (800a760 <SDOS_SdoInd+0x2b8>)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800a698:	7e7b      	ldrb	r3, [r7, #25]
 800a69a:	2b40      	cmp	r3, #64	; 0x40
 800a69c:	d103      	bne.n	800a6a6 <SDOS_SdoInd+0x1fe>
                        nSdoSegCompleteSize    = objLength;
 800a69e:	4a31      	ldr	r2, [pc, #196]	; (800a764 <SDOS_SdoInd+0x2bc>)
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	e002      	b.n	800a6ac <SDOS_SdoInd+0x204>
                    else
                        nSdoSegCompleteSize    = dataSize;
 800a6a6:	4a2f      	ldr	r2, [pc, #188]	; (800a764 <SDOS_SdoInd+0x2bc>)
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	6013      	str	r3, [r2, #0]

                    if (pSdoSegData != NULL)
 800a6ac:	4b2e      	ldr	r3, [pc, #184]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <SDOS_SdoInd+0x21c>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 ff8d 	bl	800b5d8 <free>
                        pSdoSegData = NULL;
 800a6be:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 800a6c4:	4b27      	ldr	r3, [pc, #156]	; (800a764 <SDOS_SdoInd+0x2bc>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 ff7a 	bl	800b5c8 <malloc>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b23      	ldr	r3, [pc, #140]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a6da:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 800a6dc:	4b22      	ldr	r3, [pc, #136]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10b      	bne.n	800a6fc <SDOS_SdoInd+0x254>
                    {
/*ECATCHANGE_START(V5.11) SDO4*/
                        if(bCompleteAccess)
 800a6e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <SDOS_SdoInd+0x24c>
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800a6ec:	2305      	movs	r3, #5
 800a6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        } //if(pEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 800a6f2:	e154      	b.n	800a99e <SDOS_SdoInd+0x4f6>
                            abort = ABORTIDX_OUT_OF_MEMORY;
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a6fa:	e150      	b.n	800a99e <SDOS_SdoInd+0x4f6>
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800a6fc:	7e7b      	ldrb	r3, [r7, #25]
 800a6fe:	2b40      	cmp	r3, #64	; 0x40
 800a700:	d175      	bne.n	800a7ee <SDOS_SdoInd+0x346>
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 800a702:	4b19      	ldr	r3, [pc, #100]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	7cf9      	ldrb	r1, [r7, #19]
 800a708:	8ab8      	ldrh	r0, [r7, #20]
 800a70a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a716:	f7fe fc75 	bl	8009004 <OBJ_Read>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            if ( abort == 0 )
 800a720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a724:	2b00      	cmp	r3, #0
 800a726:	d123      	bne.n	800a770 <SDOS_SdoInd+0x2c8>
                                MBXMEMCPY( ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3310      	adds	r3, #16
 800a72c:	4a0e      	ldr	r2, [pc, #56]	; (800a768 <SDOS_SdoInd+0x2c0>)
 800a72e:	6811      	ldr	r1, [r2, #0]
 800a730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a732:	4618      	mov	r0, r3
 800a734:	f000 ff58 	bl	800b5e8 <memcpy>
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <SDOS_SdoInd+0x2c4>)
 800a73a:	2260      	movs	r2, #96	; 0x60
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	e066      	b.n	800a80e <SDOS_SdoInd+0x366>
 800a740:	200005d5 	.word	0x200005d5
 800a744:	20000e08 	.word	0x20000e08
 800a748:	20000e1a 	.word	0x20000e1a
 800a74c:	20000ec1 	.word	0x20000ec1
 800a750:	20000ece 	.word	0x20000ece
 800a754:	20000ec0 	.word	0x20000ec0
 800a758:	20000ee4 	.word	0x20000ee4
 800a75c:	20000efc 	.word	0x20000efc
 800a760:	20000ef8 	.word	0x20000ef8
 800a764:	20000ec4 	.word	0x20000ec4
 800a768:	20000ee0 	.word	0x20000ee0
 800a76c:	20000ecf 	.word	0x20000ecf
                            else if ( abort == ABORTIDX_WORKING )
 800a770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a774:	2bff      	cmp	r3, #255	; 0xff
 800a776:	d14a      	bne.n	800a80e <SDOS_SdoInd+0x366>
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 800a778:	4b96      	ldr	r3, [pc, #600]	; (800a9d4 <SDOS_SdoInd+0x52c>)
 800a77a:	2204      	movs	r2, #4
 800a77c:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 800a77e:	4a96      	ldr	r2, [pc, #600]	; (800a9d8 <SDOS_SdoInd+0x530>)
 800a780:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a784:	7013      	strb	r3, [r2, #0]
                                u8StoreSubindex = subindex;
 800a786:	4a95      	ldr	r2, [pc, #596]	; (800a9dc <SDOS_SdoInd+0x534>)
 800a788:	7cfb      	ldrb	r3, [r7, #19]
 800a78a:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 800a78c:	4a94      	ldr	r2, [pc, #592]	; (800a9e0 <SDOS_SdoInd+0x538>)
 800a78e:	8abb      	ldrh	r3, [r7, #20]
 800a790:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 800a792:	4a94      	ldr	r2, [pc, #592]	; (800a9e4 <SDOS_SdoInd+0x53c>)
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 800a798:	4b93      	ldr	r3, [pc, #588]	; (800a9e8 <SDOS_SdoInd+0x540>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a93      	ldr	r2, [pc, #588]	; (800a9ec <SDOS_SdoInd+0x544>)
 800a79e:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	4a92      	ldr	r2, [pc, #584]	; (800a9f0 <SDOS_SdoInd+0x548>)
 800a7a6:	6013      	str	r3, [r2, #0]
                                bSdoInWork = TRUE;
 800a7a8:	4b92      	ldr	r3, [pc, #584]	; (800a9f4 <SDOS_SdoInd+0x54c>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	701a      	strb	r2, [r3, #0]
                                pSdoResStored = pSdoInd;
 800a7ae:	4a92      	ldr	r2, [pc, #584]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6013      	str	r3, [r2, #0]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 800a7b4:	4b90      	ldr	r3, [pc, #576]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	891a      	ldrh	r2, [r3, #8]
 800a7ba:	4b8f      	ldr	r3, [pc, #572]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	811a      	strh	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800a7c6:	4b8c      	ldr	r3, [pc, #560]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	891b      	ldrh	r3, [r3, #8]
 800a7cc:	b21a      	sxth	r2, r3
 800a7ce:	7ebb      	ldrb	r3, [r7, #26]
 800a7d0:	b21b      	sxth	r3, r3
 800a7d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7d6:	b21b      	sxth	r3, r3
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	b21a      	sxth	r2, r3
 800a7dc:	4b86      	ldr	r3, [pc, #536]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	b292      	uxth	r2, r2
 800a7e2:	811a      	strh	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 800a7e4:	4b85      	ldr	r3, [pc, #532]	; (800a9fc <SDOS_SdoInd+0x554>)
 800a7e6:	2260      	movs	r2, #96	; 0x60
 800a7e8:	701a      	strb	r2, [r3, #0]
                                return 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e0ed      	b.n	800a9ca <SDOS_SdoInd+0x522>
                            MBXMEMCPY( pSdoSegData, ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 800a7ee:	4b7e      	ldr	r3, [pc, #504]	; (800a9e8 <SDOS_SdoInd+0x540>)
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f103 0110 	add.w	r1, r3, #16
 800a7f8:	8afb      	ldrh	r3, [r7, #22]
 800a7fa:	3b0a      	subs	r3, #10
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f000 fef3 	bl	800b5e8 <memcpy>
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 800a802:	4b7e      	ldr	r3, [pc, #504]	; (800a9fc <SDOS_SdoInd+0x554>)
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 800a808:	8afb      	ldrh	r3, [r7, #22]
 800a80a:	3b0a      	subs	r3, #10
 800a80c:	627b      	str	r3, [r7, #36]	; 0x24
                        nSdoSegBytesToHandle = dataSize;
 800a80e:	4a7c      	ldr	r2, [pc, #496]	; (800aa00 <SDOS_SdoInd+0x558>)
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	6013      	str	r3, [r2, #0]
        break;
 800a814:	e0c3      	b.n	800a99e <SDOS_SdoInd+0x4f6>
                    if ( objLength == 0 )
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <SDOS_SdoInd+0x386>
                        nSdoSegIndex             = index;
 800a81c:	4a79      	ldr	r2, [pc, #484]	; (800aa04 <SDOS_SdoInd+0x55c>)
 800a81e:	8abb      	ldrh	r3, [r7, #20]
 800a820:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 800a822:	4a79      	ldr	r2, [pc, #484]	; (800aa08 <SDOS_SdoInd+0x560>)
 800a824:	7cfb      	ldrb	r3, [r7, #19]
 800a826:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 800a828:	4a78      	ldr	r2, [pc, #480]	; (800aa0c <SDOS_SdoInd+0x564>)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800a82e:	7e7b      	ldrb	r3, [r7, #25]
 800a830:	2b40      	cmp	r3, #64	; 0x40
 800a832:	d149      	bne.n	800a8c8 <SDOS_SdoInd+0x420>
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 800a834:	7cf9      	ldrb	r1, [r7, #19]
 800a836:	8ab8      	ldrh	r0, [r7, #20]
 800a838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a846:	f7fe fbdd 	bl	8009004 <OBJ_Read>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 800a850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a854:	2bff      	cmp	r3, #255	; 0xff
 800a856:	f040 80a2 	bne.w	800a99e <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_READ;
 800a85a:	4b5e      	ldr	r3, [pc, #376]	; (800a9d4 <SDOS_SdoInd+0x52c>)
 800a85c:	2203      	movs	r2, #3
 800a85e:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 800a860:	4a5d      	ldr	r2, [pc, #372]	; (800a9d8 <SDOS_SdoInd+0x530>)
 800a862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a866:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 800a868:	4a5c      	ldr	r2, [pc, #368]	; (800a9dc <SDOS_SdoInd+0x534>)
 800a86a:	7cfb      	ldrb	r3, [r7, #19]
 800a86c:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 800a86e:	4a5c      	ldr	r2, [pc, #368]	; (800a9e0 <SDOS_SdoInd+0x538>)
 800a870:	8abb      	ldrh	r3, [r7, #20]
 800a872:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 800a874:	4a5b      	ldr	r2, [pc, #364]	; (800a9e4 <SDOS_SdoInd+0x53c>)
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 800a87a:	4a5c      	ldr	r2, [pc, #368]	; (800a9ec <SDOS_SdoInd+0x544>)
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	4a5a      	ldr	r2, [pc, #360]	; (800a9f0 <SDOS_SdoInd+0x548>)
 800a886:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 800a888:	4b5a      	ldr	r3, [pc, #360]	; (800a9f4 <SDOS_SdoInd+0x54c>)
 800a88a:	2201      	movs	r2, #1
 800a88c:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 800a88e:	4a5a      	ldr	r2, [pc, #360]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800a894:	4b58      	ldr	r3, [pc, #352]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	891a      	ldrh	r2, [r3, #8]
 800a89a:	4b57      	ldr	r3, [pc, #348]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a8a2:	b292      	uxth	r2, r2
 800a8a4:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800a8a6:	4b54      	ldr	r3, [pc, #336]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	891b      	ldrh	r3, [r3, #8]
 800a8ac:	b21a      	sxth	r2, r3
 800a8ae:	7ebb      	ldrb	r3, [r7, #26]
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8b6:	b21b      	sxth	r3, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	b21a      	sxth	r2, r3
 800a8bc:	4b4e      	ldr	r3, [pc, #312]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	b292      	uxth	r2, r2
 800a8c2:	811a      	strh	r2, [r3, #8]
                            return 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e080      	b.n	800a9ca <SDOS_SdoInd+0x522>
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 800a8c8:	7cf9      	ldrb	r1, [r7, #19]
 800a8ca:	8ab8      	ldrh	r0, [r7, #20]
 800a8cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8da:	f7fe fee7 	bl	80096ac <OBJ_Write>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 800a8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8e8:	2bff      	cmp	r3, #255	; 0xff
 800a8ea:	d158      	bne.n	800a99e <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_WRITE;
 800a8ec:	4b39      	ldr	r3, [pc, #228]	; (800a9d4 <SDOS_SdoInd+0x52c>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 800a8f2:	4a39      	ldr	r2, [pc, #228]	; (800a9d8 <SDOS_SdoInd+0x530>)
 800a8f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a8f8:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 800a8fa:	4a38      	ldr	r2, [pc, #224]	; (800a9dc <SDOS_SdoInd+0x534>)
 800a8fc:	7cfb      	ldrb	r3, [r7, #19]
 800a8fe:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 800a900:	4a37      	ldr	r2, [pc, #220]	; (800a9e0 <SDOS_SdoInd+0x538>)
 800a902:	8abb      	ldrh	r3, [r7, #20]
 800a904:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 800a906:	4a37      	ldr	r2, [pc, #220]	; (800a9e4 <SDOS_SdoInd+0x53c>)
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 800a90c:	4a37      	ldr	r2, [pc, #220]	; (800a9ec <SDOS_SdoInd+0x544>)
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	4a36      	ldr	r2, [pc, #216]	; (800a9f0 <SDOS_SdoInd+0x548>)
 800a918:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <SDOS_SdoInd+0x54c>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 800a920:	4a35      	ldr	r2, [pc, #212]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800a926:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	891a      	ldrh	r2, [r3, #8]
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a934:	b292      	uxth	r2, r2
 800a936:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800a938:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	891b      	ldrh	r3, [r3, #8]
 800a93e:	b21a      	sxth	r2, r3
 800a940:	7ebb      	ldrb	r3, [r7, #26]
 800a942:	b21b      	sxth	r3, r3
 800a944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a948:	b21b      	sxth	r3, r3
 800a94a:	4313      	orrs	r3, r2
 800a94c:	b21a      	sxth	r2, r3
 800a94e:	4b2a      	ldr	r3, [pc, #168]	; (800a9f8 <SDOS_SdoInd+0x550>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	b292      	uxth	r2, r2
 800a954:	811a      	strh	r2, [r3, #8]
                            return 0;
 800a956:	2300      	movs	r3, #0
 800a958:	e037      	b.n	800a9ca <SDOS_SdoInd+0x522>
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 800a95a:	2308      	movs	r3, #8
 800a95c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a960:	e01d      	b.n	800a99e <SDOS_SdoInd+0x4f6>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 800a962:	4b26      	ldr	r3, [pc, #152]	; (800a9fc <SDOS_SdoInd+0x554>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	7e7a      	ldrb	r2, [r7, #25]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d110      	bne.n	800a98e <SDOS_SdoInd+0x4e6>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 800a96c:	7e7b      	ldrb	r3, [r7, #25]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <SDOS_SdoInd+0x4d8>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff f9f6 	bl	8009d64 <SdoDownloadSegmentInd>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 800a97e:	e00f      	b.n	800a9a0 <SDOS_SdoInd+0x4f8>
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff fbaf 	bl	800a0e4 <SdoUploadSegmentInd>
 800a986:	4603      	mov	r3, r0
 800a988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a98c:	e008      	b.n	800a9a0 <SDOS_SdoInd+0x4f8>
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800a98e:	2303      	movs	r3, #3
 800a990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a994:	e004      	b.n	800a9a0 <SDOS_SdoInd+0x4f8>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800a996:	2303      	movs	r3, #3
 800a998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a99c:	e000      	b.n	800a9a0 <SDOS_SdoInd+0x4f8>
        break;
 800a99e:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 800a9a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d00f      	beq.n	800a9c8 <SDOS_SdoInd+0x520>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 800a9a8:	7ebb      	ldrb	r3, [r7, #26]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	b29c      	uxth	r4, r3
 800a9b4:	7e79      	ldrb	r1, [r7, #25]
 800a9b6:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	f7ff fcb2 	bl	800a32c <SdoRes>
    }

    return 0;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3734      	adds	r7, #52	; 0x34
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd90      	pop	{r4, r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000ecc 	.word	0x20000ecc
 800a9d8:	20000ecd 	.word	0x20000ecd
 800a9dc:	20000f00 	.word	0x20000f00
 800a9e0:	20000efe 	.word	0x20000efe
 800a9e4:	20000edc 	.word	0x20000edc
 800a9e8:	20000ee0 	.word	0x20000ee0
 800a9ec:	20000eb8 	.word	0x20000eb8
 800a9f0:	20000ec8 	.word	0x20000ec8
 800a9f4:	200005d5 	.word	0x200005d5
 800a9f8:	20000ed8 	.word	0x20000ed8
 800a9fc:	20000ecf 	.word	0x20000ecf
 800aa00:	20000ebc 	.word	0x20000ebc
 800aa04:	20000ee4 	.word	0x20000ee4
 800aa08:	20000efc 	.word	0x20000efc
 800aa0c:	20000ef8 	.word	0x20000ef8

0800aa10 <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b089      	sub	sp, #36	; 0x24
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	4603      	mov	r3, r0
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 800aa22:	4b38      	ldr	r3, [pc, #224]	; (800ab04 <SDOS_SdoRes+0xf4>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d068      	beq.n	800aafc <SDOS_SdoRes+0xec>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 800aa2a:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	891b      	ldrh	r3, [r3, #8]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f023 031f 	bic.w	r3, r3, #31
 800aa36:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 800aa38:	4b33      	ldr	r3, [pc, #204]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	891b      	ldrh	r3, [r3, #8]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800aa46:	7d7b      	ldrb	r3, [r7, #21]
 800aa48:	2b40      	cmp	r3, #64	; 0x40
 800aa4a:	d148      	bne.n	800aade <SDOS_SdoRes+0xce>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 800aa4c:	4b2f      	ldr	r3, [pc, #188]	; (800ab0c <SDOS_SdoRes+0xfc>)
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	3b10      	subs	r3, #16
 800aa52:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 800aa54:	8afb      	ldrh	r3, [r7, #22]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d91d      	bls.n	800aa98 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 800aa5c:	4b2c      	ldr	r3, [pc, #176]	; (800ab10 <SDOS_SdoRes+0x100>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 800aa62:	4b2c      	ldr	r3, [pc, #176]	; (800ab14 <SDOS_SdoRes+0x104>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 800aa68:	4a2b      	ldr	r2, [pc, #172]	; (800ab18 <SDOS_SdoRes+0x108>)
 800aa6a:	7d3b      	ldrb	r3, [r7, #20]
 800aa6c:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 800aa6e:	4a2b      	ldr	r2, [pc, #172]	; (800ab1c <SDOS_SdoRes+0x10c>)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 800aa74:	4b2a      	ldr	r3, [pc, #168]	; (800ab20 <SDOS_SdoRes+0x110>)
 800aa76:	2260      	movs	r2, #96	; 0x60
 800aa78:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 800aa7a:	4a2a      	ldr	r2, [pc, #168]	; (800ab24 <SDOS_SdoRes+0x114>)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
                MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 800aa80:	4b21      	ldr	r3, [pc, #132]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3310      	adds	r3, #16
 800aa86:	8afa      	ldrh	r2, [r7, #22]
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fdac 	bl	800b5e8 <memcpy>
                nSdoSegBytesToHandle = dataSize;
 800aa90:	8afb      	ldrh	r3, [r7, #22]
 800aa92:	4a25      	ldr	r2, [pc, #148]	; (800ab28 <SDOS_SdoRes+0x118>)
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	e022      	b.n	800aade <SDOS_SdoRes+0xce>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	d811      	bhi.n	800aac2 <SDOS_SdoRes+0xb2>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <SDOS_SdoRes+0xb2>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 800aaa4:	4b18      	ldr	r3, [pc, #96]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	330c      	adds	r3, #12
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d016      	beq.n	800aade <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 800aab0:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	330c      	adds	r3, #12
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fd94 	bl	800b5e8 <memcpy>
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 800aac0:	e00d      	b.n	800aade <SDOS_SdoRes+0xce>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 800aac2:	4b11      	ldr	r3, [pc, #68]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3310      	adds	r3, #16
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d007      	beq.n	800aade <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 800aace:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3310      	adds	r3, #16
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fd85 	bl	800b5e8 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 800aade:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <SDOS_SdoRes+0xf4>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 800aae4:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <SDOS_SdoRes+0xf8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	8afc      	ldrh	r4, [r7, #22]
 800aaea:	7d3a      	ldrb	r2, [r7, #20]
 800aaec:	7d79      	ldrb	r1, [r7, #21]
 800aaee:	7bf8      	ldrb	r0, [r7, #15]
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	f7ff fc18 	bl	800a32c <SdoRes>
    }
}
 800aafc:	bf00      	nop
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd90      	pop	{r4, r7, pc}
 800ab04:	200005d5 	.word	0x200005d5
 800ab08:	20000ed8 	.word	0x20000ed8
 800ab0c:	20000e08 	.word	0x20000e08
 800ab10:	20000ec1 	.word	0x20000ec1
 800ab14:	20000ece 	.word	0x20000ece
 800ab18:	20000ec0 	.word	0x20000ec0
 800ab1c:	20000ec4 	.word	0x20000ec4
 800ab20:	20000ecf 	.word	0x20000ecf
 800ab24:	20000ee0 	.word	0x20000ee0
 800ab28:	20000ebc 	.word	0x20000ebc

0800ab2c <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 800ab2c:	b590      	push	{r4, r7, lr}
 800ab2e:	b08f      	sub	sp, #60	; 0x3c
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	891b      	ldrh	r3, [r3, #8]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 800ab46:	2302      	movs	r3, #2
 800ab48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 800ab4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	d105      	bne.n	800ab60 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	2b09      	cmp	r3, #9
 800ab5a:	d807      	bhi.n	800ab6c <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 800ab5c:	2306      	movs	r3, #6
 800ab5e:	e1d2      	b.n	800af06 <SDOS_SdoInfoInd+0x3da>
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	2b07      	cmp	r3, #7
 800ab66:	d801      	bhi.n	800ab6c <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 800ab68:	2306      	movs	r3, #6
 800ab6a:	e1cc      	b.n	800af06 <SDOS_SdoInfoInd+0x3da>
    }

    switch ( opCode )
 800ab6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ab70:	2b05      	cmp	r3, #5
 800ab72:	f000 80c9 	beq.w	800ad08 <SDOS_SdoInfoInd+0x1dc>
 800ab76:	2b05      	cmp	r3, #5
 800ab78:	f300 8191 	bgt.w	800ae9e <SDOS_SdoInfoInd+0x372>
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d003      	beq.n	800ab88 <SDOS_SdoInfoInd+0x5c>
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	f000 80c1 	beq.w	800ad08 <SDOS_SdoInfoInd+0x1dc>
 800ab86:	e18a      	b.n	800ae9e <SDOS_SdoInfoInd+0x372>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if ( SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	899b      	ldrh	r3, [r3, #12]
 800ab8c:	2b05      	cmp	r3, #5
 800ab8e:	f200 8189 	bhi.w	800aea4 <SDOS_SdoInfoInd+0x378>
        {
            UINT16 size = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8) SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	899b      	ldrh	r3, [r3, #12]
 800ab9a:	75fb      	strb	r3, [r7, #23]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 800ab9c:	220e      	movs	r2, #14
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	48a3      	ldr	r0, [pc, #652]	; (800ae30 <SDOS_SdoInfoInd+0x304>)
 800aba2:	f000 fd21 	bl	800b5e8 <memcpy>
            if ( listType-- == 0 )
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	1e5a      	subs	r2, r3, #1
 800abaa:	75fa      	strb	r2, [r7, #23]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d122      	bne.n	800abf6 <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 800abb0:	4ba0      	ldr	r3, [pc, #640]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 800abb6:	2300      	movs	r3, #0
 800abb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abbc:	e014      	b.n	800abe8 <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 800abbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd feb0 	bl	8008928 <OBJ_GetNoOfObjects>
 800abc8:	4603      	mov	r3, r0
 800abca:	823b      	strh	r3, [r7, #16]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	1d9a      	adds	r2, r3, #6
 800abd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abd4:	3304      	adds	r3, #4
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	8a3a      	ldrh	r2, [r7, #16]
 800abdc:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 800abde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abe2:	3301      	adds	r3, #1
 800abe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abec:	2b04      	cmp	r3, #4
 800abee:	d9e6      	bls.n	800abbe <SDOS_SdoInfoInd+0x92>
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 800abf0:	2312      	movs	r3, #18
 800abf2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800abf4:	e058      	b.n	800aca8 <SDOS_SdoInfoInd+0x17c>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	82bb      	strh	r3, [r7, #20]

                if ( nSdoInfoFragmentsLeft )
 800abfa:	4b8e      	ldr	r3, [pc, #568]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d011      	beq.n	800ac26 <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 800ac02:	4b8d      	ldr	r3, [pc, #564]	; (800ae38 <SDOS_SdoInfoInd+0x30c>)
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	3b0c      	subs	r3, #12
 800ac08:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO>>1];
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3306      	adds	r3, #6
 800ac0e:	3306      	adds	r3, #6
 800ac10:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 800ac12:	4b8a      	ldr	r3, [pc, #552]	; (800ae3c <SDOS_SdoInfoInd+0x310>)
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 800ac18:	4b86      	ldr	r3, [pc, #536]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	4b84      	ldr	r3, [pc, #528]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800ac22:	801a      	strh	r2, [r3, #0]
 800ac24:	e029      	b.n	800ac7a <SDOS_SdoInfoInd+0x14e>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fd fe7d 	bl	8008928 <OBJ_GetNoOfObjects>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	82bb      	strh	r3, [r7, #20]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 800ac32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac36:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 800ac38:	4b7f      	ldr	r3, [pc, #508]	; (800ae38 <SDOS_SdoInfoInd+0x30c>)
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	3b0e      	subs	r3, #14
 800ac3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT>>1];
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3306      	adds	r3, #6
 800ac44:	3308      	adds	r3, #8
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if( (n<<1) > size)
 800ac48:	8abb      	ldrh	r3, [r7, #20]
 800ac4a:	005a      	lsls	r2, r3, #1
 800ac4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	dd10      	ble.n	800ac74 <SDOS_SdoInfoInd+0x148>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments 
                        */
                        UINT16 Fragsize = size + 2;
 800ac52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac54:	3302      	adds	r3, #2
 800ac56:	827b      	strh	r3, [r7, #18]
                        nSdoInfoFragmentsLeft = (((n<<1)-size + (Fragsize-1)) /Fragsize);
 800ac58:	8abb      	ldrh	r3, [r7, #20]
 800ac5a:	005a      	lsls	r2, r3, #1
 800ac5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	8a7b      	ldrh	r3, [r7, #18]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	8a7b      	ldrh	r3, [r7, #18]
 800ac68:	fb92 f3f3 	sdiv	r3, r2, r3
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	4b71      	ldr	r3, [pc, #452]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800ac70:	801a      	strh	r2, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <SDOS_SdoInfoInd+0x14e>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 800ac74:	4b6f      	ldr	r3, [pc, #444]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData,&abort);
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	b298      	uxth	r0, r3
 800ac7e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ac80:	f107 010c 	add.w	r1, r7, #12
 800ac84:	f107 030f 	add.w	r3, r7, #15
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	f7fd fe98 	bl	80089c0 <OBJ_GetObjectList>
 800ac90:	4603      	mov	r3, r0
 800ac92:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 800ac94:	89ba      	ldrh	r2, [r7, #12]
 800ac96:	4b69      	ldr	r3, [pc, #420]	; (800ae3c <SDOS_SdoInfoInd+0x310>)
 800ac98:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 800ac9a:	4b67      	ldr	r3, [pc, #412]	; (800ae38 <SDOS_SdoInfoInd+0x30c>)
 800ac9c:	881a      	ldrh	r2, [r3, #0]
 800ac9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	3b06      	subs	r3, #6
 800aca6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length    = size;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800acac:	801a      	strh	r2, [r3, #0]

            if(abort == 0)
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 80f7 	bne.w	800aea4 <SDOS_SdoInfoInd+0x378>
            {
             pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	891b      	ldrh	r3, [r3, #8]
 800acba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	811a      	strh	r2, [r3, #8]
             pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	891b      	ldrh	r3, [r3, #8]
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	b29a      	uxth	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft             = SWAPWORD(nSdoInfoFragmentsLeft);
 800acd2:	4b58      	ldr	r3, [pc, #352]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800acd4:	881a      	ldrh	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 800acda:	4b56      	ldr	r3, [pc, #344]	; (800ae34 <SDOS_SdoInfoInd+0x308>)
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80e0 	beq.w	800aea4 <SDOS_SdoInfoInd+0x378>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~ INFOHEADER_INCOMPLETE_MASK;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	891b      	ldrh	r3, [r3, #8]
 800ace8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acec:	b29a      	uxth	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 800ad00:	2382      	movs	r3, #130	; 0x82
 800ad02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 800ad06:	e0cd      	b.n	800aea4 <SDOS_SdoInfoInd+0x378>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	899b      	ldrh	r3, [r3, #12]
 800ad0c:	81bb      	strh	r3, [r7, #12]
        if(index < 0x1000)
 800ad0e:	89bb      	ldrh	r3, [r7, #12]
 800ad10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad14:	d202      	bcs.n	800ad1c <SDOS_SdoInfoInd+0x1f0>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800ad16:	2305      	movs	r3, #5
 800ad18:	73fb      	strb	r3, [r7, #15]
                }
            }
            else
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 800ad1a:	e0c5      	b.n	800aea8 <SDOS_SdoInfoInd+0x37c>
            pObjEntry = OBJ_GetObjectHandle( index );
 800ad1c:	89bb      	ldrh	r3, [r7, #12]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fd fd14 	bl	800874c <OBJ_GetObjectHandle>
 800ad24:	61f8      	str	r0, [r7, #28]
            if ( pObjEntry )
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 80b5 	beq.w	800ae98 <SDOS_SdoInfoInd+0x36c>
                UINT16 size = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	847b      	strh	r3, [r7, #34]	; 0x22
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 800ad32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d126      	bne.n	800ad88 <SDOS_SdoInfoInd+0x25c>
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f103 040e 	add.w	r4, r3, #14
 800ad40:	69f8      	ldr	r0, [r7, #28]
 800ad42:	f7fd ff77 	bl	8008c34 <OBJ_GetObjDesc>
 800ad46:	4603      	mov	r3, r0
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6023      	str	r3, [r4, #0]
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 800ad4c:	89b8      	ldrh	r0, [r7, #12]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	2100      	movs	r1, #0
 800ad54:	f7fd feb0 	bl	8008ab8 <OBJ_GetDesc>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	330c      	adds	r3, #12
 800ad5c:	847b      	strh	r3, [r7, #34]	; 0x22
                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800ad5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad60:	4b35      	ldr	r3, [pc, #212]	; (800ae38 <SDOS_SdoInfoInd+0x30c>)
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	3b06      	subs	r3, #6
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d902      	bls.n	800ad70 <SDOS_SdoInfoInd+0x244>
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad6e:	e077      	b.n	800ae60 <SDOS_SdoInfoInd+0x334>
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 800ad70:	89b8      	ldrh	r0, [r7, #12]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	330e      	adds	r3, #14
 800ad76:	3304      	adds	r3, #4
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	f7fd fe9c 	bl	8008ab8 <OBJ_GetDesc>
 800ad80:	4603      	mov	r3, r0
 800ad82:	330c      	adds	r3, #12
 800ad84:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad86:	e06b      	b.n	800ae60 <SDOS_SdoInfoInd+0x334>
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	89db      	ldrh	r3, [r3, #14]
 800ad8c:	76fb      	strb	r3, [r7, #27]
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800ad8e:	69f8      	ldr	r0, [r7, #28]
 800ad90:	f7fd ff50 	bl	8008c34 <OBJ_GetObjDesc>
 800ad94:	4603      	mov	r3, r0
 800ad96:	885b      	ldrh	r3, [r3, #2]
 800ad98:	76bb      	strb	r3, [r7, #26]
                    if ( subindex <= maxSubindex )
 800ad9a:	7efa      	ldrb	r2, [r7, #27]
 800ad9c:	7ebb      	ldrb	r3, [r7, #26]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d85c      	bhi.n	800ae5c <SDOS_SdoInfoInd+0x330>
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f103 0410 	add.w	r4, r3, #16
 800ada8:	7efb      	ldrb	r3, [r7, #27]
 800adaa:	4619      	mov	r1, r3
 800adac:	69f8      	ldr	r0, [r7, #28]
 800adae:	f7fd ff15 	bl	8008bdc <OBJ_GetEntryDesc>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2206      	movs	r2, #6
 800adb6:	4619      	mov	r1, r3
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 fc15 	bl	800b5e8 <memcpy>
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	89db      	ldrh	r3, [r3, #14]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 800adca:	69f8      	ldr	r0, [r7, #28]
 800adcc:	f7fd ff32 	bl	8008c34 <OBJ_GetObjDesc>
 800add0:	4603      	mov	r3, r0
 800add2:	885b      	ldrh	r3, [r3, #2]
 800add4:	833b      	strh	r3, [r7, #24]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800add6:	8b3b      	ldrh	r3, [r7, #24]
 800add8:	121b      	asrs	r3, r3, #8
 800adda:	b29b      	uxth	r3, r3
 800addc:	f003 030f 	and.w	r3, r3, #15
 800ade0:	833b      	strh	r3, [r7, #24]
                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 800ade2:	8b3b      	ldrh	r3, [r7, #24]
 800ade4:	2b08      	cmp	r3, #8
 800ade6:	d002      	beq.n	800adee <SDOS_SdoInfoInd+0x2c2>
 800ade8:	8b3b      	ldrh	r3, [r7, #24]
 800adea:	2b09      	cmp	r3, #9
 800adec:	d10d      	bne.n	800ae0a <SDOS_SdoInfoInd+0x2de>
 800adee:	7efb      	ldrb	r3, [r7, #27]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <SDOS_SdoInfoInd+0x2de>
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3310      	adds	r3, #16
 800adf8:	3306      	adds	r3, #6
 800adfa:	220d      	movs	r2, #13
 800adfc:	4910      	ldr	r1, [pc, #64]	; (800ae40 <SDOS_SdoInfoInd+0x314>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fbf2 	bl	800b5e8 <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 800ae04:	231c      	movs	r3, #28
 800ae06:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae08:	e02a      	b.n	800ae60 <SDOS_SdoInfoInd+0x334>
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ae0a:	89b8      	ldrh	r0, [r7, #12]
 800ae0c:	7ef9      	ldrb	r1, [r7, #27]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	f7fd fe51 	bl	8008ab8 <OBJ_GetDesc>
 800ae16:	4603      	mov	r3, r0
 800ae18:	3310      	adds	r3, #16
 800ae1a:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800ae1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae1e:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <SDOS_SdoInfoInd+0x30c>)
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	3b06      	subs	r3, #6
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d90d      	bls.n	800ae44 <SDOS_SdoInfoInd+0x318>
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ae28:	2310      	movs	r3, #16
 800ae2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae2c:	e018      	b.n	800ae60 <SDOS_SdoInfoInd+0x334>
 800ae2e:	bf00      	nop
 800ae30:	20000ee8 	.word	0x20000ee8
 800ae34:	20000ed4 	.word	0x20000ed4
 800ae38:	20000e08 	.word	0x20000e08
 800ae3c:	20000eb4 	.word	0x20000eb4
 800ae40:	20000534 	.word	0x20000534
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ae44:	89b8      	ldrh	r0, [r7, #12]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3310      	adds	r3, #16
 800ae4a:	3306      	adds	r3, #6
 800ae4c:	7ef9      	ldrb	r1, [r7, #27]
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	f7fd fe32 	bl	8008ab8 <OBJ_GetDesc>
 800ae54:	4603      	mov	r3, r0
 800ae56:	3310      	adds	r3, #16
 800ae58:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae5a:	e001      	b.n	800ae60 <SDOS_SdoInfoInd+0x334>
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 800ae5c:	2311      	movs	r3, #17
 800ae5e:	73fb      	strb	r3, [r7, #15]
                if ( abort == 0 )
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d120      	bne.n	800aea8 <SDOS_SdoInfoInd+0x37c>
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	815a      	strh	r2, [r3, #10]
                        pSdoInfoInd->MbxHeader.Length = size;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae70:	801a      	strh	r2, [r3, #0]
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	891b      	ldrh	r3, [r3, #8]
 800ae76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	891a      	ldrh	r2, [r3, #8]
 800ae84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	811a      	strh	r2, [r3, #8]
        break;
 800ae96:	e007      	b.n	800aea8 <SDOS_SdoInfoInd+0x37c>
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 800ae98:	2308      	movs	r3, #8
 800ae9a:	73fb      	strb	r3, [r7, #15]
        break;
 800ae9c:	e004      	b.n	800aea8 <SDOS_SdoInfoInd+0x37c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	73fb      	strb	r3, [r7, #15]
 800aea2:	e002      	b.n	800aeaa <SDOS_SdoInfoInd+0x37e>
        break;
 800aea4:	bf00      	nop
 800aea6:	e000      	b.n	800aeaa <SDOS_SdoInfoInd+0x37e>
        break;
 800aea8:	bf00      	nop
    }

    if ( abort )
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01d      	beq.n	800aeec <SDOS_SdoInfoInd+0x3c0>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	220a      	movs	r2, #10
 800aeb4:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	891b      	ldrh	r3, [r3, #8]
 800aeba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	891b      	ldrh	r3, [r3, #8]
 800aec8:	f043 0307 	orr.w	r3, r3, #7
 800aecc:	b29a      	uxth	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	461a      	mov	r2, r3
 800aedc:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <SDOS_SdoInfoInd+0x3e4>)
 800aede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <SDOS_SdoInfoInd+0x3e8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 800aeec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7fd fa56 	bl	80083a4 <MBX_MailboxSendReq>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <SDOS_SdoInfoInd+0x3d8>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 800aefe:	4a06      	ldr	r2, [pc, #24]	; (800af18 <SDOS_SdoInfoInd+0x3ec>)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6013      	str	r3, [r2, #0]
    }

    return 0;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3734      	adds	r7, #52	; 0x34
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd90      	pop	{r4, r7, pc}
 800af0e:	bf00      	nop
 800af10:	0800c190 	.word	0x0800c190
 800af14:	20000ed4 	.word	0x20000ed4
 800af18:	20000b44 	.word	0x20000b44

0800af1c <MainCpp>:
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern TIM_HandleTypeDef htim2;

void MainCpp()
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1Data, 1);
 800af20:	2201      	movs	r2, #1
 800af22:	4908      	ldr	r1, [pc, #32]	; (800af44 <MainCpp+0x28>)
 800af24:	4808      	ldr	r0, [pc, #32]	; (800af48 <MainCpp+0x2c>)
 800af26:	f7f6 fb8b 	bl	8001640 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc2Data, 1);
 800af2a:	2201      	movs	r2, #1
 800af2c:	4907      	ldr	r1, [pc, #28]	; (800af4c <MainCpp+0x30>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <MainCpp+0x34>)
 800af30:	f7f6 fb86 	bl	8001640 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 800af34:	4807      	ldr	r0, [pc, #28]	; (800af54 <MainCpp+0x38>)
 800af36:	f7f9 f817 	bl	8003f68 <HAL_TIM_Base_Start_IT>

	MainEtherCAT();
 800af3a:	f7fa f81b 	bl	8004f74 <MainEtherCAT>

//		msDelay(1);
//	}


}
 800af3e:	bf00      	nop
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200005d8 	.word	0x200005d8
 800af48:	20000824 	.word	0x20000824
 800af4c:	200005dc 	.word	0x200005dc
 800af50:	20000788 	.word	0x20000788
 800af54:	2000097c 	.word	0x2000097c

0800af58 <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>:

	// *-----* SPI *-----* //

	class SPIComm{
		public:
			SPIComm(SPI_HandleTypeDef *hspi):hspi_(hspi){}
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2264      	movs	r2, #100	; 0x64
 800af6c:	605a      	str	r2, [r3, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <_ZN4Port7SPICommD1Ev>:
			~SPIComm(){}
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>:

	// *-----* GPIO *-----* //
	class GPIO
	{
		public:
			GPIO(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin):GPIOx_(GPIOx),GPIO_Pin_(GPIO_Pin){}
 800af92:	b480      	push	{r7}
 800af94:	b085      	sub	sp, #20
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	4613      	mov	r3, r2
 800af9e:	80fb      	strh	r3, [r7, #6]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	809a      	strh	r2, [r3, #4]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <_ZN4Port4GPIOD1Ev>:
			~GPIO(){}
 800afba:	b480      	push	{r7}
 800afbc:	b083      	sub	sp, #12
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>:
	};

	class EXIT:public GPIO
	{
		public:
			EXIT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, IRQn_Type EXTIx_IRQn)
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4611      	mov	r1, r2
 800afdc:	461a      	mov	r2, r3
 800afde:	460b      	mov	r3, r1
 800afe0:	80fb      	strh	r3, [r7, #6]
 800afe2:	4613      	mov	r3, r2
 800afe4:	717b      	strb	r3, [r7, #5]
			:GPIO::GPIO(GPIOx,GPIO_Pin),EXTIx_IRQn_(EXTIx_IRQn){}
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	88fa      	ldrh	r2, [r7, #6]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff ffd0 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	797a      	ldrb	r2, [r7, #5]
 800aff6:	719a      	strb	r2, [r3, #6]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <_ZN4Port4EXITD1Ev>:
			~EXIT(){}
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff ffd4 	bl	800afba <_ZN4Port4GPIOD1Ev>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZN4Port2CSC1EP12GPIO_TypeDefth>:
	};

	class CS:GPIO
	{
		public:
			CS(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,uint8_t polarity):GPIO(GPIOx,GPIO_Pin),polarity_(polarity){}
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	4611      	mov	r1, r2
 800b028:	461a      	mov	r2, r3
 800b02a:	460b      	mov	r3, r1
 800b02c:	80fb      	strh	r3, [r7, #6]
 800b02e:	4613      	mov	r3, r2
 800b030:	717b      	strb	r3, [r7, #5]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	88fa      	ldrh	r2, [r7, #6]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ffaa 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	797a      	ldrb	r2, [r7, #5]
 800b042:	719a      	strb	r2, [r3, #6]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZN4Port2CSD1Ev>:
			~CS(){}
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff ffae 	bl	800afba <_ZN4Port4GPIOD1Ev>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>:
	#define TX_CQUEUE_BUFFER_LENGTH 64

	class UartCom
	{
		public:
			UartCom(UART_HandleTypeDef *huart,
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
		)
			:huart_(huart),
			 txBufLen_(txBufLen),
			 rxBufLen_(rxBufLen),
			 txCQueue_(txCQueueBufLen),
			 rxCQueue_(rxCQueueBufLen)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	609a      	str	r2, [r3, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3314      	adds	r3, #20
 800b08c:	2200      	movs	r2, #0
 800b08e:	69b9      	ldr	r1, [r7, #24]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f9d1 	bl	800b438 <_ZN8CQueueNS6CQueueC1EmPh>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	69f9      	ldr	r1, [r7, #28]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 f9ca 	bl	800b438 <_ZN8CQueueNS6CQueueC1EmPh>
			{
				pTxBuf_ 		= new uint8_t [txBufLen_];
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 fa3d 	bl	800b528 <_Znaj>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	60da      	str	r2, [r3, #12]
				pRxBuf_ 		= new uint8_t [rxBufLen_];
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fa34 	bl	800b528 <_Znaj>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	611a      	str	r2, [r3, #16]

			}
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <_ZN4Port7UartComD1Ev>:
			~UartCom()
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
			{
				delete [] pTxBuf_;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <_ZN4Port7UartComD1Ev+0x1a>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fa1c 	bl	800b524 <_ZdaPv>
				delete [] pRxBuf_;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <_ZN4Port7UartComD1Ev+0x2c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fa13 	bl	800b524 <_ZdaPv>
			{
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3330      	adds	r3, #48	; 0x30
 800b102:	4618      	mov	r0, r3
 800b104:	f000 f9e0 	bl	800b4c8 <_ZN8CQueueNS6CQueueD1Ev>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3314      	adds	r3, #20
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 f9db 	bl	800b4c8 <_ZN8CQueueNS6CQueueD1Ev>
			}
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>:
	 * PB8,  PB9 	---> 	CAN1, FIFO1
	 */
	class CANComm
	{
		public:
			CANComm(CAN_HandleTypeDef *hcan, uint32_t rxFifo):hcan_(hcan),rxFifo_(rxFifo){}
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	4a07      	ldr	r2, [pc, #28]	; (800b148 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm+0x2c>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	639a      	str	r2, [r3, #56]	; 0x38
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	63da      	str	r2, [r3, #60]	; 0x3c
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	0800c210 	.word	0x0800c210

0800b14c <_ZN4Port7CANCommD1Ev>:
			virtual ~CANComm(){}
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	4a04      	ldr	r2, [pc, #16]	; (800b168 <_ZN4Port7CANCommD1Ev+0x1c>)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	0800c210 	.word	0x0800c210

0800b16c <_ZN4Port7CANCommD0Ev>:
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff ffe9 	bl	800b14c <_ZN4Port7CANCommD1Ev>
 800b17a:	2140      	movs	r1, #64	; 0x40
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9cf 	bl	800b520 <_ZdlPvj>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <_Z41__static_initialization_and_destruction_0ii>:
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af02      	add	r7, sp, #8
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	f040 8098 	bne.w	800b2ce <_Z41__static_initialization_and_destruction_0ii+0x142>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	f040 8092 	bne.w	800b2ce <_Z41__static_initialization_and_destruction_0ii+0x142>
Port::UartCom		uart2rs485(H_UART_RS485);
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	2340      	movs	r3, #64	; 0x40
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2311      	movs	r3, #17
 800b1b4:	2211      	movs	r2, #17
 800b1b6:	4971      	ldr	r1, [pc, #452]	; (800b37c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800b1b8:	4871      	ldr	r0, [pc, #452]	; (800b380 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800b1ba:	f7ff ff55 	bl	800b068 <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800b1be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1c2:	4970      	ldr	r1, [pc, #448]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b1c4:	4870      	ldr	r0, [pc, #448]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800b1c6:	f7ff fee4 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800b1ca:	4970      	ldr	r1, [pc, #448]	; (800b38c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800b1cc:	4870      	ldr	r0, [pc, #448]	; (800b390 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800b1ce:	f7ff fec3 	bl	800af58 <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1d8:	496e      	ldr	r1, [pc, #440]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b1da:	486f      	ldr	r0, [pc, #444]	; (800b398 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800b1dc:	f7ff ff1e 	bl	800b01c <_ZN4Port2CSC1EP12GPIO_TypeDefth>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800b1e0:	2306      	movs	r3, #6
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	496d      	ldr	r1, [pc, #436]	; (800b39c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800b1e6:	486e      	ldr	r0, [pc, #440]	; (800b3a0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800b1e8:	f7ff fef2 	bl	800afd0 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800b1ec:	2307      	movs	r3, #7
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	496a      	ldr	r1, [pc, #424]	; (800b39c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800b1f2:	486c      	ldr	r0, [pc, #432]	; (800b3a4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800b1f4:	f7ff feec 	bl	800afd0 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800b1f8:	2317      	movs	r3, #23
 800b1fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1fe:	4967      	ldr	r1, [pc, #412]	; (800b39c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800b200:	4869      	ldr	r0, [pc, #420]	; (800b3a8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800b202:	f7ff fee5 	bl	800afd0 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800b206:	2204      	movs	r2, #4
 800b208:	4968      	ldr	r1, [pc, #416]	; (800b3ac <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800b20a:	4869      	ldr	r0, [pc, #420]	; (800b3b0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800b20c:	f7ff fec1 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800b210:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b214:	495f      	ldr	r1, [pc, #380]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b216:	4867      	ldr	r0, [pc, #412]	; (800b3b4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800b218:	f7ff febb 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800b21c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b220:	495c      	ldr	r1, [pc, #368]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b222:	4865      	ldr	r0, [pc, #404]	; (800b3b8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800b224:	f7ff feb5 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800b228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b22c:	4959      	ldr	r1, [pc, #356]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b22e:	4863      	ldr	r0, [pc, #396]	; (800b3bc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800b230:	f7ff feaf 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800b234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b238:	4956      	ldr	r1, [pc, #344]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b23a:	4861      	ldr	r0, [pc, #388]	; (800b3c0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800b23c:	f7ff fea9 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800b240:	2202      	movs	r2, #2
 800b242:	4954      	ldr	r1, [pc, #336]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b244:	485f      	ldr	r0, [pc, #380]	; (800b3c4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800b246:	f7ff fea4 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800b24a:	2201      	movs	r2, #1
 800b24c:	4951      	ldr	r1, [pc, #324]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b24e:	485e      	ldr	r0, [pc, #376]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800b250:	f7ff fe9f 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800b254:	2220      	movs	r2, #32
 800b256:	494b      	ldr	r1, [pc, #300]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b258:	485c      	ldr	r0, [pc, #368]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800b25a:	f7ff fe9a 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800b25e:	2210      	movs	r2, #16
 800b260:	4948      	ldr	r1, [pc, #288]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b262:	485b      	ldr	r0, [pc, #364]	; (800b3d0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800b264:	f7ff fe95 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800b268:	2201      	movs	r2, #1
 800b26a:	495a      	ldr	r1, [pc, #360]	; (800b3d4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800b26c:	485a      	ldr	r0, [pc, #360]	; (800b3d8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800b26e:	f7ff ff55 	bl	800b11c <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800b272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b276:	4943      	ldr	r1, [pc, #268]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b278:	4858      	ldr	r0, [pc, #352]	; (800b3dc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800b27a:	f7ff fe8a 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800b27e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b282:	4940      	ldr	r1, [pc, #256]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b284:	4856      	ldr	r0, [pc, #344]	; (800b3e0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800b286:	f7ff fe84 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800b28a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b28e:	493d      	ldr	r1, [pc, #244]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b290:	4854      	ldr	r0, [pc, #336]	; (800b3e4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800b292:	f7ff fe7e 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800b296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b29a:	493a      	ldr	r1, [pc, #232]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b29c:	4852      	ldr	r0, [pc, #328]	; (800b3e8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800b29e:	f7ff fe78 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800b2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2a6:	4937      	ldr	r1, [pc, #220]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b2a8:	4850      	ldr	r0, [pc, #320]	; (800b3ec <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800b2aa:	f7ff fe72 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800b2ae:	2280      	movs	r2, #128	; 0x80
 800b2b0:	4934      	ldr	r1, [pc, #208]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b2b2:	484f      	ldr	r0, [pc, #316]	; (800b3f0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800b2b4:	f7ff fe6d 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800b2b8:	2240      	movs	r2, #64	; 0x40
 800b2ba:	4932      	ldr	r1, [pc, #200]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800b2bc:	484d      	ldr	r0, [pc, #308]	; (800b3f4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800b2be:	f7ff fe68 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800b2c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b2c6:	4933      	ldr	r1, [pc, #204]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800b2c8:	484b      	ldr	r0, [pc, #300]	; (800b3f8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800b2ca:	f7ff fe62 	bl	800af92 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d14f      	bne.n	800b374 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d14a      	bne.n	800b374 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 800b2de:	4846      	ldr	r0, [pc, #280]	; (800b3f8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800b2e0:	f7ff fe6b 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800b2e4:	4843      	ldr	r0, [pc, #268]	; (800b3f4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800b2e6:	f7ff fe68 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800b2ea:	4841      	ldr	r0, [pc, #260]	; (800b3f0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800b2ec:	f7ff fe65 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800b2f0:	483e      	ldr	r0, [pc, #248]	; (800b3ec <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800b2f2:	f7ff fe62 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800b2f6:	483c      	ldr	r0, [pc, #240]	; (800b3e8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800b2f8:	f7ff fe5f 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800b2fc:	4839      	ldr	r0, [pc, #228]	; (800b3e4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800b2fe:	f7ff fe5c 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800b302:	4837      	ldr	r0, [pc, #220]	; (800b3e0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800b304:	f7ff fe59 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800b308:	4834      	ldr	r0, [pc, #208]	; (800b3dc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800b30a:	f7ff fe56 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800b30e:	4832      	ldr	r0, [pc, #200]	; (800b3d8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800b310:	f7ff ff1c 	bl	800b14c <_ZN4Port7CANCommD1Ev>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800b314:	482e      	ldr	r0, [pc, #184]	; (800b3d0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800b316:	f7ff fe50 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800b31a:	482c      	ldr	r0, [pc, #176]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800b31c:	f7ff fe4d 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800b320:	4829      	ldr	r0, [pc, #164]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800b322:	f7ff fe4a 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800b326:	4827      	ldr	r0, [pc, #156]	; (800b3c4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800b328:	f7ff fe47 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800b32c:	4824      	ldr	r0, [pc, #144]	; (800b3c0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800b32e:	f7ff fe44 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800b332:	4822      	ldr	r0, [pc, #136]	; (800b3bc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800b334:	f7ff fe41 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800b338:	481f      	ldr	r0, [pc, #124]	; (800b3b8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800b33a:	f7ff fe3e 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800b33e:	481d      	ldr	r0, [pc, #116]	; (800b3b4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800b340:	f7ff fe3b 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800b344:	481a      	ldr	r0, [pc, #104]	; (800b3b0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800b346:	f7ff fe38 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800b34a:	4817      	ldr	r0, [pc, #92]	; (800b3a8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800b34c:	f7ff fe59 	bl	800b002 <_ZN4Port4EXITD1Ev>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800b350:	4814      	ldr	r0, [pc, #80]	; (800b3a4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800b352:	f7ff fe56 	bl	800b002 <_ZN4Port4EXITD1Ev>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800b356:	4812      	ldr	r0, [pc, #72]	; (800b3a0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800b358:	f7ff fe53 	bl	800b002 <_ZN4Port4EXITD1Ev>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800b35c:	480e      	ldr	r0, [pc, #56]	; (800b398 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800b35e:	f7ff fe76 	bl	800b04e <_ZN4Port2CSD1Ev>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800b362:	480b      	ldr	r0, [pc, #44]	; (800b390 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800b364:	f7ff fe0a 	bl	800af7c <_ZN4Port7SPICommD1Ev>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800b368:	4807      	ldr	r0, [pc, #28]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800b36a:	f7ff fe26 	bl	800afba <_ZN4Port4GPIOD1Ev>
Port::UartCom		uart2rs485(H_UART_RS485);
 800b36e:	4804      	ldr	r0, [pc, #16]	; (800b380 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800b370:	f7ff feaf 	bl	800b0d2 <_ZN4Port7UartComD1Ev>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	2000086c 	.word	0x2000086c
 800b380:	200005e0 	.word	0x200005e0
 800b384:	40020800 	.word	0x40020800
 800b388:	2000062c 	.word	0x2000062c
 800b38c:	20000730 	.word	0x20000730
 800b390:	20000634 	.word	0x20000634
 800b394:	40020400 	.word	0x40020400
 800b398:	2000063c 	.word	0x2000063c
 800b39c:	40020000 	.word	0x40020000
 800b3a0:	20000644 	.word	0x20000644
 800b3a4:	2000064c 	.word	0x2000064c
 800b3a8:	20000654 	.word	0x20000654
 800b3ac:	40020c00 	.word	0x40020c00
 800b3b0:	2000065c 	.word	0x2000065c
 800b3b4:	20000664 	.word	0x20000664
 800b3b8:	2000066c 	.word	0x2000066c
 800b3bc:	20000674 	.word	0x20000674
 800b3c0:	2000067c 	.word	0x2000067c
 800b3c4:	20000684 	.word	0x20000684
 800b3c8:	2000068c 	.word	0x2000068c
 800b3cc:	20000694 	.word	0x20000694
 800b3d0:	2000069c 	.word	0x2000069c
 800b3d4:	20000a68 	.word	0x20000a68
 800b3d8:	200006a4 	.word	0x200006a4
 800b3dc:	200006e4 	.word	0x200006e4
 800b3e0:	200006ec 	.word	0x200006ec
 800b3e4:	200006f4 	.word	0x200006f4
 800b3e8:	200006fc 	.word	0x200006fc
 800b3ec:	20000704 	.word	0x20000704
 800b3f0:	2000070c 	.word	0x2000070c
 800b3f4:	20000714 	.word	0x20000714
 800b3f8:	2000071c 	.word	0x2000071c

0800b3fc <_GLOBAL__sub_I_uart2rs485>:
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b404:	2001      	movs	r0, #1
 800b406:	f7ff fec1 	bl	800b18c <_Z41__static_initialization_and_destruction_0ii>
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_GLOBAL__sub_D_uart2rs485>:
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
 800b410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b414:	2000      	movs	r0, #0
 800b416:	f7ff feb9 	bl	800b18c <_Z41__static_initialization_and_destruction_0ii>
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <_ZL15IsNotPowerOfTwom>:
 */

#include "utils/cqueue.h"

static inline uint32_t IsNotPowerOfTwo(uint32_t number)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	return (number & (number-1));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	1e5a      	subs	r2, r3, #1
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4013      	ands	r3, r2
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <_ZN8CQueueNS6CQueueC1EmPh>:

CQueueNS::CQueue::CQueue(uint32_t totalLen, uint8_t *pBuffer_)
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
:InitResult(ERROR),readIdx(0),writeIdx(0),mask(0),pBuffer(NULL),IsDeleteNeeded(0),ndtrLast(totalLen)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2201      	movs	r2, #1
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	605a      	str	r2, [r3, #4]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	609a      	str	r2, [r3, #8]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	60da      	str	r2, [r3, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	611a      	str	r2, [r3, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	751a      	strb	r2, [r3, #20]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	619a      	str	r2, [r3, #24]
{
	if(IsNotPowerOfTwo(totalLen))
 800b46e:	68b8      	ldr	r0, [r7, #8]
 800b470:	f7ff ffd4 	bl	800b41c <_ZL15IsNotPowerOfTwom>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	bf14      	ite	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	2300      	moveq	r3, #0
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b00      	cmp	r3, #0
 800b482:	d11c      	bne.n	800b4be <_ZN8CQueueNS6CQueueC1EmPh+0x86>
	{}
	else
	{
		if(pBuffer_ == NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <_ZN8CQueueNS6CQueueC1EmPh+0x6a>
		{
			pBuffer = new uint8_t [totalLen];
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 f84b 	bl	800b528 <_Znaj>
 800b492:	4603      	mov	r3, r0
 800b494:	461a      	mov	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	611a      	str	r2, [r3, #16]
			IsDeleteNeeded = 1;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2201      	movs	r2, #1
 800b49e:	751a      	strb	r2, [r3, #20]
 800b4a0:	e002      	b.n	800b4a8 <_ZN8CQueueNS6CQueueC1EmPh+0x70>
		}
		else
		{
			pBuffer = pBuffer_;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	611a      	str	r2, [r3, #16]
		}
		if(pBuffer != NULL)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d006      	beq.n	800b4be <_ZN8CQueueNS6CQueueC1EmPh+0x86>
		{
			mask = totalLen - 1;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	1e5a      	subs	r2, r3, #1
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	60da      	str	r2, [r3, #12]
			InitResult = SUCCESS;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <_ZN8CQueueNS6CQueueD1Ev>:


CQueueNS::CQueue::~CQueue()
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
{
	Reset();
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f815 	bl	800b500 <_ZN8CQueueNS6CQueue5ResetEv>
	if(IsDeleteNeeded)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7d1b      	ldrb	r3, [r3, #20]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d008      	beq.n	800b4f0 <_ZN8CQueueNS6CQueueD1Ev+0x28>
	{
		delete []pBuffer;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <_ZN8CQueueNS6CQueueD1Ev+0x28>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 f81a 	bl	800b524 <_ZdaPv>
	}
	pBuffer = NULL;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	611a      	str	r2, [r3, #16]
}
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <_ZN8CQueueNS6CQueue5ResetEv>:

void CQueueNS::CQueue::Reset()
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	readIdx = 0;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	605a      	str	r2, [r3, #4]
	writeIdx = 0;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	609a      	str	r2, [r3, #8]
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <_ZdlPvj>:
 800b520:	f000 b804 	b.w	800b52c <_ZdlPv>

0800b524 <_ZdaPv>:
 800b524:	f000 b802 	b.w	800b52c <_ZdlPv>

0800b528 <_Znaj>:
 800b528:	f000 b802 	b.w	800b530 <_Znwj>

0800b52c <_ZdlPv>:
 800b52c:	f000 b854 	b.w	800b5d8 <free>

0800b530 <_Znwj>:
 800b530:	2801      	cmp	r0, #1
 800b532:	bf38      	it	cc
 800b534:	2001      	movcc	r0, #1
 800b536:	b510      	push	{r4, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f844 	bl	800b5c8 <malloc>
 800b540:	b930      	cbnz	r0, 800b550 <_Znwj+0x20>
 800b542:	f000 f807 	bl	800b554 <_ZSt15get_new_handlerv>
 800b546:	b908      	cbnz	r0, 800b54c <_Znwj+0x1c>
 800b548:	f000 f80c 	bl	800b564 <abort>
 800b54c:	4780      	blx	r0
 800b54e:	e7f4      	b.n	800b53a <_Znwj+0xa>
 800b550:	bd10      	pop	{r4, pc}
	...

0800b554 <_ZSt15get_new_handlerv>:
 800b554:	4b02      	ldr	r3, [pc, #8]	; (800b560 <_ZSt15get_new_handlerv+0xc>)
 800b556:	6818      	ldr	r0, [r3, #0]
 800b558:	f3bf 8f5b 	dmb	ish
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	20000724 	.word	0x20000724

0800b564 <abort>:
 800b564:	b508      	push	{r3, lr}
 800b566:	2006      	movs	r0, #6
 800b568:	f000 f936 	bl	800b7d8 <raise>
 800b56c:	2001      	movs	r0, #1
 800b56e:	f7f5 ff35 	bl	80013dc <_exit>
	...

0800b574 <__errno>:
 800b574:	4b01      	ldr	r3, [pc, #4]	; (800b57c <__errno+0x8>)
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000544 	.word	0x20000544

0800b580 <__libc_init_array>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4d0d      	ldr	r5, [pc, #52]	; (800b5b8 <__libc_init_array+0x38>)
 800b584:	4c0d      	ldr	r4, [pc, #52]	; (800b5bc <__libc_init_array+0x3c>)
 800b586:	1b64      	subs	r4, r4, r5
 800b588:	10a4      	asrs	r4, r4, #2
 800b58a:	2600      	movs	r6, #0
 800b58c:	42a6      	cmp	r6, r4
 800b58e:	d109      	bne.n	800b5a4 <__libc_init_array+0x24>
 800b590:	4d0b      	ldr	r5, [pc, #44]	; (800b5c0 <__libc_init_array+0x40>)
 800b592:	4c0c      	ldr	r4, [pc, #48]	; (800b5c4 <__libc_init_array+0x44>)
 800b594:	f000 f94a 	bl	800b82c <_init>
 800b598:	1b64      	subs	r4, r4, r5
 800b59a:	10a4      	asrs	r4, r4, #2
 800b59c:	2600      	movs	r6, #0
 800b59e:	42a6      	cmp	r6, r4
 800b5a0:	d105      	bne.n	800b5ae <__libc_init_array+0x2e>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a8:	4798      	blx	r3
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	e7ee      	b.n	800b58c <__libc_init_array+0xc>
 800b5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b2:	4798      	blx	r3
 800b5b4:	3601      	adds	r6, #1
 800b5b6:	e7f2      	b.n	800b59e <__libc_init_array+0x1e>
 800b5b8:	0800c280 	.word	0x0800c280
 800b5bc:	0800c280 	.word	0x0800c280
 800b5c0:	0800c280 	.word	0x0800c280
 800b5c4:	0800c288 	.word	0x0800c288

0800b5c8 <malloc>:
 800b5c8:	4b02      	ldr	r3, [pc, #8]	; (800b5d4 <malloc+0xc>)
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	f000 b871 	b.w	800b6b4 <_malloc_r>
 800b5d2:	bf00      	nop
 800b5d4:	20000544 	.word	0x20000544

0800b5d8 <free>:
 800b5d8:	4b02      	ldr	r3, [pc, #8]	; (800b5e4 <free+0xc>)
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f000 b819 	b.w	800b614 <_free_r>
 800b5e2:	bf00      	nop
 800b5e4:	20000544 	.word	0x20000544

0800b5e8 <memcpy>:
 800b5e8:	440a      	add	r2, r1
 800b5ea:	4291      	cmp	r1, r2
 800b5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5f0:	d100      	bne.n	800b5f4 <memcpy+0xc>
 800b5f2:	4770      	bx	lr
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5fe:	4291      	cmp	r1, r2
 800b600:	d1f9      	bne.n	800b5f6 <memcpy+0xe>
 800b602:	bd10      	pop	{r4, pc}

0800b604 <memset>:
 800b604:	4402      	add	r2, r0
 800b606:	4603      	mov	r3, r0
 800b608:	4293      	cmp	r3, r2
 800b60a:	d100      	bne.n	800b60e <memset+0xa>
 800b60c:	4770      	bx	lr
 800b60e:	f803 1b01 	strb.w	r1, [r3], #1
 800b612:	e7f9      	b.n	800b608 <memset+0x4>

0800b614 <_free_r>:
 800b614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b616:	2900      	cmp	r1, #0
 800b618:	d048      	beq.n	800b6ac <_free_r+0x98>
 800b61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b61e:	9001      	str	r0, [sp, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	f1a1 0404 	sub.w	r4, r1, #4
 800b626:	bfb8      	it	lt
 800b628:	18e4      	addlt	r4, r4, r3
 800b62a:	f000 f8f3 	bl	800b814 <__malloc_lock>
 800b62e:	4a20      	ldr	r2, [pc, #128]	; (800b6b0 <_free_r+0x9c>)
 800b630:	9801      	ldr	r0, [sp, #4]
 800b632:	6813      	ldr	r3, [r2, #0]
 800b634:	4615      	mov	r5, r2
 800b636:	b933      	cbnz	r3, 800b646 <_free_r+0x32>
 800b638:	6063      	str	r3, [r4, #4]
 800b63a:	6014      	str	r4, [r2, #0]
 800b63c:	b003      	add	sp, #12
 800b63e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b642:	f000 b8ed 	b.w	800b820 <__malloc_unlock>
 800b646:	42a3      	cmp	r3, r4
 800b648:	d90b      	bls.n	800b662 <_free_r+0x4e>
 800b64a:	6821      	ldr	r1, [r4, #0]
 800b64c:	1862      	adds	r2, r4, r1
 800b64e:	4293      	cmp	r3, r2
 800b650:	bf04      	itt	eq
 800b652:	681a      	ldreq	r2, [r3, #0]
 800b654:	685b      	ldreq	r3, [r3, #4]
 800b656:	6063      	str	r3, [r4, #4]
 800b658:	bf04      	itt	eq
 800b65a:	1852      	addeq	r2, r2, r1
 800b65c:	6022      	streq	r2, [r4, #0]
 800b65e:	602c      	str	r4, [r5, #0]
 800b660:	e7ec      	b.n	800b63c <_free_r+0x28>
 800b662:	461a      	mov	r2, r3
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	b10b      	cbz	r3, 800b66c <_free_r+0x58>
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d9fa      	bls.n	800b662 <_free_r+0x4e>
 800b66c:	6811      	ldr	r1, [r2, #0]
 800b66e:	1855      	adds	r5, r2, r1
 800b670:	42a5      	cmp	r5, r4
 800b672:	d10b      	bne.n	800b68c <_free_r+0x78>
 800b674:	6824      	ldr	r4, [r4, #0]
 800b676:	4421      	add	r1, r4
 800b678:	1854      	adds	r4, r2, r1
 800b67a:	42a3      	cmp	r3, r4
 800b67c:	6011      	str	r1, [r2, #0]
 800b67e:	d1dd      	bne.n	800b63c <_free_r+0x28>
 800b680:	681c      	ldr	r4, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	6053      	str	r3, [r2, #4]
 800b686:	4421      	add	r1, r4
 800b688:	6011      	str	r1, [r2, #0]
 800b68a:	e7d7      	b.n	800b63c <_free_r+0x28>
 800b68c:	d902      	bls.n	800b694 <_free_r+0x80>
 800b68e:	230c      	movs	r3, #12
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	e7d3      	b.n	800b63c <_free_r+0x28>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	1961      	adds	r1, r4, r5
 800b698:	428b      	cmp	r3, r1
 800b69a:	bf04      	itt	eq
 800b69c:	6819      	ldreq	r1, [r3, #0]
 800b69e:	685b      	ldreq	r3, [r3, #4]
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	bf04      	itt	eq
 800b6a4:	1949      	addeq	r1, r1, r5
 800b6a6:	6021      	streq	r1, [r4, #0]
 800b6a8:	6054      	str	r4, [r2, #4]
 800b6aa:	e7c7      	b.n	800b63c <_free_r+0x28>
 800b6ac:	b003      	add	sp, #12
 800b6ae:	bd30      	pop	{r4, r5, pc}
 800b6b0:	20000728 	.word	0x20000728

0800b6b4 <_malloc_r>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	1ccd      	adds	r5, r1, #3
 800b6b8:	f025 0503 	bic.w	r5, r5, #3
 800b6bc:	3508      	adds	r5, #8
 800b6be:	2d0c      	cmp	r5, #12
 800b6c0:	bf38      	it	cc
 800b6c2:	250c      	movcc	r5, #12
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	db01      	blt.n	800b6ce <_malloc_r+0x1a>
 800b6ca:	42a9      	cmp	r1, r5
 800b6cc:	d903      	bls.n	800b6d6 <_malloc_r+0x22>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d6:	f000 f89d 	bl	800b814 <__malloc_lock>
 800b6da:	4921      	ldr	r1, [pc, #132]	; (800b760 <_malloc_r+0xac>)
 800b6dc:	680a      	ldr	r2, [r1, #0]
 800b6de:	4614      	mov	r4, r2
 800b6e0:	b99c      	cbnz	r4, 800b70a <_malloc_r+0x56>
 800b6e2:	4f20      	ldr	r7, [pc, #128]	; (800b764 <_malloc_r+0xb0>)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	b923      	cbnz	r3, 800b6f2 <_malloc_r+0x3e>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f000 f83c 	bl	800b768 <_sbrk_r>
 800b6f0:	6038      	str	r0, [r7, #0]
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f000 f837 	bl	800b768 <_sbrk_r>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d123      	bne.n	800b746 <_malloc_r+0x92>
 800b6fe:	230c      	movs	r3, #12
 800b700:	6033      	str	r3, [r6, #0]
 800b702:	4630      	mov	r0, r6
 800b704:	f000 f88c 	bl	800b820 <__malloc_unlock>
 800b708:	e7e3      	b.n	800b6d2 <_malloc_r+0x1e>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	1b5b      	subs	r3, r3, r5
 800b70e:	d417      	bmi.n	800b740 <_malloc_r+0x8c>
 800b710:	2b0b      	cmp	r3, #11
 800b712:	d903      	bls.n	800b71c <_malloc_r+0x68>
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	441c      	add	r4, r3
 800b718:	6025      	str	r5, [r4, #0]
 800b71a:	e004      	b.n	800b726 <_malloc_r+0x72>
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	42a2      	cmp	r2, r4
 800b720:	bf0c      	ite	eq
 800b722:	600b      	streq	r3, [r1, #0]
 800b724:	6053      	strne	r3, [r2, #4]
 800b726:	4630      	mov	r0, r6
 800b728:	f000 f87a 	bl	800b820 <__malloc_unlock>
 800b72c:	f104 000b 	add.w	r0, r4, #11
 800b730:	1d23      	adds	r3, r4, #4
 800b732:	f020 0007 	bic.w	r0, r0, #7
 800b736:	1ac2      	subs	r2, r0, r3
 800b738:	d0cc      	beq.n	800b6d4 <_malloc_r+0x20>
 800b73a:	1a1b      	subs	r3, r3, r0
 800b73c:	50a3      	str	r3, [r4, r2]
 800b73e:	e7c9      	b.n	800b6d4 <_malloc_r+0x20>
 800b740:	4622      	mov	r2, r4
 800b742:	6864      	ldr	r4, [r4, #4]
 800b744:	e7cc      	b.n	800b6e0 <_malloc_r+0x2c>
 800b746:	1cc4      	adds	r4, r0, #3
 800b748:	f024 0403 	bic.w	r4, r4, #3
 800b74c:	42a0      	cmp	r0, r4
 800b74e:	d0e3      	beq.n	800b718 <_malloc_r+0x64>
 800b750:	1a21      	subs	r1, r4, r0
 800b752:	4630      	mov	r0, r6
 800b754:	f000 f808 	bl	800b768 <_sbrk_r>
 800b758:	3001      	adds	r0, #1
 800b75a:	d1dd      	bne.n	800b718 <_malloc_r+0x64>
 800b75c:	e7cf      	b.n	800b6fe <_malloc_r+0x4a>
 800b75e:	bf00      	nop
 800b760:	20000728 	.word	0x20000728
 800b764:	2000072c 	.word	0x2000072c

0800b768 <_sbrk_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d06      	ldr	r5, [pc, #24]	; (800b784 <_sbrk_r+0x1c>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	f7f5 fe3c 	bl	80013f0 <_sbrk>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_sbrk_r+0x1a>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_sbrk_r+0x1a>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20000f0c 	.word	0x20000f0c

0800b788 <_raise_r>:
 800b788:	291f      	cmp	r1, #31
 800b78a:	b538      	push	{r3, r4, r5, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	d904      	bls.n	800b79c <_raise_r+0x14>
 800b792:	2316      	movs	r3, #22
 800b794:	6003      	str	r3, [r0, #0]
 800b796:	f04f 30ff 	mov.w	r0, #4294967295
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b79e:	b112      	cbz	r2, 800b7a6 <_raise_r+0x1e>
 800b7a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7a4:	b94b      	cbnz	r3, 800b7ba <_raise_r+0x32>
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 f830 	bl	800b80c <_getpid_r>
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7b6:	f000 b817 	b.w	800b7e8 <_kill_r>
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d00a      	beq.n	800b7d4 <_raise_r+0x4c>
 800b7be:	1c59      	adds	r1, r3, #1
 800b7c0:	d103      	bne.n	800b7ca <_raise_r+0x42>
 800b7c2:	2316      	movs	r3, #22
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	e7e7      	b.n	800b79a <_raise_r+0x12>
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	4798      	blx	r3
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e7e0      	b.n	800b79a <_raise_r+0x12>

0800b7d8 <raise>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <raise+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f7ff bfd3 	b.w	800b788 <_raise_r>
 800b7e2:	bf00      	nop
 800b7e4:	20000544 	.word	0x20000544

0800b7e8 <_kill_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_kill_r+0x20>)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	f7f5 fde1 	bl	80013bc <_kill>
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	d102      	bne.n	800b804 <_kill_r+0x1c>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b103      	cbz	r3, 800b804 <_kill_r+0x1c>
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	bd38      	pop	{r3, r4, r5, pc}
 800b806:	bf00      	nop
 800b808:	20000f0c 	.word	0x20000f0c

0800b80c <_getpid_r>:
 800b80c:	f7f5 bdce 	b.w	80013ac <_getpid>

0800b810 <__retarget_lock_acquire_recursive>:
 800b810:	4770      	bx	lr

0800b812 <__retarget_lock_release_recursive>:
 800b812:	4770      	bx	lr

0800b814 <__malloc_lock>:
 800b814:	4801      	ldr	r0, [pc, #4]	; (800b81c <__malloc_lock+0x8>)
 800b816:	f7ff bffb 	b.w	800b810 <__retarget_lock_acquire_recursive>
 800b81a:	bf00      	nop
 800b81c:	20000f05 	.word	0x20000f05

0800b820 <__malloc_unlock>:
 800b820:	4801      	ldr	r0, [pc, #4]	; (800b828 <__malloc_unlock+0x8>)
 800b822:	f7ff bff6 	b.w	800b812 <__retarget_lock_release_recursive>
 800b826:	bf00      	nop
 800b828:	20000f05 	.word	0x20000f05

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr

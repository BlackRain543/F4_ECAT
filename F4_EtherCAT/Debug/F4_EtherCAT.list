
F4_EtherCAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c928  0800c928  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c930  0800c930  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800c940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00000e14  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000f14  20000f14  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004467b  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ad4  00000000  00000000  000647ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0006b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c58  00000000  00000000  0006d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf29  00000000  00000000  0006eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b74  00000000  00000000  0009bbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea87b  00000000  00000000  000c473d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001aefb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008718  00000000  00000000  001af00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e8 	.word	0x0800b9e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800b9e8 	.word	0x0800b9e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800056c:	f001 f900 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f81c 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fb10 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 fac8 	bl	8000b0c <MX_DMA_Init>
  MX_I2C1_Init();
 800057c:	f000 f98c 	bl	8000898 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000580:	f000 f9b8 	bl	80008f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000584:	f000 f9ec 	bl	8000960 <MX_SPI2_Init>
  MX_DAC_Init();
 8000588:	f000 f952 	bl	8000830 <MX_DAC_Init>
  MX_ADC1_Init();
 800058c:	f000 f878 	bl	8000680 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000590:	f000 f8c8 	bl	8000724 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000594:	f000 f918 	bl	80007c8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 fa64 	bl	8000a64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fa8c 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a0:	f000 fa14 	bl	80009cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MainCpp();
 80005a4:	f009 fe98 	bl	800a2d8 <MainCpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x40>
	...

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00a fa8a 	bl	800aad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fe09 	bl	8003248 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 fbbe 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2105      	movs	r1, #5
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f86a 	bl	8003738 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 fba7 	bl	8000dbc <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_ADC1_Init+0x9c>)
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MX_ADC1_Init+0xa0>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_ADC1_Init+0x9c>)
 800069a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_ADC1_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC1_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_ADC1_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC1_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_ADC1_Init+0x9c>)
 80006bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_ADC1_Init+0x9c>)
 80006c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x9c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC1_Init+0x9c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC1_Init+0x9c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x9c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x9c>)
 80006e6:	f001 f8b5 	bl	8001854 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006f0:	f000 fb64 	bl	8000dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x9c>)
 8000706:	f001 fa17 	bl	8001b38 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000710:	f000 fb54 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000564 	.word	0x20000564
 8000720:	40012000 	.word	0x40012000

08000724 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000738:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <MX_ADC2_Init+0xa0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ADC2_Init+0x9c>)
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000742:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ADC2_Init+0x9c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000768:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ADC2_Init+0x9c>)
 800077c:	2201      	movs	r2, #1
 800077e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC2_Init+0x9c>)
 8000784:	2201      	movs	r2, #1
 8000786:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_ADC2_Init+0x9c>)
 800078a:	f001 f863 	bl	8001854 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000794:	f000 fb12 	bl	8000dbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000798:	2306      	movs	r3, #6
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC2_Init+0x9c>)
 80007aa:	f001 f9c5 	bl	8001b38 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80007b4:	f000 fb02 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000468 	.word	0x20000468
 80007c4:	40012100 	.word	0x40012100

080007c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_CAN1_Init+0x60>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_CAN1_Init+0x64>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_CAN1_Init+0x60>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_CAN1_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_CAN1_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_CAN1_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_CAN1_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_CAN1_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_CAN1_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_CAN1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_CAN1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_CAN1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_CAN1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_CAN1_Init+0x60>)
 8000816:	f001 fc2f 	bl	8002078 <HAL_CAN_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 facc 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200007a8 	.word	0x200007a8
 800082c:	40006400 	.word	0x40006400

08000830 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_DAC_Init+0x60>)
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MX_DAC_Init+0x64>)
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_DAC_Init+0x60>)
 8000846:	f001 fe24 	bl	8002492 <HAL_DAC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000850:	f000 fab4 	bl	8000dbc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000854:	2324      	movs	r3, #36	; 0x24
 8000856:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_DAC_Init+0x60>)
 8000864:	f001 fe37 	bl	80024d6 <HAL_DAC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800086e:	f000 faa5 	bl	8000dbc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	2210      	movs	r2, #16
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_DAC_Init+0x60>)
 800087a:	f001 fe2c 	bl	80024d6 <HAL_DAC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 fa9a 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200005f0 	.word	0x200005f0
 8000894:	40007400 	.word	0x40007400

08000898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <MX_I2C1_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x58>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2C1_Init+0x50>)
 80008d6:	f002 fb73 	bl	8002fc0 <HAL_I2C_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e0:	f000 fa6c 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200004b0 	.word	0x200004b0
 80008ec:	40005400 	.word	0x40005400
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI1_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <MX_SPI1_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI1_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI1_Init+0x64>)
 8000946:	f003 f8f3 	bl	8003b30 <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fa34 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000664 	.word	0x20000664
 800095c:	40013000 	.word	0x40013000

08000960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MX_SPI2_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI2_Init+0x64>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_SPI2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000994:	2208      	movs	r2, #8
 8000996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009b2:	f003 f8bd 	bl	8003b30 <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 f9fe 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000410 	.word	0x20000410
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009f2:	2227      	movs	r2, #39	; 0x27
 80009f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a12:	f003 fe35 	bl	8004680 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a1c:	f000 f9ce 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a2e:	f003 fedf 	bl	80047f0 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a38:	f000 f9c0 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a4a:	f004 f8d3 	bl	8004bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f9b2 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200006bc 	.word	0x200006bc

08000a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART1_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f004 f926 	bl	8004cec <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f989 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200005ac 	.word	0x200005ac
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f004 f8fc 	bl	8004cec <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f95f 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000704 	.word	0x20000704
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_DMA_Init+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f001 fc69 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b54:	2010      	movs	r0, #16
 8000b56:	f001 fc82 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2011      	movs	r0, #17
 8000b60:	f001 fc61 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b64:	2011      	movs	r0, #17
 8000b66:	f001 fc7a 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2038      	movs	r0, #56	; 0x38
 8000b70:	f001 fc59 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b74:	2038      	movs	r0, #56	; 0x38
 8000b76:	f001 fc72 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	203a      	movs	r0, #58	; 0x3a
 8000b80:	f001 fc51 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b84:	203a      	movs	r0, #58	; 0x3a
 8000b86:	f001 fc6a 	bl	800245e <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b7d      	ldr	r3, [pc, #500]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a7c      	ldr	r2, [pc, #496]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a75      	ldr	r2, [pc, #468]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b73      	ldr	r3, [pc, #460]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b6f      	ldr	r3, [pc, #444]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a6e      	ldr	r2, [pc, #440]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b68      	ldr	r3, [pc, #416]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a67      	ldr	r2, [pc, #412]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a60      	ldr	r2, [pc, #384]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_CTRL_Pin|LED7_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f242 0130 	movw	r1, #8240	; 0x2030
 8000c40:	485a      	ldr	r0, [pc, #360]	; (8000dac <MX_GPIO_Init+0x214>)
 8000c42:	f002 f9a3 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000c46:	2200      	movs	r2, #0
 8000c48:	f647 1103 	movw	r1, #30979	; 0x7903
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000c4e:	f002 f99d 	bl	8002f8c <HAL_GPIO_WritePin>
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	4856      	ldr	r0, [pc, #344]	; (8000db4 <MX_GPIO_Init+0x21c>)
 8000c5a:	f002 f997 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_CTRL_Pin */
  GPIO_InitStruct.Pin = RS485_CTRL_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	484d      	ldr	r0, [pc, #308]	; (8000dac <MX_GPIO_Init+0x214>)
 8000c78:	f001 ffec 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000c7c:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4846      	ldr	r0, [pc, #280]	; (8000dac <MX_GPIO_Init+0x214>)
 8000c92:	f001 ffdf 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC0_Pin SYNC1_Pin SPI2_IRQ_Pin */
  GPIO_InitStruct.Pin = SYNC0_Pin|SYNC1_Pin|SPI2_IRQ_Pin;
 8000c96:	f240 1303 	movw	r3, #259	; 0x103
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4841      	ldr	r0, [pc, #260]	; (8000db4 <MX_GPIO_Init+0x21c>)
 8000cae:	f001 ffd1 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin;
 8000cb2:	2330      	movs	r3, #48	; 0x30
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4838      	ldr	r0, [pc, #224]	; (8000dac <MX_GPIO_Init+0x214>)
 8000cca:	f001 ffc3 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin LED0_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000cce:	f647 1303 	movw	r3, #30979	; 0x7903
 8000cd2:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED0_Pin|SPI2_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000ce8:	f001 ffb4 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8000cec:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000d02:	f001 ffa7 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN7_Pin */
  GPIO_InitStruct.Pin = IN7_Pin;
 8000d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN7_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4825      	ldr	r0, [pc, #148]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000d1c:	f001 ff9a 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN6_Pin IN7C7_Pin IN4_Pin IN3_Pin
                           IN2_Pin IN1_Pin IN0_Pin */
  GPIO_InitStruct.Pin = IN6_Pin|IN7C7_Pin|IN4_Pin|IN3_Pin
 8000d20:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000d24:	617b      	str	r3, [r7, #20]
                          |IN2_Pin|IN1_Pin|IN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	481d      	ldr	r0, [pc, #116]	; (8000dac <MX_GPIO_Init+0x214>)
 8000d36:	f001 ff8d 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_GPIO_Init+0x21c>)
 8000d54:	f001 ff7e 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_LOADED_Pin */
  GPIO_InitStruct.Pin = EEPROM_LOADED_Pin;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EEPROM_LOADED_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_GPIO_Init+0x220>)
 8000d6c:	f001 ff72 	bl	8002c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2006      	movs	r0, #6
 8000d76:	f001 fb56 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d7a:	2006      	movs	r0, #6
 8000d7c:	f001 fb6f 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2007      	movs	r0, #7
 8000d86:	f001 fb4e 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f001 fb67 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2017      	movs	r0, #23
 8000d96:	f001 fb46 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d9a:	2017      	movs	r0, #23
 8000d9c:	f001 fb5f 	bl	800245e <HAL_NVIC_EnableIRQ>

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a5e      	ldr	r2, [pc, #376]	; (8000fb0 <HAL_ADC_MspInit+0x198>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d158      	bne.n	8000eec <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a5c      	ldr	r2, [pc, #368]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b5a      	ldr	r3, [pc, #360]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <HAL_ADC_MspInit+0x1a0>)
 8000e86:	f001 fee5 	bl	8002c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_ADC_MspInit+0x1a8>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e90:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb2:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eba:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ece:	483b      	ldr	r0, [pc, #236]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ed0:	f001 fb50 	bl	8002574 <HAL_DMA_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000eda:	f7ff ff6f 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a36      	ldr	r2, [pc, #216]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee4:	4a35      	ldr	r2, [pc, #212]	; (8000fbc <HAL_ADC_MspInit+0x1a4>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000eea:	e05d      	b.n	8000fa8 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_ADC_MspInit+0x1ac>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d158      	bne.n	8000fa8 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a2d      	ldr	r2, [pc, #180]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_ADC_MspInit+0x19c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <HAL_ADC_MspInit+0x1a0>)
 8000f42:	f001 fe87 	bl	8002c54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f48:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_ADC_MspInit+0x1b4>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000f8e:	f001 faf1 	bl	8002574 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8000f98:	f7ff ff10 	bl	8000dbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_ADC_MspInit+0x1b0>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fa8:	bf00      	nop
 8000faa:	3730      	adds	r7, #48	; 0x30
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	20000604 	.word	0x20000604
 8000fc0:	40026410 	.word	0x40026410
 8000fc4:	40012100 	.word	0x40012100
 8000fc8:	20000748 	.word	0x20000748
 8000fcc:	40026440 	.word	0x40026440

08000fd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_CAN_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8000ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_CAN_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800102a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800103c:	2309      	movs	r3, #9
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_CAN_MspInit+0x8c>)
 8001048:	f001 fe04 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40006400 	.word	0x40006400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_DAC_MspInit+0x140>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 808a 	bne.w	8001198 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 800108e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <HAL_DAC_MspInit+0x144>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010bc:	2330      	movs	r3, #48	; 0x30
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c0:	2303      	movs	r3, #3
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4836      	ldr	r0, [pc, #216]	; (80011a8 <HAL_DAC_MspInit+0x148>)
 80010d0:	f001 fdc0 	bl	8002c54 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010d6:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <HAL_DAC_MspInit+0x150>)
 80010d8:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010dc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010e4:	2240      	movs	r2, #64	; 0x40
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800111a:	4824      	ldr	r0, [pc, #144]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 800111c:	f001 fa2a 	bl	8002574 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001126:	f7ff fe49 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_DAC_MspInit+0x14c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_DAC_MspInit+0x158>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 800113e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001142:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001156:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 800115a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 800117e:	f001 f9f9 	bl	8002574 <HAL_DMA_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001188:	f7ff fe18 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_DAC_MspInit+0x154>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40007400 	.word	0x40007400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	20000504 	.word	0x20000504
 80011b0:	40026088 	.word	0x40026088
 80011b4:	200007d0 	.word	0x200007d0
 80011b8:	400260a0 	.word	0x400260a0

080011bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_I2C_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12b      	bne.n	8001236 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_I2C_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_I2C_MspInit+0x88>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_I2C_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800120a:	2304      	movs	r3, #4
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <HAL_I2C_MspInit+0x8c>)
 8001216:	f001 fd1d 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_I2C_MspInit+0x88>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0x88>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_I2C_MspInit+0x88>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40005400 	.word	0x40005400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020400 	.word	0x40020400

0800124c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a41      	ldr	r2, [pc, #260]	; (8001370 <HAL_SPI_MspInit+0x124>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12c      	bne.n	80012c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_SPI_MspInit+0x128>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012a6:	2338      	movs	r3, #56	; 0x38
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b6:	2305      	movs	r3, #5
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	482d      	ldr	r0, [pc, #180]	; (8001378 <HAL_SPI_MspInit+0x12c>)
 80012c2:	f001 fcc7 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c6:	e04f      	b.n	8001368 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_SPI_MspInit+0x130>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14a      	bne.n	8001368 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_SPI_MspInit+0x128>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_SPI_MspInit+0x128>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_SPI_MspInit+0x128>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_SPI_MspInit+0x128>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_SPI_MspInit+0x128>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_SPI_MspInit+0x128>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_SPI_MspInit+0x128>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001326:	230c      	movs	r3, #12
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001336:	2305      	movs	r3, #5
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <HAL_SPI_MspInit+0x134>)
 8001342:	f001 fc87 	bl	8002c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001358:	2305      	movs	r3, #5
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_SPI_MspInit+0x12c>)
 8001364:	f001 fc76 	bl	8002c54 <HAL_GPIO_Init>
}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013000 	.word	0x40013000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400
 800137c:	40003800 	.word	0x40003800
 8001380:	40020800 	.word	0x40020800

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d115      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f001 f835 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f001 f84e 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_UART_MspInit+0xe8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12d      	bne.n	800144e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_UART_MspInit+0xec>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_UART_MspInit+0xec>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800142a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	481e      	ldr	r0, [pc, #120]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001448:	f001 fc04 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800144c:	e030      	b.n	80014b0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0xf4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d12b      	bne.n	80014b0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_MspInit+0xec>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a16      	ldr	r2, [pc, #88]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_UART_MspInit+0xec>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_UART_MspInit+0xec>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_UART_MspInit+0xec>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_UART_MspInit+0xec>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001490:	230c      	movs	r3, #12
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a0:	2307      	movs	r3, #7
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 80014ac:	f001 fbd2 	bl	8002c54 <HAL_GPIO_Init>
}
 80014b0:	bf00      	nop
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40004400 	.word	0x40004400

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f97e 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Stream5_IRQHandler+0x10>)
 8001522:	f001 f92d 	bl	8002780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000504 	.word	0x20000504

08001530 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream6_IRQHandler+0x10>)
 8001536:	f001 f923 	bl	8002780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200007d0 	.word	0x200007d0

08001544 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <DMA2_Stream0_IRQHandler+0x10>)
 800154a:	f001 f919 	bl	8002780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000604 	.word	0x20000604

08001558 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA2_Stream2_IRQHandler+0x10>)
 800155e:	f001 f90f 	bl	8002780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000748 	.word	0x20000748

0800156c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001586:	f009 fa4b 	bl	800aa20 <__errno>
 800158a:	4603      	mov	r3, r0
 800158c:	2216      	movs	r2, #22
 800158e:	601a      	str	r2, [r3, #0]
	return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_exit>:

void _exit (int status)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ae:	e7fe      	b.n	80015ae <_exit+0x12>

080015b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e00a      	b.n	80015d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015c2:	f3af 8000 	nop.w
 80015c6:	4601      	mov	r1, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf0      	blt.n	80015c2 <_read+0x12>
	}

return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e009      	b.n	8001610 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf1      	blt.n	80015fc <_write+0x12>
	}
	return len;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_close>:

int _close(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
	return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164a:	605a      	str	r2, [r3, #4]
	return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_isatty>:

int _isatty(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	return 1;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f009 f9b0 	bl	800aa20 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20020000 	.word	0x20020000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	2000011c 	.word	0x2000011c
 80016f4:	20000f18 	.word	0x20000f18

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffd7 	bl	80016f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f009 f981 	bl	800aa50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7fe ff0b 	bl	8000568 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001760:	0800c940 	.word	0x0800c940
  ldr r2, =_sbss
 8001764:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001768:	20000f14 	.word	0x20000f14

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 fe39 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fb10 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fe51 	bl	800247a <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 fe19 	bl	8002426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008
 8001838:	20000830 	.word	0x20000830

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000830 	.word	0x20000830

08001854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e033      	b.n	80018d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fad0 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fa68 	bl	8001d7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
 80018c2:	e001      	b.n	80018c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Start_DMA+0x1e>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e0e9      	b.n	8001ace <HAL_ADC_Start_DMA+0x1f2>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d018      	beq.n	8001942 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001920:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_ADC_Start_DMA+0x1fc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6d      	ldr	r2, [pc, #436]	; (8001adc <HAL_ADC_Start_DMA+0x200>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9a      	lsrs	r2, r3, #18
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001934:	e002      	b.n	800193c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	3b01      	subs	r3, #1
 800193a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d107      	bne.n	8001962 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 80a1 	bne.w	8001ab4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b0:	d106      	bne.n	80019c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f023 0206 	bic.w	r2, r3, #6
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
 80019be:	e002      	b.n	80019c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_ADC_Start_DMA+0x204>)
 80019d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	4a43      	ldr	r2, [pc, #268]	; (8001ae4 <HAL_ADC_Start_DMA+0x208>)
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <HAL_ADC_Start_DMA+0x20c>)
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	4a41      	ldr	r2, [pc, #260]	; (8001aec <HAL_ADC_Start_DMA+0x210>)
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	334c      	adds	r3, #76	; 0x4c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f000 fe54 	bl	80026d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12a      	bne.n	8001a8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2d      	ldr	r2, [pc, #180]	; (8001af0 <HAL_ADC_Start_DMA+0x214>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d015      	beq.n	8001a6a <HAL_ADC_Start_DMA+0x18e>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <HAL_ADC_Start_DMA+0x218>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x178>
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_ADC_Start_DMA+0x204>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_ADC_Start_DMA+0x21c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d136      	bne.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_ADC_Start_DMA+0x204>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d130      	bne.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d129      	bne.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e020      	b.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_ADC_Start_DMA+0x214>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d11b      	bne.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d114      	bne.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	e00b      	b.n	8001acc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	08001f75 	.word	0x08001f75
 8001ae8:	0800202f 	.word	0x0800202f
 8001aec:	0800204b 	.word	0x0800204b
 8001af0:	40012000 	.word	0x40012000
 8001af4:	40012100 	.word	0x40012100
 8001af8:	40012200 	.word	0x40012200

08001afc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e105      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x228>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d925      	bls.n	8001bb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3b1e      	subs	r3, #30
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43da      	mvns	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	400a      	ands	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68d9      	ldr	r1, [r3, #12]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3b1e      	subs	r3, #30
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e022      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6919      	ldr	r1, [r3, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6919      	ldr	r1, [r3, #16]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4403      	add	r3, r0
 8001bec:	409a      	lsls	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d824      	bhi.n	8001c48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b05      	subs	r3, #5
 8001c10:	221f      	movs	r2, #31
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3b05      	subs	r3, #5
 8001c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
 8001c46:	e04c      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d824      	bhi.n	8001c9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b23      	subs	r3, #35	; 0x23
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	400a      	ands	r2, r1
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b23      	subs	r3, #35	; 0x23
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	e023      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b41      	subs	r3, #65	; 0x41
 8001cac:	221f      	movs	r2, #31
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b41      	subs	r3, #65	; 0x41
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_ADC_ConfigChannel+0x234>)
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_ADC_ConfigChannel+0x238>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d109      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1cc>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b12      	cmp	r3, #18
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_ADC_ConfigChannel+0x238>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d123      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x21e>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x1e6>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d11b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d111      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_ADC_ConfigChannel+0x23c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_ADC_ConfigChannel+0x240>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9a      	lsrs	r2, r3, #18
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	40012000 	.word	0x40012000
 8001d74:	20000000 	.word	0x20000000
 8001d78:	431bde83 	.word	0x431bde83

08001d7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d84:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <ADC_Init+0x1f0>)
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	021a      	lsls	r2, r3, #8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <ADC_Init+0x1f4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e00f      	b.n	8001e7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0202 	bic.w	r2, r2, #2
 8001e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	005a      	lsls	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	035a      	lsls	r2, r3, #13
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	e007      	b.n	8001ef0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	051a      	lsls	r2, r3, #20
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f32:	025a      	lsls	r2, r3, #9
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	029a      	lsls	r2, r3, #10
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40012300 	.word	0x40012300
 8001f70:	0f000001 	.word	0x0f000001

08001f74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13c      	bne.n	8002008 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12b      	bne.n	8002000 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d127      	bne.n	8002000 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d119      	bne.n	8002000 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0220 	bic.w	r2, r2, #32
 8001fda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff fd7b 	bl	8001afc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002006:	e00e      	b.n	8002026 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff fd85 	bl	8001b24 <HAL_ADC_ErrorCallback>
}
 800201a:	e004      	b.n	8002026 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fd67 	bl	8001b10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f043 0204 	orr.w	r2, r3, #4
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff fd5a 	bl	8001b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0ed      	b.n	8002266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe ff9a 	bl	8000fd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7ff fbc6 	bl	800183c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b2:	e012      	b.n	80020da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b4:	f7ff fbc2 	bl	800183c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b0a      	cmp	r3, #10
 80020c0:	d90b      	bls.n	80020da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0c5      	b.n	8002266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0e5      	beq.n	80020b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0202 	bic.w	r2, r2, #2
 80020f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff fba0 	bl	800183c <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020fe:	e012      	b.n	8002126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002100:	f7ff fb9c 	bl	800183c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b0a      	cmp	r3, #10
 800210c:	d90b      	bls.n	8002126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2205      	movs	r2, #5
 800211e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e09f      	b.n	8002266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e5      	bne.n	8002100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e5b      	ldrb	r3, [r3, #25]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7e9b      	ldrb	r3, [r3, #26]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0220 	bic.w	r2, r2, #32
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7edb      	ldrb	r3, [r3, #27]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0210 	bic.w	r2, r2, #16
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e007      	b.n	80021dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0210 	orr.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0208 	bic.w	r2, r2, #8
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7f5b      	ldrb	r3, [r3, #29]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0204 	orr.w	r2, r2, #4
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	ea42 0103 	orr.w	r1, r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f7ff ff8e 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff29 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff3e 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff8e 	bl	8002364 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5d 	bl	8002310 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff31 	bl	80022d4 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa2 	bl	80023cc <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e014      	b.n	80024ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe fdd3 	bl	8001060 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	795b      	ldrb	r3, [r3, #5]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_DAC_ConfigChannel+0x18>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e03c      	b.n	8002568 <HAL_DAC_ConfigChannel+0x92>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2202      	movs	r2, #2
 80024f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	f640 72fe 	movw	r2, #4094	; 0xffe
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	22c0      	movs	r2, #192	; 0xc0
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff f95c 	bl	800183c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e099      	b.n	80026c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b0:	e00f      	b.n	80025d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b2:	f7ff f943 	bl	800183c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d908      	bls.n	80025d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2203      	movs	r2, #3
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e078      	b.n	80026c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e8      	bne.n	80025b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_DMA_Init+0x158>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4313      	orrs	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0307 	bic.w	r3, r3, #7
 8002652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b04      	cmp	r3, #4
 8002664:	d117      	bne.n	8002696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00e      	beq.n	8002696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa6f 	bl	8002b5c <DMA_CheckFifoParam>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002692:	2301      	movs	r3, #1
 8002694:	e016      	b.n	80026c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa26 	bl	8002af0 <DMA_CalcBaseAndBitshift>
 80026a4:	4603      	mov	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	223f      	movs	r2, #63	; 0x3f
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	f010803f 	.word	0xf010803f

080026d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_DMA_Start_IT+0x26>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e040      	b.n	8002778 <HAL_DMA_Start_IT+0xa8>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d12f      	bne.n	800276a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f9b8 	bl	8002a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	223f      	movs	r2, #63	; 0x3f
 800272a:	409a      	lsls	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0216 	orr.w	r2, r2, #22
 800273e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0208 	orr.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e005      	b.n	8002776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800278c:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <HAL_DMA_IRQHandler+0x258>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a92      	ldr	r2, [pc, #584]	; (80029dc <HAL_DMA_IRQHandler+0x25c>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2208      	movs	r2, #8
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0204 	bic.w	r2, r2, #4
 80027d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	2208      	movs	r2, #8
 80027da:	409a      	lsls	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	2201      	movs	r2, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2201      	movs	r2, #1
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f043 0202 	orr.w	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2204      	movs	r2, #4
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00b      	beq.n	8002858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2204      	movs	r2, #4
 8002846:	409a      	lsls	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2210      	movs	r2, #16
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d043      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d03c      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	2210      	movs	r2, #16
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d024      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
 80028ae:	e01f      	b.n	80028f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01b      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
 80028c0:	e016      	b.n	80028f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0208 	bic.w	r2, r2, #8
 80028de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	2220      	movs	r2, #32
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 808e 	beq.w	8002a1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8086 	beq.w	8002a1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2220      	movs	r2, #32
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b05      	cmp	r3, #5
 8002928:	d136      	bne.n	8002998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0216 	bic.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_DMA_IRQHandler+0x1da>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	223f      	movs	r2, #63	; 0x3f
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d07d      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
        }
        return;
 8002996:	e078      	b.n	8002a8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01c      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d030      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
 80029c4:	e02b      	b.n	8002a1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e022      	b.n	8002a1e <HAL_DMA_IRQHandler+0x29e>
 80029d8:	20000000 	.word	0x20000000
 80029dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0210 	bic.w	r2, r2, #16
 80029fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d032      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d022      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2205      	movs	r2, #5
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d307      	bcc.n	8002a66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f2      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x2ca>
 8002a64:	e000      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a66:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a8a:	bf00      	nop
    }
  }
}
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop

08002a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d108      	bne.n	8002ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ad2:	e007      	b.n	8002ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	3b10      	subs	r3, #16
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <DMA_CalcBaseAndBitshift+0x64>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b0a:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <DMA_CalcBaseAndBitshift+0x68>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d909      	bls.n	8002b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b30:	e007      	b.n	8002b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	aaaaaaab 	.word	0xaaaaaaab
 8002b58:	0800ba70 	.word	0x0800ba70

08002b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11f      	bne.n	8002bb6 <DMA_CheckFifoParam+0x5a>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d856      	bhi.n	8002c2a <DMA_CheckFifoParam+0xce>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <DMA_CheckFifoParam+0x28>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba7 	.word	0x08002ba7
 8002b8c:	08002b95 	.word	0x08002b95
 8002b90:	08002c2b 	.word	0x08002c2b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d046      	beq.n	8002c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e043      	b.n	8002c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bae:	d140      	bne.n	8002c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e03d      	b.n	8002c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	d121      	bne.n	8002c04 <DMA_CheckFifoParam+0xa8>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d837      	bhi.n	8002c36 <DMA_CheckFifoParam+0xda>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <DMA_CheckFifoParam+0x70>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002be3 	.word	0x08002be3
 8002bd4:	08002bdd 	.word	0x08002bdd
 8002bd8:	08002bf5 	.word	0x08002bf5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e030      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d025      	beq.n	8002c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf2:	e022      	b.n	8002c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bfc:	d11f      	bne.n	8002c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c02:	e01c      	b.n	8002c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d903      	bls.n	8002c12 <DMA_CheckFifoParam+0xb6>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d003      	beq.n	8002c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c10:	e018      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      break;
 8002c16:	e015      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e00b      	b.n	8002c42 <DMA_CheckFifoParam+0xe6>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e00a      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e008      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e006      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e004      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
    }
  } 
  
  return status; 
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e16b      	b.n	8002f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 815a 	bne.w	8002f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b4 	beq.w	8002f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_GPIO_Init+0x310>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x314>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_Init+0x226>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_GPIO_Init+0x318>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x222>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x31c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x21e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x21a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x324>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x216>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x328>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_GPIO_Init+0x32c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_GPIO_Init+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x20a>
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	e00e      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e00c      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e62:	2306      	movs	r3, #6
 8002e64:	e00a      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e66:	2305      	movs	r3, #5
 8002e68:	e008      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e004      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x228>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f002 0203 	and.w	r2, r2, #3
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	4093      	lsls	r3, r2
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8c:	4935      	ldr	r1, [pc, #212]	; (8002f64 <HAL_GPIO_Init+0x310>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ebe:	4a32      	ldr	r2, [pc, #200]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f3c:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <HAL_GPIO_Init+0x334>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	f67f ae90 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40021c00 	.word	0x40021c00
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa8:	e003      	b.n	8002fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e12b      	b.n	800322a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f8e8 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003024:	f000 fd5c 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a81      	ldr	r2, [pc, #516]	; (8003234 <HAL_I2C_Init+0x274>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d807      	bhi.n	8003044 <HAL_I2C_Init+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_I2C_Init+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e006      	b.n	8003052 <HAL_I2C_Init+0x92>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a7d      	ldr	r2, [pc, #500]	; (800323c <HAL_I2C_Init+0x27c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0e7      	b.n	800322a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a78      	ldr	r2, [pc, #480]	; (8003240 <HAL_I2C_Init+0x280>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a6a      	ldr	r2, [pc, #424]	; (8003234 <HAL_I2C_Init+0x274>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d802      	bhi.n	8003094 <HAL_I2C_Init+0xd4>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	e009      	b.n	80030a8 <HAL_I2C_Init+0xe8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a69      	ldr	r2, [pc, #420]	; (8003244 <HAL_I2C_Init+0x284>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	495c      	ldr	r1, [pc, #368]	; (8003234 <HAL_I2C_Init+0x274>)
 80030c4:	428b      	cmp	r3, r1
 80030c6:	d819      	bhi.n	80030fc <HAL_I2C_Init+0x13c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e59      	subs	r1, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030dc:	400b      	ands	r3, r1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_I2C_Init+0x138>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e59      	subs	r1, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f6:	e051      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e04f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HAL_I2C_Init+0x168>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e012      	b.n	800314e <HAL_I2C_Init+0x18e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x196>
 8003152:	2301      	movs	r3, #1
 8003154:	e022      	b.n	800319c <HAL_I2C_Init+0x1dc>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <HAL_I2C_Init+0x1bc>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	440b      	add	r3, r1
 800316c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	e00f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6911      	ldr	r1, [r2, #16]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	000186a0 	.word	0x000186a0
 8003238:	001e847f 	.word	0x001e847f
 800323c:	003d08ff 	.word	0x003d08ff
 8003240:	431bde83 	.word	0x431bde83
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e264      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d075      	beq.n	8003352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	4ba3      	ldr	r3, [pc, #652]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d00c      	beq.n	800328c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4ba0      	ldr	r3, [pc, #640]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	2b08      	cmp	r3, #8
 800327c:	d112      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327e:	4b9d      	ldr	r3, [pc, #628]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328a:	d10b      	bne.n	80032a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	4b99      	ldr	r3, [pc, #612]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05b      	beq.n	8003350 <HAL_RCC_OscConfig+0x108>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d157      	bne.n	8003350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e23f      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d106      	bne.n	80032bc <HAL_RCC_OscConfig+0x74>
 80032ae:	4b91      	ldr	r3, [pc, #580]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a90      	ldr	r2, [pc, #576]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x98>
 80032c6:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a8a      	ldr	r2, [pc, #552]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xb0>
 80032e0:	4b84      	ldr	r3, [pc, #528]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fa9c 	bl	800183c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe fa98 	bl	800183c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e204      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xc0>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe fa88 	bl	800183c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fa84 	bl	800183c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1f0      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0xe8>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336a:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1c4      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4952      	ldr	r1, [pc, #328]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_RCC_OscConfig+0x2b0>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe fa3d 	bl	800183c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe fa39 	bl	800183c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1a5      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4940      	ldr	r1, [pc, #256]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0x2b0>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fa1c 	bl	800183c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe fa18 	bl	800183c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e184      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d030      	beq.n	8003494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_RCC_OscConfig+0x2b4>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe f9fc 	bl	800183c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003448:	f7fe f9f8 	bl	800183c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e164      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x200>
 8003466:	e015      	b.n	8003494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x2b4>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe f9e5 	bl	800183c <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe f9e1 	bl	800183c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e14d      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a0 	beq.w	80035e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_RCC_OscConfig+0x2b8>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7fe f9a7 	bl	800183c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	e011      	b.n	8003516 <HAL_RCC_OscConfig+0x2ce>
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470000 	.word	0x42470000
 80034fc:	42470e80 	.word	0x42470e80
 8003500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003504:	f7fe f99a 	bl	800183c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e106      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b85      	ldr	r3, [pc, #532]	; (800372c <HAL_RCC_OscConfig+0x4e4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x2f0>
 800352a:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x32a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x312>
 8003540:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a7a      	ldr	r2, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b78      	ldr	r3, [pc, #480]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a77      	ldr	r2, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x32a>
 800355a:	4b75      	ldr	r3, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a74      	ldr	r2, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a71      	ldr	r2, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe f95f 	bl	800183c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe f95b 	bl	800183c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0c5      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x33a>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f949 	bl	800183c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fe f945 	bl	800183c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0af      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 809b 	beq.w	8003722 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d05c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d141      	bne.n	8003684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <HAL_RCC_OscConfig+0x4ec>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe f919 	bl	800183c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe f915 	bl	800183c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e081      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	019b      	lsls	r3, r3, #6
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003656:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x4ec>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe f8ee 	bl	800183c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe f8ea 	bl	800183c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e056      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x41c>
 8003682:	e04e      	b.n	8003722 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x4ec>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fe f8d7 	bl	800183c <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe f8d3 	bl	800183c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e03f      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x44a>
 80036b0:	e037      	b.n	8003722 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e032      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036be:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d028      	beq.n	800371e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d121      	bne.n	800371e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d11a      	bne.n	800371e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d107      	bne.n	800371e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40007000 	.word	0x40007000
 8003730:	40023800 	.word	0x40023800
 8003734:	42470060 	.word	0x42470060

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0cc      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d90c      	bls.n	8003774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d044      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d119      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e067      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4934      	ldr	r1, [pc, #208]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe f808 	bl	800183c <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe f804 	bl	800183c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e04f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d20c      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd ff68 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	0800ba58 	.word	0x0800ba58
 80038fc:	20000000 	.word	0x20000000
 8003900:	20000004 	.word	0x20000004

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391c:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d00d      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x40>
 8003928:	2b08      	cmp	r3, #8
 800392a:	f200 80bd 	bhi.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x34>
 8003932:	2b04      	cmp	r3, #4
 8003934:	d003      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x3a>
 8003936:	e0b7      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800393a:	60bb      	str	r3, [r7, #8]
       break;
 800393c:	e0b7      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393e:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003940:	60bb      	str	r3, [r7, #8]
      break;
 8003942:	e0b4      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003944:	4b5d      	ldr	r3, [pc, #372]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800394c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394e:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04d      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395a:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	461a      	mov	r2, r3
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	ea02 0800 	and.w	r8, r2, r0
 8003972:	ea03 0901 	and.w	r9, r3, r1
 8003976:	4640      	mov	r0, r8
 8003978:	4649      	mov	r1, r9
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	014b      	lsls	r3, r1, #5
 8003984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003988:	0142      	lsls	r2, r0, #5
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	ebb0 0008 	subs.w	r0, r0, r8
 8003992:	eb61 0109 	sbc.w	r1, r1, r9
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	018b      	lsls	r3, r1, #6
 80039a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039a4:	0182      	lsls	r2, r0, #6
 80039a6:	1a12      	subs	r2, r2, r0
 80039a8:	eb63 0301 	sbc.w	r3, r3, r1
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	00d9      	lsls	r1, r3, #3
 80039b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ba:	00d0      	lsls	r0, r2, #3
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	eb12 0208 	adds.w	r2, r2, r8
 80039c4:	eb43 0309 	adc.w	r3, r3, r9
 80039c8:	f04f 0000 	mov.w	r0, #0
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	0259      	lsls	r1, r3, #9
 80039d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039d6:	0250      	lsls	r0, r2, #9
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	f7fc fc42 	bl	8000270 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e04a      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b31      	ldr	r3, [pc, #196]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	ea02 0400 	and.w	r4, r2, r0
 8003a0e:	ea03 0501 	and.w	r5, r3, r1
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	014b      	lsls	r3, r1, #5
 8003a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a24:	0142      	lsls	r2, r0, #5
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	1b00      	subs	r0, r0, r4
 8003a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	018b      	lsls	r3, r1, #6
 8003a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a3e:	0182      	lsls	r2, r0, #6
 8003a40:	1a12      	subs	r2, r2, r0
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	f04f 0000 	mov.w	r0, #0
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	00d9      	lsls	r1, r3, #3
 8003a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a54:	00d0      	lsls	r0, r2, #3
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	1912      	adds	r2, r2, r4
 8003a5c:	eb45 0303 	adc.w	r3, r5, r3
 8003a60:	f04f 0000 	mov.w	r0, #0
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	0299      	lsls	r1, r3, #10
 8003a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a6e:	0290      	lsls	r0, r2, #10
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	f7fc fbf6 	bl	8000270 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	60bb      	str	r3, [r7, #8]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aaa:	60bb      	str	r3, [r7, #8]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	68bb      	ldr	r3, [r7, #8]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	0800ba68 	.word	0x0800ba68

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b0c:	f7ff ffdc 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0b5b      	lsrs	r3, r3, #13
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	0800ba68 	.word	0x0800ba68

08003b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07b      	b.n	8003c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b52:	d009      	beq.n	8003b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
 8003b5a:	e005      	b.n	8003b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fb62 	bl	800124c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	ea42 0103 	orr.w	r1, r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0104 	and.w	r1, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0210 	and.w	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b088      	sub	sp, #32
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_SPI_Transmit+0x22>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e126      	b.n	8003eb2 <HAL_SPI_Transmit+0x270>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c6c:	f7fd fde6 	bl	800183c <HAL_GetTick>
 8003c70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d002      	beq.n	8003c88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c86:	e10b      	b.n	8003ea0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Transmit+0x52>
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c98:	e102      	b.n	8003ea0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce0:	d10f      	bne.n	8003d02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d007      	beq.n	8003d20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d28:	d14b      	bne.n	8003dc2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_Transmit+0xf6>
 8003d32:	8afb      	ldrh	r3, [r7, #22]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d13e      	bne.n	8003db6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d5c:	e02b      	b.n	8003db6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d112      	bne.n	8003d92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d90:	e011      	b.n	8003db6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d92:	f7fd fd53 	bl	800183c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d803      	bhi.n	8003daa <HAL_SPI_Transmit+0x168>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d102      	bne.n	8003db0 <HAL_SPI_Transmit+0x16e>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003db4:	e074      	b.n	8003ea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ce      	bne.n	8003d5e <HAL_SPI_Transmit+0x11c>
 8003dc0:	e04c      	b.n	8003e5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Transmit+0x18e>
 8003dca:	8afb      	ldrh	r3, [r7, #22]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d140      	bne.n	8003e52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	7812      	ldrb	r2, [r2, #0]
 8003ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003df6:	e02c      	b.n	8003e52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d113      	bne.n	8003e2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	7812      	ldrb	r2, [r2, #0]
 8003e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e2c:	e011      	b.n	8003e52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2e:	f7fd fd05 	bl	800183c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d803      	bhi.n	8003e46 <HAL_SPI_Transmit+0x204>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_Transmit+0x20a>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e50:	e026      	b.n	8003ea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1cd      	bne.n	8003df8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fbcb 	bl	80045fc <SPI_EndRxTxTransaction>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e000      	b.n	8003ea0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af02      	add	r7, sp, #8
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed6:	d112      	bne.n	8003efe <HAL_SPI_Receive+0x44>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10e      	bne.n	8003efe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f8f1 	bl	80040dc <HAL_SPI_TransmitReceive>
 8003efa:	4603      	mov	r3, r0
 8003efc:	e0ea      	b.n	80040d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_SPI_Receive+0x52>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0e3      	b.n	80040d4 <HAL_SPI_Receive+0x21a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f14:	f7fd fc92 	bl	800183c <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d002      	beq.n	8003f2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f2a:	e0ca      	b.n	80040c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_SPI_Receive+0x7e>
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f3c:	e0c1      	b.n	80040c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2204      	movs	r2, #4
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f84:	d10f      	bne.n	8003fa6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d007      	beq.n	8003fc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d162      	bne.n	8004092 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fcc:	e02e      	b.n	800402c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d115      	bne.n	8004008 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f103 020c 	add.w	r2, r3, #12
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004006:	e011      	b.n	800402c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004008:	f7fd fc18 	bl	800183c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d803      	bhi.n	8004020 <HAL_SPI_Receive+0x166>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d102      	bne.n	8004026 <HAL_SPI_Receive+0x16c>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	75fb      	strb	r3, [r7, #23]
          goto error;
 800402a:	e04a      	b.n	80040c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1cb      	bne.n	8003fce <HAL_SPI_Receive+0x114>
 8004036:	e031      	b.n	800409c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d113      	bne.n	800406e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	b292      	uxth	r2, r2
 8004052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800406c:	e011      	b.n	8004092 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fd fbe5 	bl	800183c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Receive+0x1cc>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Receive+0x1d2>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004090:	e017      	b.n	80040c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1cd      	bne.n	8004038 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fa45 	bl	8004530 <SPI_EndRxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
 80040be:	e000      	b.n	80040c2 <HAL_SPI_Receive+0x208>
  }

error :
 80040c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	; 0x30
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ea:	2301      	movs	r3, #1
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x26>
 80040fe:	2302      	movs	r3, #2
 8004100:	e18a      	b.n	8004418 <HAL_SPI_TransmitReceive+0x33c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410a:	f7fd fb97 	bl	800183c <HAL_GetTick>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004128:	2b01      	cmp	r3, #1
 800412a:	d00f      	beq.n	800414c <HAL_SPI_TransmitReceive+0x70>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004132:	d107      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x68>
 800413c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004140:	2b04      	cmp	r3, #4
 8004142:	d003      	beq.n	800414c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800414a:	e15b      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_SPI_TransmitReceive+0x82>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x82>
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004164:	e14e      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b04      	cmp	r3, #4
 8004170:	d003      	beq.n	800417a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d007      	beq.n	80041ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d178      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x10a>
 80041e0:	8b7b      	ldrh	r3, [r7, #26]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d166      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420a:	e053      	b.n	80042b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d11b      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x176>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d016      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x176>
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d113      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d119      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x1b8>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d014      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	b292      	uxth	r2, r2
 8004276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004294:	f7fd fad2 	bl	800183c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d807      	bhi.n	80042b4 <HAL_SPI_TransmitReceive+0x1d8>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d003      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042b2:	e0a7      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1a6      	bne.n	800420c <HAL_SPI_TransmitReceive+0x130>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1a1      	bne.n	800420c <HAL_SPI_TransmitReceive+0x130>
 80042c8:	e07c      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x1fc>
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d16b      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fe:	e057      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d11c      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x26c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d017      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x26c>
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d114      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d119      	bne.n	800438a <HAL_SPI_TransmitReceive+0x2ae>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d014      	beq.n	800438a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800438a:	f7fd fa57 	bl	800183c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004396:	429a      	cmp	r2, r3
 8004398:	d803      	bhi.n	80043a2 <HAL_SPI_TransmitReceive+0x2c6>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d102      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x2cc>
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043ae:	e029      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1a2      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x224>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d19d      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f917 	bl	80045fc <SPI_EndRxTxTransaction>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043e0:	e010      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e000      	b.n	8004404 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004418:	4618      	mov	r0, r3
 800441a:	3730      	adds	r7, #48	; 0x30
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004430:	f7fd fa04 	bl	800183c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	4413      	add	r3, r2
 800443e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004440:	f7fd f9fc 	bl	800183c <HAL_GetTick>
 8004444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	015b      	lsls	r3, r3, #5
 800444c:	0d1b      	lsrs	r3, r3, #20
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	e054      	b.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d050      	beq.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004460:	f7fd f9ec 	bl	800183c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	d902      	bls.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d13d      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448e:	d111      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	d004      	beq.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d107      	bne.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044bc:	d10f      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e017      	b.n	8004522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3b01      	subs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d19b      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000000 	.word	0x20000000

08004530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004544:	d111      	bne.n	800456a <SPI_EndRxTransaction+0x3a>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	d004      	beq.n	800455a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d107      	bne.n	800456a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004572:	d12a      	bne.n	80045ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d012      	beq.n	80045a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff ff49 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02d      	beq.n	80045f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e026      	b.n	80045f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2101      	movs	r1, #1
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ff36 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01a      	beq.n	80045f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e013      	b.n	80045f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2101      	movs	r1, #1
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff ff23 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e000      	b.n	80045f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <SPI_EndRxTxTransaction+0x7c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1b      	ldr	r2, [pc, #108]	; (800467c <SPI_EndRxTxTransaction+0x80>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0d5b      	lsrs	r3, r3, #21
 8004614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004626:	d112      	bne.n	800464e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff fef4 	bl	8004420 <SPI_WaitFlagStateUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00f      	b.n	800466e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3b01      	subs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d0f2      	beq.n	800464e <SPI_EndRxTxTransaction+0x52>
 8004668:	e000      	b.n	800466c <SPI_EndRxTxTransaction+0x70>
        break;
 800466a:	bf00      	nop
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000000 	.word	0x20000000
 800467c:	165e9f81 	.word	0x165e9f81

08004680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e041      	b.n	8004716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fe6c 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 f95e 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d001      	beq.n	8004738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e046      	b.n	80047c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <HAL_TIM_Base_Start+0xb4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_TIM_Base_Start+0xb8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_TIM_Base_Start+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <HAL_TIM_Base_Start+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <HAL_TIM_Base_Start+0xc4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <HAL_TIM_Base_Start+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_Base_Start+0x70>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_TIM_Base_Start+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d111      	bne.n	80047b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d010      	beq.n	80047c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	e007      	b.n	80047c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIM_ConfigClockSource+0x1c>
 8004808:	2302      	movs	r3, #2
 800480a:	e0b4      	b.n	8004976 <HAL_TIM_ConfigClockSource+0x186>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004844:	d03e      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484a:	f200 8087 	bhi.w	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	f000 8086 	beq.w	8004962 <HAL_TIM_ConfigClockSource+0x172>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	d87f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b70      	cmp	r3, #112	; 0x70
 800485e:	d01a      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0xa6>
 8004860:	2b70      	cmp	r3, #112	; 0x70
 8004862:	d87b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b60      	cmp	r3, #96	; 0x60
 8004866:	d050      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x11a>
 8004868:	2b60      	cmp	r3, #96	; 0x60
 800486a:	d877      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b50      	cmp	r3, #80	; 0x50
 800486e:	d03c      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xfa>
 8004870:	2b50      	cmp	r3, #80	; 0x50
 8004872:	d873      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d058      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x13a>
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d86f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d064      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b30      	cmp	r3, #48	; 0x30
 8004882:	d86b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d060      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d867      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d05c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b10      	cmp	r3, #16
 8004892:	d05a      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004894:	e062      	b.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6899      	ldr	r1, [r3, #8]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f000 f985 	bl	8004bb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	609a      	str	r2, [r3, #8]
      break;
 80048c2:	e04f      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6899      	ldr	r1, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f000 f96e 	bl	8004bb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e6:	609a      	str	r2, [r3, #8]
      break;
 80048e8:	e03c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 f8e2 	bl	8004ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2150      	movs	r1, #80	; 0x50
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f93b 	bl	8004b7e <TIM_ITRx_SetConfig>
      break;
 8004908:	e02c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	461a      	mov	r2, r3
 8004918:	f000 f901 	bl	8004b1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2160      	movs	r1, #96	; 0x60
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f92b 	bl	8004b7e <TIM_ITRx_SetConfig>
      break;
 8004928:	e01c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	461a      	mov	r2, r3
 8004938:	f000 f8c2 	bl	8004ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2140      	movs	r1, #64	; 0x40
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f91b 	bl	8004b7e <TIM_ITRx_SetConfig>
      break;
 8004948:	e00c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 f912 	bl	8004b7e <TIM_ITRx_SetConfig>
      break;
 800495a:	e003      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e000      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a40      	ldr	r2, [pc, #256]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d00f      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3d      	ldr	r2, [pc, #244]	; (8004a98 <TIM_Base_SetConfig+0x118>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <TIM_Base_SetConfig+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <TIM_Base_SetConfig+0x120>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3a      	ldr	r2, [pc, #232]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d108      	bne.n	80049d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02b      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d027      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2c      	ldr	r2, [pc, #176]	; (8004a98 <TIM_Base_SetConfig+0x118>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d023      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2b      	ldr	r2, [pc, #172]	; (8004a9c <TIM_Base_SetConfig+0x11c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <TIM_Base_SetConfig+0x120>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01b      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d017      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <TIM_Base_SetConfig+0x128>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00f      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_Base_SetConfig+0x130>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <TIM_Base_SetConfig+0x134>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <TIM_Base_SetConfig+0x138>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <TIM_Base_SetConfig+0x13c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d108      	bne.n	8004a44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_Base_SetConfig+0xf8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d103      	bne.n	8004a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	615a      	str	r2, [r3, #20]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800
 8004ab4:	40001800 	.word	0x40001800
 8004ab8:	40001c00 	.word	0x40001c00
 8004abc:	40002000 	.word	0x40002000

08004ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 030a 	bic.w	r3, r3, #10
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	031b      	lsls	r3, r3, #12
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f043 0307 	orr.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	609a      	str	r2, [r3, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e05a      	b.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d01d      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40001800 	.word	0x40001800

08004cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e03f      	b.n	8004d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fb5c 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f829 	bl	8004d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	b09f      	sub	sp, #124	; 0x7c
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	68d9      	ldr	r1, [r3, #12]
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	ea40 0301 	orr.w	r3, r0, r1
 8004da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dcc:	f021 010c 	bic.w	r1, r1, #12
 8004dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	6999      	ldr	r1, [r3, #24]
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	ea40 0301 	orr.w	r3, r0, r1
 8004df0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4bc5      	ldr	r3, [pc, #788]	; (800510c <UART_SetConfig+0x384>)
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d004      	beq.n	8004e06 <UART_SetConfig+0x7e>
 8004dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4bc3      	ldr	r3, [pc, #780]	; (8005110 <UART_SetConfig+0x388>)
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d103      	bne.n	8004e0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e06:	f7fe fe7f 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 8004e0a:	6778      	str	r0, [r7, #116]	; 0x74
 8004e0c:	e002      	b.n	8004e14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e0e:	f7fe fe67 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004e12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	f040 80b6 	bne.w	8004f8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e22:	461c      	mov	r4, r3
 8004e24:	f04f 0500 	mov.w	r5, #0
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	6439      	str	r1, [r7, #64]	; 0x40
 8004e30:	415b      	adcs	r3, r3
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
 8004e34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e38:	1912      	adds	r2, r2, r4
 8004e3a:	eb45 0303 	adc.w	r3, r5, r3
 8004e3e:	f04f 0000 	mov.w	r0, #0
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	00d9      	lsls	r1, r3, #3
 8004e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e4c:	00d0      	lsls	r0, r2, #3
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	1911      	adds	r1, r2, r4
 8004e54:	6639      	str	r1, [r7, #96]	; 0x60
 8004e56:	416b      	adcs	r3, r5
 8004e58:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e74:	f7fb f9fc 	bl	8000270 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4ba5      	ldr	r3, [pc, #660]	; (8005114 <UART_SetConfig+0x38c>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011e      	lsls	r6, r3, #4
 8004e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e88:	461c      	mov	r4, r3
 8004e8a:	f04f 0500 	mov.w	r5, #0
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	6339      	str	r1, [r7, #48]	; 0x30
 8004e96:	415b      	adcs	r3, r3
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e9e:	1912      	adds	r2, r2, r4
 8004ea0:	eb45 0303 	adc.w	r3, r5, r3
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	00d9      	lsls	r1, r3, #3
 8004eae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eb2:	00d0      	lsls	r0, r2, #3
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	1911      	adds	r1, r2, r4
 8004eba:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ebc:	416b      	adcs	r3, r5
 8004ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ed6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004eda:	f7fb f9c9 	bl	8000270 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4b8c      	ldr	r3, [pc, #560]	; (8005114 <UART_SetConfig+0x38c>)
 8004ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2164      	movs	r1, #100	; 0x64
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3332      	adds	r3, #50	; 0x32
 8004ef6:	4a87      	ldr	r2, [pc, #540]	; (8005114 <UART_SetConfig+0x38c>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f04:	441e      	add	r6, r3
 8004f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	1894      	adds	r4, r2, r2
 8004f14:	623c      	str	r4, [r7, #32]
 8004f16:	415b      	adcs	r3, r3
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1e:	1812      	adds	r2, r2, r0
 8004f20:	eb41 0303 	adc.w	r3, r1, r3
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	f04f 0500 	mov.w	r5, #0
 8004f2c:	00dd      	lsls	r5, r3, #3
 8004f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f32:	00d4      	lsls	r4, r2, #3
 8004f34:	4622      	mov	r2, r4
 8004f36:	462b      	mov	r3, r5
 8004f38:	1814      	adds	r4, r2, r0
 8004f3a:	653c      	str	r4, [r7, #80]	; 0x50
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	461a      	mov	r2, r3
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	1891      	adds	r1, r2, r2
 8004f4c:	61b9      	str	r1, [r7, #24]
 8004f4e:	415b      	adcs	r3, r3
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f5a:	f7fb f989 	bl	8000270 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4b6c      	ldr	r3, [pc, #432]	; (8005114 <UART_SetConfig+0x38c>)
 8004f64:	fba3 1302 	umull	r1, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	2164      	movs	r1, #100	; 0x64
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3332      	adds	r3, #50	; 0x32
 8004f76:	4a67      	ldr	r2, [pc, #412]	; (8005114 <UART_SetConfig+0x38c>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4432      	add	r2, r6
 8004f88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f8a:	e0b9      	b.n	8005100 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	461c      	mov	r4, r3
 8004f90:	f04f 0500 	mov.w	r5, #0
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	1891      	adds	r1, r2, r2
 8004f9a:	6139      	str	r1, [r7, #16]
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fa4:	1912      	adds	r2, r2, r4
 8004fa6:	eb45 0303 	adc.w	r3, r5, r3
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	00d9      	lsls	r1, r3, #3
 8004fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb8:	00d0      	lsls	r0, r2, #3
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	eb12 0804 	adds.w	r8, r2, r4
 8004fc2:	eb43 0905 	adc.w	r9, r3, r5
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fde:	0082      	lsls	r2, r0, #2
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb f944 	bl	8000270 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b49      	ldr	r3, [pc, #292]	; (8005114 <UART_SetConfig+0x38c>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011e      	lsls	r6, r3, #4
 8004ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	1894      	adds	r4, r2, r2
 8005004:	60bc      	str	r4, [r7, #8]
 8005006:	415b      	adcs	r3, r3
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800500e:	1812      	adds	r2, r2, r0
 8005010:	eb41 0303 	adc.w	r3, r1, r3
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	f04f 0500 	mov.w	r5, #0
 800501c:	00dd      	lsls	r5, r3, #3
 800501e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005022:	00d4      	lsls	r4, r2, #3
 8005024:	4622      	mov	r2, r4
 8005026:	462b      	mov	r3, r5
 8005028:	1814      	adds	r4, r2, r0
 800502a:	64bc      	str	r4, [r7, #72]	; 0x48
 800502c:	414b      	adcs	r3, r1
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4618      	mov	r0, r3
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005048:	0082      	lsls	r2, r0, #2
 800504a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800504e:	f7fb f90f 	bl	8000270 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <UART_SetConfig+0x38c>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <UART_SetConfig+0x38c>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005076:	441e      	add	r6, r3
 8005078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507a:	4618      	mov	r0, r3
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	1894      	adds	r4, r2, r2
 8005086:	603c      	str	r4, [r7, #0]
 8005088:	415b      	adcs	r3, r3
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005090:	1812      	adds	r2, r2, r0
 8005092:	eb41 0303 	adc.w	r3, r1, r3
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	f04f 0500 	mov.w	r5, #0
 800509e:	00dd      	lsls	r5, r3, #3
 80050a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050a4:	00d4      	lsls	r4, r2, #3
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	eb12 0a00 	adds.w	sl, r2, r0
 80050ae:	eb43 0b01 	adc.w	fp, r3, r1
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	008b      	lsls	r3, r1, #2
 80050c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050ca:	0082      	lsls	r2, r0, #2
 80050cc:	4650      	mov	r0, sl
 80050ce:	4659      	mov	r1, fp
 80050d0:	f7fb f8ce 	bl	8000270 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <UART_SetConfig+0x38c>)
 80050da:	fba3 1302 	umull	r1, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2164      	movs	r1, #100	; 0x64
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	3332      	adds	r3, #50	; 0x32
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <UART_SetConfig+0x38c>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4432      	add	r2, r6
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	377c      	adds	r7, #124	; 0x7c
 8005104:	46bd      	mov	sp, r7
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	bf00      	nop
 800510c:	40011000 	.word	0x40011000
 8005110:	40011400 	.word	0x40011400
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <ecatapp_init>:
    .motion_control_hook 	= app_cia402_mc,
};


void ecatapp_init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
    ecat_slv_init(&config);
 800511c:	4803      	ldr	r0, [pc, #12]	; (800512c <ecatapp_init+0x14>)
 800511e:	f000 fded 	bl	8005cfc <ecat_slv_init>
    cia402_init(&cia402axis);
 8005122:	4803      	ldr	r0, [pc, #12]	; (8005130 <ecatapp_init+0x18>)
 8005124:	f000 f934 	bl	8005390 <cia402_init>

//	init_override();
}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	2000000c 	.word	0x2000000c
 8005130:	2000005c 	.word	0x2000005c

08005134 <check_dc_handler>:

uint16_t check_dc_handler (void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
    // minimum watchdog value is 1 ms, in nanoseconds
    #define MIN_WATCHDOG_VALUE_NS      1000000

    /* Indicate we run DC */
    ESCvar.dcsync = 1;
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <check_dc_handler+0x48>)
 800513c:	2201      	movs	r2, #1
 800513e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    /* Fetch the sync counter limit (SDO10F1) */
    ESCvar.synccounterlimit = Obj.ErrorSettings.SyncErrorCounterLimit;
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <check_dc_handler+0x4c>)
 8005144:	8b9a      	ldrh	r2, [r3, #28]
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <check_dc_handler+0x48>)
 8005148:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    uint32_t sync0cycleTime = ESC_enable_DC();
 800514c:	f004 fee2 	bl	8009f14 <ESC_enable_DC>
 8005150:	6038      	str	r0, [r7, #0]
    Obj.Sync_Manager_2_Parameters.CycleTime = sync0cycleTime;
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <check_dc_handler+0x4c>)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6253      	str	r3, [r2, #36]	; 0x24

    // Obj.Sync_Manager_3_Parameters.CycleTime = sync0cycleTime;
    // calculate watchdog value as 2 x SYNC0 cycle time
    int watchdog_value = 2 * sync0cycleTime;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	607b      	str	r3, [r7, #4]
    if (watchdog_value < MIN_WATCHDOG_VALUE_NS)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a08      	ldr	r2, [pc, #32]	; (8005184 <check_dc_handler+0x50>)
 8005162:	4293      	cmp	r3, r2
 8005164:	dc01      	bgt.n	800516a <check_dc_handler+0x36>
    {
        watchdog_value = MIN_WATCHDOG_VALUE_NS;
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <check_dc_handler+0x54>)
 8005168:	607b      	str	r3, [r7, #4]
    }
    APP_setwatchdog(watchdog_value);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fcd8 	bl	8005b20 <APP_setwatchdog>

    return 0;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200008e8 	.word	0x200008e8
 8005180:	20000838 	.word	0x20000838
 8005184:	000f423f 	.word	0x000f423f
 8005188:	000f4240 	.word	0x000f4240

0800518c <ecatapp>:

void ecatapp()
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
    cia402_state_machine(&cia402axis, Obj.Control_Word);
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <ecatapp+0x14>)
 8005192:	899b      	ldrh	r3, [r3, #12]
 8005194:	4619      	mov	r1, r3
 8005196:	4803      	ldr	r0, [pc, #12]	; (80051a4 <ecatapp+0x18>)
 8005198:	f000 f96e 	bl	8005478 <cia402_state_machine>
}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000838 	.word	0x20000838
 80051a4:	2000005c 	.word	0x2000005c

080051a8 <app_cia402_init>:

void app_cia402_init(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
    /* Match CiA 402 objects to used CoE Object Dictionary implementation */
    cia402axis.statusword = &Obj.Status_Word;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <app_cia402_init+0x1c>)
 80051ae:	4a06      	ldr	r2, [pc, #24]	; (80051c8 <app_cia402_init+0x20>)
 80051b0:	605a      	str	r2, [r3, #4]
    cia402axis.ALstatus = &ESCvar.ALstatus;
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <app_cia402_init+0x1c>)
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <app_cia402_init+0x24>)
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	2000005c 	.word	0x2000005c
 80051c8:	2000083c 	.word	0x2000083c
 80051cc:	20000968 	.word	0x20000968

080051d0 <app_cia402_mc>:


void app_cia402_mc()
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
    // TODO motion control here
    Obj.Position_actual = Obj.Target_position; // dummy loopback
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <app_cia402_mc+0x28>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <app_cia402_mc+0x28>)
 80051da:	6093      	str	r3, [r2, #8]

    // csp is the only supported mode for now
    *(cia402axis.statusword) |= CIA402_STATUSWORD_CSP_DRIVE_FOLLOWS_COMMAND;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <app_cia402_mc+0x2c>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <app_cia402_mc+0x2c>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051ea:	b292      	uxth	r2, r2
 80051ec:	801a      	strh	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000838 	.word	0x20000838
 80051fc:	2000005c 	.word	0x2000005c

08005200 <cb_get_inputs>:

volatile uint8_t actual_value;

void cb_get_inputs()
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
    /* SOES reqires this function but nothing to do here in CiA402 app */
    Obj.Status_Word = actual_value;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <cb_get_inputs+0x1c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	b29a      	uxth	r2, r3
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <cb_get_inputs+0x20>)
 800520e:	809a      	strh	r2, [r3, #4]
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000834 	.word	0x20000834
 8005220:	20000838 	.word	0x20000838

08005224 <cb_set_outputs>:

static uint32_t cnt = 0;

void cb_set_outputs()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
    /* SOES reqires this function but nothing to do here in CiA402 app */
	cnt++;
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <cb_set_outputs+0x38>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	4a0b      	ldr	r2, [pc, #44]	; (800525c <cb_set_outputs+0x38>)
 8005230:	6013      	str	r3, [r2, #0]

	if(cnt % 2== 0)
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <cb_set_outputs+0x38>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <cb_set_outputs+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800523e:	2201      	movs	r2, #1
 8005240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005244:	4806      	ldr	r0, [pc, #24]	; (8005260 <cb_set_outputs+0x3c>)
 8005246:	f7fd fea1 	bl	8002f8c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
}
 800524a:	e005      	b.n	8005258 <cb_set_outputs+0x34>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005252:	4803      	ldr	r0, [pc, #12]	; (8005260 <cb_set_outputs+0x3c>)
 8005254:	f7fd fe9a 	bl	8002f8c <HAL_GPIO_WritePin>
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000120 	.word	0x20000120
 8005260:	40020400 	.word	0x40020400

08005264 <EXTI0_IRQHandler>:

// SYNC0
static uint8_t sync0_irq_flag = 0;

void EXTI0_IRQHandler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <EXTI0_IRQHandler+0x28>)
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <EXTI0_IRQHandler+0x1c>
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <EXTI0_IRQHandler+0x28>)
 8005276:	2201      	movs	r2, #1
 8005278:	615a      	str	r2, [r3, #20]
        sync0_irq_flag = 1;
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <EXTI0_IRQHandler+0x2c>)
 800527c:	2201      	movs	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
    }
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40013c00 	.word	0x40013c00
 8005290:	20000124 	.word	0x20000124

08005294 <EXTI1_IRQHandler>:

// SYNC1
static uint8_t sync1_irq_flag = 0;

void EXTI1_IRQHandler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <EXTI1_IRQHandler+0x28>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <EXTI1_IRQHandler+0x1c>
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <EXTI1_IRQHandler+0x28>)
 80052a6:	2202      	movs	r2, #2
 80052a8:	615a      	str	r2, [r3, #20]
        sync1_irq_flag = 1;
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <EXTI1_IRQHandler+0x2c>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
    }
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40013c00 	.word	0x40013c00
 80052c0:	20000125 	.word	0x20000125

080052c4 <EXTI9_5_IRQHandler>:

// PDI
static uint8_t pdi_irq_flag = 0;

void EXTI9_5_IRQHandler(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <EXTI9_5_IRQHandler+0x28>)
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <EXTI9_5_IRQHandler+0x1e>
    {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <EXTI9_5_IRQHandler+0x28>)
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	615a      	str	r2, [r3, #20]
        sync0_irq_flag = 1;
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <EXTI9_5_IRQHandler+0x2c>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
    }
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40013c00 	.word	0x40013c00
 80052f0:	20000124 	.word	0x20000124

080052f4 <ecatapp_loop>:


void ecatapp_loop(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
    // stack in mixed mode
    if (sync0_irq_flag)
 80052f8:	4b20      	ldr	r3, [pc, #128]	; (800537c <ecatapp_loop+0x88>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <ecatapp_loop+0x24>
    {
        ESC_updateALevent();
 8005300:	2204      	movs	r2, #4
 8005302:	491f      	ldr	r1, [pc, #124]	; (8005380 <ecatapp_loop+0x8c>)
 8005304:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8005308:	f004 fd5a 	bl	8009dc0 <ESC_read>
        DIG_process (DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 800530c:	2009      	movs	r0, #9
 800530e:	f000 fc1b 	bl	8005b48 <DIG_process>
        sync0_irq_flag = 0;
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <ecatapp_loop+0x88>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
    }

    if (sync1_irq_flag)
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <ecatapp_loop+0x90>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <ecatapp_loop+0x44>
    {
        ESC_updateALevent();
 8005320:	2204      	movs	r2, #4
 8005322:	4917      	ldr	r1, [pc, #92]	; (8005380 <ecatapp_loop+0x8c>)
 8005324:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8005328:	f004 fd4a 	bl	8009dc0 <ESC_read>
        DIG_process (DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 800532c:	2009      	movs	r0, #9
 800532e:	f000 fc0b 	bl	8005b48 <DIG_process>
        sync1_irq_flag = 0;
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <ecatapp_loop+0x90>)
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
    }


    if (pdi_irq_flag)
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <ecatapp_loop+0x94>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <ecatapp_loop+0x78>
    {
        ESC_updateALevent();
 8005340:	2204      	movs	r2, #4
 8005342:	490f      	ldr	r1, [pc, #60]	; (8005380 <ecatapp_loop+0x8c>)
 8005344:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8005348:	f004 fd3a 	bl	8009dc0 <ESC_read>
        if (ESCvar.dcsync)
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <ecatapp_loop+0x98>)
 800534e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <ecatapp_loop+0x6a>
        {
            DIG_process (DIG_PROCESS_OUTPUTS_FLAG);
 8005356:	2002      	movs	r0, #2
 8005358:	f000 fbf6 	bl	8005b48 <DIG_process>
 800535c:	e002      	b.n	8005364 <ecatapp_loop+0x70>
        }
        else
        {
            DIG_process (DIG_PROCESS_OUTPUTS_FLAG | DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
 800535e:	200b      	movs	r0, #11
 8005360:	f000 fbf2 	bl	8005b48 <DIG_process>
        }
        pdi_irq_flag = 0;
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <ecatapp_loop+0x94>)
 8005366:	2200      	movs	r2, #0
 8005368:	701a      	strb	r2, [r3, #0]
        ecat_slv_poll();
//        DIG_process(DIG_PROCESS_WD_FLAG);
        DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
              DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
    }
}
 800536a:	e004      	b.n	8005376 <ecatapp_loop+0x82>
        ecat_slv_poll();
 800536c:	f000 fc9e 	bl	8005cac <ecat_slv_poll>
        DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 8005370:	200f      	movs	r0, #15
 8005372:	f000 fbe9 	bl	8005b48 <DIG_process>
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000124 	.word	0x20000124
 8005380:	200009c8 	.word	0x200009c8
 8005384:	20000125 	.word	0x20000125
 8005388:	20000126 	.word	0x20000126
 800538c:	200008e8 	.word	0x200008e8

08005390 <cia402_init>:
 */

#include "cia402.h"

void cia402_init(cia402_axis_t * axis) 
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    axis->state = NOT_READY_TO_SWITCH_ON;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
    axis->transition = NO_TRANSITION;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	705a      	strb	r2, [r3, #1]
    
    if (axis->init_od_hook != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <cia402_init+0x22>
    { // TODO null check
        axis->init_od_hook();
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4798      	blx	r3
    }
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <is_command>:


uint8_t is_command(uint16_t controlword, cia402_controlword_command_t command_to_check)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	460a      	mov	r2, r1
 80053c6:	80fb      	strh	r3, [r7, #6]
 80053c8:	4613      	mov	r3, r2
 80053ca:	717b      	strb	r3, [r7, #5]
    uint16_t mask          = 0x0000;
 80053cc:	2300      	movs	r3, #0
 80053ce:	81fb      	strh	r3, [r7, #14]
    uint16_t command_value = 0xFFFF;
 80053d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053d4:	81bb      	strh	r3, [r7, #12]

    switch (command_to_check)
 80053d6:	797b      	ldrb	r3, [r7, #5]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d83b      	bhi.n	8005454 <is_command+0x98>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <is_command+0x28>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005405 	.word	0x08005405
 80053e8:	0800540f 	.word	0x0800540f
 80053ec:	08005419 	.word	0x08005419
 80053f0:	08005423 	.word	0x08005423
 80053f4:	0800542d 	.word	0x0800542d
 80053f8:	08005437 	.word	0x08005437
 80053fc:	08005441 	.word	0x08005441
 8005400:	0800544b 	.word	0x0800544b
    {
    case SHUTDOWN_CMD:
        mask = CIA402_CONTROLWORD_MASK_SHUTDOWN;
 8005404:	2387      	movs	r3, #135	; 0x87
 8005406:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_SHUTDOWN;
 8005408:	2306      	movs	r3, #6
 800540a:	81bb      	strh	r3, [r7, #12]
        break;
 800540c:	e023      	b.n	8005456 <is_command+0x9a>
    case SWITCH_ON_CMD:
        mask = CIA402_CONTROLWORD_MASK_SWITCHON;
 800540e:	2387      	movs	r3, #135	; 0x87
 8005410:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_SWITCHON;
 8005412:	2307      	movs	r3, #7
 8005414:	81bb      	strh	r3, [r7, #12]
        break;
 8005416:	e01e      	b.n	8005456 <is_command+0x9a>
    case SWITCH_ON_ENABLE_CMD:
        mask = CIA402_CONTROLWORD_MASK_SWITCHON_ENABLE;
 8005418:	238f      	movs	r3, #143	; 0x8f
 800541a:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_SWITCHON_ENABLE;
 800541c:	230f      	movs	r3, #15
 800541e:	81bb      	strh	r3, [r7, #12]
        break;
 8005420:	e019      	b.n	8005456 <is_command+0x9a>
    case DISABLE_VOLTAGE_CMD:
        mask = CIA402_CONTROLWORD_MASK_DISABLEVOLTAGE;
 8005422:	2382      	movs	r3, #130	; 0x82
 8005424:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_DISABLEVOLTAGE;
 8005426:	2300      	movs	r3, #0
 8005428:	81bb      	strh	r3, [r7, #12]
        break;
 800542a:	e014      	b.n	8005456 <is_command+0x9a>
    case QUICK_STOP_CMD:
        mask = CIA402_CONTROLWORD_MASK_QUICKSTOP;
 800542c:	2386      	movs	r3, #134	; 0x86
 800542e:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_QUICKSTOP;
 8005430:	2302      	movs	r3, #2
 8005432:	81bb      	strh	r3, [r7, #12]
        break;
 8005434:	e00f      	b.n	8005456 <is_command+0x9a>
    case DISABLE_OPERATION_CMD:
        mask = CIA402_CONTROLWORD_MASK_DISABLEOPERATION;
 8005436:	238f      	movs	r3, #143	; 0x8f
 8005438:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_DISABLEOPERATION;
 800543a:	2307      	movs	r3, #7
 800543c:	81bb      	strh	r3, [r7, #12]
        break;
 800543e:	e00a      	b.n	8005456 <is_command+0x9a>
    case ENABLE_OPERATION:
        mask = CIA402_CONTROLWORD_MASK_ENABLEOPERATION;
 8005440:	238f      	movs	r3, #143	; 0x8f
 8005442:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_ENABLEOPERATION;
 8005444:	230f      	movs	r3, #15
 8005446:	81bb      	strh	r3, [r7, #12]
        break;
 8005448:	e005      	b.n	8005456 <is_command+0x9a>
    case FAULT_RESET:
        mask = CIA402_CONTROLWORD_MASK_FAULTRESET;
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	81fb      	strh	r3, [r7, #14]
        command_value = CIA402_CONTROLWORD_COMMAND_FAULTRESET;
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	81bb      	strh	r3, [r7, #12]
        break;
 8005452:	e000      	b.n	8005456 <is_command+0x9a>
    default:
        break;
 8005454:	bf00      	nop
    }

    return (controlword & mask) == command_value;
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	89ba      	ldrh	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <cia402_state_machine>:


void cia402_state_machine(cia402_axis_t * axis, uint16_t controlword) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
    
    *(axis->statusword) = 0x0000;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	801a      	strh	r2, [r3, #0]
    axis->transition = NO_TRANSITION;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	705a      	strb	r2, [r3, #1]

    switch (axis->state)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	dc70      	bgt.n	800557c <cia402_state_machine+0x104>
 800549a:	2b00      	cmp	r3, #0
 800549c:	da48      	bge.n	8005530 <cia402_state_machine+0xb8>
 800549e:	e22c      	b.n	80058fa <cia402_state_machine+0x482>
 80054a0:	3b21      	subs	r3, #33	; 0x21
 80054a2:	2b1f      	cmp	r3, #31
 80054a4:	f200 8229 	bhi.w	80058fa <cia402_state_machine+0x482>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <cia402_state_machine+0x38>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	0800560f 	.word	0x0800560f
 80054b4:	080058fb 	.word	0x080058fb
 80054b8:	080056b3 	.word	0x080056b3
 80054bc:	080058fb 	.word	0x080058fb
 80054c0:	080058fb 	.word	0x080058fb
 80054c4:	080058fb 	.word	0x080058fb
 80054c8:	08005757 	.word	0x08005757
 80054cc:	080058fb 	.word	0x080058fb
 80054d0:	080058fb 	.word	0x080058fb
 80054d4:	080058fb 	.word	0x080058fb
 80054d8:	080058fb 	.word	0x080058fb
 80054dc:	080058fb 	.word	0x080058fb
 80054e0:	080058fb 	.word	0x080058fb
 80054e4:	080058fb 	.word	0x080058fb
 80054e8:	080058fb 	.word	0x080058fb
 80054ec:	080058fb 	.word	0x080058fb
 80054f0:	080058fb 	.word	0x080058fb
 80054f4:	080058fb 	.word	0x080058fb
 80054f8:	080058fb 	.word	0x080058fb
 80054fc:	080058fb 	.word	0x080058fb
 8005500:	080058fb 	.word	0x080058fb
 8005504:	080058fb 	.word	0x080058fb
 8005508:	080058fb 	.word	0x080058fb
 800550c:	080058fb 	.word	0x080058fb
 8005510:	080058fb 	.word	0x080058fb
 8005514:	080058fb 	.word	0x080058fb
 8005518:	080058fb 	.word	0x080058fb
 800551c:	080058fb 	.word	0x080058fb
 8005520:	080058fb 	.word	0x080058fb
 8005524:	080058fb 	.word	0x080058fb
 8005528:	080058fb 	.word	0x080058fb
 800552c:	080055c1 	.word	0x080055c1
 8005530:	2b0f      	cmp	r3, #15
 8005532:	f200 81e2 	bhi.w	80058fa <cia402_state_machine+0x482>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <cia402_state_machine+0xc4>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005589 	.word	0x08005589
 8005540:	080058fb 	.word	0x080058fb
 8005544:	080058fb 	.word	0x080058fb
 8005548:	080058fb 	.word	0x080058fb
 800554c:	080058fb 	.word	0x080058fb
 8005550:	080058fb 	.word	0x080058fb
 8005554:	080058fb 	.word	0x080058fb
 8005558:	08005843 	.word	0x08005843
 800555c:	080058b7 	.word	0x080058b7
 8005560:	080058fb 	.word	0x080058fb
 8005564:	080058fb 	.word	0x080058fb
 8005568:	080058fb 	.word	0x080058fb
 800556c:	080058fb 	.word	0x080058fb
 8005570:	080058fb 	.word	0x080058fb
 8005574:	080058fb 	.word	0x080058fb
 8005578:	08005897 	.word	0x08005897
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	f300 81bc 	bgt.w	80058fa <cia402_state_machine+0x482>
 8005582:	2b21      	cmp	r3, #33	; 0x21
 8005584:	da8c      	bge.n	80054a0 <cia402_state_machine+0x28>
 8005586:	e1b8      	b.n	80058fa <cia402_state_machine+0x482>
    {
    case NOT_READY_TO_SWITCH_ON: 
    {
        // automatic transition on reaching OP 
        if (*(axis->ALstatus) == AL_STATUS_OP) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	2b08      	cmp	r3, #8
 8005590:	d10f      	bne.n	80055b2 <cia402_state_machine+0x13a>
            // transition 1
            axis->state = SWITCH_ON_DISABLED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a6:	b292      	uxth	r2, r2
 80055a8:	801a      	strh	r2, [r3, #0]
            axis->transition = NOT_READY_TO_SWITCH_ON_TO_SWITCH_ON_DISABLED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	705a      	strb	r2, [r3, #1]
        } else {
            *(axis->statusword) |= NOT_READY_TO_SWITCH_ON;
        }
        break;
 80055b0:	e1b5      	b.n	800591e <cia402_state_machine+0x4a6>
            *(axis->statusword) |= NOT_READY_TO_SWITCH_ON;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	801a      	strh	r2, [r3, #0]
        break;
 80055be:	e1ae      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    case SWITCH_ON_DISABLED: 
    {
        if (is_command(controlword, SHUTDOWN_CMD) || *(axis->ALstatus) == AL_STATUS_OP) {
 80055c0:	887b      	ldrh	r3, [r7, #2]
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fef9 	bl	80053bc <is_command>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <cia402_state_machine+0x162>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d10f      	bne.n	80055fa <cia402_state_machine+0x182>
            // transition 2
            axis->state = READY_TO_SWITCH_ON;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2221      	movs	r2, #33	; 0x21
 80055de:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= READY_TO_SWITCH_ON;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80055ee:	b292      	uxth	r2, r2
 80055f0:	801a      	strh	r2, [r3, #0]
            axis->transition = SWITCH_ON_DISABLED_TO_READY_TO_SWITCH_ON;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	705a      	strb	r2, [r3, #1]
        } else {
            *(axis->statusword) |= SWITCH_ON_DISABLED;
        }
        break;
 80055f8:	e191      	b.n	800591e <cia402_state_machine+0x4a6>
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005608:	b292      	uxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
        break;
 800560c:	e187      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    case READY_TO_SWITCH_ON: 
    {
        if (is_command(controlword, DISABLE_VOLTAGE_CMD)) {
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	2103      	movs	r1, #3
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fed2 	bl	80053bc <is_command>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00f      	beq.n	800563e <cia402_state_machine+0x1c6>
            // transition 7
            axis->state = SWITCH_ON_DISABLED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	881a      	ldrh	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005632:	b292      	uxth	r2, r2
 8005634:	801a      	strh	r2, [r3, #0]
            axis->transition = READY_TO_SWITCH_ON_TO_SWITCH_ON_DISABLED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2207      	movs	r2, #7
 800563a:	705a      	strb	r2, [r3, #1]
                axis->transition = READY_TO_SWITCH_ON_TO_OPERATION_ENABLED;
            }
        } else {
            *(axis->statusword) |= READY_TO_SWITCH_ON;
        }
        break;
 800563c:	e16a      	b.n	8005914 <cia402_state_machine+0x49c>
        } else if (is_command(controlword, SWITCH_ON_CMD)) {
 800563e:	887b      	ldrh	r3, [r7, #2]
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff feba 	bl	80053bc <is_command>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d027      	beq.n	800569e <cia402_state_machine+0x226>
            axis->state = SWITCHED_ON;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2223      	movs	r2, #35	; 0x23
 8005652:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCHED_ON;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8005662:	b292      	uxth	r2, r2
 8005664:	801a      	strh	r2, [r3, #0]
            axis->transition = READY_TO_SWITCH_ON_TO_SWITCHED_ON;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2203      	movs	r2, #3
 800566a:	705a      	strb	r2, [r3, #1]
            if (is_command(controlword, SWITCH_ON_ENABLE_CMD)) {
 800566c:	887b      	ldrh	r3, [r7, #2]
 800566e:	2102      	movs	r1, #2
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fea3 	bl	80053bc <is_command>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 814b 	beq.w	8005914 <cia402_state_machine+0x49c>
                axis->state = OPERATION_ENABLED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2227      	movs	r2, #39	; 0x27
 8005682:	701a      	strb	r2, [r3, #0]
                *(axis->statusword) |= OPERATION_ENABLED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8005692:	b292      	uxth	r2, r2
 8005694:	801a      	strh	r2, [r3, #0]
                axis->transition = READY_TO_SWITCH_ON_TO_OPERATION_ENABLED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2222      	movs	r2, #34	; 0x22
 800569a:	705a      	strb	r2, [r3, #1]
        break;
 800569c:	e13a      	b.n	8005914 <cia402_state_machine+0x49c>
            *(axis->statusword) |= READY_TO_SWITCH_ON;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80056ac:	b292      	uxth	r2, r2
 80056ae:	801a      	strh	r2, [r3, #0]
        break;
 80056b0:	e130      	b.n	8005914 <cia402_state_machine+0x49c>
    }
    
    case SWITCHED_ON: 
    {
        if (is_command(controlword, SHUTDOWN_CMD)) {
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fe80 	bl	80053bc <is_command>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00f      	beq.n	80056e2 <cia402_state_machine+0x26a>
            // transition 6
            axis->state = READY_TO_SWITCH_ON;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2221      	movs	r2, #33	; 0x21
 80056c6:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= READY_TO_SWITCH_ON;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80056d6:	b292      	uxth	r2, r2
 80056d8:	801a      	strh	r2, [r3, #0]
            axis->transition = SWITCHED_ON_TO_READY_TO_SWITCH_ON;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2206      	movs	r2, #6
 80056de:	705a      	strb	r2, [r3, #1]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
            axis->transition = SWITCHED_ON_TO_SWITCH_ON_DISABLED;
        } else {
            *(axis->statusword) |= SWITCHED_ON;
        }
        break;
 80056e0:	e11d      	b.n	800591e <cia402_state_machine+0x4a6>
        } else if (is_command(controlword, ENABLE_OPERATION)) {
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	2106      	movs	r1, #6
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fe68 	bl	80053bc <is_command>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00f      	beq.n	8005712 <cia402_state_machine+0x29a>
            axis->state = OPERATION_ENABLED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2227      	movs	r2, #39	; 0x27
 80056f6:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= OPERATION_ENABLED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8005706:	b292      	uxth	r2, r2
 8005708:	801a      	strh	r2, [r3, #0]
            axis->transition = SWITCHED_ON_TO_OPERATION_ENABLED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	705a      	strb	r2, [r3, #1]
        break;
 8005710:	e105      	b.n	800591e <cia402_state_machine+0x4a6>
        } else if (is_command(controlword, DISABLE_VOLTAGE_CMD)) {
 8005712:	887b      	ldrh	r3, [r7, #2]
 8005714:	2103      	movs	r1, #3
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fe50 	bl	80053bc <is_command>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <cia402_state_machine+0x2ca>
            axis->state = SWITCH_ON_DISABLED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005736:	b292      	uxth	r2, r2
 8005738:	801a      	strh	r2, [r3, #0]
            axis->transition = SWITCHED_ON_TO_SWITCH_ON_DISABLED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	220a      	movs	r2, #10
 800573e:	705a      	strb	r2, [r3, #1]
        break;
 8005740:	e0ed      	b.n	800591e <cia402_state_machine+0x4a6>
            *(axis->statusword) |= SWITCHED_ON;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8005750:	b292      	uxth	r2, r2
 8005752:	801a      	strh	r2, [r3, #0]
        break;
 8005754:	e0e3      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    case OPERATION_ENABLED: 
    {
        if (is_command(controlword, DISABLE_OPERATION_CMD)) {
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	2105      	movs	r1, #5
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fe2e 	bl	80053bc <is_command>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00f      	beq.n	8005786 <cia402_state_machine+0x30e>
            // transition 5
            axis->state = SWITCHED_ON;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2223      	movs	r2, #35	; 0x23
 800576a:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCHED_ON;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	881a      	ldrh	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
            axis->transition = OPERATION_ENABLED_TO_SWITCHED_ON;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2205      	movs	r2, #5
 8005782:	705a      	strb	r2, [r3, #1]

            if (axis->motion_control_hook) {
                axis->motion_control_hook();
            }
        }
        break;
 8005784:	e0c8      	b.n	8005918 <cia402_state_machine+0x4a0>
        else if (is_command(controlword, SHUTDOWN_CMD)) {
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fe16 	bl	80053bc <is_command>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <cia402_state_machine+0x33e>
            axis->state = READY_TO_SWITCH_ON;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2221      	movs	r2, #33	; 0x21
 800579a:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= READY_TO_SWITCH_ON;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80057aa:	b292      	uxth	r2, r2
 80057ac:	801a      	strh	r2, [r3, #0]
            axis->transition = OPERATION_ENABLED_TO_READY_TO_SWITCH_ON;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2208      	movs	r2, #8
 80057b2:	705a      	strb	r2, [r3, #1]
        break;
 80057b4:	e0b0      	b.n	8005918 <cia402_state_machine+0x4a0>
        else if (is_command(controlword, DISABLE_VOLTAGE_CMD)
 80057b6:	887b      	ldrh	r3, [r7, #2]
 80057b8:	2103      	movs	r1, #3
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fdfe 	bl	80053bc <is_command>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <cia402_state_machine+0x358>
            || *(axis->ALstatus) != AL_STATUS_OP) { // connection lost 
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d00f      	beq.n	80057f0 <cia402_state_machine+0x378>
            axis->state = SWITCH_ON_DISABLED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2240      	movs	r2, #64	; 0x40
 80057d4:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e4:	b292      	uxth	r2, r2
 80057e6:	801a      	strh	r2, [r3, #0]
            axis->transition = OPERATION_ENABLED_TO_SWITCH_ON_DISABLED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2209      	movs	r2, #9
 80057ec:	705a      	strb	r2, [r3, #1]
        break;
 80057ee:	e093      	b.n	8005918 <cia402_state_machine+0x4a0>
        else if (is_command(controlword, QUICK_STOP_CMD)) {
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	2104      	movs	r1, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fde1 	bl	80053bc <is_command>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00f      	beq.n	8005820 <cia402_state_machine+0x3a8>
            axis->state = QUICK_STOP_ACTIVE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2207      	movs	r2, #7
 8005804:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= QUICK_STOP_ACTIVE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f042 0207 	orr.w	r2, r2, #7
 8005814:	b292      	uxth	r2, r2
 8005816:	801a      	strh	r2, [r3, #0]
            axis->transition = OPERATION_ENABLED_TO_QUICK_STOP_ACTIVE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	220b      	movs	r2, #11
 800581c:	705a      	strb	r2, [r3, #1]
        break;
 800581e:	e07b      	b.n	8005918 <cia402_state_machine+0x4a0>
            *(axis->statusword) |= OPERATION_ENABLED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800582e:	b292      	uxth	r2, r2
 8005830:	801a      	strh	r2, [r3, #0]
            if (axis->motion_control_hook) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d06e      	beq.n	8005918 <cia402_state_machine+0x4a0>
                axis->motion_control_hook();
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4798      	blx	r3
        break;
 8005840:	e06a      	b.n	8005918 <cia402_state_machine+0x4a0>
    }
    
    case QUICK_STOP_ACTIVE: 
    {
        if (is_command(controlword, DISABLE_VOLTAGE_CMD)) {
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	2103      	movs	r1, #3
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fdb8 	bl	80053bc <is_command>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00f      	beq.n	8005872 <cia402_state_machine+0x3fa>
            // transition 12
            axis->state = SWITCH_ON_DISABLED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2240      	movs	r2, #64	; 0x40
 8005856:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005866:	b292      	uxth	r2, r2
 8005868:	801a      	strh	r2, [r3, #0]
            axis->transition = QUICK_STOP_ACTIVE_TO_OPERATION_ENABLED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2210      	movs	r2, #16
 800586e:	705a      	strb	r2, [r3, #1]
            *(axis->statusword) |= OPERATION_ENABLED;
            axis->transition = QUICK_STOP_ACTIVE_TO_OPERATION_ENABLED;
        } else {
            *(axis->statusword) |= QUICK_STOP_ACTIVE;
        }
        break;
 8005870:	e055      	b.n	800591e <cia402_state_machine+0x4a6>
        else if (is_command(controlword, ENABLE_OPERATION)) {
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	2106      	movs	r1, #6
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fda0 	bl	80053bc <is_command>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d14c      	bne.n	800591c <cia402_state_machine+0x4a4>
            *(axis->statusword) |= QUICK_STOP_ACTIVE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f042 0207 	orr.w	r2, r2, #7
 8005890:	b292      	uxth	r2, r2
 8005892:	801a      	strh	r2, [r3, #0]
        break;
 8005894:	e043      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    case FAULT_REACTION_ACTIVE: 
    {
        // transition 14 is automatic
        axis->state = FAULT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2208      	movs	r2, #8
 800589a:	701a      	strb	r2, [r3, #0]
        *(axis->statusword) |= FAULT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f042 0208 	orr.w	r2, r2, #8
 80058aa:	b292      	uxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
        axis->transition = FAULT_REACTION_ACTIVE_TO_FAULT;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	220e      	movs	r2, #14
 80058b2:	705a      	strb	r2, [r3, #1]
        break;
 80058b4:	e033      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    case FAULT: 
    {
        if (is_command(controlword, FAULT_RESET)) {
 80058b6:	887b      	ldrh	r3, [r7, #2]
 80058b8:	2107      	movs	r1, #7
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fd7e 	bl	80053bc <is_command>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00f      	beq.n	80058e6 <cia402_state_machine+0x46e>
            // transition 15
            axis->state = SWITCH_ON_DISABLED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2240      	movs	r2, #64	; 0x40
 80058ca:	701a      	strb	r2, [r3, #0]
            *(axis->statusword) |= SWITCH_ON_DISABLED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058da:	b292      	uxth	r2, r2
 80058dc:	801a      	strh	r2, [r3, #0]
            axis->transition = FAULT_TO_SWITCH_ON_DISABLED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	220f      	movs	r2, #15
 80058e2:	705a      	strb	r2, [r3, #1]
        } else {
            *(axis->statusword) |= FAULT;
        }
        break;
 80058e4:	e01b      	b.n	800591e <cia402_state_machine+0x4a6>
            *(axis->statusword) |= FAULT;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f042 0208 	orr.w	r2, r2, #8
 80058f4:	b292      	uxth	r2, r2
 80058f6:	801a      	strh	r2, [r3, #0]
        break;
 80058f8:	e011      	b.n	800591e <cia402_state_machine+0x4a6>
    }
    
    default:
        // this should never happen, but just in case
        axis->state = NOT_READY_TO_SWITCH_ON;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
        *(axis->statusword) |= NOT_READY_TO_SWITCH_ON;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	8812      	ldrh	r2, [r2, #0]
 800590a:	801a      	strh	r2, [r3, #0]
        axis->transition = NO_TRANSITION;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	705a      	strb	r2, [r3, #1]
        break;
 8005912:	e004      	b.n	800591e <cia402_state_machine+0x4a6>
        break;
 8005914:	bf00      	nop
 8005916:	e002      	b.n	800591e <cia402_state_machine+0x4a6>
        break;
 8005918:	bf00      	nop
 800591a:	e000      	b.n	800591e <cia402_state_machine+0x4a6>
            break;
 800591c:	bf00      	nop
    }
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop

08005928 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b089      	sub	sp, #36	; 0x24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60ba      	str	r2, [r7, #8]
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	4603      	mov	r3, r0
 8005934:	81fb      	strh	r3, [r7, #14]
 8005936:	460b      	mov	r3, r1
 8005938:	737b      	strb	r3, [r7, #13]
   if (IS_RXPDO (index) ||
 800593a:	89fb      	ldrh	r3, [r7, #14]
 800593c:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8005940:	d303      	bcc.n	800594a <ESC_download_pre_objecthandler+0x22>
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005948:	d311      	bcc.n	800596e <ESC_download_pre_objecthandler+0x46>
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8005950:	d303      	bcc.n	800595a <ESC_download_pre_objecthandler+0x32>
       IS_TXPDO (index) ||
 8005952:	89fb      	ldrh	r3, [r7, #14]
 8005954:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005958:	d309      	bcc.n	800596e <ESC_download_pre_objecthandler+0x46>
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	f641 4212 	movw	r2, #7186	; 0x1c12
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <ESC_download_pre_objecthandler+0x46>
       index == RX_PDO_OBJIDX ||
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	f641 4213 	movw	r2, #7187	; 0x1c13
 800596a:	4293      	cmp	r3, r2
 800596c:	d112      	bne.n	8005994 <ESC_download_pre_objecthandler+0x6c>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
 800596e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005972:	b29b      	uxth	r3, r3
 8005974:	0bdb      	lsrs	r3, r3, #15
 8005976:	b2db      	uxtb	r3, r3
 8005978:	75fb      	strb	r3, [r7, #23]
      if (subindex > minSub && COE_maxSub (index) != 0)
 800597a:	7b7a      	ldrb	r2, [r7, #13]
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	429a      	cmp	r2, r3
 8005980:	d908      	bls.n	8005994 <ESC_download_pre_objecthandler+0x6c>
 8005982:	89fb      	ldrh	r3, [r7, #14]
 8005984:	4618      	mov	r0, r3
 8005986:	f002 fe9f 	bl	80086c8 <COE_maxSub>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <ESC_download_pre_objecthandler+0x6c>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <ESC_download_pre_objecthandler+0x94>)
 8005992:	e00f      	b.n	80059b4 <ESC_download_pre_objecthandler+0x8c>
      }
   }

   if (ESCvar.pre_object_download_hook)
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <ESC_download_pre_objecthandler+0x98>)
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <ESC_download_pre_objecthandler+0x8a>
   {
      return (ESCvar.pre_object_download_hook) (index,
 800599c:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <ESC_download_pre_objecthandler+0x98>)
 800599e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80059a0:	7b79      	ldrb	r1, [r7, #13]
 80059a2:	89f8      	ldrh	r0, [r7, #14]
 80059a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	47a0      	blx	r4
 80059ae:	4603      	mov	r3, r0
 80059b0:	e000      	b.n	80059b4 <ESC_download_pre_objecthandler+0x8c>
            data,
            size,
            flags);
   }

   return 0;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd90      	pop	{r4, r7, pc}
 80059bc:	06010003 	.word	0x06010003
 80059c0:	200008e8 	.word	0x200008e8

080059c4 <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
 80059ce:	460b      	mov	r3, r1
 80059d0:	717b      	strb	r3, [r7, #5]
 80059d2:	4613      	mov	r3, r2
 80059d4:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <ESC_download_post_objecthandler+0x34>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <ESC_download_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <ESC_download_post_objecthandler+0x34>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	7979      	ldrb	r1, [r7, #5]
 80059e6:	88f8      	ldrh	r0, [r7, #6]
 80059e8:	4798      	blx	r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	e000      	b.n	80059f0 <ESC_download_post_objecthandler+0x2c>
   }

   return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	200008e8 	.word	0x200008e8

080059fc <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60ba      	str	r2, [r7, #8]
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	4603      	mov	r3, r0
 8005a08:	81fb      	strh	r3, [r7, #14]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	737b      	strb	r3, [r7, #13]
   if (ESCvar.pre_object_upload_hook != NULL)
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <ESC_upload_pre_objecthandler+0x3c>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <ESC_upload_pre_objecthandler+0x30>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <ESC_upload_pre_objecthandler+0x3c>)
 8005a18:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005a1a:	7b79      	ldrb	r1, [r7, #13]
 8005a1c:	89f8      	ldrh	r0, [r7, #14]
 8005a1e:	8c3b      	ldrh	r3, [r7, #32]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	47a0      	blx	r4
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e000      	b.n	8005a2e <ESC_upload_pre_objecthandler+0x32>
            data,
            size,
            flags);
   }

   return 0;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	200008e8 	.word	0x200008e8

08005a3c <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	80fb      	strh	r3, [r7, #6]
 8005a46:	460b      	mov	r3, r1
 8005a48:	717b      	strb	r3, [r7, #5]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_upload_hook != NULL)
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <ESC_upload_post_objecthandler+0x34>)
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <ESC_upload_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <ESC_upload_post_objecthandler+0x34>)
 8005a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	7979      	ldrb	r1, [r7, #5]
 8005a5e:	88f8      	ldrh	r0, [r7, #6]
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	e000      	b.n	8005a68 <ESC_upload_post_objecthandler+0x2c>
   }

   return 0;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200008e8 	.word	0x200008e8

08005a74 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <APP_safeoutput+0x18>)
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <APP_safeoutput+0x12>
   {
      (ESCvar.safeoutput_override)();
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <APP_safeoutput+0x18>)
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	4798      	blx	r3
   }
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200008e8 	.word	0x200008e8

08005a90 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <TXPDO_update+0x3c>)
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <TXPDO_update+0x3c>)
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 8005aa2:	e010      	b.n	8005ac6 <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <TXPDO_update+0x3c>)
 8005aa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <TXPDO_update+0x40>)
 8005aac:	4619      	mov	r1, r3
 8005aae:	4809      	ldr	r0, [pc, #36]	; (8005ad4 <TXPDO_update+0x44>)
 8005ab0:	f002 fd4a 	bl	8008548 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <TXPDO_update+0x3c>)
 8005ab6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005aba:	461a      	mov	r2, r3
 8005abc:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <TXPDO_update+0x44>)
 8005abe:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 8005ac2:	f004 f9a9 	bl	8009e18 <ESC_write>
}
 8005ac6:	bf00      	nop
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200008e8 	.word	0x200008e8
 8005ad0:	20000d2c 	.word	0x20000d2c
 8005ad4:	20000160 	.word	0x20000160

08005ad8 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <RXPDO_update+0x3c>)
 8005ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <RXPDO_update+0x3c>)
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 8005aea:	e010      	b.n	8005b0e <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <RXPDO_update+0x3c>)
 8005aee:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8005af2:	461a      	mov	r2, r3
 8005af4:	4908      	ldr	r1, [pc, #32]	; (8005b18 <RXPDO_update+0x40>)
 8005af6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005afa:	f004 f961 	bl	8009dc0 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <RXPDO_update+0x3c>)
 8005b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b04:	4a05      	ldr	r2, [pc, #20]	; (8005b1c <RXPDO_update+0x44>)
 8005b06:	4619      	mov	r1, r3
 8005b08:	4803      	ldr	r0, [pc, #12]	; (8005b18 <RXPDO_update+0x40>)
 8005b0a:	f002 fd7f 	bl	800860c <COE_pdoUnpack>
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200008e8 	.word	0x200008e8
 8005b18:	20000130 	.word	0x20000130
 8005b1c:	20000cd8 	.word	0x20000cd8

08005b20 <APP_setwatchdog>:
 * HW watchdog 0x4xx
 *
 * @param[in] watchdogcnt  = new watchdog count value
 */
void APP_setwatchdog (int watchdogcnt)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
   CC_ATOMIC_SET(ESCvar.watchdogcnt, watchdogcnt);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <APP_setwatchdog+0x24>)
 8005b2c:	f3bf 8f5b 	dmb	ish
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	f3bf 8f5b 	dmb	ish
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200009c4 	.word	0x200009c4

08005b48 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dd46      	ble.n	8005bea <DIG_process+0xa2>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 8005b5c:	4b4f      	ldr	r3, [pc, #316]	; (8005c9c <DIG_process+0x154>)
 8005b5e:	f3bf 8f5b 	dmb	ish
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f3bf 8f5b 	dmb	ish
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dd0c      	ble.n	8005b86 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 8005b6c:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <DIG_process+0x154>)
 8005b6e:	f3bf 8f5b 	dmb	ish
 8005b72:	e853 2f00 	ldrex	r2, [r3]
 8005b76:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b7a:	e843 2100 	strex	r1, r2, [r3]
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	d1f7      	bne.n	8005b72 <DIG_process+0x2a>
 8005b82:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8005b86:	4b45      	ldr	r3, [pc, #276]	; (8005c9c <DIG_process+0x154>)
 8005b88:	f3bf 8f5b 	dmb	ish
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f3bf 8f5b 	dmb	ish
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dc14      	bgt.n	8005bc0 <DIG_process+0x78>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8005b96:	4b42      	ldr	r3, [pc, #264]	; (8005ca0 <DIG_process+0x158>)
 8005b98:	f3bf 8f5b 	dmb	ish
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f3bf 8f5b 	dmb	ish
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dd09      	ble.n	8005bc0 <DIG_process+0x78>
           (ESCvar.ESC_SM2_sml > 0))
 8005bac:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <DIG_process+0x15c>)
 8005bae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <DIG_process+0x78>
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8005bb6:	211b      	movs	r1, #27
 8005bb8:	2014      	movs	r0, #20
 8005bba:	f002 fded 	bl	8008798 <ESC_ALstatusgotoerror>
 8005bbe:	e014      	b.n	8005bea <DIG_process+0xa2>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 8005bc0:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <DIG_process+0x158>)
 8005bc2:	f3bf 8f5b 	dmb	ish
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f3bf 8f5b 	dmb	ish
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <DIG_process+0xa2>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8005bd6:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <DIG_process+0x15c>)
 8005bd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <DIG_process+0x154>)
 8005be0:	f3bf 8f5b 	dmb	ish
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dd30      	ble.n	8005c56 <DIG_process+0x10e>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <DIG_process+0x158>)
 8005bf6:	f3bf 8f5b 	dmb	ish
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f3bf 8f5b 	dmb	ish
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dd15      	ble.n	8005c36 <DIG_process+0xee>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 8005c0a:	4b26      	ldr	r3, [pc, #152]	; (8005ca4 <DIG_process+0x15c>)
 8005c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00e      	beq.n	8005c36 <DIG_process+0xee>
      {
         RXPDO_update();
 8005c18:	f7ff ff5e 	bl	8005ad8 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <DIG_process+0x15c>)
 8005c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005c22:	461a      	mov	r2, r3
 8005c24:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <DIG_process+0x154>)
 8005c26:	f3bf 8f5b 	dmb	ish
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f5b 	dmb	ish

         /* Set outputs */
         cb_set_outputs();
 8005c30:	f7ff faf8 	bl	8005224 <cb_set_outputs>
 8005c34:	e00f      	b.n	8005c56 <DIG_process+0x10e>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8005c36:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <DIG_process+0x15c>)
 8005c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <DIG_process+0x10e>
      {
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <DIG_process+0x15c>)
 8005c46:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4916      	ldr	r1, [pc, #88]	; (8005ca8 <DIG_process+0x160>)
 8005c4e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005c52:	f004 f8b5 	bl	8009dc0 <ESC_read>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dd06      	ble.n	8005c6e <DIG_process+0x126>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <DIG_process+0x15c>)
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <DIG_process+0x126>
      {
         (ESCvar.application_hook)();
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <DIG_process+0x15c>)
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd0c      	ble.n	8005c92 <DIG_process+0x14a>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <DIG_process+0x158>)
 8005c7a:	f3bf 8f5b 	dmb	ish
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f3bf 8f5b 	dmb	ish
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <DIG_process+0x14a>
      {
         /* Update inputs */
         cb_get_inputs();
 8005c8a:	f7ff fab9 	bl	8005200 <cb_get_inputs>
         TXPDO_update();
 8005c8e:	f7ff feff 	bl	8005a90 <TXPDO_update>
      }
   }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000128 	.word	0x20000128
 8005ca0:	200009d4 	.word	0x200009d4
 8005ca4:	200008e8 	.word	0x200008e8
 8005ca8:	20000130 	.word	0x20000130

08005cac <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <ecat_slv_poll+0x48>)
 8005cb4:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8005cb8:	f004 f882 	bl	8009dc0 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <ecat_slv_poll+0x4c>)
 8005cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <ecat_slv_poll+0x4c>)
 8005cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

   /* Check the state machine */
   ESC_state();
 8005cc8:	f003 fd60 	bl	800978c <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8005ccc:	f003 fc50 	bl	8009570 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8005cd0:	f003 f97a 	bl	8008fc8 <ESC_mbxprocess>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <ecat_slv_poll+0x36>
   {
      ESC_coeprocess();
 8005cda:	f001 ffdf 	bl	8007c9c <ESC_coeprocess>
      ESC_foeprocess();
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 8005cde:	f003 faab 	bl	8009238 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <ecat_slv_poll+0x4c>)
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <ecat_slv_poll+0x44>
   {
      (ESCvar.esc_hw_eep_handler)();
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <ecat_slv_poll+0x4c>)
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	4798      	blx	r3
   }
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	200009c8 	.word	0x200009c8
 8005cf8:	200008e8 	.word	0x200008e8

08005cfc <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <ecat_slv_init+0x68>)
 8005d0a:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f003 ffa7 	bl	8009c60 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f004 f8a8 	bl	8009e68 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8005d18:	e00b      	b.n	8005d32 <ecat_slv_init+0x36>
   {
      ESC_read (
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	4912      	ldr	r1, [pc, #72]	; (8005d68 <ecat_slv_init+0x6c>)
 8005d1e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005d22:	f004 f84d 	bl	8009dc0 <ESC_read>
    		  ESCREG_DLSTATUS,
    		  (void *) &ESCvar.DLstatus,
              sizeof (ESCvar.DLstatus)
			  );
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <ecat_slv_init+0x70>)
 8005d28:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <ecat_slv_init+0x70>)
 8005d2e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8005d32:	4b0e      	ldr	r3, [pc, #56]	; (8005d6c <ecat_slv_init+0x70>)
 8005d34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ec      	beq.n	8005d1a <ecat_slv_init+0x1e>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus 	(ESCinit);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f002 fd0d 	bl	8008760 <ESC_ALstatus>
   ESC_ALerror 		(ALERR_NONE);
 8005d46:	2000      	movs	r0, #0
 8005d48:	f002 fcf0 	bl	800872c <ESC_ALerror>
   ESC_stopmbx 		();
 8005d4c:	f002 ff84 	bl	8008c58 <ESC_stopmbx>
   ESC_stopinput 	();
 8005d50:	f003 fbb0 	bl	80094b4 <ESC_stopinput>
   ESC_stopoutput 	();
 8005d54:	f003 fbf4 	bl	8009540 <ESC_stopoutput>

   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 8005d58:	f002 fb8c 	bl	8008474 <COE_initDefaultValues>
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000128 	.word	0x20000128
 8005d68:	2000096e 	.word	0x2000096e
 8005d6c:	200008e8 	.word	0x200008e8

08005d70 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int32_t nidx, uint8_t subindex)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
   const _objd *objd;
   int16_t n = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8005d80:	4a29      	ldr	r2, [pc, #164]	; (8005e28 <SDO_findsubindex+0xb8>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	4413      	add	r3, r2
 8005d88:	330c      	adds	r3, #12
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 8005d8e:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <SDO_findsubindex+0xb8>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4413      	add	r3, r2
 8005d96:	3304      	adds	r3, #4
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	73fb      	strb	r3, [r7, #15]

   /* Since most objects contain all subindexes (i.e. are not sparse),
    * check the most likely scenario first
    */
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d815      	bhi.n	8005dd0 <SDO_findsubindex+0x60>
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	461a      	mov	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d108      	bne.n	8005dd0 <SDO_findsubindex+0x60>
   {
      return subindex;
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	e02b      	b.n	8005e1c <SDO_findsubindex+0xac>
   }

   while (((objd + n)->subindex < subindex) && (n < maxsub))
   {
      n++;
 8005dc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8005dd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d204      	bcs.n	8005df6 <SDO_findsubindex+0x86>
 8005dec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	dbe6      	blt.n	8005dc4 <SDO_findsubindex+0x54>
   }
   if ((objd + n)->subindex != subindex)
 8005df6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	461a      	mov	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d002      	beq.n	8005e18 <SDO_findsubindex+0xa8>
   {
      return -1;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295
 8005e16:	e001      	b.n	8005e1c <SDO_findsubindex+0xac>
   }
   return n;
 8005e18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	0800c69c 	.word	0x0800c69c

08005e2c <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8005e3a:	e002      	b.n	8005e42 <SDO_findobject+0x16>
   {
      n++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8005e42:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <SDO_findobject+0x4c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d8f4      	bhi.n	8005e3c <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <SDO_findobject+0x4c>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d002      	beq.n	8005e68 <SDO_findobject+0x3c>
   {
      return -1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e000      	b.n	8005e6a <SDO_findobject+0x3e>
   }
   return n;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	0800c69c 	.word	0x0800c69c

08005e7c <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b090      	sub	sp, #64	; 0x40
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4603      	mov	r3, r0
 8005e8a:	81fb      	strh	r3, [r7, #14]
   uint32_t offset = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   uint16_t hobj;
   uint8_t si, sic, c;
   int32_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 8005e94:	89fb      	ldrh	r3, [r7, #14]
 8005e96:	f641 4212 	movw	r2, #7186	; 0x1c12
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d006      	beq.n	8005eac <sizeOfPDO+0x30>
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	f641 4213 	movw	r2, #7187	; 0x1c13
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d001      	beq.n	8005eac <sizeOfPDO+0x30>
   {
      return 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e134      	b.n	8006116 <sizeOfPDO+0x29a>
   }

   nidx = SDO_findobject (index);
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff ffbc 	bl	8005e2c <SDO_findobject>
 8005eb4:	6378      	str	r0, [r7, #52]	; 0x34
   if(nidx < 0)
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da01      	bge.n	8005ec0 <sizeOfPDO+0x44>
   {
      return 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e12a      	b.n	8006116 <sizeOfPDO+0x29a>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 8005ec0:	4a97      	ldr	r2, [pc, #604]	; (8006120 <sizeOfPDO+0x2a4>)
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	4413      	add	r3, r2
 8005ec8:	330c      	adds	r3, #12
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <sizeOfPDO+0x62>
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	e002      	b.n	8005ee4 <sizeOfPDO+0x68>
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (si)
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8104 	beq.w	80060fa <sizeOfPDO+0x27e>
   {
      for (sic = 1; sic <= si; sic++)
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ef8:	e0f8      	b.n	80060ec <sizeOfPDO+0x270>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8005efa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	461a      	mov	r2, r3
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	4413      	add	r3, r2
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <sizeOfPDO+0xae>
 8005f12:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	4413      	add	r3, r2
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	e00a      	b.n	8005f40 <sizeOfPDO+0xc4>
 8005f2a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	461a      	mov	r2, r3
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	4413      	add	r3, r2
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	84bb      	strh	r3, [r7, #36]	; 0x24
         nidx = SDO_findobject (hobj);
 8005f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff71 	bl	8005e2c <SDO_findobject>
 8005f4a:	6378      	str	r0, [r7, #52]	; 0x34
         if (nidx >= 0)
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f2c0 80c7 	blt.w	80060e2 <sizeOfPDO+0x266>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8005f54:	4a72      	ldr	r2, [pc, #456]	; (8006120 <sizeOfPDO+0x2a4>)
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	623b      	str	r3, [r7, #32]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <sizeOfPDO+0xf6>
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	e002      	b.n	8005f78 <sizeOfPDO+0xfc>
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	77fb      	strb	r3, [r7, #31]

            for (c = 1; c <= maxsub; c++)
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005f80:	e0a9      	b.n	80060d6 <sizeOfPDO+0x25a>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 8005f82:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	4413      	add	r3, r2
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <sizeOfPDO+0x136>
 8005f9a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	e009      	b.n	8005fc6 <sizeOfPDO+0x14a>
 8005fb2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	61bb      	str	r3, [r7, #24]
               uint8_t bitlength = value & 0xFF;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	75fb      	strb	r3, [r7, #23]

               if (max_mappings > 0)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd78      	ble.n	80060c4 <sizeOfPDO+0x248>
               {
                  uint16_t index = (uint16_t)(value >> 16);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	82bb      	strh	r3, [r7, #20]
                  uint8_t subindex = (value >> 8) & 0xFF;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	74fb      	strb	r3, [r7, #19]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d105      	bne.n	8005ff2 <sizeOfPDO+0x176>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
                     return 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e091      	b.n	8006116 <sizeOfPDO+0x29a>
                  DPRINT ("%04"PRIx32":%02"PRIx32" @ %"PRIu32"\n",
                        index,
                        subindex,
                        offset);

                  if (index == 0 && subindex == 0)
 8005ff2:	8abb      	ldrh	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <sizeOfPDO+0x188>
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <sizeOfPDO+0x188>
                  {
                     /* Padding element */
                     mapping = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006002:	e02d      	b.n	8006060 <sizeOfPDO+0x1e4>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 8006004:	8abb      	ldrh	r3, [r7, #20]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff ff10 	bl	8005e2c <SDO_findobject>
 800600c:	6378      	str	r0, [r7, #52]	; 0x34
                     if (nidx >= 0)
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	2b00      	cmp	r3, #0
 8006012:	db1f      	blt.n	8006054 <sizeOfPDO+0x1d8>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	4619      	mov	r1, r3
 8006018:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800601a:	f7ff fea9 	bl	8005d70 <SDO_findsubindex>
 800601e:	4603      	mov	r3, r0
 8006020:	823b      	strh	r3, [r7, #16]
                        if (nsub < 0)
 8006022:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da05      	bge.n	8006036 <sizeOfPDO+0x1ba>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f04f 32ff 	mov.w	r2, #4294967295
 8006030:	601a      	str	r2, [r3, #0]
                           return 0;
 8006032:	2300      	movs	r3, #0
 8006034:	e06f      	b.n	8006116 <sizeOfPDO+0x29a>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8006036:	4a3a      	ldr	r2, [pc, #232]	; (8006120 <sizeOfPDO+0x2a4>)
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	4413      	add	r3, r2
 800603e:	330c      	adds	r3, #12
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006052:	e005      	b.n	8006060 <sizeOfPDO+0x1e4>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f04f 32ff 	mov.w	r2, #4294967295
 800605a:	601a      	str	r2, [r3, #0]
                        return 0;
 800605c:	2300      	movs	r3, #0
 800605e:	e05a      	b.n	8006116 <sizeOfPDO+0x29a>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 8006060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006072:	601a      	str	r2, [r3, #0]
                  /* Save object list reference */
                  if(mapping != NULL)
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <sizeOfPDO+0x21a>
                  {
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 800607a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607c:	4613      	mov	r3, r2
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	461a      	mov	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	4924      	ldr	r1, [pc, #144]	; (8006120 <sizeOfPDO+0x2a4>)
 8006090:	440a      	add	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	e009      	b.n	80060aa <sizeOfPDO+0x22e>
                  }
                  else
                  {
                     mappings[mapIx].objectlistitem = NULL;
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	4613      	mov	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4413      	add	r3, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	605a      	str	r2, [r3, #4]
                  }
                  mappings[mapIx++].offset = offset;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	633a      	str	r2, [r7, #48]	; 0x30
 80060b0:	461a      	mov	r2, r3
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4413      	add	r3, r2
 80060c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060c2:	609a      	str	r2, [r3, #8]
               }

               offset += bitlength;
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060c8:	4413      	add	r3, r2
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (c = 1; c <= maxsub; c++)
 80060cc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80060d0:	3301      	adds	r3, #1
 80060d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80060d6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80060da:	7ffb      	ldrb	r3, [r7, #31]
 80060dc:	429a      	cmp	r2, r3
 80060de:	f67f af50 	bls.w	8005f82 <sizeOfPDO+0x106>
      for (sic = 1; sic <= si; sic++)
 80060e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060e6:	3301      	adds	r3, #1
 80060e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80060ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f4:	429a      	cmp	r2, r3
 80060f6:	f67f af00 	bls.w	8005efa <sizeOfPDO+0x7e>
            }
         }
      }
   }

   if (max_mappings > 0)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	dd03      	ble.n	8006108 <sizeOfPDO+0x28c>
   {
      *nmappings = mapIx;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e002      	b.n	800610e <sizeOfPDO+0x292>
   }
   else
   {
      *nmappings = 0;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset) & 0xFFFF;
 800610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006110:	3307      	adds	r3, #7
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	b29b      	uxth	r3, r3
}
 8006116:	4618      	mov	r0, r3
 8006118:	3740      	adds	r7, #64	; 0x40
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	0800c69c 	.word	0x0800c69c

08006124 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
static void copy2mbx (void *source, void *dest, size_t size)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
   memcpy (dest, source, size);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	68b8      	ldr	r0, [r7, #8]
 8006136:	f004 fcbf 	bl	800aab8 <memcpy>
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
static void SDO_abort (uint8_t reusembx, uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	71fb      	strb	r3, [r7, #7]
 8006150:	460b      	mov	r3, r1
 8006152:	80bb      	strh	r3, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	71bb      	strb	r3, [r7, #6]
   uint8_t MBXout;
   _COEsdo *coeres;
   if (reusembx)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <SDO_abort+0x20>
      MBXout = reusembx;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	73fb      	strb	r3, [r7, #15]
 8006162:	e003      	b.n	800616c <SDO_abort+0x28>
   else
      MBXout = ESC_claimbuffer ();
 8006164:	f002 fe74 	bl	8008e50 <ESC_claimbuffer>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d025      	beq.n	80061be <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <SDO_abort+0x84>)
 8006176:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006178:	fb02 f303 	mul.w	r3, r2, r3
 800617c:	4a13      	ldr	r2, [pc, #76]	; (80061cc <SDO_abort+0x88>)
 800617e:	4413      	add	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	220a      	movs	r2, #10
 8006186:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	7953      	ldrb	r3, [r2, #5]
 800618c:	2103      	movs	r1, #3
 800618e:	f361 0303 	bfi	r3, r1, #0, #4
 8006192:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800619a:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	88ba      	ldrh	r2, [r7, #4]
 80061a0:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	79ba      	ldrb	r2, [r7, #6]
 80061a8:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2280      	movs	r2, #128	; 0x80
 80061ae:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	4a05      	ldr	r2, [pc, #20]	; (80061d0 <SDO_abort+0x8c>)
 80061ba:	2103      	movs	r1, #3
 80061bc:	54d1      	strb	r1, [r2, r3]
   }
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200008e8 	.word	0x200008e8
 80061cc:	20000b58 	.word	0x20000b58
 80061d0:	20000d80 	.word	0x20000d80

080061d4 <set_state_idle>:

static void set_state_idle (uint8_t reusembx,
                           uint16_t index,
                           uint8_t subindex,
                           uint32_t abortcode)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4603      	mov	r3, r0
 80061de:	71fb      	strb	r3, [r7, #7]
 80061e0:	460b      	mov	r3, r1
 80061e2:	80bb      	strh	r3, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71bb      	strb	r3, [r7, #6]
   if (abortcode != 0)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <set_state_idle+0x26>
   {
      SDO_abort (reusembx, index, subindex, abortcode);
 80061ee:	79ba      	ldrb	r2, [r7, #6]
 80061f0:	88b9      	ldrh	r1, [r7, #4]
 80061f2:	79f8      	ldrb	r0, [r7, #7]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f7ff ffa5 	bl	8006144 <SDO_abort>
   }

   MBXcontrol[0].state = MBXstate_idle;
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <set_state_idle+0x3c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <set_state_idle+0x40>)
 8006202:	2200      	movs	r2, #0
 8006204:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000d80 	.word	0x20000d80
 8006214:	200008e8 	.word	0x200008e8

08006218 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
static void SDO_upload (void)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b08f      	sub	sp, #60	; 0x3c
 800621c:	af02      	add	r7, sp, #8
   int32_t nidx;
   int16_t nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   uint32_t abort = 1;
 800621e:	2301      	movs	r3, #1
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 8006222:	4b91      	ldr	r3, [pc, #580]	; (8006468 <SDO_upload+0x250>)
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
   index = etohs (coesdo->index);
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800622e:	847b      	strh	r3, [r7, #34]	; 0x22
   subindex = coesdo->subindex;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	7adb      	ldrb	r3, [r3, #11]
 8006234:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   nidx = SDO_findobject (index);
 8006238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fdf6 	bl	8005e2c <SDO_findobject>
 8006240:	61f8      	str	r0, [r7, #28]
   if (nidx >= 0)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f2c0 81c3 	blt.w	80065d0 <SDO_upload+0x3b8>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800624a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800624e:	4619      	mov	r1, r3
 8006250:	69f8      	ldr	r0, [r7, #28]
 8006252:	f7ff fd8d 	bl	8005d70 <SDO_findsubindex>
 8006256:	4603      	mov	r3, r0
 8006258:	837b      	strh	r3, [r7, #26]
      if (nsub >= 0)
 800625a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f2c0 81ae 	blt.w	80065c0 <SDO_upload+0x3a8>
      {
         objd = SDOobjects[nidx].objdesc;
 8006264:	4a81      	ldr	r2, [pc, #516]	; (800646c <SDO_upload+0x254>)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	4413      	add	r3, r2
 800626c:	330c      	adds	r3, #12
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	617b      	str	r3, [r7, #20]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8006272:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4413      	add	r3, r2
 8006284:	88db      	ldrh	r3, [r3, #6]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800628c:	74fb      	strb	r3, [r7, #19]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800628e:	4b78      	ldr	r3, [pc, #480]	; (8006470 <SDO_upload+0x258>)
 8006290:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	74bb      	strb	r3, [r7, #18]
         if (!READ_ACCESS(access, state))
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <SDO_upload+0x94>
 80062a6:	7cbb      	ldrb	r3, [r7, #18]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d017      	beq.n	80062dc <SDO_upload+0xc4>
 80062ac:	7cfb      	ldrb	r3, [r7, #19]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <SDO_upload+0xa4>
 80062b6:	7cbb      	ldrb	r3, [r7, #18]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d00f      	beq.n	80062dc <SDO_upload+0xc4>
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <SDO_upload+0xb4>
 80062c6:	7cbb      	ldrb	r3, [r7, #18]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d007      	beq.n	80062dc <SDO_upload+0xc4>
         {
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 80062cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80062d0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80062d2:	4b68      	ldr	r3, [pc, #416]	; (8006474 <SDO_upload+0x25c>)
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7ff ff7d 	bl	80061d4 <set_state_idle>
            return;
 80062da:	e187      	b.n	80065ec <SDO_upload+0x3d4>
         }
         MBXout = ESC_claimbuffer ();
 80062dc:	f002 fdb8 	bl	8008e50 <ESC_claimbuffer>
 80062e0:	4603      	mov	r3, r0
 80062e2:	747b      	strb	r3, [r7, #17]
         if (MBXout)
 80062e4:	7c7b      	ldrb	r3, [r7, #17]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8179 	beq.w	80065de <SDO_upload+0x3c6>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80062ec:	7c7b      	ldrb	r3, [r7, #17]
 80062ee:	4a60      	ldr	r2, [pc, #384]	; (8006470 <SDO_upload+0x258>)
 80062f0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	4a5c      	ldr	r2, [pc, #368]	; (8006468 <SDO_upload+0x250>)
 80062f8:	4413      	add	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	220a      	movs	r2, #10
 8006300:	801a      	strh	r2, [r3, #0]
            coeres->mbxheader.mbxtype = MBXCOE;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	7953      	ldrb	r3, [r2, #5]
 8006306:	2103      	movs	r1, #3
 8006308:	f361 0303 	bfi	r3, r1, #0, #4
 800630c:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006314:	80da      	strh	r2, [r3, #6]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 8006316:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	461a      	mov	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	4413      	add	r3, r2
 8006328:	889b      	ldrh	r3, [r3, #4]
 800632a:	607b      	str	r3, [r7, #4]
            /* expedited bits used calculation */
            dss = 0x0c;
 800632c:	230c      	movs	r3, #12
 800632e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (size > 8)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d902      	bls.n	800633e <SDO_upload+0x126>
            {
               dss = 0x08;
 8006338:	2308      	movs	r3, #8
 800633a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 16)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b10      	cmp	r3, #16
 8006342:	d902      	bls.n	800634a <SDO_upload+0x132>
            {
               dss = 0x04;
 8006344:	2304      	movs	r3, #4
 8006346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 24)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b18      	cmp	r3, #24
 800634e:	d902      	bls.n	8006356 <SDO_upload+0x13e>
            {
               dss = 0x00;
 8006350:	2300      	movs	r3, #0
 8006352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            coeres->index = htoes (index);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800635a:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006364:	72da      	strb	r2, [r3, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2241      	movs	r2, #65	; 0x41
 800636a:	721a      	strb	r2, [r3, #8]
               COE_SIZE_INDICATOR;
            /* convert bits to bytes */
            size = BITS2BYTES(size);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3307      	adds	r3, #7
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	607b      	str	r3, [r7, #4]
            if (size <= 4)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b04      	cmp	r3, #4
 8006378:	d87e      	bhi.n	8006478 <SDO_upload+0x260>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	7a1a      	ldrb	r2, [r3, #8]
 800637e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006382:	4313      	orrs	r3, r2
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	721a      	strb	r2, [r3, #8]
               void *dataptr = ((objd + nsub)->data) ?
 8006390:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	461a      	mov	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	691b      	ldr	r3, [r3, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <SDO_upload+0x1a6>
 80063a8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	461a      	mov	r2, r3
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	e009      	b.n	80063d2 <SDO_upload+0x1ba>
 80063be:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	461a      	mov	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4413      	add	r3, r2
 80063d0:	330c      	adds	r3, #12
               void *dataptr = ((objd + nsub)->data) ?
 80063d2:	60bb      	str	r3, [r7, #8]
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 80063d4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	461a      	mov	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 80063e6:	88db      	ldrh	r3, [r3, #6]
 80063e8:	1d3a      	adds	r2, r7, #4
 80063ea:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80063ee:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	f7ff fb01 	bl	80059fc <ESC_upload_pre_objecthandler>
 80063fa:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d129      	bne.n	8006456 <SDO_upload+0x23e>
               {
                  if ((objd + nsub)->data == NULL)
 8006402:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	461a      	mov	r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <SDO_upload+0x21c>
                  {
                     /* use constant value */
                     coeres->size = htoel ((objd + nsub)->value);
 800641a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	461a      	mov	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	e09c      	b.n	800656e <SDO_upload+0x356>
                  }
                  else
                  {
                     /* use dynamic data */
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 8006434:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	461a      	mov	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	6918      	ldr	r0, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	330c      	adds	r3, #12
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4619      	mov	r1, r3
 8006450:	f7ff fe68 	bl	8006124 <copy2mbx>
 8006454:	e08b      	b.n	800656e <SDO_upload+0x356>
                  }
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8006456:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800645a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800645c:	7c78      	ldrb	r0, [r7, #17]
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f7ff feb8 	bl	80061d4 <set_state_idle>
                  return;
 8006464:	e0c2      	b.n	80065ec <SDO_upload+0x3d4>
 8006466:	bf00      	nop
 8006468:	20000b58 	.word	0x20000b58
 800646c:	0800c69c 	.word	0x0800c69c
 8006470:	200008e8 	.word	0x200008e8
 8006474:	06010001 	.word	0x06010001
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 8006478:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	461a      	mov	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800648a:	691c      	ldr	r4, [r3, #16]
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800648c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	461a      	mov	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	1d3a      	adds	r2, r7, #4
 80064a2:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80064a6:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4613      	mov	r3, r2
 80064ac:	4622      	mov	r2, r4
 80064ae:	f7ff faa5 	bl	80059fc <ESC_upload_pre_objecthandler>
 80064b2:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d151      	bne.n	800655e <SDO_upload+0x346>
               {
                  /* set total size in bytes */
                  ESCvar.frags = size;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a4d      	ldr	r2, [pc, #308]	; (80065f4 <SDO_upload+0x3dc>)
 80064be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	60da      	str	r2, [r3, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f103 020a 	add.w	r2, r3, #10
 80064ce:	4b49      	ldr	r3, [pc, #292]	; (80065f4 <SDO_upload+0x3dc>)
 80064d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d2:	3b06      	subs	r3, #6
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d926      	bls.n	8006526 <SDO_upload+0x30e>
                  {
                     /* segmented transfer needed */
                     /* limit to mailbox size */
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 80064d8:	4b46      	ldr	r3, [pc, #280]	; (80065f4 <SDO_upload+0x3dc>)
 80064da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064dc:	3b10      	subs	r3, #16
 80064de:	607b      	str	r3, [r7, #4]
                     /* number of bytes done */
                     ESCvar.fragsleft = size;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a44      	ldr	r2, [pc, #272]	; (80065f4 <SDO_upload+0x3dc>)
 80064e4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
                     /* signal segmented transfer */
                     ESCvar.segmented = MBXSEU;
 80064e8:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <SDO_upload+0x3dc>)
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 80064f0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	461a      	mov	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4a3b      	ldr	r2, [pc, #236]	; (80065f4 <SDO_upload+0x3dc>)
 8006506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800650a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	461a      	mov	r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	4413      	add	r3, r2
 800651c:	88da      	ldrh	r2, [r3, #6]
 800651e:	4b35      	ldr	r3, [pc, #212]	; (80065f4 <SDO_upload+0x3dc>)
 8006520:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8006524:	e003      	b.n	800652e <SDO_upload+0x316>
                  }
                  else
                  {
                     ESCvar.segmented = 0;
 8006526:	4b33      	ldr	r3, [pc, #204]	; (80065f4 <SDO_upload+0x3dc>)
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  }
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	b29b      	uxth	r3, r3
 8006532:	330a      	adds	r3, #10
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	801a      	strh	r2, [r3, #0]

                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800653a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	461a      	mov	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	6918      	ldr	r0, [r3, #16]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	330c      	adds	r3, #12
 8006552:	3304      	adds	r3, #4
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4619      	mov	r1, r3
 8006558:	f7ff fde4 	bl	8006124 <copy2mbx>
 800655c:	e007      	b.n	800656e <SDO_upload+0x356>
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800655e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006562:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8006564:	7c78      	ldrb	r0, [r7, #17]
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	f7ff fe34 	bl	80061d4 <set_state_idle>
                  return;
 800656c:	e03e      	b.n	80065ec <SDO_upload+0x3d4>
               }
            }
            if ((abort == 0) && (ESCvar.segmented == 0))
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d120      	bne.n	80065b6 <SDO_upload+0x39e>
 8006574:	4b1f      	ldr	r3, [pc, #124]	; (80065f4 <SDO_upload+0x3dc>)
 8006576:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11b      	bne.n	80065b6 <SDO_upload+0x39e>
            {
               abort = ESC_upload_post_objecthandler (index, subindex,
                                                      (objd + nsub)->flags);
 800657e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	461a      	mov	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	4413      	add	r3, r2
               abort = ESC_upload_post_objecthandler (index, subindex,
 8006590:	88da      	ldrh	r2, [r3, #6]
 8006592:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8006596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fa4f 	bl	8005a3c <ESC_upload_post_objecthandler>
 800659e:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort != 0)
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <SDO_upload+0x39e>
               {
                  set_state_idle (MBXout, index, subindex, abort);
 80065a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80065aa:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80065ac:	7c78      	ldrb	r0, [r7, #17]
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	f7ff fe10 	bl	80061d4 <set_state_idle>
                  return;
 80065b4:	e01a      	b.n	80065ec <SDO_upload+0x3d4>
               }
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80065b6:	7c7b      	ldrb	r3, [r7, #17]
 80065b8:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <SDO_upload+0x3e0>)
 80065ba:	2103      	movs	r1, #3
 80065bc:	54d1      	strb	r1, [r2, r3]
 80065be:	e00e      	b.n	80065de <SDO_upload+0x3c6>
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 80065c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80065c4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <SDO_upload+0x3e4>)
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff fdbb 	bl	8006144 <SDO_abort>
 80065ce:	e006      	b.n	80065de <SDO_upload+0x3c6>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 80065d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80065d4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <SDO_upload+0x3e8>)
 80065d8:	2000      	movs	r0, #0
 80065da:	f7ff fdb3 	bl	8006144 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <SDO_upload+0x3e0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <SDO_upload+0x3dc>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 80065ec:	3734      	adds	r7, #52	; 0x34
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200008e8 	.word	0x200008e8
 80065f8:	20000d80 	.word	0x20000d80
 80065fc:	06090011 	.word	0x06090011
 8006600:	06020000 	.word	0x06020000

08006604 <complete_access_get_variables>:

static uint32_t complete_access_get_variables(_COEsdo *coesdo, uint16_t *index,
                                              uint8_t *subindex, int32_t *nidx,
                                              int16_t *nsub)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
   *index = etohs (coesdo->index);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006618:	b29a      	uxth	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	801a      	strh	r2, [r3, #0]
   *subindex = coesdo->subindex;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	7ada      	ldrb	r2, [r3, #11]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	701a      	strb	r2, [r3, #0]

   /* A Complete Access must start with Subindex 0 or Subindex 1 */
   if (*subindex > 1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d901      	bls.n	8006632 <complete_access_get_variables+0x2e>
   {
      return ABORT_UNSUPPORTED;
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <complete_access_get_variables+0x7c>)
 8006630:	e021      	b.n	8006676 <complete_access_get_variables+0x72>
   }

   *nidx = SDO_findobject (*index);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fbf8 	bl	8005e2c <SDO_findobject>
 800663c:	4602      	mov	r2, r0
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	601a      	str	r2, [r3, #0]
   if (*nidx < 0)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	da01      	bge.n	800664e <complete_access_get_variables+0x4a>
   {
      return ABORT_NOOBJECT;
 800664a:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <complete_access_get_variables+0x80>)
 800664c:	e013      	b.n	8006676 <complete_access_get_variables+0x72>
   }

   *nsub = SDO_findsubindex (*nidx, *subindex);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7ff fb89 	bl	8005d70 <SDO_findsubindex>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	801a      	strh	r2, [r3, #0]
   if (*nsub < 0)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da01      	bge.n	8006674 <complete_access_get_variables+0x70>
   {
      return ABORT_NOSUBINDEX;
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <complete_access_get_variables+0x84>)
 8006672:	e000      	b.n	8006676 <complete_access_get_variables+0x72>
   }

   return 0;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	06010000 	.word	0x06010000
 8006684:	06020000 	.word	0x06020000
 8006688:	06090011 	.word	0x06090011

0800668c <complete_access_subindex_loop>:
                                              int32_t nidx,
                                              int16_t nsub,
                                              uint8_t *mbxdata,
                                              load_t load_type,
                                              uint32_t max_bytes)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	80fb      	strh	r3, [r7, #6]
   /* Objects with dynamic entries cannot be accessed with Complete Access */
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	885b      	ldrh	r3, [r3, #2]
 80066a0:	2b09      	cmp	r3, #9
 80066a2:	d007      	beq.n	80066b4 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	885b      	ldrh	r3, [r3, #2]
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 80066a8:	2b0a      	cmp	r3, #10
 80066aa:	d003      	beq.n	80066b4 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_UNICODE_STRING))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	885b      	ldrh	r3, [r3, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 80066b0:	2b0b      	cmp	r3, #11
 80066b2:	d101      	bne.n	80066b8 <complete_access_subindex_loop+0x2c>
   {
      return ABORT_CA_NOT_SUPPORTED;
 80066b4:	4ba9      	ldr	r3, [pc, #676]	; (800695c <complete_access_subindex_loop+0x2d0>)
 80066b6:	e14d      	b.n	8006954 <complete_access_subindex_loop+0x2c8>
   }

   uint32_t size = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24

   /* Clear padded mbxdata byte [1] on upload */
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 80066bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 8139 	bne.w	8006938 <complete_access_subindex_loop+0x2ac>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8135 	beq.w	8006938 <complete_access_subindex_loop+0x2ac>
   {
      mbxdata[1] = 0;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
   }

   while (nsub <= SDOobjects[nidx].maxsub)
 80066d6:	e12f      	b.n	8006938 <complete_access_subindex_loop+0x2ac>
   {
      uint16_t bitlen = (objd + nsub)->bitlength;
 80066d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	461a      	mov	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	889b      	ldrh	r3, [r3, #4]
 80066ec:	847b      	strh	r3, [r7, #34]	; 0x22
      void *ul_source = ((objd + nsub)->data != NULL) ?
 80066ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	461a      	mov	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	691b      	ldr	r3, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <complete_access_subindex_loop+0x90>
 8006706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	461a      	mov	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	e009      	b.n	8006730 <complete_access_subindex_loop+0xa4>
 800671c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	461a      	mov	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	330c      	adds	r3, #12
      void *ul_source = ((objd + nsub)->data != NULL) ?
 8006730:	61fb      	str	r3, [r7, #28]
      uint8_t bitoffset = size % 8;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	76fb      	strb	r3, [r7, #27]
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800673c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	461a      	mov	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	88db      	ldrh	r3, [r3, #6]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006756:	76bb      	strb	r3, [r7, #26]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 8006758:	4b81      	ldr	r3, [pc, #516]	; (8006960 <complete_access_subindex_loop+0x2d4>)
 800675a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	767b      	strb	r3, [r7, #25]

      if ((bitlen % 8) == 0)
 8006766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d16f      	bne.n	8006852 <complete_access_subindex_loop+0x1c6>
      {
         if (bitoffset != 0)
 8006772:	7efb      	ldrb	r3, [r7, #27]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <complete_access_subindex_loop+0xf6>
         {
            /* move on to next byte boundary */
            size += (8U - bitoffset);
 8006778:	7efb      	ldrb	r3, [r7, #27]
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	3308      	adds	r3, #8
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
         }
         if (mbxdata != NULL)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80be 	beq.w	8006906 <complete_access_subindex_loop+0x27a>
         {
            /* copy a non-bit data type to a byte boundary */
            if (load_type == UPLOAD)
 800678a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d131      	bne.n	80067f6 <complete_access_subindex_loop+0x16a>
            {
               if (READ_ACCESS(access, state))
 8006792:	7ebb      	ldrb	r3, [r7, #26]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <complete_access_subindex_loop+0x116>
 800679c:	7e7b      	ldrb	r3, [r7, #25]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d00f      	beq.n	80067c2 <complete_access_subindex_loop+0x136>
 80067a2:	7ebb      	ldrb	r3, [r7, #26]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <complete_access_subindex_loop+0x126>
 80067ac:	7e7b      	ldrb	r3, [r7, #25]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d007      	beq.n	80067c2 <complete_access_subindex_loop+0x136>
 80067b2:	7ebb      	ldrb	r3, [r7, #26]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <complete_access_subindex_loop+0x150>
 80067bc:	7e7b      	ldrb	r3, [r7, #25]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d10c      	bne.n	80067dc <complete_access_subindex_loop+0x150>
               {
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	3307      	adds	r3, #7
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	18d0      	adds	r0, r2, r3
                        BITS2BYTES(bitlen));
 80067cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067ce:	3307      	adds	r3, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 80067d0:	08db      	lsrs	r3, r3, #3
 80067d2:	461a      	mov	r2, r3
 80067d4:	69f9      	ldr	r1, [r7, #28]
 80067d6:	f004 f96f 	bl	800aab8 <memcpy>
 80067da:	e094      	b.n	8006906 <complete_access_subindex_loop+0x27a>
               }
               else
               {
                  /* return zeroes for upload of WO objects */
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	3307      	adds	r3, #7
 80067e0:	08db      	lsrs	r3, r3, #3
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	18d0      	adds	r0, r2, r3
 80067e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067e8:	3307      	adds	r3, #7
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	461a      	mov	r2, r3
 80067ee:	2100      	movs	r1, #0
 80067f0:	f004 f970 	bl	800aad4 <memset>
 80067f4:	e087      	b.n	8006906 <complete_access_subindex_loop+0x27a>
               }
            }
            /* download of RO objects shall be ignored */
            else if (WRITE_ACCESS(access, state))
 80067f6:	7ebb      	ldrb	r3, [r7, #26]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <complete_access_subindex_loop+0x17a>
 8006800:	7e7b      	ldrb	r3, [r7, #25]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d00f      	beq.n	8006826 <complete_access_subindex_loop+0x19a>
 8006806:	7ebb      	ldrb	r3, [r7, #26]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <complete_access_subindex_loop+0x18a>
 8006810:	7e7b      	ldrb	r3, [r7, #25]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d007      	beq.n	8006826 <complete_access_subindex_loop+0x19a>
 8006816:	7ebb      	ldrb	r3, [r7, #26]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d072      	beq.n	8006906 <complete_access_subindex_loop+0x27a>
 8006820:	7e7b      	ldrb	r3, [r7, #25]
 8006822:	2b08      	cmp	r3, #8
 8006824:	d16f      	bne.n	8006906 <complete_access_subindex_loop+0x27a>
            {
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8006826:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	6918      	ldr	r0, [r3, #16]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	3307      	adds	r3, #7
 800683e:	08db      	lsrs	r3, r3, #3
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	18d1      	adds	r1, r2, r3
                     BITS2BYTES(bitlen));
 8006844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006846:	3307      	adds	r3, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	461a      	mov	r2, r3
 800684c:	f004 f934 	bl	800aab8 <memcpy>
 8006850:	e059      	b.n	8006906 <complete_access_subindex_loop+0x27a>
            }
         }
      }
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 8006852:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006856:	2b00      	cmp	r3, #0
 8006858:	d155      	bne.n	8006906 <complete_access_subindex_loop+0x27a>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d052      	beq.n	8006906 <complete_access_subindex_loop+0x27a>
      {
         /* copy a bit data type into correct position */
         uint32_t bitmask = (1U << bitlen) - 1U;
 8006860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006862:	2201      	movs	r2, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
         uint32_t tempmask;
         if (READ_ACCESS(access, state))
 800686c:	7ebb      	ldrb	r3, [r7, #26]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <complete_access_subindex_loop+0x1f0>
 8006876:	7e7b      	ldrb	r3, [r7, #25]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d00f      	beq.n	800689c <complete_access_subindex_loop+0x210>
 800687c:	7ebb      	ldrb	r3, [r7, #26]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <complete_access_subindex_loop+0x200>
 8006886:	7e7b      	ldrb	r3, [r7, #25]
 8006888:	2b04      	cmp	r3, #4
 800688a:	d007      	beq.n	800689c <complete_access_subindex_loop+0x210>
 800688c:	7ebb      	ldrb	r3, [r7, #26]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d023      	beq.n	80068de <complete_access_subindex_loop+0x252>
 8006896:	7e7b      	ldrb	r3, [r7, #25]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d120      	bne.n	80068de <complete_access_subindex_loop+0x252>
         {
            if (bitoffset == 0)
 800689c:	7efb      	ldrb	r3, [r7, #27]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <complete_access_subindex_loop+0x222>
            {
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
            }
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	401a      	ands	r2, r3
 80068b8:	7efb      	ldrb	r3, [r7, #27]
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	08db      	lsrs	r3, r3, #3
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	4413      	add	r3, r2
 80068c8:	7819      	ldrb	r1, [r3, #0]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	6838      	ldr	r0, [r7, #0]
 80068d4:	4403      	add	r3, r0
 80068d6:	430a      	orrs	r2, r1
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	e013      	b.n	8006906 <complete_access_subindex_loop+0x27a>
         }
         else
         {
            tempmask = ~(bitmask << bitoffset);
 80068de:	7efb      	ldrb	r3, [r7, #27]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43db      	mvns	r3, r3
 80068e8:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	08db      	lsrs	r3, r3, #3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	7819      	ldrb	r1, [r3, #0]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	08db      	lsrs	r3, r3, #3
 80068fc:	6838      	ldr	r0, [r7, #0]
 80068fe:	4403      	add	r3, r0
 8006900:	400a      	ands	r2, r1
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
         }
      }

      /* Subindex 0 is padded to 16 bit */
      size += (nsub == 0) ? 16 : bitlen;
 8006906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <complete_access_subindex_loop+0x286>
 800690e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006910:	e000      	b.n	8006914 <complete_access_subindex_loop+0x288>
 8006912:	2310      	movs	r3, #16
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	4413      	add	r3, r2
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
      nsub++;
 800691a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800691e:	b29b      	uxth	r3, r3
 8006920:	3301      	adds	r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	80fb      	strh	r3, [r7, #6]

      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <complete_access_subindex_loop+0x2ac>
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	3307      	adds	r3, #7
 8006930:	08db      	lsrs	r3, r3, #3
 8006932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006934:	429a      	cmp	r2, r3
 8006936:	d90b      	bls.n	8006950 <complete_access_subindex_loop+0x2c4>
   while (nsub <= SDOobjects[nidx].maxsub)
 8006938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800693c:	4909      	ldr	r1, [pc, #36]	; (8006964 <complete_access_subindex_loop+0x2d8>)
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	440a      	add	r2, r1
 8006944:	3204      	adds	r2, #4
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	4293      	cmp	r3, r2
 800694a:	f77f aec5 	ble.w	80066d8 <complete_access_subindex_loop+0x4c>
 800694e:	e000      	b.n	8006952 <complete_access_subindex_loop+0x2c6>
      {
         break;
 8006950:	bf00      	nop
      }
   }

   return size;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006954:	4618      	mov	r0, r3
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	06010004 	.word	0x06010004
 8006960:	200008e8 	.word	0x200008e8
 8006964:	0800c69c 	.word	0x0800c69c

08006968 <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4603      	mov	r3, r0
 8006978:	70fb      	strb	r3, [r7, #3]
 800697a:	460b      	mov	r3, r1
 800697c:	70bb      	strb	r3, [r7, #2]
 800697e:	4613      	mov	r3, r2
 8006980:	803b      	strh	r3, [r7, #0]
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	220a      	movs	r2, #10
 8006986:	801a      	strh	r2, [r3, #0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	7953      	ldrb	r3, [r2, #5]
 800698c:	2103      	movs	r1, #3
 800698e:	f361 0303 	bfi	r3, r1, #0, #4
 8006992:	7153      	strb	r3, [r2, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	b29b      	uxth	r3, r3
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	80da      	strh	r2, [r3, #6]
   coesdo->command = command;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	78ba      	ldrb	r2, [r7, #2]
 80069a4:	721a      	strb	r2, [r3, #8]
   coesdo->index = htoes(index);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	883a      	ldrh	r2, [r7, #0]
 80069aa:	f8a3 2009 	strh.w	r2, [r3, #9]
   coesdo->subindex = subindex;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7c3a      	ldrb	r2, [r7, #16]
 80069b2:	72da      	strb	r2, [r3, #11]
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <SDO_upload_complete_access>:
 *  sending the content requested in a free Mailbox buffer. Depending of
 *  size of data expedited, normal or segmented transfer is used.
 *  On error an SDO Abort will be sent.
 */
static void SDO_upload_complete_access (void)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b08d      	sub	sp, #52	; 0x34
 80069c4:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 80069c6:	4b87      	ldr	r3, [pc, #540]	; (8006be4 <SDO_upload_complete_access+0x224>)
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 80069ca:	f107 0008 	add.w	r0, r7, #8
 80069ce:	f107 020d 	add.w	r2, r7, #13
 80069d2:	f107 010e 	add.w	r1, r7, #14
 80069d6:	1dbb      	adds	r3, r7, #6
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4603      	mov	r3, r0
 80069dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069de:	f7ff fe11 	bl	8006604 <complete_access_get_variables>
 80069e2:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d006      	beq.n	80069f8 <SDO_upload_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 80069ea:	89f9      	ldrh	r1, [r7, #14]
 80069ec:	7b7a      	ldrb	r2, [r7, #13]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7ff fbef 	bl	80061d4 <set_state_idle>
      return;
 80069f6:	e0f2      	b.n	8006bde <SDO_upload_complete_access+0x21e>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 80069f8:	f002 fa2a 	bl	8008e50 <ESC_claimbuffer>
 80069fc:	4603      	mov	r3, r0
 80069fe:	77fb      	strb	r3, [r7, #31]
   if (MBXout == 0)
 8006a00:	7ffb      	ldrb	r3, [r7, #31]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <SDO_upload_complete_access+0x54>
   {
      /* It is a bad idea to call SDO_abort when ESC_claimbuffer fails,
       * because SDO_abort will also call ESC_claimbuffer ...
       */
      set_state_idle (0, index, subindex, 0);
 8006a06:	89f9      	ldrh	r1, [r7, #14]
 8006a08:	7b7a      	ldrb	r2, [r7, #13]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f7ff fbe1 	bl	80061d4 <set_state_idle>
      return;
 8006a12:	e0e4      	b.n	8006bde <SDO_upload_complete_access+0x21e>
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4a74      	ldr	r2, [pc, #464]	; (8006be8 <SDO_upload_complete_access+0x228>)
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	4413      	add	r3, r2
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	61bb      	str	r3, [r7, #24]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	69b8      	ldr	r0, [r7, #24]
 8006a34:	f7ff fe2a 	bl	800668c <complete_access_subindex_loop>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	603b      	str	r3, [r7, #0]

   /* expedited bits used calculation */
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b18      	cmp	r3, #24
 8006a40:	d808      	bhi.n	8006a54 <SDO_upload_complete_access+0x94>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f1c3 0303 	rsb	r3, r3, #3
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	e000      	b.n	8006a56 <SDO_upload_complete_access+0x96>
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]

   /* convert bits to bytes */
   size = BITS2BYTES(size);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	3307      	adds	r3, #7
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	603b      	str	r3, [r7, #0]

   if (size > 0xffff)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d306      	bcc.n	8006a76 <SDO_upload_complete_access+0xb6>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (MBXout, index, subindex, size);
 8006a68:	89f9      	ldrh	r1, [r7, #14]
 8006a6a:	7b7a      	ldrb	r2, [r7, #13]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	7ff8      	ldrb	r0, [r7, #31]
 8006a70:	f7ff fbb0 	bl	80061d4 <set_state_idle>
      return;
 8006a74:	e0b3      	b.n	8006bde <SDO_upload_complete_access+0x21e>
   }

   /* check that upload data fits in the preallocated buffer */
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	331e      	adds	r3, #30
 8006a7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006a7e:	d906      	bls.n	8006a8e <SDO_upload_complete_access+0xce>
   {
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8006a80:	89f9      	ldrh	r1, [r7, #14]
 8006a82:	7b7a      	ldrb	r2, [r7, #13]
 8006a84:	7ff8      	ldrb	r0, [r7, #31]
 8006a86:	4b59      	ldr	r3, [pc, #356]	; (8006bec <SDO_upload_complete_access+0x22c>)
 8006a88:	f7ff fba4 	bl	80061d4 <set_state_idle>
      return;
 8006a8c:	e0a7      	b.n	8006bde <SDO_upload_complete_access+0x21e>
   }
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8006a8e:	89f8      	ldrh	r0, [r7, #14]
 8006a90:	7b79      	ldrb	r1, [r7, #13]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	691a      	ldr	r2, [r3, #16]
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	88db      	ldrh	r3, [r3, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	463c      	mov	r4, r7
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	f7fe ffa7 	bl	80059fc <ESC_upload_pre_objecthandler>
 8006aae:	6238      	str	r0, [r7, #32]
   if (abortcode != 0)
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d006      	beq.n	8006ac4 <SDO_upload_complete_access+0x104>
   {
      set_state_idle (MBXout, index, subindex, abortcode);
 8006ab6:	89f9      	ldrh	r1, [r7, #14]
 8006ab8:	7b7a      	ldrb	r2, [r7, #13]
 8006aba:	7ff8      	ldrb	r0, [r7, #31]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f7ff fb89 	bl	80061d4 <set_state_idle>
      return;
 8006ac2:	e08c      	b.n	8006bde <SDO_upload_complete_access+0x21e>
   }

   /* copy subindex data into the preallocated buffer */
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <SDO_upload_complete_access+0x230>)
 8006ad4:	69b8      	ldr	r0, [r7, #24]
 8006ad6:	f7ff fdd9 	bl	800668c <complete_access_subindex_loop>

   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
 8006adc:	4a45      	ldr	r2, [pc, #276]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006ade:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	4a3f      	ldr	r2, [pc, #252]	; (8006be4 <SDO_upload_complete_access+0x224>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
   init_coesdo(coeres, COE_SDORESPONSE,
 8006aea:	89fa      	ldrh	r2, [r7, #14]
 8006aec:	7b7b      	ldrb	r3, [r7, #13]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	2251      	movs	r2, #81	; 0x51
 8006af4:	2103      	movs	r1, #3
 8006af6:	6938      	ldr	r0, [r7, #16]
 8006af8:	f7ff ff36 	bl	8006968 <init_coesdo>
         COE_COMMAND_UPLOADRESPONSE | COE_COMPLETEACCESS | COE_SIZE_INDICATOR,
         index, subindex);

   ESCvar.segmented = 0;
 8006afc:	4b3d      	ldr	r3, [pc, #244]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

   if (size <= 4)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d811      	bhi.n	8006b2e <SDO_upload_complete_access+0x16e>
   {
      /* expedited response, i.e. length <= 4 bytes */
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	7a1a      	ldrb	r2, [r3, #8]
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	721a      	strb	r2, [r3, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	330c      	adds	r3, #12
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	4932      	ldr	r1, [pc, #200]	; (8006bf0 <SDO_upload_complete_access+0x230>)
 8006b26:	4618      	mov	r0, r3
 8006b28:	f003 ffc6 	bl	800aab8 <memcpy>
 8006b2c:	e031      	b.n	8006b92 <SDO_upload_complete_access+0x1d2>
   }
   else
   {
      /* normal response, i.e. length > 4 bytes */
      coeres->size = htoel (size);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	60da      	str	r2, [r3, #12]

      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f103 020a 	add.w	r2, r3, #10
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3e:	3b06      	subs	r3, #6
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d918      	bls.n	8006b76 <SDO_upload_complete_access+0x1b6>
      {
         /* segmented transfer needed */
         /* set total size in bytes */
         ESCvar.frags = size;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8006b4c:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b50:	3b10      	subs	r3, #16
 8006b52:	603b      	str	r3, [r7, #0]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4a27      	ldr	r2, [pc, #156]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b58:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         /* signal segmented transfer */
         ESCvar.segmented = MBXSEU;
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b5e:	2240      	movs	r2, #64	; 0x40
 8006b60:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 8006b64:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b66:	4a22      	ldr	r2, [pc, #136]	; (8006bf0 <SDO_upload_complete_access+0x230>)
 8006b68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8006b6c:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b72:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      }

      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	330a      	adds	r3, #10
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	801a      	strh	r2, [r3, #0]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	330c      	adds	r3, #12
 8006b86:	3304      	adds	r3, #4
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	4919      	ldr	r1, [pc, #100]	; (8006bf0 <SDO_upload_complete_access+0x230>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f003 ff93 	bl	800aab8 <memcpy>
   }

   if (ESCvar.segmented == 0)
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <SDO_upload_complete_access+0x234>)
 8006b94:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d116      	bne.n	8006bca <SDO_upload_complete_access+0x20a>
   {
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 8006b9c:	89f8      	ldrh	r0, [r7, #14]
 8006b9e:	7b79      	ldrb	r1, [r7, #13]
            objd->flags | COMPLETE_ACCESS_FLAG);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 8006ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fe ff44 	bl	8005a3c <ESC_upload_post_objecthandler>
 8006bb4:	6238      	str	r0, [r7, #32]

      if (abortcode != 0)
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d006      	beq.n	8006bca <SDO_upload_complete_access+0x20a>
      {
         set_state_idle (MBXout, index, subindex, abortcode);
 8006bbc:	89f9      	ldrh	r1, [r7, #14]
 8006bbe:	7b7a      	ldrb	r2, [r7, #13]
 8006bc0:	7ff8      	ldrb	r0, [r7, #31]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f7ff fb06 	bl	80061d4 <set_state_idle>
         return;
 8006bc8:	e009      	b.n	8006bde <SDO_upload_complete_access+0x21e>
      }
   }

   MBXcontrol[MBXout].state = MBXstate_outreq;
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
 8006bcc:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <SDO_upload_complete_access+0x238>)
 8006bce:	2103      	movs	r1, #3
 8006bd0:	54d1      	strb	r1, [r2, r3]

   set_state_idle (MBXout, index, subindex, 0);
 8006bd2:	89f9      	ldrh	r1, [r7, #14]
 8006bd4:	7b7a      	ldrb	r2, [r7, #13]
 8006bd6:	7ff8      	ldrb	r0, [r7, #31]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f7ff fafb 	bl	80061d4 <set_state_idle>
}
 8006bde:	372c      	adds	r7, #44	; 0x2c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd90      	pop	{r4, r7, pc}
 8006be4:	20000b58 	.word	0x20000b58
 8006be8:	0800c69c 	.word	0x0800c69c
 8006bec:	06010004 	.word	0x06010004
 8006bf0:	200009d5 	.word	0x200009d5
 8006bf4:	200008e8 	.word	0x200008e8
 8006bf8:	20000d80 	.word	0x20000d80

08006bfc <SDO_uploadsegment>:

/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 */
static void SDO_uploadsegment (void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af02      	add	r7, sp, #8
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset, abort;
   coesdo = (_COEsdo *) &MBX[0];
 8006c02:	4b58      	ldr	r3, [pc, #352]	; (8006d64 <SDO_uploadsegment+0x168>)
 8006c04:	61bb      	str	r3, [r7, #24]
   MBXout = ESC_claimbuffer ();
 8006c06:	f002 f923 	bl	8008e50 <ESC_claimbuffer>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
   if (MBXout)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 809d 	beq.w	8006d50 <SDO_uploadsegment+0x154>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	4a53      	ldr	r2, [pc, #332]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
 8006c20:	4a50      	ldr	r2, [pc, #320]	; (8006d64 <SDO_uploadsegment+0x168>)
 8006c22:	4413      	add	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
      offset = ESCvar.fragsleft;
 8006c26:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c2c:	60fb      	str	r3, [r7, #12]
      size = ESCvar.frags - ESCvar.fragsleft;
 8006c2e:	4b4e      	ldr	r3, [pc, #312]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c30:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006c34:	4b4c      	ldr	r3, [pc, #304]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	61fb      	str	r3, [r7, #28]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	7a1b      	ldrb	r3, [r3, #8]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	72fb      	strb	r3, [r7, #11]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	7adb      	ldrb	r3, [r3, #11]
 8006c54:	7afa      	ldrb	r2, [r7, #11]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	2103      	movs	r1, #3
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f7ff fe83 	bl	8006968 <init_coesdo>
            coesdo->index, coesdo->subindex);
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	1cda      	adds	r2, r3, #3
 8006c66:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6a:	3b06      	subs	r3, #6
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d912      	bls.n	8006c96 <SDO_uploadsegment+0x9a>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 8006c70:	4b3d      	ldr	r3, [pc, #244]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c74:	3b09      	subs	r3, #9
 8006c76:	61fb      	str	r3, [r7, #28]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8006c78:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	4a39      	ldr	r2, [pc, #228]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c84:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e02c      	b.n	8006cf0 <SDO_uploadsegment+0xf4>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 8006c96:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 8006c9e:	4b32      	ldr	r3, [pc, #200]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 8006ca6:	4b30      	ldr	r3, [pc, #192]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	7a1b      	ldrb	r3, [r3, #8]
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d906      	bls.n	8006cd0 <SDO_uploadsegment+0xd4>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3303      	adds	r3, #3
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e00f      	b.n	8006cf0 <SDO_uploadsegment+0xf4>
         }
         else
         {
            coeres->command |= (uint8_t)((7U - size) << 1);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	7a1a      	ldrb	r2, [r3, #8]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f1c3 0307 	rsb	r3, r3, #7
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	220a      	movs	r2, #10
 8006cee:	801a      	strh	r2, [r3, #0]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006cf2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	18d0      	adds	r0, r2, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	3301      	adds	r3, #1
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7ff fa0e 	bl	8006124 <copy2mbx>
            size);        /* copy to mailbox */

      if (ESCvar.segmented == 0)
 8006d08:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006d0a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11a      	bne.n	8006d48 <SDO_uploadsegment+0x14c>
      {
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d18:	b298      	uxth	r0, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	7adb      	ldrb	r3, [r3, #11]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006d20:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7fe fe89 	bl	8005a3c <ESC_upload_post_objecthandler>
 8006d2a:	6078      	str	r0, [r7, #4]
               coesdo->subindex, ESCvar.flags);
         if (abort != 0)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <SDO_uploadsegment+0x14c>
         {
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d38:	b299      	uxth	r1, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	7ada      	ldrb	r2, [r3, #11]
 8006d3e:	7df8      	ldrb	r0, [r7, #23]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f7ff fa47 	bl	80061d4 <set_state_idle>
            return;
 8006d46:	e00a      	b.n	8006d5e <SDO_uploadsegment+0x162>
         }
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <SDO_uploadsegment+0x170>)
 8006d4c:	2103      	movs	r1, #3
 8006d4e:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <SDO_uploadsegment+0x170>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8006d56:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <SDO_uploadsegment+0x16c>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000b58 	.word	0x20000b58
 8006d68:	200008e8 	.word	0x200008e8
 8006d6c:	20000d80 	.word	0x20000d80

08006d70 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
static void SDO_download (void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b090      	sub	sp, #64	; 0x40
 8006d74:	af02      	add	r7, sp, #8
   uint32_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 8006d76:	4b89      	ldr	r3, [pc, #548]	; (8006f9c <SDO_download+0x22c>)
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   index = etohs (coesdo->index);
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006d82:	857b      	strh	r3, [r7, #42]	; 0x2a
   subindex = coesdo->subindex;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	7adb      	ldrb	r3, [r3, #11]
 8006d88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   nidx = SDO_findobject (index);
 8006d8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff f84c 	bl	8005e2c <SDO_findobject>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24
   if (nidx >= 0)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f2c0 818c 	blt.w	80070b6 <SDO_download+0x346>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8006d9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006da2:	4619      	mov	r1, r3
 8006da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006da6:	f7fe ffe3 	bl	8005d70 <SDO_findsubindex>
 8006daa:	4603      	mov	r3, r0
 8006dac:	847b      	strh	r3, [r7, #34]	; 0x22
      if (nsub >= 0)
 8006dae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f2c0 8177 	blt.w	80070a6 <SDO_download+0x336>
      {
         objd = SDOobjects[nidx].objdesc;
 8006db8:	4a79      	ldr	r2, [pc, #484]	; (8006fa0 <SDO_download+0x230>)
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	4413      	add	r3, r2
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61fb      	str	r3, [r7, #28]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8006dc6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	88db      	ldrh	r3, [r3, #6]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de0:	76fb      	strb	r3, [r7, #27]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8006de2:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <SDO_download+0x234>)
 8006de4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	76bb      	strb	r3, [r7, #26]
         if (WRITE_ACCESS(access, state))
 8006df0:	7efb      	ldrb	r3, [r7, #27]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <SDO_download+0x90>
 8006dfa:	7ebb      	ldrb	r3, [r7, #26]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d011      	beq.n	8006e24 <SDO_download+0xb4>
 8006e00:	7efb      	ldrb	r3, [r7, #27]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <SDO_download+0xa0>
 8006e0a:	7ebb      	ldrb	r3, [r7, #26]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d009      	beq.n	8006e24 <SDO_download+0xb4>
 8006e10:	7efb      	ldrb	r3, [r7, #27]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8132 	beq.w	8007080 <SDO_download+0x310>
 8006e1c:	7ebb      	ldrb	r3, [r7, #26]
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	f040 812e 	bne.w	8007080 <SDO_download+0x310>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	7a1b      	ldrb	r3, [r3, #8]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <SDO_download+0xd8>
            {
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	7a1b      	ldrb	r3, [r3, #8]
 8006e34:	089b      	lsrs	r3, r3, #2
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	f1c3 0304 	rsb	r3, r3, #4
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = &(coesdo->size);
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	330c      	adds	r3, #12
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
 8006e46:	e007      	b.n	8006e58 <SDO_download+0xe8>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = (&(coesdo->size)) + 1;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	330c      	adds	r3, #12
 8006e54:	3304      	adds	r3, #4
 8006e56:	633b      	str	r3, [r7, #48]	; 0x30
            }
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 8006e58:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	461a      	mov	r2, r3
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	889b      	ldrh	r3, [r3, #4]
 8006e6c:	3307      	adds	r3, #7
 8006e6e:	08db      	lsrs	r3, r3, #3
 8006e70:	617b      	str	r3, [r7, #20]
            if (actsize != size)
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d042      	beq.n	8006f00 <SDO_download+0x190>
            {
               /* entries with data types VISIBLE_STRING, OCTET_STRING,
                * UNICODE_STRING, ARRAY_OF_INT, ARRAY_OF_SINT,
                * ARRAY_OF_DINT, and ARRAY_OF_UDINT may have flexible length
                */
               uint16_t type = (objd + nsub)->datatype;
 8006e7a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	461a      	mov	r2, r3
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	885b      	ldrh	r3, [r3, #2]
 8006e8e:	827b      	strh	r3, [r7, #18]
               if (type == DTYPE_VISIBLE_STRING)
 8006e90:	8a7b      	ldrh	r3, [r7, #18]
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	d113      	bne.n	8006ebe <SDO_download+0x14e>
               {
                  /* pad with zeroes up to the maximum size of the entry */
                  memset((objd + nsub)->data + size, 0, actsize - size);
 8006e96:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	18d0      	adds	r0, r2, r3
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	f003 fe0c 	bl	800aad4 <memset>
 8006ebc:	e020      	b.n	8006f00 <SDO_download+0x190>
               }
               else if ((type != DTYPE_OCTET_STRING) &&
 8006ebe:	8a7b      	ldrh	r3, [r7, #18]
 8006ec0:	2b0a      	cmp	r3, #10
 8006ec2:	d01d      	beq.n	8006f00 <SDO_download+0x190>
 8006ec4:	8a7b      	ldrh	r3, [r7, #18]
 8006ec6:	2b0b      	cmp	r3, #11
 8006ec8:	d01a      	beq.n	8006f00 <SDO_download+0x190>
                        (type != DTYPE_UNICODE_STRING) &&
 8006eca:	8a7b      	ldrh	r3, [r7, #18]
 8006ecc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8006ed0:	d016      	beq.n	8006f00 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_INT) &&
 8006ed2:	8a7b      	ldrh	r3, [r7, #18]
 8006ed4:	f240 2261 	movw	r2, #609	; 0x261
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d011      	beq.n	8006f00 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_SINT) &&
 8006edc:	8a7b      	ldrh	r3, [r7, #18]
 8006ede:	f240 2262 	movw	r2, #610	; 0x262
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00c      	beq.n	8006f00 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_DINT) &&
 8006ee6:	8a7b      	ldrh	r3, [r7, #18]
 8006ee8:	f240 2263 	movw	r2, #611	; 0x263
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_UDINT))
               {
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 8006ef0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006ef4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006ef6:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <SDO_download+0x238>)
 8006ef8:	2000      	movs	r0, #0
 8006efa:	f7ff f96b 	bl	80061d4 <set_state_idle>
                  return;
 8006efe:	e0ea      	b.n	80070d6 <SDO_download+0x366>
            abort = ESC_download_pre_objecthandler (
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 8006f00:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
            abort = ESC_download_pre_objecthandler (
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8006f18:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f20:	f7fe fd02 	bl	8005928 <ESC_download_pre_objecthandler>
 8006f24:	60f8      	str	r0, [r7, #12]
            );
            if (abort == 0)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 80a1 	bne.w	8007070 <SDO_download+0x300>
            {
               if ((size > 4) &&
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d93b      	bls.n	8006fac <SDO_download+0x23c>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 8006f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d935      	bls.n	8006fac <SDO_download+0x23c>
               {
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	3b0a      	subs	r3, #10
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSED;
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <SDO_download+0x234>)
 8006f4a:	2250      	movs	r2, #80	; 0x50
 8006f4c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 8006f50:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	4413      	add	r3, r2
 8006f68:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <SDO_download+0x234>)
 8006f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                  ESCvar.index = index;
 8006f6e:	4a0d      	ldr	r2, [pc, #52]	; (8006fa4 <SDO_download+0x234>)
 8006f70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f72:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 8006f76:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <SDO_download+0x234>)
 8006f78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006f7c:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 8006f80:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	88da      	ldrh	r2, [r3, #6]
 8006f94:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <SDO_download+0x234>)
 8006f96:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8006f9a:	e00b      	b.n	8006fb4 <SDO_download+0x244>
 8006f9c:	20000b58 	.word	0x20000b58
 8006fa0:	0800c69c 	.word	0x0800c69c
 8006fa4:	200008e8 	.word	0x200008e8
 8006fa8:	06070010 	.word	0x06070010
               }
               else
               {
                  ESCvar.segmented = 0;
 8006fac:	4b4b      	ldr	r3, [pc, #300]	; (80070dc <SDO_download+0x36c>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               }
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 8006fb4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f7ff f8a9 	bl	8006124 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 8006fd2:	f001 ff3d 	bl	8008e50 <ESC_claimbuffer>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	72fb      	strb	r3, [r7, #11]
               if (MBXout)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d026      	beq.n	800702e <SDO_download+0x2be>
               {
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	4a3e      	ldr	r2, [pc, #248]	; (80070dc <SDO_download+0x36c>)
 8006fe4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	4a3d      	ldr	r2, [pc, #244]	; (80070e0 <SDO_download+0x370>)
 8006fec:	4413      	add	r3, r2
 8006fee:	607b      	str	r3, [r7, #4]
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	220a      	movs	r2, #10
 8006ff4:	801a      	strh	r2, [r3, #0]
                  coeres->mbxheader.mbxtype = MBXCOE;
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	7953      	ldrb	r3, [r2, #5]
 8006ffa:	2103      	movs	r1, #3
 8006ffc:	f361 0303 	bfi	r3, r1, #0, #4
 8007000:	7153      	strb	r3, [r2, #5]
                  coeres->coeheader.numberservice =
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007008:	80da      	strh	r2, [r3, #6]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                  coeres->index = htoes (index);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800700e:	f8a3 2009 	strh.w	r2, [r3, #9]
                  coeres->subindex = subindex;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007018:	72da      	strb	r2, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2260      	movs	r2, #96	; 0x60
 800701e:	721a      	strb	r2, [r3, #8]
                  coeres->size = htoel (0);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	60da      	str	r2, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	4a2e      	ldr	r2, [pc, #184]	; (80070e4 <SDO_download+0x374>)
 800702a:	2103      	movs	r1, #3
 800702c:	54d1      	strb	r1, [r2, r3]
               }
               if (ESCvar.segmented == 0)
 800702e:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <SDO_download+0x36c>)
 8007030:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007034:	2b00      	cmp	r3, #0
 8007036:	d146      	bne.n	80070c6 <SDO_download+0x356>
               {
                  /* external object write handler */
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 8007038:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	461a      	mov	r2, r3
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	88da      	ldrh	r2, [r3, #6]
 800704c:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8007050:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fcb6 	bl	80059c4 <ESC_download_post_objecthandler>
 8007058:	60f8      	str	r0, [r7, #12]
                  if (abort != 0)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d032      	beq.n	80070c6 <SDO_download+0x356>
                  {
                     SDO_abort (MBXout, index, subindex, abort);
 8007060:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007064:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007066:	7af8      	ldrb	r0, [r7, #11]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f7ff f86b 	bl	8006144 <SDO_abort>
            if (abort == 0)
 800706e:	e02a      	b.n	80070c6 <SDO_download+0x356>
                  }
               }
            }
            else
            {
               SDO_abort (0, index, subindex, abort);
 8007070:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007074:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2000      	movs	r0, #0
 800707a:	f7ff f863 	bl	8006144 <SDO_abort>
            if (abort == 0)
 800707e:	e022      	b.n	80070c6 <SDO_download+0x356>
            }
         }
         else
         {
            if (access == ATYPE_RO)
 8007080:	7efb      	ldrb	r3, [r7, #27]
 8007082:	2b07      	cmp	r3, #7
 8007084:	d107      	bne.n	8007096 <SDO_download+0x326>
            {
               SDO_abort (0, index, subindex, ABORT_READONLY);
 8007086:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800708a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800708c:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <SDO_download+0x378>)
 800708e:	2000      	movs	r0, #0
 8007090:	f7ff f858 	bl	8006144 <SDO_abort>
 8007094:	e018      	b.n	80070c8 <SDO_download+0x358>

            }
            else
            {
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 8007096:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800709a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800709c:	4b13      	ldr	r3, [pc, #76]	; (80070ec <SDO_download+0x37c>)
 800709e:	2000      	movs	r0, #0
 80070a0:	f7ff f850 	bl	8006144 <SDO_abort>
 80070a4:	e010      	b.n	80070c8 <SDO_download+0x358>
            }
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 80070a6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80070aa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <SDO_download+0x380>)
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7ff f848 	bl	8006144 <SDO_abort>
 80070b4:	e008      	b.n	80070c8 <SDO_download+0x358>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 80070b6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80070ba:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <SDO_download+0x384>)
 80070be:	2000      	movs	r0, #0
 80070c0:	f7ff f840 	bl	8006144 <SDO_abort>
 80070c4:	e000      	b.n	80070c8 <SDO_download+0x358>
            if (abort == 0)
 80070c6:	bf00      	nop
   }
   MBXcontrol[0].state = MBXstate_idle;
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <SDO_download+0x374>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <SDO_download+0x36c>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 80070d6:	3738      	adds	r7, #56	; 0x38
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	200008e8 	.word	0x200008e8
 80070e0:	20000b58 	.word	0x20000b58
 80070e4:	20000d80 	.word	0x20000d80
 80070e8:	06010002 	.word	0x06010002
 80070ec:	08000022 	.word	0x08000022
 80070f0:	06090011 	.word	0x06090011
 80070f4:	06020000 	.word	0x06020000

080070f8 <SDO_download_complete_access>:
/** Function for handling incoming requested SDO Download with Complete Access,
 *  validating the request and sending a response. On error an SDO Abort will
 *  be sent.
 */
static void SDO_download_complete_access (void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08e      	sub	sp, #56	; 0x38
 80070fc:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 80070fe:	4b81      	ldr	r3, [pc, #516]	; (8007304 <SDO_download_complete_access+0x20c>)
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 8007102:	f107 0008 	add.w	r0, r7, #8
 8007106:	f107 020d 	add.w	r2, r7, #13
 800710a:	f107 010e 	add.w	r1, r7, #14
 800710e:	1dbb      	adds	r3, r7, #6
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4603      	mov	r3, r0
 8007114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007116:	f7ff fa75 	bl	8006604 <complete_access_get_variables>
 800711a:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d006      	beq.n	8007130 <SDO_download_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 8007122:	89f9      	ldrh	r1, [r7, #14]
 8007124:	7b7a      	ldrb	r2, [r7, #13]
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2000      	movs	r0, #0
 800712a:	f7ff f853 	bl	80061d4 <set_state_idle>
      return;
 800712e:	e0e6      	b.n	80072fe <SDO_download_complete_access+0x206>
   }

   uint32_t bytes;
   uint32_t *mbxdata = &(coesdo->size);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	330c      	adds	r3, #12
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28

   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	7a1b      	ldrb	r3, [r3, #8]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <SDO_download_complete_access+0x5c>
   {
      /* expedited download */
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	7a1b      	ldrb	r3, [r3, #8]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	f1c3 0304 	rsb	r3, r3, #4
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007152:	e006      	b.n	8007162 <SDO_download_complete_access+0x6a>
   }
   else
   {
      /* normal download */
      bytes = (etohl (coesdo->size) & 0xffff);
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	b29b      	uxth	r3, r3
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
      mbxdata++;
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	3304      	adds	r3, #4
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4a68      	ldr	r2, [pc, #416]	; (8007308 <SDO_download_complete_access+0x210>)
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	330c      	adds	r3, #12
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	61fb      	str	r3, [r7, #28]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007176:	2300      	movs	r3, #0
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2301      	movs	r3, #1
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	69f8      	ldr	r0, [r7, #28]
 8007182:	f7ff fa83 	bl	800668c <complete_access_subindex_loop>
 8007186:	61b8      	str	r0, [r7, #24]
   size = BITS2BYTES(size);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	3307      	adds	r3, #7
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	61bb      	str	r3, [r7, #24]
   if (size > 0xffff)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d306      	bcc.n	80071a6 <SDO_download_complete_access+0xae>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (0, index, subindex, size);
 8007198:	89f9      	ldrh	r1, [r7, #14]
 800719a:	7b7a      	ldrb	r2, [r7, #13]
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2000      	movs	r0, #0
 80071a0:	f7ff f818 	bl	80061d4 <set_state_idle>
      return;
 80071a4:	e0ab      	b.n	80072fe <SDO_download_complete_access+0x206>
    * "The SDO Download Complete Access data length shall always match
    * the full current object size (defined by SubIndex0)".
    * But EtherCAT Conformance Test Tool doesn't follow this rule for some test
    * cases, which is the reason to here only check for 'less than or equal'.
    */
   else if (bytes <= size)
 80071a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d87b      	bhi.n	80072a6 <SDO_download_complete_access+0x1ae>
   {
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80071ae:	89f8      	ldrh	r0, [r7, #14]
 80071b0:	7b79      	ldrb	r1, [r7, #13]
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 80071b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071be:	b29b      	uxth	r3, r3
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c6:	f7fe fbaf 	bl	8005928 <ESC_download_pre_objecthandler>
 80071ca:	6238      	str	r0, [r7, #32]
      if (abortcode != 0)
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d006      	beq.n	80071e0 <SDO_download_complete_access+0xe8>
      {
         set_state_idle (0, index, subindex, abortcode);
 80071d2:	89f9      	ldrh	r1, [r7, #14]
 80071d4:	7b7a      	ldrb	r2, [r7, #13]
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2000      	movs	r0, #0
 80071da:	f7fe fffb 	bl	80061d4 <set_state_idle>
         return;
 80071de:	e08e      	b.n	80072fe <SDO_download_complete_access+0x206>
      }

      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	f103 020a 	add.w	r2, r3, #10
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <SDO_download_complete_access+0x214>)
 80071e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ea:	3b06      	subs	r3, #6
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d934      	bls.n	800725a <SDO_download_complete_access+0x162>
      {
         /* check that download data fits in the preallocated buffer */
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	331e      	adds	r3, #30
 80071f4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80071f8:	d906      	bls.n	8007208 <SDO_download_complete_access+0x110>
         {
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 80071fa:	89f9      	ldrh	r1, [r7, #14]
 80071fc:	7b7a      	ldrb	r2, [r7, #13]
 80071fe:	4b44      	ldr	r3, [pc, #272]	; (8007310 <SDO_download_complete_access+0x218>)
 8007200:	2000      	movs	r0, #0
 8007202:	f7fe ffe7 	bl	80061d4 <set_state_idle>
             return;
 8007206:	e07a      	b.n	80072fe <SDO_download_complete_access+0x206>
         }
         /* set total size in bytes */
         ESCvar.frags = bytes;
 8007208:	4a40      	ldr	r2, [pc, #256]	; (800730c <SDO_download_complete_access+0x214>)
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8007210:	4b3e      	ldr	r3, [pc, #248]	; (800730c <SDO_download_complete_access+0x214>)
 8007212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007214:	3b10      	subs	r3, #16
 8007216:	61bb      	str	r3, [r7, #24]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8007218:	4a3c      	ldr	r2, [pc, #240]	; (800730c <SDO_download_complete_access+0x214>)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 8007220:	4b3a      	ldr	r3, [pc, #232]	; (800730c <SDO_download_complete_access+0x214>)
 8007222:	2250      	movs	r2, #80	; 0x50
 8007224:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <SDO_download_complete_access+0x21c>)
 800722c:	4413      	add	r3, r2
 800722e:	4a37      	ldr	r2, [pc, #220]	; (800730c <SDO_download_complete_access+0x214>)
 8007230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         ESCvar.index = index;
 8007234:	89fa      	ldrh	r2, [r7, #14]
 8007236:	4b35      	ldr	r3, [pc, #212]	; (800730c <SDO_download_complete_access+0x214>)
 8007238:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 800723c:	7b7a      	ldrb	r2, [r7, #13]
 800723e:	4b33      	ldr	r3, [pc, #204]	; (800730c <SDO_download_complete_access+0x214>)
 8007240:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8007244:	4b31      	ldr	r3, [pc, #196]	; (800730c <SDO_download_complete_access+0x214>)
 8007246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800724a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
         /* Store the data */
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	4930      	ldr	r1, [pc, #192]	; (8007314 <SDO_download_complete_access+0x21c>)
 8007252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007254:	f7fe ff66 	bl	8006124 <copy2mbx>
 8007258:	e02c      	b.n	80072b4 <SDO_download_complete_access+0x1bc>
      }
      else
      {
         ESCvar.segmented = 0;
 800725a:	4b2c      	ldr	r3, [pc, #176]	; (800730c <SDO_download_complete_access+0x214>)
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         /* copy download data to subindexes */
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	2301      	movs	r3, #1
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	69f8      	ldr	r0, [r7, #28]
 8007274:	f7ff fa0a 	bl	800668c <complete_access_subindex_loop>

         abortcode = ESC_download_post_objecthandler(index, subindex,
 8007278:	89f8      	ldrh	r0, [r7, #14]
 800727a:	7b79      	ldrb	r1, [r7, #13]
               objd->flags | COMPLETE_ACCESS_FLAG);
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	88db      	ldrh	r3, [r3, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	f7fe fb9a 	bl	80059c4 <ESC_download_post_objecthandler>
 8007290:	6238      	str	r0, [r7, #32]
         if (abortcode != 0)
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <SDO_download_complete_access+0x1bc>
         {
            set_state_idle (0, index, subindex, abortcode);
 8007298:	89f9      	ldrh	r1, [r7, #14]
 800729a:	7b7a      	ldrb	r2, [r7, #13]
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2000      	movs	r0, #0
 80072a0:	f7fe ff98 	bl	80061d4 <set_state_idle>
            return;
 80072a4:	e02b      	b.n	80072fe <SDO_download_complete_access+0x206>
         }
      }
   }
   else
   {
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 80072a6:	89f9      	ldrh	r1, [r7, #14]
 80072a8:	7b7a      	ldrb	r2, [r7, #13]
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <SDO_download_complete_access+0x220>)
 80072ac:	2000      	movs	r0, #0
 80072ae:	f7fe ff91 	bl	80061d4 <set_state_idle>
      return;
 80072b2:	e024      	b.n	80072fe <SDO_download_complete_access+0x206>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 80072b4:	f001 fdcc 	bl	8008e50 <ESC_claimbuffer>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]
   if (MBXout > 0)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d017      	beq.n	80072f2 <SDO_download_complete_access+0x1fa>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	4a11      	ldr	r2, [pc, #68]	; (800730c <SDO_download_complete_access+0x214>)
 80072c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80072c8:	fb02 f303 	mul.w	r3, r2, r3
 80072cc:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <SDO_download_complete_access+0x20c>)
 80072ce:	4413      	add	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
      init_coesdo(coeres, COE_SDORESPONSE,
 80072d2:	89fa      	ldrh	r2, [r7, #14]
 80072d4:	7b7b      	ldrb	r3, [r7, #13]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	2270      	movs	r2, #112	; 0x70
 80072dc:	2103      	movs	r1, #3
 80072de:	6938      	ldr	r0, [r7, #16]
 80072e0:	f7ff fb42 	bl	8006968 <init_coesdo>
                  COE_COMMAND_DOWNLOADRESPONSE | COE_COMPLETEACCESS,
                  index, subindex);

      coeres->size = 0;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2200      	movs	r2, #0
 80072e8:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	4a0b      	ldr	r2, [pc, #44]	; (800731c <SDO_download_complete_access+0x224>)
 80072ee:	2103      	movs	r1, #3
 80072f0:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (MBXout, index, subindex, 0);
 80072f2:	89f9      	ldrh	r1, [r7, #14]
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	7df8      	ldrb	r0, [r7, #23]
 80072f8:	2300      	movs	r3, #0
 80072fa:	f7fe ff6b 	bl	80061d4 <set_state_idle>
}
 80072fe:	3730      	adds	r7, #48	; 0x30
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000b58 	.word	0x20000b58
 8007308:	0800c69c 	.word	0x0800c69c
 800730c:	200008e8 	.word	0x200008e8
 8007310:	06010004 	.word	0x06010004
 8007314:	200009d5 	.word	0x200009d5
 8007318:	06070010 	.word	0x06070010
 800731c:	20000d80 	.word	0x20000d80

08007320 <SDO_downloadsegment>:

static void SDO_downloadsegment (void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08c      	sub	sp, #48	; 0x30
 8007324:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8007326:	4b6d      	ldr	r3, [pc, #436]	; (80074dc <SDO_downloadsegment+0x1bc>)
 8007328:	623b      	str	r3, [r7, #32]
   uint8_t MBXout = ESC_claimbuffer ();
 800732a:	f001 fd91 	bl	8008e50 <ESC_claimbuffer>
 800732e:	4603      	mov	r3, r0
 8007330:	77fb      	strb	r3, [r7, #31]
   if (MBXout)
 8007332:	7ffb      	ldrb	r3, [r7, #31]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80c7 	beq.w	80074c8 <SDO_downloadsegment+0x1a8>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800733a:	7ffb      	ldrb	r3, [r7, #31]
 800733c:	4a68      	ldr	r2, [pc, #416]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800733e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007340:	fb02 f303 	mul.w	r3, r2, r3
 8007344:	4a65      	ldr	r2, [pc, #404]	; (80074dc <SDO_downloadsegment+0x1bc>)
 8007346:	4413      	add	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
      uint32_t size = coesdo->mbxheader.length - 3U;
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	3b03      	subs	r3, #3
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
      if (size == 7)
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	2b07      	cmp	r3, #7
 8007356:	d107      	bne.n	8007368 <SDO_downloadsegment+0x48>
      {
         size = 7 - ((coesdo->command >> 1) & 7);
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	7a1b      	ldrb	r3, [r3, #8]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
      }
      uint8_t command = COE_COMMAND_DOWNLOADSEGRESP;
 8007368:	2320      	movs	r3, #32
 800736a:	75fb      	strb	r3, [r7, #23]
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	7a1b      	ldrb	r3, [r3, #8]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	75bb      	strb	r3, [r7, #22]
      command |= command2;
 8007376:	7dfa      	ldrb	r2, [r7, #23]
 8007378:	7dbb      	ldrb	r3, [r7, #22]
 800737a:	4313      	orrs	r3, r2
 800737c:	75fb      	strb	r3, [r7, #23]
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800737e:	7dfa      	ldrb	r2, [r7, #23]
 8007380:	2300      	movs	r3, #0
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	2103      	movs	r1, #3
 8007388:	69b8      	ldr	r0, [r7, #24]
 800738a:	f7ff faed 	bl	8006968 <init_coesdo>

      void *mbxdata = &(coesdo->index);  /* data pointer */
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	3309      	adds	r3, #9
 8007392:	613b      	str	r3, [r7, #16]
      copy2mbx (mbxdata, ESCvar.data, size);
 8007394:	4b52      	ldr	r3, [pc, #328]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	4619      	mov	r1, r3
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	f7fe fec0 	bl	8006124 <copy2mbx>

      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	7a1b      	ldrb	r3, [r3, #8]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d077      	beq.n	80074a0 <SDO_downloadsegment+0x180>
      {
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 80073b0:	4b4b      	ldr	r3, [pc, #300]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073b2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80073b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ba:	d14a      	bne.n	8007452 <SDO_downloadsegment+0x132>
         {
            int32_t nidx;
            int16_t nsub;

            if(ESCvar.frags > ESCvar.fragsleft + size)
 80073bc:	4b48      	ldr	r3, [pc, #288]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073be:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80073c2:	4b47      	ldr	r3, [pc, #284]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073c4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	440b      	add	r3, r1
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d90a      	bls.n	80073e6 <SDO_downloadsegment+0xc6>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 80073d0:	4b43      	ldr	r3, [pc, #268]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073d2:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 80073d6:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073d8:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80073dc:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <SDO_downloadsegment+0x1c4>)
 80073de:	2000      	movs	r0, #0
 80073e0:	f7fe fef8 	bl	80061d4 <set_state_idle>
               return;
 80073e4:	e076      	b.n	80074d4 <SDO_downloadsegment+0x1b4>
            }

            nidx = SDO_findobject(ESCvar.index);
 80073e6:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073e8:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fd1d 	bl	8005e2c <SDO_findobject>
 80073f2:	60f8      	str	r0, [r7, #12]
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 80073f4:	4b3a      	ldr	r3, [pc, #232]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80073f6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80073fa:	4619      	mov	r1, r3
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7fe fcb7 	bl	8005d70 <SDO_findsubindex>
 8007402:	4603      	mov	r3, r0
 8007404:	817b      	strh	r3, [r7, #10]

            if ((nidx < 0) || (nsub < 0))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	db03      	blt.n	8007414 <SDO_downloadsegment+0xf4>
 800740c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007410:	2b00      	cmp	r3, #0
 8007412:	da0a      	bge.n	800742a <SDO_downloadsegment+0x10a>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007416:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800741c:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007420:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <SDO_downloadsegment+0x1c8>)
 8007422:	2000      	movs	r0, #0
 8007424:	f7fe fed6 	bl	80061d4 <set_state_idle>
               return;
 8007428:	e054      	b.n	80074d4 <SDO_downloadsegment+0x1b4>
            }

            /* copy download data to subindexes */
            const _objd *objd = SDOobjects[nidx].objdesc;
 800742a:	4a30      	ldr	r2, [pc, #192]	; (80074ec <SDO_downloadsegment+0x1cc>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	4413      	add	r3, r2
 8007432:	330c      	adds	r3, #12
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	607b      	str	r3, [r7, #4]
            complete_access_subindex_loop(objd,
 8007438:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800743a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800743e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	2301      	movs	r3, #1
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4b29      	ldr	r3, [pc, #164]	; (80074f0 <SDO_downloadsegment+0x1d0>)
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff f91d 	bl	800668c <complete_access_subindex_loop>
                  DOWNLOAD,
                  ESCvar.frags);

         }
         /* last segment */
         ESCvar.segmented = 0;
 8007452:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800745a:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 8007462:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         /* external object write handler */
         uint32_t abort = ESC_download_post_objecthandler
 800746a:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800746c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007472:	f892 10a6 	ldrb.w	r1, [r2, #166]	; 0xa6
 8007476:	4a1a      	ldr	r2, [pc, #104]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007478:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe faa1 	bl	80059c4 <ESC_download_post_objecthandler>
 8007482:	6038      	str	r0, [r7, #0]
               (ESCvar.index, ESCvar.subindex, ESCvar.flags);
         if (abort != 0)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01a      	beq.n	80074c0 <SDO_downloadsegment+0x1a0>
         {
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 800748c:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 8007492:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007496:	7ff8      	ldrb	r0, [r7, #31]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f7fe fe9b 	bl	80061d4 <set_state_idle>
            return;
 800749e:	e019      	b.n	80074d4 <SDO_downloadsegment+0x1b4>
         }
      }
      else
      {
         /* more segmented transfer needed: increase offset */
         ESCvar.data += size;
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80074a2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	4413      	add	r3, r2
 80074aa:	4a0d      	ldr	r2, [pc, #52]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80074ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80074b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	4413      	add	r3, r2
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <SDO_downloadsegment+0x1c0>)
 80074bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
 80074c2:	4a0c      	ldr	r2, [pc, #48]	; (80074f4 <SDO_downloadsegment+0x1d4>)
 80074c4:	2103      	movs	r1, #3
 80074c6:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (0, 0, 0, 0);
 80074c8:	2300      	movs	r3, #0
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	2000      	movs	r0, #0
 80074d0:	f7fe fe80 	bl	80061d4 <set_state_idle>
}
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000b58 	.word	0x20000b58
 80074e0:	200008e8 	.word	0x200008e8
 80074e4:	06070010 	.word	0x06070010
 80074e8:	06020000 	.word	0x06020000
 80074ec:	0800c69c 	.word	0x0800c69c
 80074f0:	200009d5 	.word	0x200009d5
 80074f4:	20000d80 	.word	0x20000d80

080074f8 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
static void SDO_infoerror (uint32_t abortcode)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8007500:	f001 fca6 	bl	8008e50 <ESC_claimbuffer>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d039      	beq.n	8007582 <SDO_infoerror+0x8a>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	4a1e      	ldr	r2, [pc, #120]	; (800758c <SDO_infoerror+0x94>)
 8007512:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <SDO_infoerror+0x98>)
 800751a:	4413      	add	r3, r2
 800751c:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	220a      	movs	r2, #10
 8007522:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	7953      	ldrb	r3, [r2, #5]
 8007528:	2103      	movs	r1, #3
 800752a:	f361 0303 	bfi	r3, r1, #0, #4
 800752e:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007536:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	7a13      	ldrb	r3, [r2, #8]
 800753c:	2107      	movs	r1, #7
 800753e:	f361 0306 	bfi	r3, r1, #0, #7
 8007542:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	7a13      	ldrb	r3, [r2, #8]
 8007548:	f36f 13c7 	bfc	r3, #7, #1
 800754c:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	b29a      	uxth	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	b29a      	uxth	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <SDO_infoerror+0x9c>)
 8007570:	2103      	movs	r1, #3
 8007572:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <SDO_infoerror+0x9c>)
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 800757a:	4b04      	ldr	r3, [pc, #16]	; (800758c <SDO_infoerror+0x94>)
 800757c:	2200      	movs	r2, #0
 800757e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200008e8 	.word	0x200008e8
 8007590:	20000b58 	.word	0x20000b58
 8007594:	20000d80 	.word	0x20000d80

08007598 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
static void SDO_getodlist (void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
   uint32_t frags;
   uint8_t MBXout = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 80075a6:	e002      	b.n	80075ae <SDO_getodlist+0x16>
   {
      entries++;
 80075a8:	8abb      	ldrh	r3, [r7, #20]
 80075aa:	3301      	adds	r3, #1
 80075ac:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 80075ae:	8abb      	ldrh	r3, [r7, #20]
 80075b0:	4a7a      	ldr	r2, [pc, #488]	; (800779c <SDO_getodlist+0x204>)
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075bc:	4293      	cmp	r3, r2
 80075be:	d1f3      	bne.n	80075a8 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 80075c0:	4a77      	ldr	r2, [pc, #476]	; (80077a0 <SDO_getodlist+0x208>)
 80075c2:	8abb      	ldrh	r3, [r7, #20]
 80075c4:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	4b74      	ldr	r3, [pc, #464]	; (80077a0 <SDO_getodlist+0x208>)
 80075d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	f1a3 020e 	sub.w	r2, r3, #14
 80075d8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80075dc:	4013      	ands	r3, r2
 80075de:	440b      	add	r3, r1
 80075e0:	3b01      	subs	r3, #1
 80075e2:	60bb      	str	r3, [r7, #8]
   frags /= ODLISTSIZE;
 80075e4:	4b6e      	ldr	r3, [pc, #440]	; (80077a0 <SDO_getodlist+0x208>)
 80075e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	f1a3 020e 	sub.w	r2, r3, #14
 80075ee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80075f2:	4013      	ands	r3, r2
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	60bb      	str	r3, [r7, #8]
   coer = (_COEobjdesc *) &MBX[0];
 80075fc:	4b69      	ldr	r3, [pc, #420]	; (80077a4 <SDO_getodlist+0x20c>)
 80075fe:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	899b      	ldrh	r3, [r3, #12]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d903      	bls.n	8007610 <SDO_getodlist+0x78>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8007608:	4867      	ldr	r0, [pc, #412]	; (80077a8 <SDO_getodlist+0x210>)
 800760a:	f7ff ff75 	bl	80074f8 <SDO_infoerror>
 800760e:	e003      	b.n	8007618 <SDO_getodlist+0x80>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8007610:	f001 fc1e 	bl	8008e50 <ESC_claimbuffer>
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80ba 	beq.w	8007794 <SDO_getodlist+0x1fc>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	4a5f      	ldr	r2, [pc, #380]	; (80077a0 <SDO_getodlist+0x208>)
 8007624:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	4a5e      	ldr	r2, [pc, #376]	; (80077a4 <SDO_getodlist+0x20c>)
 800762c:	4413      	add	r3, r2
 800762e:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	7953      	ldrb	r3, [r2, #5]
 8007634:	2103      	movs	r1, #3
 8007636:	f361 0303 	bfi	r3, r1, #0, #4
 800763a:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007642:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	7a13      	ldrb	r3, [r2, #8]
 8007648:	2102      	movs	r1, #2
 800764a:	f361 0306 	bfi	r3, r1, #0, #7
 800764e:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	899b      	ldrh	r3, [r3, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d13e      	bne.n	80076d6 <SDO_getodlist+0x13e>
      {
         coel->index = htoes (0x00);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	7a13      	ldrb	r3, [r2, #8]
 8007662:	f36f 13c7 	bfc	r3, #7, #1
 8007666:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2200      	movs	r2, #0
 8007672:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 8007674:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <SDO_getodlist+0x214>)
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800767a:	4b49      	ldr	r3, [pc, #292]	; (80077a0 <SDO_getodlist+0x208>)
 800767c:	2200      	movs	r2, #0
 800767e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.frags = frags;
 8007682:	4a47      	ldr	r2, [pc, #284]	; (80077a0 <SDO_getodlist+0x208>)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a44      	ldr	r2, [pc, #272]	; (80077a0 <SDO_getodlist+0x208>)
 8007690:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         p = &(coel->datatype);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	330e      	adds	r3, #14
 8007698:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8aba      	ldrh	r2, [r7, #20]
 800769e:	801a      	strh	r2, [r3, #0]
         p++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3302      	adds	r3, #2
 80076a4:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	801a      	strh	r2, [r3, #0]
         p++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3302      	adds	r3, #2
 80076b0:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	801a      	strh	r2, [r3, #0]
         p++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3302      	adds	r3, #2
 80076bc:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	801a      	strh	r2, [r3, #0]
         p++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3302      	adds	r3, #2
 80076c8:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2212      	movs	r2, #18
 80076d4:	801a      	strh	r2, [r3, #0]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	899b      	ldrh	r3, [r3, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d156      	bne.n	800778c <SDO_getodlist+0x1f4>
      {
         if (frags > 1)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d912      	bls.n	800770a <SDO_getodlist+0x172>
         {
            coel->infoheader.incomplete = 1;
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	7a13      	ldrb	r3, [r2, #8]
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 80076ee:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <SDO_getodlist+0x208>)
 80076f0:	2213      	movs	r2, #19
 80076f2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <SDO_getodlist+0x208>)
 80076f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fa:	885b      	ldrh	r3, [r3, #2]
 80076fc:	3b0e      	subs	r3, #14
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007706:	823b      	strh	r3, [r7, #16]
 8007708:	e00d      	b.n	8007726 <SDO_getodlist+0x18e>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	7a13      	ldrb	r3, [r2, #8]
 800770e:	f36f 13c7 	bfc	r3, #7, #1
 8007712:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8007714:	4b25      	ldr	r3, [pc, #148]	; (80077ac <SDO_getodlist+0x214>)
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <SDO_getodlist+0x208>)
 800771c:	2200      	movs	r2, #0
 800771e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = entries;
 8007722:	8abb      	ldrh	r3, [r7, #20]
 8007724:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2200      	movs	r2, #0
 800772a:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800772c:	4a1c      	ldr	r2, [pc, #112]	; (80077a0 <SDO_getodlist+0x208>)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3b01      	subs	r3, #1
 8007738:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <SDO_getodlist+0x208>)
 800773a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800773e:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <SDO_getodlist+0x208>)
 8007740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007744:	b29a      	uxth	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (0x01);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	819a      	strh	r2, [r3, #12]

         p = &(coel->datatype);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	330e      	adds	r3, #14
 8007754:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8007756:	2300      	movs	r3, #0
 8007758:	827b      	strh	r3, [r7, #18]
 800775a:	e00c      	b.n	8007776 <SDO_getodlist+0x1de>
         {
            *p = htoes (SDOobjects[i].index);
 800775c:	8a7b      	ldrh	r3, [r7, #18]
 800775e:	4a0f      	ldr	r2, [pc, #60]	; (800779c <SDO_getodlist+0x204>)
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4413      	add	r3, r2
 8007764:	881a      	ldrh	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	801a      	strh	r2, [r3, #0]
            p++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3302      	adds	r3, #2
 800776e:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	3301      	adds	r3, #1
 8007774:	827b      	strh	r3, [r7, #18]
 8007776:	8a7a      	ldrh	r2, [r7, #18]
 8007778:	8a3b      	ldrh	r3, [r7, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	d3ee      	bcc.n	800775c <SDO_getodlist+0x1c4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800777e:	8a3b      	ldrh	r3, [r7, #16]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	3308      	adds	r3, #8
 8007786:	b29a      	uxth	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	4a07      	ldr	r2, [pc, #28]	; (80077ac <SDO_getodlist+0x214>)
 8007790:	2103      	movs	r1, #3
 8007792:	54d1      	strb	r1, [r2, r3]
   }
}
 8007794:	bf00      	nop
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	0800c69c 	.word	0x0800c69c
 80077a0:	200008e8 	.word	0x200008e8
 80077a4:	20000b58 	.word	0x20000b58
 80077a8:	06010000 	.word	0x06010000
 80077ac:	20000d80 	.word	0x20000d80

080077b0 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 */
static void SDO_getodlistcont (void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 80077b6:	f001 fb4b 	bl	8008e50 <ESC_claimbuffer>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8088 	beq.w	80078d6 <SDO_getodlistcont+0x126>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	4a45      	ldr	r2, [pc, #276]	; (80078e0 <SDO_getodlistcont+0x130>)
 80077ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	4a44      	ldr	r2, [pc, #272]	; (80078e4 <SDO_getodlistcont+0x134>)
 80077d2:	4413      	add	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	7953      	ldrb	r3, [r2, #5]
 80077da:	2103      	movs	r1, #3
 80077dc:	f361 0303 	bfi	r3, r1, #0, #4
 80077e0:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077e8:	80da      	strh	r2, [r3, #6]
         htoes (COE_SDOINFORMATION << 12);
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	7a13      	ldrb	r3, [r2, #8]
 80077ee:	2102      	movs	r1, #2
 80077f0:	f361 0306 	bfi	r3, r1, #0, #7
 80077f4:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 80077f6:	4b3a      	ldr	r3, [pc, #232]	; (80078e0 <SDO_getodlistcont+0x130>)
 80077f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077fc:	4b38      	ldr	r3, [pc, #224]	; (80078e0 <SDO_getodlistcont+0x130>)
 80077fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b29a      	uxth	r2, r3
 8007806:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780a:	885b      	ldrh	r3, [r3, #2]
 800780c:	3b0e      	subs	r3, #14
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	b29b      	uxth	r3, r3
 8007812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007816:	b29b      	uxth	r3, r3
 8007818:	fb12 f303 	smulbb	r3, r2, r3
 800781c:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 800781e:	4b30      	ldr	r3, [pc, #192]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007824:	2b01      	cmp	r3, #1
 8007826:	d911      	bls.n	800784c <SDO_getodlistcont+0x9c>
      {
         coel->infoheader.incomplete = 1;
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	7a13      	ldrb	r3, [r2, #8]
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 8007832:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	885b      	ldrh	r3, [r3, #2]
 8007838:	3b0e      	subs	r3, #14
 800783a:	085b      	lsrs	r3, r3, #1
 800783c:	b29b      	uxth	r3, r3
 800783e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007842:	b29a      	uxth	r2, r3
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	4413      	add	r3, r2
 8007848:	82bb      	strh	r3, [r7, #20]
 800784a:	e00f      	b.n	800786c <SDO_getodlistcont+0xbc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	7a13      	ldrb	r3, [r2, #8]
 8007850:	f36f 13c7 	bfc	r3, #7, #1
 8007854:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8007856:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <SDO_getodlistcont+0x138>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800785c:	4b20      	ldr	r3, [pc, #128]	; (80078e0 <SDO_getodlistcont+0x130>)
 800785e:	2200      	movs	r2, #0
 8007860:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007866:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800786a:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007878:	3b01      	subs	r3, #1
 800787a:	4a19      	ldr	r2, [pc, #100]	; (80078e0 <SDO_getodlistcont+0x130>)
 800787c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <SDO_getodlistcont+0x130>)
 8007882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007886:	b29a      	uxth	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	330c      	adds	r3, #12
 8007890:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	82fb      	strh	r3, [r7, #22]
 8007896:	e00c      	b.n	80078b2 <SDO_getodlistcont+0x102>
      {
         *p = htoes (SDOobjects[i].index);
 8007898:	8afb      	ldrh	r3, [r7, #22]
 800789a:	4a14      	ldr	r2, [pc, #80]	; (80078ec <SDO_getodlistcont+0x13c>)
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	4413      	add	r3, r2
 80078a0:	881a      	ldrh	r2, [r3, #0]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	801a      	strh	r2, [r3, #0]
         p++;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3302      	adds	r3, #2
 80078aa:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 80078ac:	8afb      	ldrh	r3, [r7, #22]
 80078ae:	3301      	adds	r3, #1
 80078b0:	82fb      	strh	r3, [r7, #22]
 80078b2:	8afa      	ldrh	r2, [r7, #22]
 80078b4:	8abb      	ldrh	r3, [r7, #20]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d3ee      	bcc.n	8007898 <SDO_getodlistcont+0xe8>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 80078ba:	8aba      	ldrh	r2, [r7, #20]
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3306      	adds	r3, #6
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	4a05      	ldr	r2, [pc, #20]	; (80078e8 <SDO_getodlistcont+0x138>)
 80078d2:	2103      	movs	r1, #3
 80078d4:	54d1      	strb	r1, [r2, r3]
   }
}
 80078d6:	bf00      	nop
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	200008e8 	.word	0x200008e8
 80078e4:	20000b58 	.word	0x20000b58
 80078e8:	20000d80 	.word	0x20000d80
 80078ec:	0800c69c 	.word	0x0800c69c

080078f0 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_getod (void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08c      	sub	sp, #48	; 0x30
 80078f4:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 80078fc:	4b74      	ldr	r3, [pc, #464]	; (8007ad0 <SDO_getod+0x1e0>)
 80078fe:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	899b      	ldrh	r3, [r3, #12]
 8007904:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8007906:	8bfb      	ldrh	r3, [r7, #30]
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fa8f 	bl	8005e2c <SDO_findobject>
 800790e:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f2c0 80d4 	blt.w	8007ac0 <SDO_getod+0x1d0>
   {
      MBXout = ESC_claimbuffer ();
 8007918:	f001 fa9a 	bl	8008e50 <ESC_claimbuffer>
 800791c:	4603      	mov	r3, r0
 800791e:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80cf 	beq.w	8007ac6 <SDO_getod+0x1d6>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	4a6a      	ldr	r2, [pc, #424]	; (8007ad4 <SDO_getod+0x1e4>)
 800792c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800792e:	fb02 f303 	mul.w	r3, r2, r3
 8007932:	4a67      	ldr	r2, [pc, #412]	; (8007ad0 <SDO_getod+0x1e0>)
 8007934:	4413      	add	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	7953      	ldrb	r3, [r2, #5]
 800793c:	2103      	movs	r1, #3
 800793e:	f361 0303 	bfi	r3, r1, #0, #4
 8007942:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800794a:	80da      	strh	r2, [r3, #6]
            htoes (COE_SDOINFORMATION << 12);
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	7a13      	ldrb	r3, [r2, #8]
 8007950:	2104      	movs	r1, #4
 8007952:	f361 0306 	bfi	r3, r1, #0, #7
 8007956:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	7a13      	ldrb	r3, [r2, #8]
 800795c:	f36f 13c7 	bfc	r3, #7, #1
 8007960:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2200      	movs	r2, #0
 8007966:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2200      	movs	r2, #0
 800796c:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (index);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	8bfa      	ldrh	r2, [r7, #30]
 8007972:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8007974:	4a58      	ldr	r2, [pc, #352]	; (8007ad8 <SDO_getod+0x1e8>)
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	4413      	add	r3, r2
 800797c:	3302      	adds	r3, #2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	2b07      	cmp	r3, #7
 8007982:	d120      	bne.n	80079c6 <SDO_getod+0xd6>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8007984:	2100      	movs	r1, #0
 8007986:	69b8      	ldr	r0, [r7, #24]
 8007988:	f7fe f9f2 	bl	8005d70 <SDO_findsubindex>
 800798c:	4603      	mov	r3, r0
 800798e:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8007990:	4a51      	ldr	r2, [pc, #324]	; (8007ad8 <SDO_getod+0x1e8>)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	4413      	add	r3, r2
 8007998:	330c      	adds	r3, #12
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	461a      	mov	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	4413      	add	r3, r2
 80079ae:	885a      	ldrh	r2, [r3, #2]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 80079b4:	4a48      	ldr	r2, [pc, #288]	; (8007ad8 <SDO_getod+0x1e8>)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	4413      	add	r3, r2
 80079bc:	3304      	adds	r3, #4
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	741a      	strb	r2, [r3, #16]
 80079c4:	e037      	b.n	8007a36 <SDO_getod+0x146>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 80079c6:	4a44      	ldr	r2, [pc, #272]	; (8007ad8 <SDO_getod+0x1e8>)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	4413      	add	r3, r2
 80079ce:	3302      	adds	r3, #2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d122      	bne.n	8007a1c <SDO_getod+0x12c>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 80079d6:	2100      	movs	r1, #0
 80079d8:	69b8      	ldr	r0, [r7, #24]
 80079da:	f7fe f9c9 	bl	8005d70 <SDO_findsubindex>
 80079de:	4603      	mov	r3, r0
 80079e0:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 80079e2:	4a3d      	ldr	r2, [pc, #244]	; (8007ad8 <SDO_getod+0x1e8>)
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	4413      	add	r3, r2
 80079ea:	330c      	adds	r3, #12
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	461a      	mov	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	885a      	ldrh	r2, [r3, #2]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8007a06:	4a34      	ldr	r2, [pc, #208]	; (8007ad8 <SDO_getod+0x1e8>)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	4413      	add	r3, r2
 8007a0e:	330c      	adds	r3, #12
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	741a      	strb	r2, [r3, #16]
 8007a1a:	e00c      	b.n	8007a36 <SDO_getod+0x146>
         }
         else
         {
            coel->datatype = htoes (0);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 8007a22:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <SDO_getod+0x1e8>)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	4413      	add	r3, r2
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 8007a36:	4a28      	ldr	r2, [pc, #160]	; (8007ad8 <SDO_getod+0x1e8>)
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3302      	adds	r3, #2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8007a48:	4a23      	ldr	r2, [pc, #140]	; (8007ad8 <SDO_getod+0x1e8>)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	3308      	adds	r3, #8
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3312      	adds	r3, #18
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8007a5c:	e00e      	b.n	8007a7c <SDO_getod+0x18c>
         {
            *d = *s;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	701a      	strb	r2, [r3, #0]
            n++;
 8007a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	3301      	adds	r3, #1
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	3301      	adds	r3, #1
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <SDO_getod+0x1a2>
 8007a84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <SDO_getod+0x1e4>)
 8007a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8c:	3b12      	subs	r3, #18
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d3e5      	bcc.n	8007a5e <SDO_getod+0x16e>
         }
         *d = *s;
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 8007a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <SDO_getod+0x1ec>)
 8007aac:	2103      	movs	r1, #3
 8007aae:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <SDO_getod+0x1ec>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <SDO_getod+0x1e4>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8007abe:	e002      	b.n	8007ac6 <SDO_getod+0x1d6>
      SDO_infoerror (ABORT_NOOBJECT);
 8007ac0:	4807      	ldr	r0, [pc, #28]	; (8007ae0 <SDO_getod+0x1f0>)
 8007ac2:	f7ff fd19 	bl	80074f8 <SDO_infoerror>
}
 8007ac6:	bf00      	nop
 8007ac8:	3730      	adds	r7, #48	; 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000b58 	.word	0x20000b58
 8007ad4:	200008e8 	.word	0x200008e8
 8007ad8:	0800c69c 	.word	0x0800c69c
 8007adc:	20000d80 	.word	0x20000d80
 8007ae0:	06020000 	.word	0x06020000

08007ae4 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_geted (void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0
   int16_t nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8007aee:	4b65      	ldr	r3, [pc, #404]	; (8007c84 <SDO_geted+0x1a0>)
 8007af0:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	7b1a      	ldrb	r2, [r3, #12]
 8007af6:	7b5b      	ldrb	r3, [r3, #13]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	4313      	orrs	r3, r2
 8007afc:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	7b9b      	ldrb	r3, [r3, #14]
 8007b02:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 8007b04:	8afb      	ldrh	r3, [r7, #22]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe f990 	bl	8005e2c <SDO_findobject>
 8007b0c:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f2c0 80b0 	blt.w	8007c76 <SDO_geted+0x192>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8007b16:	7d7b      	ldrb	r3, [r7, #21]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f7fe f928 	bl	8005d70 <SDO_findsubindex>
 8007b20:	4603      	mov	r3, r0
 8007b22:	81fb      	strh	r3, [r7, #14]
      if (nsub >= 0)
 8007b24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f2c0 80a0 	blt.w	8007c6e <SDO_geted+0x18a>
      {
         objd = SDOobjects[nidx].objdesc;
 8007b2e:	4a56      	ldr	r2, [pc, #344]	; (8007c88 <SDO_geted+0x1a4>)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	4413      	add	r3, r2
 8007b36:	330c      	adds	r3, #12
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8007b3c:	f001 f988 	bl	8008e50 <ESC_claimbuffer>
 8007b40:	4603      	mov	r3, r0
 8007b42:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8098 	beq.w	8007c7c <SDO_geted+0x198>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	4a4f      	ldr	r2, [pc, #316]	; (8007c8c <SDO_geted+0x1a8>)
 8007b50:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	4a4b      	ldr	r2, [pc, #300]	; (8007c84 <SDO_geted+0x1a0>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	7953      	ldrb	r3, [r2, #5]
 8007b60:	2103      	movs	r1, #3
 8007b62:	f361 0303 	bfi	r3, r1, #0, #4
 8007b66:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	719a      	strb	r2, [r3, #6]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b74:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	7a13      	ldrb	r3, [r2, #8]
 8007b7a:	2106      	movs	r1, #6
 8007b7c:	f361 0306 	bfi	r3, r1, #0, #7
 8007b80:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7a13      	ldrb	r3, [r2, #8]
 8007b86:	f36f 13c7 	bfc	r3, #7, #1
 8007b8a:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	729a      	strb	r2, [r3, #10]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	8afa      	ldrh	r2, [r7, #22]
 8007ba0:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	7d7a      	ldrb	r2, [r7, #21]
 8007ba6:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2207      	movs	r2, #7
 8007bac:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8007bae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	885a      	ldrh	r2, [r3, #2]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8007bc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	889a      	ldrh	r2, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 8007bde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	461a      	mov	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4413      	add	r3, r2
 8007bf0:	88da      	ldrh	r2, [r3, #6]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8007bf6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	461a      	mov	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4413      	add	r3, r2
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	3316      	adds	r3, #22
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8007c12:	e00c      	b.n	8007c2e <SDO_geted+0x14a>
            {
               *d = *s;
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	701a      	strb	r2, [r3, #0]
               n++;
 8007c1c:	7ffb      	ldrb	r3, [r7, #31]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	77fb      	strb	r3, [r7, #31]
               s++;
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	3301      	adds	r3, #1
 8007c26:	623b      	str	r3, [r7, #32]
               d++;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <SDO_geted+0x15e>
 8007c36:	7ffa      	ldrb	r2, [r7, #31]
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <SDO_geted+0x1a8>)
 8007c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3c:	3b16      	subs	r3, #22
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d3e8      	bcc.n	8007c14 <SDO_geted+0x130>
            }
            *d = *s;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 8007c4a:	7ffb      	ldrb	r3, [r7, #31]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3310      	adds	r3, #16
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	4a0d      	ldr	r2, [pc, #52]	; (8007c90 <SDO_geted+0x1ac>)
 8007c5a:	2103      	movs	r1, #3
 8007c5c:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <SDO_geted+0x1ac>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <SDO_geted+0x1a8>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8007c6c:	e006      	b.n	8007c7c <SDO_geted+0x198>
         SDO_infoerror (ABORT_NOSUBINDEX);
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <SDO_geted+0x1b0>)
 8007c70:	f7ff fc42 	bl	80074f8 <SDO_infoerror>
}
 8007c74:	e002      	b.n	8007c7c <SDO_geted+0x198>
      SDO_infoerror (ABORT_NOOBJECT);
 8007c76:	4808      	ldr	r0, [pc, #32]	; (8007c98 <SDO_geted+0x1b4>)
 8007c78:	f7ff fc3e 	bl	80074f8 <SDO_infoerror>
}
 8007c7c:	bf00      	nop
 8007c7e:	3728      	adds	r7, #40	; 0x28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20000b58 	.word	0x20000b58
 8007c88:	0800c69c 	.word	0x0800c69c
 8007c8c:	200008e8 	.word	0x200008e8
 8007c90:	20000d80 	.word	0x20000d80
 8007c94:	06090011 	.word	0x06090011
 8007c98:	06020000 	.word	0x06020000

08007c9c <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint16_t service;
   if (ESCvar.MBXrun == 0)
 8007ca2:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007ca4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80c4 	beq.w	8007e36 <ESC_coeprocess+0x19a>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8007cae:	4b64      	ldr	r3, [pc, #400]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007cb0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d119      	bne.n	8007cec <ESC_coeprocess+0x50>
 8007cb8:	4b62      	ldr	r3, [pc, #392]	; (8007e44 <ESC_coeprocess+0x1a8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d115      	bne.n	8007cec <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8007cc0:	4b61      	ldr	r3, [pc, #388]	; (8007e48 <ESC_coeprocess+0x1ac>)
 8007cc2:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	795b      	ldrb	r3, [r3, #5]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d10c      	bne.n	8007cec <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b07      	cmp	r3, #7
 8007cda:	d803      	bhi.n	8007ce4 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 8007cdc:	2008      	movs	r0, #8
 8007cde:	f001 f93b 	bl	8008f58 <MBX_error>
 8007ce2:	e003      	b.n	8007cec <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 8007ce4:	4b56      	ldr	r3, [pc, #344]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 8007cec:	4b54      	ldr	r3, [pc, #336]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007cee:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8007cf2:	2b13      	cmp	r3, #19
 8007cf4:	d106      	bne.n	8007d04 <ESC_coeprocess+0x68>
 8007cf6:	4b52      	ldr	r3, [pc, #328]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007cf8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 8007d00:	f7ff fd56 	bl	80077b0 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 8007d04:	4b4e      	ldr	r3, [pc, #312]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007d06:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	f040 8094 	bne.w	8007e38 <ESC_coeprocess+0x19c>
   {
      coesdo = (_COEsdo *) &MBX[0];
 8007d10:	4b4d      	ldr	r3, [pc, #308]	; (8007e48 <ESC_coeprocess+0x1ac>)
 8007d12:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 8007d14:	4b4c      	ldr	r3, [pc, #304]	; (8007e48 <ESC_coeprocess+0x1ac>)
 8007d16:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	88db      	ldrh	r3, [r3, #6]
 8007d1c:	0b1b      	lsrs	r3, r3, #12
 8007d1e:	807b      	strh	r3, [r7, #2]
      if (service == COE_SDOREQUEST)
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d142      	bne.n	8007dac <ESC_coeprocess+0x110>
      {
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	7a1b      	ldrb	r3, [r3, #8]
 8007d2a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d10f      	bne.n	8007d52 <ESC_coeprocess+0xb6>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	2b0a      	cmp	r3, #10
 8007d38:	d10b      	bne.n	8007d52 <ESC_coeprocess+0xb6>
         {
            /* initiate SDO upload request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	7a1b      	ldrb	r3, [r3, #8]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <ESC_coeprocess+0xb0>
            {
               SDO_upload_complete_access ();
 8007d46:	f7fe fe3b 	bl	80069c0 <SDO_upload_complete_access>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007d4a:	e075      	b.n	8007e38 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_upload ();
 8007d4c:	f7fe fa64 	bl	8006218 <SDO_upload>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007d50:	e072      	b.n	8007e38 <ESC_coeprocess+0x19c>
            }
         }
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	7a1b      	ldrb	r3, [r3, #8]
 8007d56:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8007d5a:	2b60      	cmp	r3, #96	; 0x60
 8007d5c:	d10b      	bne.n	8007d76 <ESC_coeprocess+0xda>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	2b0a      	cmp	r3, #10
 8007d64:	d107      	bne.n	8007d76 <ESC_coeprocess+0xda>
               && (ESCvar.segmented == MBXSEU))
 8007d66:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007d68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d102      	bne.n	8007d76 <ESC_coeprocess+0xda>
         {
            /* SDO upload segment request */
            SDO_uploadsegment ();
 8007d70:	f7fe ff44 	bl	8006bfc <SDO_uploadsegment>
 8007d74:	e060      	b.n	8007e38 <ESC_coeprocess+0x19c>
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	7a1b      	ldrb	r3, [r3, #8]
 8007d7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d10b      	bne.n	8007d9a <ESC_coeprocess+0xfe>
         {
            /* initiate SDO download request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	7a1b      	ldrb	r3, [r3, #8]
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <ESC_coeprocess+0xf8>
            {
               SDO_download_complete_access ();
 8007d8e:	f7ff f9b3 	bl	80070f8 <SDO_download_complete_access>
 8007d92:	e051      	b.n	8007e38 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_download ();
 8007d94:	f7fe ffec 	bl	8006d70 <SDO_download>
 8007d98:	e04e      	b.n	8007e38 <ESC_coeprocess+0x19c>
            }
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	7a1b      	ldrb	r3, [r3, #8]
 8007d9e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d148      	bne.n	8007e38 <ESC_coeprocess+0x19c>
         {
            /* SDO download segment request */
            SDO_downloadsegment ();
 8007da6:	f7ff fabb 	bl	8007320 <SDO_downloadsegment>
 8007daa:	e045      	b.n	8007e38 <ESC_coeprocess+0x19c>
         }
      }
      /* initiate SDO get OD list */
      else
      {
         if ((service == COE_SDOINFORMATION)
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d109      	bne.n	8007dc6 <ESC_coeprocess+0x12a>
               && (coeobjdesc->infoheader.opcode == 0x01))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	7a1b      	ldrb	r3, [r3, #8]
 8007db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d102      	bne.n	8007dc6 <ESC_coeprocess+0x12a>
         {
            SDO_getodlist ();
 8007dc0:	f7ff fbea 	bl	8007598 <SDO_getodlist>
 8007dc4:	e038      	b.n	8007e38 <ESC_coeprocess+0x19c>
         }
         /* initiate SDO get OD */
         else
         {
            if ((service == COE_SDOINFORMATION)
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d109      	bne.n	8007de0 <ESC_coeprocess+0x144>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7a1b      	ldrb	r3, [r3, #8]
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d102      	bne.n	8007de0 <ESC_coeprocess+0x144>
            {
               SDO_getod ();
 8007dda:	f7ff fd89 	bl	80078f0 <SDO_getod>
 8007dde:	e02b      	b.n	8007e38 <ESC_coeprocess+0x19c>
            }
            /* initiate SDO get ED */
            else
            {
               if ((service == COE_SDOINFORMATION)
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d109      	bne.n	8007dfa <ESC_coeprocess+0x15e>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7a1b      	ldrb	r3, [r3, #8]
 8007dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d102      	bne.n	8007dfa <ESC_coeprocess+0x15e>
               {
                  SDO_geted ();
 8007df4:	f7ff fe76 	bl	8007ae4 <SDO_geted>
 8007df8:	e01e      	b.n	8007e38 <ESC_coeprocess+0x19c>
               }
               else
               {
                  /* COE not recognised above */
                  if (ESCvar.xoe == MBXCOE)
 8007dfa:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007dfc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d119      	bne.n	8007e38 <ESC_coeprocess+0x19c>
                  {
                     if (service == 0)
 8007e04:	887b      	ldrh	r3, [r7, #2]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <ESC_coeprocess+0x176>
                     {
                        MBX_error (MBXERR_INVALIDHEADER);
 8007e0a:	2005      	movs	r0, #5
 8007e0c:	f001 f8a4 	bl	8008f58 <MBX_error>
 8007e10:	e009      	b.n	8007e26 <ESC_coeprocess+0x18a>
                     }
                     else
                     {
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007e18:	b299      	uxth	r1, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	7ada      	ldrb	r2, [r3, #11]
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <ESC_coeprocess+0x1b0>)
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7fe f98f 	bl	8006144 <SDO_abort>
                     }
                     MBXcontrol[0].state = MBXstate_idle;
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <ESC_coeprocess+0x1a8>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
                     ESCvar.xoe = 0;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <ESC_coeprocess+0x1a4>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8007e34:	e000      	b.n	8007e38 <ESC_coeprocess+0x19c>
      return;
 8007e36:	bf00      	nop
               }
            }
         }
      }
   }
}
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200008e8 	.word	0x200008e8
 8007e44:	20000d80 	.word	0x20000d80
 8007e48:	20000b58 	.word	0x20000b58
 8007e4c:	06010000 	.word	0x06010000

08007e50 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 8007e50:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e54:	b092      	sub	sp, #72	; 0x48
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24
 8007e5a:	6239      	str	r1, [r7, #32]
 8007e5c:	61fa      	str	r2, [r7, #28]
   const unsigned int word_offset = offset / 64;
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	099b      	lsrs	r3, r3, #6
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   const unsigned int bit_offset = offset % 64;
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d019      	beq.n	8007ea6 <COE_bitsliceGet+0x56>
 8007e72:	f04f 0201 	mov.w	r2, #1
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	69fe      	ldr	r6, [r7, #28]
 8007e7c:	f1a6 0120 	sub.w	r1, r6, #32
 8007e80:	f1c6 0020 	rsb	r0, r6, #32
 8007e84:	fa03 f506 	lsl.w	r5, r3, r6
 8007e88:	fa02 f101 	lsl.w	r1, r2, r1
 8007e8c:	430d      	orrs	r5, r1
 8007e8e:	fa22 f000 	lsr.w	r0, r2, r0
 8007e92:	4305      	orrs	r5, r0
 8007e94:	fa02 f406 	lsl.w	r4, r2, r6
 8007e98:	f114 33ff 	adds.w	r3, r4, #4294967295
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	f145 33ff 	adc.w	r3, r5, #4294967295
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e005      	b.n	8007eb2 <COE_bitsliceGet+0x62>
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8007eae:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007eb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007eb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   uint64_t w0;
   uint64_t w1 = 0;
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ecc:	4413      	add	r3, r2
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   w0 = w0 >> bit_offset;
 8007ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007edc:	f1c1 0420 	rsb	r4, r1, #32
 8007ee0:	f1a1 0020 	sub.w	r0, r1, #32
 8007ee4:	fa22 fa01 	lsr.w	sl, r2, r1
 8007ee8:	fa03 f404 	lsl.w	r4, r3, r4
 8007eec:	ea4a 0a04 	orr.w	sl, sl, r4
 8007ef0:	fa23 f000 	lsr.w	r0, r3, r0
 8007ef4:	ea4a 0a00 	orr.w	sl, sl, r0
 8007ef8:	fa23 fb01 	lsr.w	fp, r3, r1
 8007efc:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	4413      	add	r3, r2
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d91f      	bls.n	8007f4a <COE_bitsliceGet+0xfa>
   {
      w1 = bitmap[word_offset + 1];
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	4413      	add	r3, r2
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      w1 = w1 << (64 - bit_offset);
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 8007f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f26:	f1a1 0420 	sub.w	r4, r1, #32
 8007f2a:	f1c1 0020 	rsb	r0, r1, #32
 8007f2e:	fa03 f901 	lsl.w	r9, r3, r1
 8007f32:	fa02 f404 	lsl.w	r4, r2, r4
 8007f36:	ea49 0904 	orr.w	r9, r9, r4
 8007f3a:	fa22 f000 	lsr.w	r0, r2, r0
 8007f3e:	ea49 0900 	orr.w	r9, r9, r0
 8007f42:	fa02 f801 	lsl.w	r8, r2, r1
 8007f46:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
   }

   w0 = (w1 | w0);
 8007f4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f52:	ea40 0402 	orr.w	r4, r0, r2
 8007f56:	603c      	str	r4, [r7, #0]
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	607b      	str	r3, [r7, #4]
 8007f5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007f60:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   return (w0 & mask);
 8007f64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f6c:	ea00 0402 	and.w	r4, r0, r2
 8007f70:	60bc      	str	r4, [r7, #8]
 8007f72:	400b      	ands	r3, r1
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	3748      	adds	r7, #72	; 0x48
 8007f80:	46bd      	mov	sp, r7
 8007f82:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f86:	4770      	bx	lr

08007f88 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 8007f88:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f8c:	b0aa      	sub	sp, #168	; 0xa8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6678      	str	r0, [r7, #100]	; 0x64
 8007f92:	6639      	str	r1, [r7, #96]	; 0x60
 8007f94:	65fa      	str	r2, [r7, #92]	; 0x5c
   const unsigned int word_offset = offset / 64;
 8007f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   const unsigned int bit_offset = offset % 64;
 8007f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8007fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d019      	beq.n	8007fe2 <COE_bitsliceSet+0x5a>
 8007fae:	f04f 0201 	mov.w	r2, #1
 8007fb2:	f04f 0300 	mov.w	r3, #0
 8007fb6:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8007fb8:	f1a6 0120 	sub.w	r1, r6, #32
 8007fbc:	f1c6 0020 	rsb	r0, r6, #32
 8007fc0:	fa03 f506 	lsl.w	r5, r3, r6
 8007fc4:	fa02 f101 	lsl.w	r1, r2, r1
 8007fc8:	430d      	orrs	r5, r1
 8007fca:	fa22 f000 	lsr.w	r0, r2, r0
 8007fce:	4305      	orrs	r5, r0
 8007fd0:	fa02 f406 	lsl.w	r4, r2, r6
 8007fd4:	f114 33ff 	adds.w	r3, r4, #4294967295
 8007fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fda:	f145 33ff 	adc.w	r3, r5, #4294967295
 8007fde:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe0:	e005      	b.n	8007fee <COE_bitsliceSet+0x66>
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8007fea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8007fee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007ff2:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
   const uint64_t mask0 = mask << bit_offset;
 8007ff6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007ffa:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8007ffe:	f1a4 0120 	sub.w	r1, r4, #32
 8008002:	f1c4 0020 	rsb	r0, r4, #32
 8008006:	fa03 f904 	lsl.w	r9, r3, r4
 800800a:	fa02 f101 	lsl.w	r1, r2, r1
 800800e:	ea49 0901 	orr.w	r9, r9, r1
 8008012:	fa22 f000 	lsr.w	r0, r2, r0
 8008016:	ea49 0900 	orr.w	r9, r9, r0
 800801a:	fa02 f804 	lsl.w	r8, r2, r4
 800801e:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
   uint64_t v0 = value << bit_offset;
 8008022:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008026:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800802a:	f1a4 0120 	sub.w	r1, r4, #32
 800802e:	f1c4 0020 	rsb	r0, r4, #32
 8008032:	fa03 fb04 	lsl.w	fp, r3, r4
 8008036:	fa02 f101 	lsl.w	r1, r2, r1
 800803a:	ea4b 0b01 	orr.w	fp, fp, r1
 800803e:	fa22 f000 	lsr.w	r0, r2, r0
 8008042:	ea4b 0b00 	orr.w	fp, fp, r0
 8008046:	fa02 fa04 	lsl.w	sl, r2, r4
 800804a:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
   uint64_t w0 = bitmap[word_offset];
 800804e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008052:	00da      	lsls	r2, r3, #3
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	4413      	add	r3, r2
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8008060:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008064:	43d1      	mvns	r1, r2
 8008066:	63b9      	str	r1, [r7, #56]	; 0x38
 8008068:	43db      	mvns	r3, r3
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008070:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008074:	4621      	mov	r1, r4
 8008076:	4011      	ands	r1, r2
 8008078:	6339      	str	r1, [r7, #48]	; 0x30
 800807a:	4629      	mov	r1, r5
 800807c:	4019      	ands	r1, r3
 800807e:	6379      	str	r1, [r7, #52]	; 0x34
 8008080:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008084:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008088:	ea00 0402 	and.w	r4, r0, r2
 800808c:	62bc      	str	r4, [r7, #40]	; 0x28
 800808e:	400b      	ands	r3, r1
 8008090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008096:	4623      	mov	r3, r4
 8008098:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800809c:	4602      	mov	r2, r0
 800809e:	4313      	orrs	r3, r2
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	462b      	mov	r3, r5
 80080a4:	460a      	mov	r2, r1
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80080ae:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
   bitmap[word_offset] = w0;
 80080b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080ba:	18d1      	adds	r1, r2, r3
 80080bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80080c0:	e9c1 2300 	strd	r2, r3, [r1]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 80080c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080ca:	4413      	add	r3, r2
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d976      	bls.n	80081be <COE_bitsliceSet+0x236>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 80080d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080d4:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 80080d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80080dc:	f1c4 0120 	rsb	r1, r4, #32
 80080e0:	f1a4 0020 	sub.w	r0, r4, #32
 80080e4:	fa22 f504 	lsr.w	r5, r2, r4
 80080e8:	653d      	str	r5, [r7, #80]	; 0x50
 80080ea:	fa03 f101 	lsl.w	r1, r3, r1
 80080ee:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80080f0:	430d      	orrs	r5, r1
 80080f2:	653d      	str	r5, [r7, #80]	; 0x50
 80080f4:	fa23 f000 	lsr.w	r0, r3, r0
 80080f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080fa:	4301      	orrs	r1, r0
 80080fc:	6539      	str	r1, [r7, #80]	; 0x50
 80080fe:	40e3      	lsrs	r3, r4
 8008100:	657b      	str	r3, [r7, #84]	; 0x54
 8008102:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008106:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      uint64_t v1 = value >> (64 - bit_offset);
 800810a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800810e:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
 8008112:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008116:	f1c0 0420 	rsb	r4, r0, #32
 800811a:	f1a0 0120 	sub.w	r1, r0, #32
 800811e:	fa22 f500 	lsr.w	r5, r2, r0
 8008122:	64bd      	str	r5, [r7, #72]	; 0x48
 8008124:	fa03 f404 	lsl.w	r4, r3, r4
 8008128:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800812a:	4325      	orrs	r5, r4
 800812c:	64bd      	str	r5, [r7, #72]	; 0x48
 800812e:	fa23 f101 	lsr.w	r1, r3, r1
 8008132:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8008134:	430c      	orrs	r4, r1
 8008136:	64bc      	str	r4, [r7, #72]	; 0x48
 8008138:	40c3      	lsrs	r3, r0
 800813a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008140:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
      uint64_t w1 = bitmap[word_offset + 1];
 8008144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008148:	3301      	adds	r3, #1
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800814e:	4413      	add	r3, r2
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

      w1 = (w1 & ~mask1) | (v1 & mask1);
 8008158:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800815c:	43d1      	mvns	r1, r2
 800815e:	6239      	str	r1, [r7, #32]
 8008160:	43db      	mvns	r3, r3
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
 8008164:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008168:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800816c:	4621      	mov	r1, r4
 800816e:	4011      	ands	r1, r2
 8008170:	61b9      	str	r1, [r7, #24]
 8008172:	4629      	mov	r1, r5
 8008174:	4019      	ands	r1, r3
 8008176:	61f9      	str	r1, [r7, #28]
 8008178:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800817c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008180:	ea00 0402 	and.w	r4, r0, r2
 8008184:	613c      	str	r4, [r7, #16]
 8008186:	400b      	ands	r3, r1
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800818e:	4623      	mov	r3, r4
 8008190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008194:	4602      	mov	r2, r0
 8008196:	4313      	orrs	r3, r2
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	462b      	mov	r3, r5
 800819c:	460a      	mov	r2, r1
 800819e:	4313      	orrs	r3, r2
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80081a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      bitmap[word_offset + 1] = w1;
 80081aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081ae:	3301      	adds	r3, #1
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081b4:	18d1      	adds	r1, r2, r3
 80081b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80081ba:	e9c1 2300 	strd	r2, r3, [r1]
   }
}
 80081be:	bf00      	nop
 80081c0:	37a8      	adds	r7, #168	; 0xa8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081c8:	4770      	bx	lr
	...

080081cc <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	885b      	ldrh	r3, [r3, #2]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	2b36      	cmp	r3, #54	; 0x36
 80081e8:	f200 8094 	bhi.w	8008314 <COE_getValue+0x148>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <COE_getValue+0x28>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	080082d1 	.word	0x080082d1
 80081f8:	080082d1 	.word	0x080082d1
 80081fc:	080082e3 	.word	0x080082e3
 8008200:	080082f5 	.word	0x080082f5
 8008204:	080082d1 	.word	0x080082d1
 8008208:	080082e3 	.word	0x080082e3
 800820c:	080082f5 	.word	0x080082f5
 8008210:	080082f5 	.word	0x080082f5
 8008214:	08008315 	.word	0x08008315
 8008218:	08008315 	.word	0x08008315
 800821c:	08008315 	.word	0x08008315
 8008220:	08008315 	.word	0x08008315
 8008224:	08008315 	.word	0x08008315
 8008228:	08008315 	.word	0x08008315
 800822c:	08008315 	.word	0x08008315
 8008230:	08008315 	.word	0x08008315
 8008234:	08008307 	.word	0x08008307
 8008238:	08008315 	.word	0x08008315
 800823c:	08008315 	.word	0x08008315
 8008240:	08008315 	.word	0x08008315
 8008244:	08008307 	.word	0x08008307
 8008248:	08008315 	.word	0x08008315
 800824c:	08008315 	.word	0x08008315
 8008250:	08008315 	.word	0x08008315
 8008254:	08008315 	.word	0x08008315
 8008258:	08008315 	.word	0x08008315
 800825c:	08008307 	.word	0x08008307
 8008260:	08008315 	.word	0x08008315
 8008264:	08008315 	.word	0x08008315
 8008268:	08008315 	.word	0x08008315
 800826c:	08008315 	.word	0x08008315
 8008270:	08008315 	.word	0x08008315
 8008274:	08008315 	.word	0x08008315
 8008278:	08008315 	.word	0x08008315
 800827c:	08008315 	.word	0x08008315
 8008280:	08008315 	.word	0x08008315
 8008284:	08008315 	.word	0x08008315
 8008288:	08008315 	.word	0x08008315
 800828c:	08008315 	.word	0x08008315
 8008290:	08008315 	.word	0x08008315
 8008294:	08008315 	.word	0x08008315
 8008298:	08008315 	.word	0x08008315
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008315 	.word	0x08008315
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082e3 	.word	0x080082e3
 80082ac:	080082f5 	.word	0x080082f5
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	080082d1 	.word	0x080082d1
 80082b8:	080082d1 	.word	0x080082d1
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082d1 	.word	0x080082d1
 80082c8:	080082d1 	.word	0x080082d1
 80082cc:	080082d1 	.word	0x080082d1
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      value = *(uint8_t *)obj->data;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 80082e0:	e01f      	b.n	8008322 <COE_getValue+0x156>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      value = *(uint16_t *)obj->data;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 80082f2:	e016      	b.n	8008322 <COE_getValue+0x156>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      value = *(uint32_t *)obj->data;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 8008304:	e00d      	b.n	8008322 <COE_getValue+0x156>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 8008312:	e006      	b.n	8008322 <COE_getValue+0x156>

   default:
      CC_ASSERT (0);
 8008314:	4b06      	ldr	r3, [pc, #24]	; (8008330 <COE_getValue+0x164>)
 8008316:	4a07      	ldr	r2, [pc, #28]	; (8008334 <COE_getValue+0x168>)
 8008318:	f240 618b 	movw	r1, #1675	; 0x68b
 800831c:	4806      	ldr	r0, [pc, #24]	; (8008338 <COE_getValue+0x16c>)
 800831e:	f002 fb61 	bl	800a9e4 <__assert_func>
   }

   return value;
 8008322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8008326:	4610      	mov	r0, r2
 8008328:	4619      	mov	r1, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	0800ba18 	.word	0x0800ba18
 8008334:	0800c7fc 	.word	0x0800c7fc
 8008338:	0800ba1c 	.word	0x0800ba1c

0800833c <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	3b01      	subs	r3, #1
 800834e:	2b36      	cmp	r3, #54	; 0x36
 8008350:	f200 8088 	bhi.w	8008464 <COE_setValue+0x128>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <COE_setValue+0x20>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	08008439 	.word	0x08008439
 8008360:	08008439 	.word	0x08008439
 8008364:	08008443 	.word	0x08008443
 8008368:	0800844d 	.word	0x0800844d
 800836c:	08008439 	.word	0x08008439
 8008370:	08008443 	.word	0x08008443
 8008374:	0800844d 	.word	0x0800844d
 8008378:	0800844d 	.word	0x0800844d
 800837c:	08008465 	.word	0x08008465
 8008380:	08008465 	.word	0x08008465
 8008384:	08008465 	.word	0x08008465
 8008388:	08008465 	.word	0x08008465
 800838c:	08008465 	.word	0x08008465
 8008390:	08008465 	.word	0x08008465
 8008394:	08008465 	.word	0x08008465
 8008398:	08008465 	.word	0x08008465
 800839c:	08008457 	.word	0x08008457
 80083a0:	08008465 	.word	0x08008465
 80083a4:	08008465 	.word	0x08008465
 80083a8:	08008465 	.word	0x08008465
 80083ac:	08008457 	.word	0x08008457
 80083b0:	08008465 	.word	0x08008465
 80083b4:	08008465 	.word	0x08008465
 80083b8:	08008465 	.word	0x08008465
 80083bc:	08008465 	.word	0x08008465
 80083c0:	08008465 	.word	0x08008465
 80083c4:	08008457 	.word	0x08008457
 80083c8:	08008465 	.word	0x08008465
 80083cc:	08008465 	.word	0x08008465
 80083d0:	08008465 	.word	0x08008465
 80083d4:	08008465 	.word	0x08008465
 80083d8:	08008465 	.word	0x08008465
 80083dc:	08008465 	.word	0x08008465
 80083e0:	08008465 	.word	0x08008465
 80083e4:	08008465 	.word	0x08008465
 80083e8:	08008465 	.word	0x08008465
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008465 	.word	0x08008465
 80083f4:	08008465 	.word	0x08008465
 80083f8:	08008465 	.word	0x08008465
 80083fc:	08008465 	.word	0x08008465
 8008400:	08008465 	.word	0x08008465
 8008404:	08008465 	.word	0x08008465
 8008408:	08008465 	.word	0x08008465
 800840c:	08008439 	.word	0x08008439
 8008410:	08008443 	.word	0x08008443
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008439 	.word	0x08008439
 800841c:	08008439 	.word	0x08008439
 8008420:	08008439 	.word	0x08008439
 8008424:	08008439 	.word	0x08008439
 8008428:	08008439 	.word	0x08008439
 800842c:	08008439 	.word	0x08008439
 8008430:	08008439 	.word	0x08008439
 8008434:	08008439 	.word	0x08008439
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	783a      	ldrb	r2, [r7, #0]
 800843e:	701a      	strb	r2, [r3, #0]
      break;
 8008440:	e011      	b.n	8008466 <COE_setValue+0x12a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	883a      	ldrh	r2, [r7, #0]
 8008448:	801a      	strh	r2, [r3, #0]
      break;
 800844a:	e00c      	b.n	8008466 <COE_setValue+0x12a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	601a      	str	r2, [r3, #0]
      break;
 8008454:	e007      	b.n	8008466 <COE_setValue+0x12a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6919      	ldr	r1, [r3, #16]
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	e9c1 2300 	strd	r2, r3, [r1]
      break;
 8008462:	e000      	b.n	8008466 <COE_setValue+0x12a>

   default:
      DPRINT ("ignored\n");
      break;
 8008464:	bf00      	nop
   }
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop

08008474 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 800847a:	4b31      	ldr	r3, [pc, #196]	; (8008540 <COE_initDefaultValues+0xcc>)
 800847c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	d158      	bne.n	8008536 <COE_initDefaultValues+0xc2>
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8008484:	2300      	movs	r3, #0
 8008486:	60bb      	str	r3, [r7, #8]
 8008488:	e044      	b.n	8008514 <COE_initDefaultValues+0xa0>
   {
      objd = SDOobjects[n].objdesc;
 800848a:	4a2e      	ldr	r2, [pc, #184]	; (8008544 <COE_initDefaultValues+0xd0>)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	330c      	adds	r3, #12
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8008498:	4a2a      	ldr	r2, [pc, #168]	; (8008544 <COE_initDefaultValues+0xd0>)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	3304      	adds	r3, #4
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	70fb      	strb	r3, [r7, #3]

      i = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	461a      	mov	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d016      	beq.n	80084ee <COE_initDefaultValues+0x7a>
         {
            COE_setValue (&objd[i], objd[i].value);
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	1899      	adds	r1, r3, r2
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f04f 0300 	mov.w	r3, #0
 80084e8:	4608      	mov	r0, r1
 80084ea:	f7ff ff27 	bl	800833c <COE_setValue>
            DPRINT ("%04"PRIx32":%02"PRIx32" = %"PRIx32"\n",
                  SDOobjects[n].index,
                  objd[i].subindex,
                  objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	60fa      	str	r2, [r7, #12]
 80084f4:	461a      	mov	r2, r3
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	461a      	mov	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	881a      	ldrh	r2, [r3, #0]
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	b29b      	uxth	r3, r3
 800850a:	429a      	cmp	r2, r3
 800850c:	d3cd      	bcc.n	80084aa <COE_initDefaultValues+0x36>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	3301      	adds	r3, #1
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	4a0b      	ldr	r2, [pc, #44]	; (8008544 <COE_initDefaultValues+0xd0>)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008522:	4293      	cmp	r3, r2
 8008524:	d1b1      	bne.n	800848a <COE_initDefaultValues+0x16>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 8008526:	4b06      	ldr	r3, [pc, #24]	; (8008540 <COE_initDefaultValues+0xcc>)
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <COE_initDefaultValues+0xc4>
   {
      ESCvar.set_defaults_hook();
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <COE_initDefaultValues+0xcc>)
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	4798      	blx	r3
 8008534:	e000      	b.n	8008538 <COE_initDefaultValues+0xc4>
      return;
 8008536:	bf00      	nop
   }
}
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200008e8 	.word	0x200008e8
 8008544:	0800c69c 	.word	0x0800c69c

08008548 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08c      	sub	sp, #48	; 0x30
 800854c:	af02      	add	r7, sp, #8
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b00      	cmp	r3, #0
 800855c:	d006      	beq.n	800856c <COE_pdoPack+0x24>
 800855e:	4b28      	ldr	r3, [pc, #160]	; (8008600 <COE_pdoPack+0xb8>)
 8008560:	4a28      	ldr	r2, [pc, #160]	; (8008604 <COE_pdoPack+0xbc>)
 8008562:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8008566:	4828      	ldr	r0, [pc, #160]	; (8008608 <COE_pdoPack+0xc0>)
 8008568:	f002 fa3c 	bl	800a9e4 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 800856c:	2300      	movs	r3, #0
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
 8008570:	e03c      	b.n	80085ec <COE_pdoPack+0xa4>
   {
      const _objd * obj = mappings[ix].obj;
 8008572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8008586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008588:	4613      	mov	r3, r2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d022      	beq.n	80085e6 <COE_pdoPack+0x9e>
      {
         if (obj->bitlength > 64)
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	889b      	ldrh	r3, [r3, #4]
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d90d      	bls.n	80085c4 <COE_pdoPack+0x7c>
         {
            memcpy (
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	18d0      	adds	r0, r2, r3
               obj->data,
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	889b      	ldrh	r3, [r3, #4]
 80085b8:	3307      	adds	r3, #7
            memcpy (
 80085ba:	08db      	lsrs	r3, r3, #3
 80085bc:	461a      	mov	r2, r3
 80085be:	f002 fa7b 	bl	800aab8 <memcpy>
 80085c2:	e010      	b.n	80085e6 <COE_pdoPack+0x9e>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 80085c4:	6a38      	ldr	r0, [r7, #32]
 80085c6:	f7ff fe01 	bl	80081cc <COE_getValue>
 80085ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	889b      	ldrh	r3, [r3, #4]
            COE_bitsliceSet (
 80085d2:	4619      	mov	r1, r3
 80085d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085d8:	e9cd 2300 	strd	r2, r3, [sp]
 80085dc:	460a      	mov	r2, r1
 80085de:	69f9      	ldr	r1, [r7, #28]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff fcd1 	bl	8007f88 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	3301      	adds	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	dbbe      	blt.n	8008572 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	3728      	adds	r7, #40	; 0x28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	0800ba38 	.word	0x0800ba38
 8008604:	0800c80c 	.word	0x0800c80c
 8008608:	0800ba1c 	.word	0x0800ba1c

0800860c <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b00      	cmp	r3, #0
 8008620:	d006      	beq.n	8008630 <COE_pdoUnpack+0x24>
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <COE_pdoUnpack+0xb0>)
 8008624:	4a26      	ldr	r2, [pc, #152]	; (80086c0 <COE_pdoUnpack+0xb4>)
 8008626:	f240 712f 	movw	r1, #1839	; 0x72f
 800862a:	4826      	ldr	r0, [pc, #152]	; (80086c4 <COE_pdoUnpack+0xb8>)
 800862c:	f002 f9da 	bl	800a9e4 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8008630:	2300      	movs	r3, #0
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	e039      	b.n	80086aa <COE_pdoUnpack+0x9e>
   {
      const _objd * obj = mappings[ix].obj;
 8008636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 800864a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864c:	4613      	mov	r3, r2
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4413      	add	r3, r2
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01f      	beq.n	80086a4 <COE_pdoUnpack+0x98>
      {
         if (obj->bitlength > 64)
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	889b      	ldrh	r3, [r3, #4]
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d90d      	bls.n	8008688 <COE_pdoUnpack+0x7c>
         {
            memcpy (
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	18d1      	adds	r1, r2, r3
               BITS2BYTES (obj->bitlength)
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	889b      	ldrh	r3, [r3, #4]
 800867c:	3307      	adds	r3, #7
            memcpy (
 800867e:	08db      	lsrs	r3, r3, #3
 8008680:	461a      	mov	r2, r3
 8008682:	f002 fa19 	bl	800aab8 <memcpy>
 8008686:	e00d      	b.n	80086a4 <COE_pdoUnpack+0x98>
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	889b      	ldrh	r3, [r3, #4]
            uint64_t value = COE_bitsliceGet (
 800868c:	461a      	mov	r2, r3
 800868e:	69f9      	ldr	r1, [r7, #28]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff fbdd 	bl	8007e50 <COE_bitsliceGet>
 8008696:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 800869a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800869e:	6a38      	ldr	r0, [r7, #32]
 80086a0:	f7ff fe4c 	bl	800833c <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	3301      	adds	r3, #1
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	dbc1      	blt.n	8008636 <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3728      	adds	r7, #40	; 0x28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0800ba38 	.word	0x0800ba38
 80086c0:	0800c818 	.word	0x0800c818
 80086c4:	0800ba1c 	.word	0x0800ba1c

080086c8 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	80fb      	strh	r3, [r7, #6]
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fd fba9 	bl	8005e2c <SDO_findobject>
 80086da:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d101      	bne.n	80086e8 <COE_maxSub+0x20>
      return 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e01b      	b.n	8008720 <COE_maxSub+0x58>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 80086e8:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <COE_maxSub+0x60>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	4413      	add	r3, r2
 80086f0:	330c      	adds	r3, #12
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d008      	beq.n	800870c <COE_maxSub+0x44>
 80086fa:	4a0b      	ldr	r2, [pc, #44]	; (8008728 <COE_maxSub+0x60>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	4413      	add	r3, r2
 8008702:	330c      	adds	r3, #12
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	e007      	b.n	800871c <COE_maxSub+0x54>
 800870c:	4a06      	ldr	r2, [pc, #24]	; (8008728 <COE_maxSub+0x60>)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	4413      	add	r3, r2
 8008714:	330c      	adds	r3, #12
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 800871e:	7afb      	ldrb	r3, [r7, #11]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	0800c69c 	.word	0x0800c69c

0800872c <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 8008736:	4a09      	ldr	r2, [pc, #36]	; (800875c <ESC_ALerror+0x30>)
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dummy = htoes (errornumber);
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 8008742:	f107 030e 	add.w	r3, r7, #14
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	f44f 709a 	mov.w	r0, #308	; 0x134
 800874e:	f001 fb63 	bl	8009e18 <ESC_write>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200008e8 	.word	0x200008e8

08008760 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	b29a      	uxth	r2, r3
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <ESC_ALstatus+0x34>)
 8008770:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	b29b      	uxth	r3, r3
 8008778:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 800877a:	f107 030e 	add.w	r3, r7, #14
 800877e:	2202      	movs	r2, #2
 8008780:	4619      	mov	r1, r3
 8008782:	f44f 7098 	mov.w	r0, #304	; 0x130
 8008786:	f001 fb47 	bl	8009e18 <ESC_write>
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200008e8 	.word	0x200008e8

08008798 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	460a      	mov	r2, r1
 80087a2:	71fb      	strb	r3, [r7, #7]
 80087a4:	4613      	mov	r3, r2
 80087a6:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 0308 	and.w	r3, r3, #8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d145      	bne.n	800883e <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 80087b2:	4b25      	ldr	r3, [pc, #148]	; (8008848 <ESC_ALstatusgotoerror+0xb0>)
 80087b4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	73bb      	strb	r3, [r7, #14]
   an = as;
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	b25a      	sxtb	r2, r3
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	b25b      	sxtb	r3, r3
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	b25b      	sxtb	r3, r3
 80087d6:	4313      	orrs	r3, r2
 80087d8:	b25b      	sxtb	r3, r3
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80087de:	4b1a      	ldr	r3, [pc, #104]	; (8008848 <ESC_ALstatusgotoerror+0xb0>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <ESC_ALstatusgotoerror+0xb0>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	f107 010f 	add.w	r1, r7, #15
 80087ee:	f107 020e 	add.w	r2, r7, #14
 80087f2:	4610      	mov	r0, r2
 80087f4:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 80087f6:	4b15      	ldr	r3, [pc, #84]	; (800884c <ESC_ALstatusgotoerror+0xb4>)
 80087f8:	f3bf 8f5b 	dmb	ish
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f3bf 8f5b 	dmb	ish
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	dd01      	ble.n	8008810 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 800880c:	f000 fe98 	bl	8009540 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 8008810:	88bb      	ldrh	r3, [r7, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff ff8a 	bl	800872c <ESC_ALerror>
   ESC_ALstatus(status);
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ffa0 	bl	8008760 <ESC_ALstatus>
   an = status;
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8008824:	4b08      	ldr	r3, [pc, #32]	; (8008848 <ESC_ALstatusgotoerror+0xb0>)
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <ESC_ALstatusgotoerror+0xb0>)
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	f107 010f 	add.w	r1, r7, #15
 8008834:	f107 020e 	add.w	r2, r7, #14
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	e000      	b.n	8008840 <ESC_ALstatusgotoerror+0xa8>
      return;
 800883e:	bf00      	nop
   }
}
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200008e8 	.word	0x200008e8
 800884c:	200009d4 	.word	0x200009d4

08008850 <ESC_ALeventmaskwrite>:
/** Write ALeventMask register 0x204.
 *
 * @param[in] n   = AL Event Mask
 */
void ESC_ALeventmaskwrite (uint32_t mask)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
   uint32_t aleventmask;
   aleventmask = htoel(mask);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	2204      	movs	r2, #4
 8008862:	4619      	mov	r1, r3
 8008864:	f44f 7001 	mov.w	r0, #516	; 0x204
 8008868:	f001 fad6 	bl	8009e18 <ESC_write>
}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <ESC_ALeventmaskread>:
/** Read AleventMask register 0x204.
 *
 * @return value of register AL Event Mask
 */
uint32_t ESC_ALeventmaskread (void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
   uint32_t aleventmask;

   ESC_read (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	2204      	movs	r2, #4
 800887e:	4619      	mov	r1, r3
 8008880:	f44f 7001 	mov.w	r0, #516	; 0x204
 8008884:	f001 fa9c 	bl	8009dc0 <ESC_read>
   return htoel(aleventmask);
 8008888:	687b      	ldr	r3, [r7, #4]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	4603      	mov	r3, r0
 800889a:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	f603 0306 	addw	r3, r3, #2054	; 0x806
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f107 010f 	add.w	r1, r7, #15
 80088ae:	2201      	movs	r2, #1
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 fa85 	bl	8009dc0 <ESC_read>
}
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	3317      	adds	r3, #23
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <ESC_SMstatus+0x3c>)
 80088d2:	4413      	add	r3, r2
 80088d4:	3304      	adds	r3, #4
 80088d6:	60fb      	str	r3, [r7, #12]
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f603 0305 	addw	r3, r3, #2053	; 0x805
 80088e4:	b298      	uxth	r0, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3305      	adds	r3, #5
 80088ea:	2201      	movs	r2, #1
 80088ec:	4619      	mov	r1, r3
 80088ee:	f001 fa67 	bl	8009dc0 <ESC_read>
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200008e8 	.word	0x200008e8

08008900 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	3317      	adds	r3, #23
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <ESC_SMwritepdi+0x3c>)
 8008912:	4413      	add	r3, r2
 8008914:	3304      	adds	r3, #4
 8008916:	60fb      	str	r3, [r7, #12]
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	b29b      	uxth	r3, r3
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	b29b      	uxth	r3, r3
 8008920:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8008924:	b298      	uxth	r0, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3307      	adds	r3, #7
 800892a:	2201      	movs	r2, #1
 800892c:	4619      	mov	r1, r3
 800892e:	f001 fa73 	bl	8009e18 <ESC_write>
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200008e8 	.word	0x200008e8

08008940 <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	3317      	adds	r3, #23
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4a09      	ldr	r2, [pc, #36]	; (8008978 <ESC_SMenable+0x38>)
 8008952:	4413      	add	r3, r2
 8008954:	3304      	adds	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	79db      	ldrb	r3, [r3, #7]
 800895c:	f023 0301 	bic.w	r3, r3, #1
 8008960:	b2da      	uxtb	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff ffc9 	bl	8008900 <ESC_SMwritepdi>
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	200008e8 	.word	0x200008e8

0800897c <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	3317      	adds	r3, #23
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	4a09      	ldr	r2, [pc, #36]	; (80089b4 <ESC_SMdisable+0x38>)
 800898e:	4413      	add	r3, r2
 8008990:	3304      	adds	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	79db      	ldrb	r3, [r3, #7]
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff ffab 	bl	8008900 <ESC_SMwritepdi>
}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200008e8 	.word	0x200008e8

080089b8 <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 80089bc:	2202      	movs	r2, #2
 80089be:	4906      	ldr	r1, [pc, #24]	; (80089d8 <ESC_address+0x20>)
 80089c0:	2010      	movs	r0, #16
 80089c2:	f001 f9fd 	bl	8009dc0 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 80089c6:	4b05      	ldr	r3, [pc, #20]	; (80089dc <ESC_address+0x24>)
 80089c8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80089cc:	4b03      	ldr	r3, [pc, #12]	; (80089dc <ESC_address+0x24>)
 80089ce:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 80089d2:	bf00      	nop
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000970 	.word	0x20000970
 80089dc:	200008e8 	.word	0x200008e8

080089e0 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 80089e6:	1dfb      	adds	r3, r7, #7
 80089e8:	2201      	movs	r2, #1
 80089ea:	4619      	mov	r1, r3
 80089ec:	f640 1081 	movw	r0, #2433	; 0x981
 80089f0:	f001 f9e6 	bl	8009dc0 <ESC_read>
   return activation;
 80089f4:	79fb      	ldrb	r3, [r7, #7]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8008a0a:	f7ff ffe9 	bl	80089e0 <ESC_SYNCactivation>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8008a12:	797b      	ldrb	r3, [r7, #5]
 8008a14:	f003 0309 	and.w	r3, r3, #9
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dd0b      	ble.n	8008a34 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8008a1c:	2330      	movs	r3, #48	; 0x30
 8008a1e:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <ESC_checkDC+0x50>)
 8008a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00d      	beq.n	8008a44 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8008a28:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <ESC_checkDC+0x50>)
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2c:	4798      	blx	r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	80fb      	strh	r3, [r7, #6]
 8008a32:	e007      	b.n	8008a44 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <ESC_checkDC+0x50>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <ESC_checkDC+0x50>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
   }

   return ret;
 8008a44:	88fb      	ldrh	r3, [r7, #6]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200008e8 	.word	0x200008e8

08008a54 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8008a5e:	2208      	movs	r2, #8
 8008a60:	4934      	ldr	r1, [pc, #208]	; (8008b34 <ESC_checkmbx+0xe0>)
 8008a62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008a66:	f001 f9ab 	bl	8009dc0 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	4932      	ldr	r1, [pc, #200]	; (8008b38 <ESC_checkmbx+0xe4>)
 8008a6e:	f640 0008 	movw	r0, #2056	; 0x808
 8008a72:	f001 f9a5 	bl	8009dc0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8008a76:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <ESC_checkmbx+0xe0>)
 8008a78:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d116      	bne.n	8008ab8 <ESC_checkmbx+0x64>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	4b2a      	ldr	r3, [pc, #168]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d10e      	bne.n	8008ab8 <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	791a      	ldrb	r2, [r3, #4]
 8008a9e:	4b27      	ldr	r3, [pc, #156]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa2:	799b      	ldrb	r3, [r3, #6]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d107      	bne.n	8008ab8 <ESC_checkmbx+0x64>
 8008aa8:	4b24      	ldr	r3, [pc, #144]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008aaa:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8008ab8:	4b20      	ldr	r3, [pc, #128]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f7ff ff5b 	bl	800897c <ESC_SMdisable>
      ESC_SMdisable (1);
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	f7ff ff58 	bl	800897c <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8008acc:	2311      	movs	r3, #17
 8008ace:	e02d      	b.n	8008b2c <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <ESC_checkmbx+0xe4>)
 8008ad2:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d116      	bne.n	8008b12 <ESC_checkmbx+0xbe>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aee:	885b      	ldrh	r3, [r3, #2]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d10e      	bne.n	8008b12 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	791a      	ldrb	r2, [r3, #4]
 8008af8:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d107      	bne.n	8008b12 <ESC_checkmbx+0xbe>
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008b04:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10b      	bne.n	8008b2a <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8008b12:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <ESC_checkmbx+0xe8>)
 8008b14:	2202      	movs	r2, #2
 8008b16:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f7ff ff2e 	bl	800897c <ESC_SMdisable>
      ESC_SMdisable (1);
 8008b20:	2001      	movs	r0, #1
 8008b22:	f7ff ff2b 	bl	800897c <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8008b26:	2311      	movs	r3, #17
 8008b28:	e000      	b.n	8008b2c <ESC_checkmbx+0xd8>
   }
   return state;
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	200009a4 	.word	0x200009a4
 8008b38:	200009ac 	.word	0x200009ac
 8008b3c:	200008e8 	.word	0x200008e8

08008b40 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8008b4a:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <ESC_startmbx+0x80>)
 8008b4c:	2280      	movs	r2, #128	; 0x80
 8008b4e:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8008b50:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <ESC_startmbx+0x80>)
 8008b52:	4a1c      	ldr	r2, [pc, #112]	; (8008bc4 <ESC_startmbx+0x84>)
 8008b54:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <ESC_startmbx+0x80>)
 8008b58:	4a1b      	ldr	r2, [pc, #108]	; (8008bc8 <ESC_startmbx+0x88>)
 8008b5a:	675a      	str	r2, [r3, #116]	; 0x74


   ESC_SMenable (0);
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7ff feef 	bl	8008940 <ESC_SMenable>
   ESC_SMenable (1);
 8008b62:	2001      	movs	r0, #1
 8008b64:	f7ff feec 	bl	8008940 <ESC_SMenable>
   ESC_SMstatus (0);
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f7ff fea9 	bl	80088c0 <ESC_SMstatus>
   ESC_SMstatus (1);
 8008b6e:	2001      	movs	r0, #1
 8008b70:	f7ff fea6 	bl	80088c0 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff ff6c 	bl	8008a54 <ESC_checkmbx>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	71fb      	strb	r3, [r7, #7]
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <ESC_startmbx+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8008b8a:	2016      	movs	r0, #22
 8008b8c:	f7ff fdce 	bl	800872c <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <ESC_startmbx+0x80>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8008b98:	e00d      	b.n	8008bb6 <ESC_startmbx+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8008b9a:	4b09      	ldr	r3, [pc, #36]	; (8008bc0 <ESC_startmbx+0x80>)
 8008b9c:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008ba0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <ESC_startmbx+0x80>)
 8008baa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <ESC_startmbx+0x80>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	200008e8 	.word	0x200008e8
 8008bc4:	200008ec 	.word	0x200008ec
 8008bc8:	200008f4 	.word	0x200008f4

08008bcc <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008bd8:	2280      	movs	r2, #128	; 0x80
 8008bda:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008bde:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <ESC_startmbxboot+0x84>)
 8008be0:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 8008be2:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <ESC_startmbxboot+0x88>)
 8008be6:	675a      	str	r2, [r3, #116]	; 0x74

   ESC_SMenable (0);
 8008be8:	2000      	movs	r0, #0
 8008bea:	f7ff fea9 	bl	8008940 <ESC_SMenable>
   ESC_SMenable (1);
 8008bee:	2001      	movs	r0, #1
 8008bf0:	f7ff fea6 	bl	8008940 <ESC_SMenable>
   ESC_SMstatus (0);
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f7ff fe63 	bl	80088c0 <ESC_SMstatus>
   ESC_SMstatus (1);
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	f7ff fe60 	bl	80088c0 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ff26 	bl	8008a54 <ESC_checkmbx>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	f003 0310 	and.w	r3, r3, #16
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <ESC_startmbxboot+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8008c16:	2015      	movs	r0, #21
 8008c18:	f7ff fd88 	bl	800872c <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8008c24:	e00d      	b.n	8008c42 <ESC_startmbxboot+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008c28:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008c2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008c36:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 8008c3a:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <ESC_startmbxboot+0x80>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 8008c42:	79fb      	ldrb	r3, [r7, #7]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200008e8 	.word	0x200008e8
 8008c50:	200008fc 	.word	0x200008fc
 8008c54:	20000904 	.word	0x20000904

08008c58 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8008c5e:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 8008c66:	2000      	movs	r0, #0
 8008c68:	f7ff fe88 	bl	800897c <ESC_SMdisable>
   ESC_SMdisable (1);
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f7ff fe85 	bl	800897c <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	71fb      	strb	r3, [r7, #7]
 8008c76:	e006      	b.n	8008c86 <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	4a21      	ldr	r2, [pc, #132]	; (8008d00 <ESC_stopmbx+0xa8>)
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	3301      	adds	r3, #1
 8008c84:	71fb      	strb	r3, [r7, #7]
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d9f5      	bls.n	8008c78 <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 8008c94:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 8008c9c:	4b17      	ldr	r3, [pc, #92]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 8008ca4:	4b15      	ldr	r3, [pc, #84]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 8008cb4:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 8008cbc:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 8008cd4:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 8008cdc:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <ESC_stopmbx+0xa4>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200008e8 	.word	0x200008e8
 8008d00:	20000d80 	.word	0x20000d80

08008d04 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8008d0a:	4b1e      	ldr	r3, [pc, #120]	; (8008d84 <ESC_readmbx+0x80>)
 8008d0c:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <ESC_readmbx+0x84>)
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	2206      	movs	r2, #6
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f851 	bl	8009dc0 <ESC_read>
   length = etohs (MB->header.length);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8008d26:	887b      	ldrh	r3, [r7, #2]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <ESC_readmbx+0x84>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	885b      	ldrh	r3, [r3, #2]
 8008d30:	3b06      	subs	r3, #6
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d905      	bls.n	8008d42 <ESC_readmbx+0x3e>
   {
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 8008d36:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <ESC_readmbx+0x84>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	885b      	ldrh	r3, [r3, #2]
 8008d3c:	3b06      	subs	r3, #6
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	807b      	strh	r3, [r7, #2]
   }
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <ESC_readmbx+0x84>)
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	3306      	adds	r3, #6
 8008d4a:	b298      	uxth	r0, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3306      	adds	r3, #6
 8008d50:	887a      	ldrh	r2, [r7, #2]
 8008d52:	4619      	mov	r1, r3
 8008d54:	f001 f834 	bl	8009dc0 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	3306      	adds	r3, #6
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <ESC_readmbx+0x84>)
 8008d5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008d60:	8852      	ldrh	r2, [r2, #2]
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d207      	bcs.n	8008d76 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 8008d66:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <ESC_readmbx+0x84>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	889b      	ldrh	r3, [r3, #4]
 8008d6c:	1cb9      	adds	r1, r7, #2
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 f825 	bl	8009dc0 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <ESC_readmbx+0x88>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20000b58 	.word	0x20000b58
 8008d88:	200008e8 	.word	0x200008e8
 8008d8c:	20000d80 	.word	0x20000d80

08008d90 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <ESC_writembx+0x88>)
 8008d9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008da0:	fb02 f303 	mul.w	r3, r2, r3
 8008da4:	4a1d      	ldr	r2, [pc, #116]	; (8008e1c <ESC_writembx+0x8c>)
 8008da6:	4413      	add	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	4313      	orrs	r3, r2
 8008db8:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 8008dba:	8afa      	ldrh	r2, [r7, #22]
 8008dbc:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <ESC_writembx+0x88>)
 8008dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	3b06      	subs	r3, #6
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d904      	bls.n	8008dd2 <ESC_writembx+0x42>
   {
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 8008dc8:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <ESC_writembx+0x88>)
 8008dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	3b06      	subs	r3, #6
 8008dd0:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 8008dd2:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <ESC_writembx+0x88>)
 8008dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd6:	8818      	ldrh	r0, [r3, #0]
 8008dd8:	8afb      	ldrh	r3, [r7, #22]
 8008dda:	3306      	adds	r3, #6
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	6939      	ldr	r1, [r7, #16]
 8008de2:	f001 f819 	bl	8009e18 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8008de6:	8afb      	ldrh	r3, [r7, #22]
 8008de8:	3306      	adds	r3, #6
 8008dea:	4a0b      	ldr	r2, [pc, #44]	; (8008e18 <ESC_writembx+0x88>)
 8008dec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008dee:	8852      	ldrh	r2, [r2, #2]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d208      	bcs.n	8008e06 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8008df4:	4b08      	ldr	r3, [pc, #32]	; (8008e18 <ESC_writembx+0x88>)
 8008df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df8:	889b      	ldrh	r3, [r3, #4]
 8008dfa:	f107 010f 	add.w	r1, r7, #15
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f809 	bl	8009e18 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 8008e06:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <ESC_writembx+0x88>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8008e0e:	bf00      	nop
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	200008e8 	.word	0x200008e8
 8008e1c:	20000b58 	.word	0x20000b58

08008e20 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 8008e2a:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <ESC_ackmbxread+0x2c>)
 8008e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	1df9      	adds	r1, r7, #7
 8008e32:	2201      	movs	r2, #1
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 ffef 	bl	8009e18 <ESC_write>
   ESCvar.mbxfree = 1;
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <ESC_ackmbxread+0x2c>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200008e8 	.word	0x200008e8

08008e50 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 8008e56:	2302      	movs	r3, #2
 8008e58:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8008e5a:	e002      	b.n	8008e62 <ESC_claimbuffer+0x12>
   {
      n--;
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <ESC_claimbuffer+0x22>
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	4a2b      	ldr	r2, [pc, #172]	; (8008f18 <ESC_claimbuffer+0xc8>)
 8008e6c:	5cd3      	ldrb	r3, [r2, r3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f4      	bne.n	8008e5c <ESC_claimbuffer+0xc>
   }
   if (n)
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d047      	beq.n	8008f08 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <ESC_claimbuffer+0xc8>)
 8008e7c:	2102      	movs	r1, #2
 8008e7e:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	4a26      	ldr	r2, [pc, #152]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008e84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	4a25      	ldr	r2, [pc, #148]	; (8008f20 <ESC_claimbuffer+0xd0>)
 8008e8c:	4413      	add	r3, r2
 8008e8e:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 8008e90:	4b22      	ldr	r3, [pc, #136]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008e92:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8008e96:	3301      	adds	r3, #1
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008e9c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 8008ea0:	4b1e      	ldr	r3, [pc, #120]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008ea2:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008eae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008eb4:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 8008ebc:	4b17      	ldr	r3, [pc, #92]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	709a      	strb	r2, [r3, #2]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	7913      	ldrb	r3, [r2, #4]
 8008ed2:	f36f 0305 	bfc	r3, #0, #6
 8008ed6:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	7913      	ldrb	r3, [r2, #4]
 8008edc:	f36f 1387 	bfc	r3, #6, #2
 8008ee0:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008ee4:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	b2d9      	uxtb	r1, r3
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	7953      	ldrb	r3, [r2, #5]
 8008ef2:	f361 1307 	bfi	r3, r1, #4, #4
 8008ef6:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 8008ef8:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008efa:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8008efe:	3301      	adds	r3, #1
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <ESC_claimbuffer+0xcc>)
 8008f04:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   }
   return n;
 8008f08:	79fb      	ldrb	r3, [r7, #7]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000d80 	.word	0x20000d80
 8008f1c:	200008e8 	.word	0x200008e8
 8008f20:	20000b58 	.word	0x20000b58

08008f24 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8008f2e:	e002      	b.n	8008f36 <ESC_outreqbuffer+0x12>
   {
      n--;
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <ESC_outreqbuffer+0x22>
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	4a05      	ldr	r2, [pc, #20]	; (8008f54 <ESC_outreqbuffer+0x30>)
 8008f40:	5cd3      	ldrb	r3, [r2, r3]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d1f4      	bne.n	8008f30 <ESC_outreqbuffer+0xc>
   }
   return n;
 8008f46:	79fb      	ldrb	r3, [r7, #7]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	20000d80 	.word	0x20000d80

08008f58 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 8008f62:	f7ff ff75 	bl	8008e50 <ESC_claimbuffer>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d021      	beq.n	8008fb4 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4a12      	ldr	r2, [pc, #72]	; (8008fbc <MBX_error+0x64>)
 8008f74:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	4a11      	ldr	r2, [pc, #68]	; (8008fc0 <MBX_error+0x68>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f042 0204 	orr.w	r2, r2, #4
 8008f88:	701a      	strb	r2, [r3, #0]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	7953      	ldrb	r3, [r2, #5]
 8008f92:	f36f 0303 	bfc	r3, #0, #4
 8008f96:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f042 0201 	orr.w	r2, r2, #1
 8008fa0:	719a      	strb	r2, [r3, #6]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4a05      	ldr	r2, [pc, #20]	; (8008fc4 <MBX_error+0x6c>)
 8008fb0:	2103      	movs	r1, #3
 8008fb2:	54d1      	strb	r1, [r2, r3]
   }
}
 8008fb4:	bf00      	nop
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200008e8 	.word	0x200008e8
 8008fc0:	20000b58 	.word	0x20000b58
 8008fc4:	20000d80 	.word	0x20000d80

08008fc8 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 8008fd2:	4b96      	ldr	r3, [pc, #600]	; (800922c <ESC_mbxprocess+0x264>)
 8008fd4:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8008fd6:	4b96      	ldr	r3, [pc, #600]	; (8009230 <ESC_mbxprocess+0x268>)
 8008fd8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e11f      	b.n	8009224 <ESC_mbxprocess+0x25c>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 8008fe4:	4b92      	ldr	r3, [pc, #584]	; (8009230 <ESC_mbxprocess+0x268>)
 8008fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <ESC_mbxprocess+0x36>
   {
      ESC_SMstatus (0);
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f7ff fc64 	bl	80088c0 <ESC_SMstatus>
      ESC_SMstatus (1);
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	f7ff fc61 	bl	80088c0 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 8008ffe:	4b8c      	ldr	r3, [pc, #560]	; (8009230 <ESC_mbxprocess+0x268>)
 8009000:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d03c      	beq.n	8009082 <ESC_mbxprocess+0xba>
 8009008:	4b89      	ldr	r3, [pc, #548]	; (8009230 <ESC_mbxprocess+0x268>)
 800900a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800900e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009012:	2b00      	cmp	r3, #0
 8009014:	d035      	beq.n	8009082 <ESC_mbxprocess+0xba>
   {
      ESC_ackmbxread ();
 8009016:	f7ff ff03 	bl	8008e20 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 800901a:	4b85      	ldr	r3, [pc, #532]	; (8009230 <ESC_mbxprocess+0x268>)
 800901c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009020:	2b00      	cmp	r3, #0
 8009022:	d006      	beq.n	8009032 <ESC_mbxprocess+0x6a>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <ESC_mbxprocess+0x268>)
 8009026:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800902a:	461a      	mov	r2, r3
 800902c:	4b81      	ldr	r3, [pc, #516]	; (8009234 <ESC_mbxprocess+0x26c>)
 800902e:	2100      	movs	r1, #0
 8009030:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 8009032:	4b7f      	ldr	r3, [pc, #508]	; (8009230 <ESC_mbxprocess+0x268>)
 8009034:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009038:	461a      	mov	r2, r3
 800903a:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <ESC_mbxprocess+0x26c>)
 800903c:	5c9b      	ldrb	r3, [r3, r2]
 800903e:	2b06      	cmp	r3, #6
 8009040:	d105      	bne.n	800904e <ESC_mbxprocess+0x86>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 8009042:	4b7b      	ldr	r3, [pc, #492]	; (8009230 <ESC_mbxprocess+0x268>)
 8009044:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fea1 	bl	8008d90 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800904e:	4b78      	ldr	r3, [pc, #480]	; (8009230 <ESC_mbxprocess+0x268>)
 8009050:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009054:	461a      	mov	r2, r3
 8009056:	4b77      	ldr	r3, [pc, #476]	; (8009234 <ESC_mbxprocess+0x26c>)
 8009058:	2105      	movs	r1, #5
 800905a:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800905c:	4b74      	ldr	r3, [pc, #464]	; (8009230 <ESC_mbxprocess+0x268>)
 800905e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8009062:	4b73      	ldr	r3, [pc, #460]	; (8009230 <ESC_mbxprocess+0x268>)
 8009064:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 8009068:	4b71      	ldr	r3, [pc, #452]	; (8009230 <ESC_mbxprocess+0x268>)
 800906a:	2200      	movs	r2, #0
 800906c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 8009070:	4b6f      	ldr	r3, [pc, #444]	; (8009230 <ESC_mbxprocess+0x268>)
 8009072:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <ESC_mbxprocess+0xb6>
      {
         return 1;
 800907a:	2301      	movs	r3, #1
 800907c:	e0d2      	b.n	8009224 <ESC_mbxprocess+0x25c>
      }
      return 0;
 800907e:	2300      	movs	r3, #0
 8009080:	e0d0      	b.n	8009224 <ESC_mbxprocess+0x25c>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 8009082:	4b6b      	ldr	r3, [pc, #428]	; (8009230 <ESC_mbxprocess+0x268>)
 8009084:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8009088:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800908c:	b2db      	uxtb	r3, r3
 800908e:	461a      	mov	r2, r3
 8009090:	4b67      	ldr	r3, [pc, #412]	; (8009230 <ESC_mbxprocess+0x268>)
 8009092:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8009096:	429a      	cmp	r2, r3
 8009098:	d044      	beq.n	8009124 <ESC_mbxprocess+0x15c>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800909a:	4b65      	ldr	r3, [pc, #404]	; (8009230 <ESC_mbxprocess+0x268>)
 800909c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <ESC_mbxprocess+0xe6>
 80090a4:	4b62      	ldr	r3, [pc, #392]	; (8009230 <ESC_mbxprocess+0x268>)
 80090a6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d038      	beq.n	8009120 <ESC_mbxprocess+0x158>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 80090ae:	4b60      	ldr	r3, [pc, #384]	; (8009230 <ESC_mbxprocess+0x268>)
 80090b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <ESC_mbxprocess+0xfe>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 80090b8:	4b5d      	ldr	r3, [pc, #372]	; (8009230 <ESC_mbxprocess+0x268>)
 80090ba:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fe66 	bl	8008d90 <ESC_writembx>
 80090c4:	e012      	b.n	80090ec <ESC_mbxprocess+0x124>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 80090c6:	2001      	movs	r0, #1
 80090c8:	f7ff fc58 	bl	800897c <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 80090cc:	4b58      	ldr	r3, [pc, #352]	; (8009230 <ESC_mbxprocess+0x268>)
 80090ce:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80090d2:	461a      	mov	r2, r3
 80090d4:	4b57      	ldr	r3, [pc, #348]	; (8009234 <ESC_mbxprocess+0x26c>)
 80090d6:	2106      	movs	r1, #6
 80090d8:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 80090da:	2001      	movs	r0, #1
 80090dc:	f7ff fc30 	bl	8008940 <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 80090e0:	4b53      	ldr	r3, [pc, #332]	; (8009230 <ESC_mbxprocess+0x268>)
 80090e2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fe52 	bl	8008d90 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 80090ec:	4b50      	ldr	r3, [pc, #320]	; (8009230 <ESC_mbxprocess+0x268>)
 80090ee:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80090f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	4b4d      	ldr	r3, [pc, #308]	; (8009230 <ESC_mbxprocess+0x268>)
 80090fc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 8009100:	4b4b      	ldr	r3, [pc, #300]	; (8009230 <ESC_mbxprocess+0x268>)
 8009102:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	b2d9      	uxtb	r1, r3
 800910c:	4a48      	ldr	r2, [pc, #288]	; (8009230 <ESC_mbxprocess+0x268>)
 800910e:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
 8009112:	f361 0341 	bfi	r3, r1, #1, #1
 8009116:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
         ESC_SMwritepdi (1);
 800911a:	2001      	movs	r0, #1
 800911c:	f7ff fbf0 	bl	8008900 <ESC_SMwritepdi>
      }
      return 0;
 8009120:	2300      	movs	r3, #0
 8009122:	e07f      	b.n	8009224 <ESC_mbxprocess+0x25c>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 8009124:	4b42      	ldr	r3, [pc, #264]	; (8009230 <ESC_mbxprocess+0x268>)
 8009126:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800912a:	2b00      	cmp	r3, #0
 800912c:	d02f      	beq.n	800918e <ESC_mbxprocess+0x1c6>
 800912e:	4b40      	ldr	r3, [pc, #256]	; (8009230 <ESC_mbxprocess+0x268>)
 8009130:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009134:	2b00      	cmp	r3, #0
 8009136:	d107      	bne.n	8009148 <ESC_mbxprocess+0x180>
 8009138:	4b3d      	ldr	r3, [pc, #244]	; (8009230 <ESC_mbxprocess+0x268>)
 800913a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d122      	bne.n	800918e <ESC_mbxprocess+0x1c6>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8009148:	f7ff feec 	bl	8008f24 <ESC_outreqbuffer>
 800914c:	4603      	mov	r3, r0
 800914e:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01b      	beq.n	800918e <ESC_mbxprocess+0x1c6>
      {
         ESC_writembx (mbxhandle);
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff fe19 	bl	8008d90 <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 800915e:	2001      	movs	r0, #1
 8009160:	f7ff fbae 	bl	80088c0 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	4a33      	ldr	r2, [pc, #204]	; (8009234 <ESC_mbxprocess+0x26c>)
 8009168:	2104      	movs	r1, #4
 800916a:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 800916c:	4a30      	ldr	r2, [pc, #192]	; (8009230 <ESC_mbxprocess+0x268>)
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
         if (ESCvar.txcue)
 8009174:	4b2e      	ldr	r3, [pc, #184]	; (8009230 <ESC_mbxprocess+0x268>)
 8009176:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <ESC_mbxprocess+0x1c6>
         {
            ESCvar.txcue--;
 800917e:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <ESC_mbxprocess+0x268>)
 8009180:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009184:	3b01      	subs	r3, #1
 8009186:	b2da      	uxtb	r2, r3
 8009188:	4b29      	ldr	r3, [pc, #164]	; (8009230 <ESC_mbxprocess+0x268>)
 800918a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800918e:	4b28      	ldr	r3, [pc, #160]	; (8009230 <ESC_mbxprocess+0x268>)
 8009190:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d041      	beq.n	8009222 <ESC_mbxprocess+0x25a>
 800919e:	4b25      	ldr	r3, [pc, #148]	; (8009234 <ESC_mbxprocess+0x26c>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d13d      	bne.n	8009222 <ESC_mbxprocess+0x25a>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 80091a6:	4b22      	ldr	r3, [pc, #136]	; (8009230 <ESC_mbxprocess+0x268>)
 80091a8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d138      	bne.n	8009222 <ESC_mbxprocess+0x25a>
 80091b0:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <ESC_mbxprocess+0x268>)
 80091b2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d133      	bne.n	8009222 <ESC_mbxprocess+0x25a>
   {
      ESC_readmbx ();
 80091ba:	f7ff fda3 	bl	8008d04 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 80091be:	4a1c      	ldr	r2, [pc, #112]	; (8009230 <ESC_mbxprocess+0x268>)
 80091c0:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80091c4:	f36f 03c3 	bfc	r3, #3, #1
 80091c8:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d105      	bne.n	80091e2 <ESC_mbxprocess+0x21a>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 80091d6:	2005      	movs	r0, #5
 80091d8:	f7ff febe 	bl	8008f58 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 80091dc:	4b15      	ldr	r3, [pc, #84]	; (8009234 <ESC_mbxprocess+0x26c>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	795b      	ldrb	r3, [r3, #5]
 80091e6:	f023 030f 	bic.w	r3, r3, #15
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00d      	beq.n	800920c <ESC_mbxprocess+0x244>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	795b      	ldrb	r3, [r3, #5]
 80091f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <ESC_mbxprocess+0x268>)
 80091fe:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009202:	429a      	cmp	r2, r3
 8009204:	d102      	bne.n	800920c <ESC_mbxprocess+0x244>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <ESC_mbxprocess+0x26c>)
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	795b      	ldrb	r3, [r3, #5]
 8009210:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009214:	b2db      	uxtb	r3, r3
 8009216:	461a      	mov	r2, r3
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <ESC_mbxprocess+0x268>)
 800921a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
      return 1;
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <ESC_mbxprocess+0x25c>
   }

   return 0;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000b58 	.word	0x20000b58
 8009230:	200008e8 	.word	0x200008e8
 8009234:	20000d80 	.word	0x20000d80

08009238 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
   _MBXh *mbh;

   if (ESCvar.MBXrun == 0)
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <ESC_xoeprocess+0x5c>)
 8009240:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009244:	2b00      	cmp	r3, #0
 8009246:	d021      	beq.n	800928c <ESC_xoeprocess+0x54>
   {
      return;
   }

   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <ESC_xoeprocess+0x5c>)
 800924a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800924e:	2b00      	cmp	r3, #0
 8009250:	d11d      	bne.n	800928e <ESC_xoeprocess+0x56>
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <ESC_xoeprocess+0x60>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d119      	bne.n	800928e <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 800925a:	4b10      	ldr	r3, [pc, #64]	; (800929c <ESC_xoeprocess+0x64>)
 800925c:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	795b      	ldrb	r3, [r3, #5]
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <ESC_xoeprocess+0x3e>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d103      	bne.n	800927e <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8009276:	2005      	movs	r0, #5
 8009278:	f7ff fe6e 	bl	8008f58 <MBX_error>
 800927c:	e002      	b.n	8009284 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800927e:	2002      	movs	r0, #2
 8009280:	f7ff fe6a 	bl	8008f58 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <ESC_xoeprocess+0x60>)
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e000      	b.n	800928e <ESC_xoeprocess+0x56>
      return;
 800928c:	bf00      	nop
   }
}
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	200008e8 	.word	0x200008e8
 8009298:	20000d80 	.word	0x20000d80
 800929c:	20000b58 	.word	0x20000b58

080092a0 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 80092aa:	2208      	movs	r2, #8
 80092ac:	4940      	ldr	r1, [pc, #256]	; (80093b0 <ESC_checkSM23+0x110>)
 80092ae:	f44f 6001 	mov.w	r0, #2064	; 0x810
 80092b2:	f000 fd85 	bl	8009dc0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 80092b6:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <ESC_checkSM23+0x110>)
 80092b8:	60fb      	str	r3, [r7, #12]
   
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 80092c4:	d103      	bne.n	80092ce <ESC_checkSM23+0x2e>
       (SM->Command != ESC_SM2_smc))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 80092ca:	2b24      	cmp	r3, #36	; 0x24
 80092cc:	d005      	beq.n	80092da <ESC_checkSM23+0x3a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80092ce:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <ESC_checkSM23+0x114>)
 80092d0:	2204      	movs	r2, #4
 80092d2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80092d6:	2312      	movs	r3, #18
 80092d8:	e065      	b.n	80093a6 <ESC_checkSM23+0x106>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	885b      	ldrh	r3, [r3, #2]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	4b34      	ldr	r3, [pc, #208]	; (80093b4 <ESC_checkSM23+0x114>)
 80092e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d005      	beq.n	80092f6 <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80092ea:	4b32      	ldr	r3, [pc, #200]	; (80093b4 <ESC_checkSM23+0x114>)
 80092ec:	2204      	movs	r2, #4
 80092ee:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80092f2:	2312      	movs	r3, #18
 80092f4:	e057      	b.n	80093a6 <ESC_checkSM23+0x106>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	799b      	ldrb	r3, [r3, #6]
 80092fa:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <ESC_checkSM23+0x78>
            (ESCvar.ESC_SM2_sml > 0))
 8009302:	4b2c      	ldr	r3, [pc, #176]	; (80093b4 <ESC_checkSM23+0x114>)
 8009304:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8009308:	2b00      	cmp	r3, #0
 800930a:	d005      	beq.n	8009318 <ESC_checkSM23+0x78>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800930c:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <ESC_checkSM23+0x114>)
 800930e:	2204      	movs	r2, #4
 8009310:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8009314:	2312      	movs	r3, #18
 8009316:	e046      	b.n	80093a6 <ESC_checkSM23+0x106>
   }

   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	885b      	ldrh	r3, [r3, #2]
 800931c:	b29b      	uxth	r3, r3
 800931e:	461a      	mov	r2, r3
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	2b80      	cmp	r3, #128	; 0x80
 8009328:	dd05      	ble.n	8009336 <ESC_checkSM23+0x96>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800932a:	4b22      	ldr	r3, [pc, #136]	; (80093b4 <ESC_checkSM23+0x114>)
 800932c:	2204      	movs	r2, #4
 800932e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 8009332:	2312      	movs	r3, #18
 8009334:	e037      	b.n	80093a6 <ESC_checkSM23+0x106>
   }

   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8009336:	2208      	movs	r2, #8
 8009338:	491f      	ldr	r1, [pc, #124]	; (80093b8 <ESC_checkSM23+0x118>)
 800933a:	f640 0018 	movw	r0, #2072	; 0x818
 800933e:	f000 fd3f 	bl	8009dc0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8009342:	4b1d      	ldr	r3, [pc, #116]	; (80093b8 <ESC_checkSM23+0x118>)
 8009344:	60fb      	str	r3, [r7, #12]
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 8009350:	d103      	bne.n	800935a <ESC_checkSM23+0xba>
       (SM->Command != ESC_SM3_smc))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8009356:	2b20      	cmp	r3, #32
 8009358:	d005      	beq.n	8009366 <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800935a:	4b16      	ldr	r3, [pc, #88]	; (80093b4 <ESC_checkSM23+0x114>)
 800935c:	2208      	movs	r2, #8
 800935e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8009362:	2312      	movs	r3, #18
 8009364:	e01f      	b.n	80093a6 <ESC_checkSM23+0x106>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	b29a      	uxth	r2, r3
 800936c:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <ESC_checkSM23+0x114>)
 800936e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009372:	429a      	cmp	r2, r3
 8009374:	d005      	beq.n	8009382 <ESC_checkSM23+0xe2>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8009376:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <ESC_checkSM23+0x114>)
 8009378:	2208      	movs	r2, #8
 800937a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800937e:	2312      	movs	r3, #18
 8009380:	e011      	b.n	80093a6 <ESC_checkSM23+0x106>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	799b      	ldrb	r3, [r3, #6]
 8009386:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <ESC_checkSM23+0x104>
            (ESCvar.ESC_SM3_sml > 0))
 800938e:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <ESC_checkSM23+0x114>)
 8009390:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <ESC_checkSM23+0x104>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <ESC_checkSM23+0x114>)
 800939a:	2208      	movs	r2, #8
 800939c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 80093a0:	2312      	movs	r3, #18
 80093a2:	e000      	b.n	80093a6 <ESC_checkSM23+0x106>
   }
   return state;
 80093a4:	79fb      	ldrb	r3, [r7, #7]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200009b4 	.word	0x200009b4
 80093b4:	200008e8 	.word	0x200008e8
 80093b8:	200009bc 	.word	0x200009bc

080093bc <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff ff69 	bl	80092a0 <ESC_checkSM23>
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b12      	cmp	r3, #18
 80093d6:	d00f      	beq.n	80093f8 <ESC_startinput+0x3c>
   {
   	  /* If inputs > 0 , enable SM3 */
      if (ESCvar.ESC_SM3_sml > 0)
 80093d8:	4b34      	ldr	r3, [pc, #208]	; (80094ac <ESC_startinput+0xf0>)
 80093da:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <ESC_startinput+0x2c>
      {
         ESC_SMenable (3);
 80093e2:	2003      	movs	r0, #3
 80093e4:	f7ff faac 	bl	8008940 <ESC_SMenable>
      }
      /* Go to state input regardless of any inputs present */
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 80093e8:	4b31      	ldr	r3, [pc, #196]	; (80094b0 <ESC_startinput+0xf4>)
 80093ea:	f3bf 8f5b 	dmb	ish
 80093ee:	2201      	movs	r2, #1
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	f3bf 8f5b 	dmb	ish
 80093f6:	e013      	b.n	8009420 <ESC_startinput+0x64>
   }
   else
   {
      ESC_SMdisable (2);
 80093f8:	2002      	movs	r0, #2
 80093fa:	f7ff fabf 	bl	800897c <ESC_SMdisable>
      ESC_SMdisable (3);
 80093fe:	2003      	movs	r0, #3
 8009400:	f7ff fabc 	bl	800897c <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8009404:	4b29      	ldr	r3, [pc, #164]	; (80094ac <ESC_startinput+0xf0>)
 8009406:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <ESC_startinput+0x5e>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8009412:	201e      	movs	r0, #30
 8009414:	f7ff f98a 	bl	800872c <ESC_ALerror>
 8009418:	e002      	b.n	8009420 <ESC_startinput+0x64>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800941a:	201d      	movs	r0, #29
 800941c:	f7ff f986 	bl	800872c <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8009420:	4b22      	ldr	r3, [pc, #136]	; (80094ac <ESC_startinput+0xf0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <ESC_startinput+0x70>
   {
      return state;
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	e03b      	b.n	80094a4 <ESC_startinput+0xe8>
   }

   if (state != (ESCpreop | ESCerror))
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	2b12      	cmp	r3, #18
 8009430:	d037      	beq.n	80094a2 <ESC_startinput+0xe6>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 8009432:	f7ff fae5 	bl	8008a00 <ESC_checkDC>
 8009436:	4603      	mov	r3, r0
 8009438:	817b      	strh	r3, [r7, #10]
      if(dc_check_result > 0)
 800943a:	897b      	ldrh	r3, [r7, #10]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d013      	beq.n	8009468 <ESC_startinput+0xac>
      {
         ESC_ALerror (dc_check_result);
 8009440:	897b      	ldrh	r3, [r7, #10]
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff f972 	bl	800872c <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 8009448:	2312      	movs	r3, #18
 800944a:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 800944c:	2002      	movs	r0, #2
 800944e:	f7ff fa95 	bl	800897c <ESC_SMdisable>
         ESC_SMdisable (3);
 8009452:	2003      	movs	r0, #3
 8009454:	f7ff fa92 	bl	800897c <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8009458:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <ESC_startinput+0xf4>)
 800945a:	f3bf 8f5b 	dmb	ish
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	f3bf 8f5b 	dmb	ish
 8009466:	e01c      	b.n	80094a2 <ESC_startinput+0xe6>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 8009468:	4b10      	ldr	r3, [pc, #64]	; (80094ac <ESC_startinput+0xf0>)
 800946a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946c:	2b00      	cmp	r3, #0
 800946e:	d018      	beq.n	80094a2 <ESC_startinput+0xe6>
         {
            uint32_t int_mask;

            if (ESCvar.ESC_SM2_sml == 0)
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <ESC_startinput+0xf0>)
 8009472:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <ESC_startinput+0xc6>
            {
               int_mask = ESCREG_ALEVENT_SM3;
 800947a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e002      	b.n	8009488 <ESC_startinput+0xcc>
            }
            else
            {
               int_mask = ESCREG_ALEVENT_SM2;
 8009482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009486:	60fb      	str	r3, [r7, #12]
            }

            if (ESCvar.dcsync > 0)
 8009488:	4b08      	ldr	r3, [pc, #32]	; (80094ac <ESC_startinput+0xf0>)
 800948a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <ESC_startinput+0xde>
            {
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f043 0304 	orr.w	r3, r3, #4
 8009498:	60fb      	str	r3, [r7, #12]
            }
            ESCvar.esc_hw_interrupt_enable (int_mask);
 800949a:	4b04      	ldr	r3, [pc, #16]	; (80094ac <ESC_startinput+0xf0>)
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	4798      	blx	r3
         }
      }
   }

   return state;
 80094a2:	79fb      	ldrb	r3, [r7, #7]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	200008e8 	.word	0x200008e8
 80094b0:	200009d4 	.word	0x200009d4

080094b4 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <ESC_stopinput+0x3c>)
 80094ba:	f3bf 8f5b 	dmb	ish
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 80094c6:	2003      	movs	r0, #3
 80094c8:	f7ff fa58 	bl	800897c <ESC_SMdisable>
   ESC_SMdisable (2);
 80094cc:	2002      	movs	r0, #2
 80094ce:	f7ff fa55 	bl	800897c <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 80094d2:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <ESC_stopinput+0x40>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d008      	beq.n	80094ec <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 80094da:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <ESC_stopinput+0x40>)
 80094dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 80094e2:	4b04      	ldr	r3, [pc, #16]	; (80094f4 <ESC_stopinput+0x40>)
 80094e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e6:	f640 4004 	movw	r0, #3076	; 0xc04
 80094ea:	4798      	blx	r3
            ESCREG_ALEVENT_SM2 |
            ESCREG_ALEVENT_SM3);
   }
}
 80094ec:	bf00      	nop
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	200009d4 	.word	0x200009d4
 80094f4:	200008e8 	.word	0x200008e8

080094f8 <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	71fb      	strb	r3, [r7, #7]
	
   /* If outputs > 0 , enable SM2 */
   if (ESCvar.ESC_SM2_sml > 0)
 8009502:	4b0d      	ldr	r3, [pc, #52]	; (8009538 <ESC_startoutput+0x40>)
 8009504:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <ESC_startoutput+0x1a>
   {
      ESC_SMenable (2);
 800950c:	2002      	movs	r0, #2
 800950e:	f7ff fa17 	bl	8008940 <ESC_SMenable>
   }
   /* Go to state output regardless of any outputs present */
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <ESC_startoutput+0x44>)
 8009514:	f3bf 8f5b 	dmb	ish
 8009518:	e8d3 2f4f 	ldrexb	r2, [r3]
 800951c:	f042 0202 	orr.w	r2, r2, #2
 8009520:	e8c3 2f41 	strexb	r1, r2, [r3]
 8009524:	2900      	cmp	r1, #0
 8009526:	d1f7      	bne.n	8009518 <ESC_startoutput+0x20>
 8009528:	f3bf 8f5b 	dmb	ish
   return state;
 800952c:	79fb      	ldrb	r3, [r7, #7]

}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200008e8 	.word	0x200008e8
 800953c:	200009d4 	.word	0x200009d4

08009540 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <ESC_stopoutput+0x2c>)
 8009546:	f3bf 8f5b 	dmb	ish
 800954a:	e8d3 2f4f 	ldrexb	r2, [r3]
 800954e:	f002 0201 	and.w	r2, r2, #1
 8009552:	e8c3 2f41 	strexb	r1, r2, [r3]
 8009556:	2900      	cmp	r1, #0
 8009558:	d1f7      	bne.n	800954a <ESC_stopoutput+0xa>
 800955a:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 800955e:	2002      	movs	r0, #2
 8009560:	f7ff fa0c 	bl	800897c <ESC_SMdisable>
   APP_safeoutput ();
 8009564:	f7fc fa86 	bl	8005a74 <APP_safeoutput>
}
 8009568:	bf00      	nop
 800956a:	bd80      	pop	{r7, pc}
 800956c:	200009d4 	.word	0x200009d4

08009570 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 8009576:	4b56      	ldr	r3, [pc, #344]	; (80096d0 <ESC_sm_act_event+0x160>)
 8009578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 809e 	beq.w	80096c2 <ESC_sm_act_event+0x152>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8009586:	4b52      	ldr	r3, [pc, #328]	; (80096d0 <ESC_sm_act_event+0x160>)
 8009588:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 031f 	and.w	r3, r3, #31
 8009592:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8009594:	4b4e      	ldr	r3, [pc, #312]	; (80096d0 <ESC_sm_act_event+0x160>)
 8009596:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 031f 	and.w	r3, r3, #31
 80095a0:	717b      	strb	r3, [r7, #5]
   an = as;
 80095a2:	797b      	ldrb	r3, [r7, #5]
 80095a4:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	f003 0310 	and.w	r3, r3, #16
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <ESC_sm_act_event+0x46>
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d107      	bne.n	80095c6 <ESC_sm_act_event+0x56>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 80095be:	79bb      	ldrb	r3, [r7, #6]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 80095c6:	797b      	ldrb	r3, [r7, #5]
 80095c8:	f003 030e 	and.w	r3, r3, #14
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d05f      	beq.n	8009690 <ESC_sm_act_event+0x120>
 80095d0:	797b      	ldrb	r3, [r7, #5]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d05c      	beq.n	8009690 <ESC_sm_act_event+0x120>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 80095d6:	4b3e      	ldr	r3, [pc, #248]	; (80096d0 <ESC_sm_act_event+0x160>)
 80095d8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d057      	beq.n	8009690 <ESC_sm_act_event+0x120>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 80095e0:	797b      	ldrb	r3, [r7, #5]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fa36 	bl	8008a54 <ESC_checkmbx>
 80095e8:	4603      	mov	r3, r0
 80095ea:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 80095ec:	797b      	ldrb	r3, [r7, #5]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fe56 	bl	80092a0 <ESC_checkSM23>
 80095f4:	4603      	mov	r3, r0
 80095f6:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80095f8:	79bb      	ldrb	r3, [r7, #6]
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <ESC_sm_act_event+0x9c>
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	f003 0310 	and.w	r3, r3, #16
 8009608:	2b00      	cmp	r3, #0
 800960a:	d040      	beq.n	800968e <ESC_sm_act_event+0x11e>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 800960c:	793b      	ldrb	r3, [r7, #4]
 800960e:	2b11      	cmp	r3, #17
 8009610:	d11a      	bne.n	8009648 <ESC_sm_act_event+0xd8>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8009612:	4b30      	ldr	r3, [pc, #192]	; (80096d4 <ESC_sm_act_event+0x164>)
 8009614:	f3bf 8f5b 	dmb	ish
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	f3bf 8f5b 	dmb	ish
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <ESC_sm_act_event+0xbc>
         {
            ESC_stopoutput ();
 8009624:	f7ff ff8c 	bl	8009540 <ESC_stopoutput>
            ESC_stopinput ();
 8009628:	f7ff ff44 	bl	80094b4 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 800962c:	f7ff fb14 	bl	8008c58 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8009630:	2016      	movs	r0, #22
 8009632:	f7ff f87b 	bl	800872c <ESC_ALerror>
         ESCvar.MBXrun = 0;
 8009636:	4b26      	ldr	r3, [pc, #152]	; (80096d0 <ESC_sm_act_event+0x160>)
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 800963e:	793b      	ldrb	r3, [r7, #4]
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff f88d 	bl	8008760 <ESC_ALstatus>
         return;
 8009646:	e03f      	b.n	80096c8 <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 8009648:	4b22      	ldr	r3, [pc, #136]	; (80096d4 <ESC_sm_act_event+0x164>)
 800964a:	f3bf 8f5b 	dmb	ish
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	f3bf 8f5b 	dmb	ish
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d035      	beq.n	80096c6 <ESC_sm_act_event+0x156>
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	2b12      	cmp	r3, #18
 800965e:	d132      	bne.n	80096c6 <ESC_sm_act_event+0x156>
      {
         ESC_stopoutput ();
 8009660:	f7ff ff6e 	bl	8009540 <ESC_stopoutput>
         ESC_stopinput ();
 8009664:	f7ff ff26 	bl	80094b4 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8009668:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <ESC_sm_act_event+0x160>)
 800966a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800966e:	f003 0308 	and.w	r3, r3, #8
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <ESC_sm_act_event+0x10e>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8009676:	201e      	movs	r0, #30
 8009678:	f7ff f858 	bl	800872c <ESC_ALerror>
 800967c:	e002      	b.n	8009684 <ESC_sm_act_event+0x114>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800967e:	201d      	movs	r0, #29
 8009680:	f7ff f854 	bl	800872c <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff f86a 	bl	8008760 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800968c:	e01b      	b.n	80096c6 <ESC_sm_act_event+0x156>
 800968e:	e01a      	b.n	80096c6 <ESC_sm_act_event+0x156>
      }
   }
   else
   {
      ESC_SMack (0);
 8009690:	2000      	movs	r0, #0
 8009692:	f7ff f8fe 	bl	8008892 <ESC_SMack>
      ESC_SMack (1);
 8009696:	2001      	movs	r0, #1
 8009698:	f7ff f8fb 	bl	8008892 <ESC_SMack>
      ESC_SMack (2);
 800969c:	2002      	movs	r0, #2
 800969e:	f7ff f8f8 	bl	8008892 <ESC_SMack>
      ESC_SMack (3);
 80096a2:	2003      	movs	r0, #3
 80096a4:	f7ff f8f5 	bl	8008892 <ESC_SMack>
      ESC_SMack (4);
 80096a8:	2004      	movs	r0, #4
 80096aa:	f7ff f8f2 	bl	8008892 <ESC_SMack>
      ESC_SMack (5);
 80096ae:	2005      	movs	r0, #5
 80096b0:	f7ff f8ef 	bl	8008892 <ESC_SMack>
      ESC_SMack (6);
 80096b4:	2006      	movs	r0, #6
 80096b6:	f7ff f8ec 	bl	8008892 <ESC_SMack>
      ESC_SMack (7);
 80096ba:	2007      	movs	r0, #7
 80096bc:	f7ff f8e9 	bl	8008892 <ESC_SMack>
 80096c0:	e002      	b.n	80096c8 <ESC_sm_act_event+0x158>
      return;
 80096c2:	bf00      	nop
 80096c4:	e000      	b.n	80096c8 <ESC_sm_act_event+0x158>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80096c6:	bf00      	nop
   }
}
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200008e8 	.word	0x200008e8
 80096d4:	200009d4 	.word	0x200009d4

080096d8 <ESC_check_id_request>:

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	80fb      	strh	r3, [r7, #6]
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 80096e4:	88fb      	ldrh	r3, [r7, #6]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d021      	beq.n	8009732 <ESC_check_id_request+0x5a>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	73fb      	strb	r3, [r7, #15]

      if ((state != ESCboot) &&
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d019      	beq.n	8009732 <ESC_check_id_request+0x5a>
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	2b03      	cmp	r3, #3
 8009702:	d907      	bls.n	8009714 <ESC_check_id_request+0x3c>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b04      	cmp	r3, #4
 800970a:	d003      	beq.n	8009714 <ESC_check_id_request+0x3c>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b08      	cmp	r3, #8
 8009712:	d10e      	bne.n	8009732 <ESC_check_id_request+0x5a>
      {
         uint16_t ALstatuscode;

         ESC_read (ESCREG_ALERROR,
 8009714:	f107 030c 	add.w	r3, r7, #12
 8009718:	2202      	movs	r2, #2
 800971a:	4619      	mov	r1, r3
 800971c:	f44f 709a 	mov.w	r0, #308	; 0x134
 8009720:	f000 fb4e 	bl	8009dc0 <ESC_read>
                   (void *)&ALstatuscode,
                   sizeof (ALstatuscode));

         return (ALstatuscode == ALERR_NONE);
 8009724:	89bb      	ldrh	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	e000      	b.n	8009734 <ESC_check_id_request+0x5c>
      }
   }

   return false;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 8009742:	4b11      	ldr	r3, [pc, #68]	; (8009788 <ESC_load_device_id+0x4c>)
 8009744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <ESC_load_device_id+0x24>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800974a:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <ESC_load_device_id+0x4c>)
 800974c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800974e:	1dba      	adds	r2, r7, #6
 8009750:	4610      	mov	r0, r2
 8009752:	4798      	blx	r3
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d008      	beq.n	800976c <ESC_load_device_id+0x30>
      {
         device_id = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	80fb      	strh	r3, [r7, #6]
 800975e:	e005      	b.n	800976c <ESC_load_device_id+0x30>
      }
   }
   else
   {
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 8009760:	1dbb      	adds	r3, r7, #6
 8009762:	2202      	movs	r2, #2
 8009764:	4619      	mov	r1, r3
 8009766:	2012      	movs	r0, #18
 8009768:	f000 fb2a 	bl	8009dc0 <ESC_read>
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 800976c:	88fb      	ldrh	r3, [r7, #6]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <ESC_load_device_id+0x42>
   {
      /* Load the Device Identification Value to the AL Status Code register */
      ESC_ALerror (device_id);
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe ffd9 	bl	800872c <ESC_ALerror>

      return ESCREG_AL_ID_REQUEST;
 800977a:	2320      	movs	r3, #32
 800977c:	e000      	b.n	8009780 <ESC_load_device_id+0x44>
   }

   return 0;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	200008e8 	.word	0x200008e8

0800978c <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8009792:	4bda      	ldr	r3, [pc, #872]	; (8009afc <ESC_state+0x370>)
 8009794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8256 	beq.w	8009c4e <ESC_state+0x4c2>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 80097a2:	2202      	movs	r2, #2
 80097a4:	49d6      	ldr	r1, [pc, #856]	; (8009b00 <ESC_state+0x374>)
 80097a6:	f44f 7090 	mov.w	r0, #288	; 0x120
 80097aa:	f000 fb09 	bl	8009dc0 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 80097ae:	4bd3      	ldr	r3, [pc, #844]	; (8009afc <ESC_state+0x370>)
 80097b0:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80097b4:	4bd1      	ldr	r3, [pc, #836]	; (8009afc <ESC_state+0x370>)
 80097b6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 80097ba:	4bd0      	ldr	r3, [pc, #832]	; (8009afc <ESC_state+0x370>)
 80097bc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 80097c8:	4bcc      	ldr	r3, [pc, #816]	; (8009afc <ESC_state+0x370>)
 80097ca:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 031f 	and.w	r3, r3, #31
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	717b      	strb	r3, [r7, #5]
   an = as;
 80097d8:	797b      	ldrb	r3, [r7, #5]
 80097da:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	f003 0310 	and.w	r3, r3, #16
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <ESC_state+0x60>
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d108      	bne.n	80097fe <ESC_state+0x72>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 80097f4:	79bb      	ldrb	r3, [r7, #6]
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80097fe:	79bb      	ldrb	r3, [r7, #6]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <ESC_state+0x88>
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 821f 	beq.w	8009c52 <ESC_state+0x4c6>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	b25a      	sxtb	r2, r3
 800981a:	797b      	ldrb	r3, [r7, #5]
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	b25b      	sxtb	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b25b      	sxtb	r3, r3
 8009828:	b2db      	uxtb	r3, r3
 800982a:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800982c:	4bb3      	ldr	r3, [pc, #716]	; (8009afc <ESC_state+0x370>)
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <ESC_state+0xb4>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8009834:	4bb1      	ldr	r3, [pc, #708]	; (8009afc <ESC_state+0x370>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	1db9      	adds	r1, r7, #6
 800983a:	1d7a      	adds	r2, r7, #5
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 8009840:	797b      	ldrb	r3, [r7, #5]
 8009842:	3b11      	subs	r3, #17
 8009844:	2b77      	cmp	r3, #119	; 0x77
 8009846:	f200 81ac 	bhi.w	8009ba2 <ESC_state+0x416>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <ESC_state+0xc4>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	08009be7 	.word	0x08009be7
 8009854:	08009a81 	.word	0x08009a81
 8009858:	08009a8b 	.word	0x08009a8b
 800985c:	08009a73 	.word	0x08009a73
 8009860:	08009ba3 	.word	0x08009ba3
 8009864:	08009ba3 	.word	0x08009ba3
 8009868:	08009ba3 	.word	0x08009ba3
 800986c:	08009a61 	.word	0x08009a61
 8009870:	08009ba3 	.word	0x08009ba3
 8009874:	08009ba3 	.word	0x08009ba3
 8009878:	08009ba3 	.word	0x08009ba3
 800987c:	08009ba3 	.word	0x08009ba3
 8009880:	08009ba3 	.word	0x08009ba3
 8009884:	08009ba3 	.word	0x08009ba3
 8009888:	08009ba3 	.word	0x08009ba3
 800988c:	08009ba3 	.word	0x08009ba3
 8009890:	08009a31 	.word	0x08009a31
 8009894:	08009be7 	.word	0x08009be7
 8009898:	08009a95 	.word	0x08009a95
 800989c:	08009b4b 	.word	0x08009b4b
 80098a0:	08009ba3 	.word	0x08009ba3
 80098a4:	08009ba3 	.word	0x08009ba3
 80098a8:	08009ba3 	.word	0x08009ba3
 80098ac:	08009b3d 	.word	0x08009b3d
 80098b0:	08009ba3 	.word	0x08009ba3
 80098b4:	08009ba3 	.word	0x08009ba3
 80098b8:	08009ba3 	.word	0x08009ba3
 80098bc:	08009ba3 	.word	0x08009ba3
 80098c0:	08009ba3 	.word	0x08009ba3
 80098c4:	08009ba3 	.word	0x08009ba3
 80098c8:	08009ba3 	.word	0x08009ba3
 80098cc:	08009ba3 	.word	0x08009ba3
 80098d0:	08009a43 	.word	0x08009a43
 80098d4:	08009a95 	.word	0x08009a95
 80098d8:	08009a43 	.word	0x08009a43
 80098dc:	08009b55 	.word	0x08009b55
 80098e0:	08009ba3 	.word	0x08009ba3
 80098e4:	08009ba3 	.word	0x08009ba3
 80098e8:	08009ba3 	.word	0x08009ba3
 80098ec:	08009b6f 	.word	0x08009b6f
 80098f0:	08009ba3 	.word	0x08009ba3
 80098f4:	08009ba3 	.word	0x08009ba3
 80098f8:	08009ba3 	.word	0x08009ba3
 80098fc:	08009ba3 	.word	0x08009ba3
 8009900:	08009ba3 	.word	0x08009ba3
 8009904:	08009ba3 	.word	0x08009ba3
 8009908:	08009ba3 	.word	0x08009ba3
 800990c:	08009ba3 	.word	0x08009ba3
 8009910:	08009a55 	.word	0x08009a55
 8009914:	08009aa1 	.word	0x08009aa1
 8009918:	08009a95 	.word	0x08009a95
 800991c:	08009aa1 	.word	0x08009aa1
 8009920:	08009ba3 	.word	0x08009ba3
 8009924:	08009ba3 	.word	0x08009ba3
 8009928:	08009ba3 	.word	0x08009ba3
 800992c:	08009b99 	.word	0x08009b99
 8009930:	08009ba3 	.word	0x08009ba3
 8009934:	08009ba3 	.word	0x08009ba3
 8009938:	08009ba3 	.word	0x08009ba3
 800993c:	08009ba3 	.word	0x08009ba3
 8009940:	08009ba3 	.word	0x08009ba3
 8009944:	08009ba3 	.word	0x08009ba3
 8009948:	08009ba3 	.word	0x08009ba3
 800994c:	08009ba3 	.word	0x08009ba3
 8009950:	08009ba3 	.word	0x08009ba3
 8009954:	08009ba3 	.word	0x08009ba3
 8009958:	08009ba3 	.word	0x08009ba3
 800995c:	08009ba3 	.word	0x08009ba3
 8009960:	08009ba3 	.word	0x08009ba3
 8009964:	08009ba3 	.word	0x08009ba3
 8009968:	08009ba3 	.word	0x08009ba3
 800996c:	08009ba3 	.word	0x08009ba3
 8009970:	08009ba3 	.word	0x08009ba3
 8009974:	08009ba3 	.word	0x08009ba3
 8009978:	08009ba3 	.word	0x08009ba3
 800997c:	08009ba3 	.word	0x08009ba3
 8009980:	08009ba3 	.word	0x08009ba3
 8009984:	08009ba3 	.word	0x08009ba3
 8009988:	08009ba3 	.word	0x08009ba3
 800998c:	08009ba3 	.word	0x08009ba3
 8009990:	08009ba3 	.word	0x08009ba3
 8009994:	08009ba3 	.word	0x08009ba3
 8009998:	08009ba3 	.word	0x08009ba3
 800999c:	08009ba3 	.word	0x08009ba3
 80099a0:	08009ba3 	.word	0x08009ba3
 80099a4:	08009ba3 	.word	0x08009ba3
 80099a8:	08009ba3 	.word	0x08009ba3
 80099ac:	08009ba3 	.word	0x08009ba3
 80099b0:	08009ba3 	.word	0x08009ba3
 80099b4:	08009ba3 	.word	0x08009ba3
 80099b8:	08009ba3 	.word	0x08009ba3
 80099bc:	08009ba3 	.word	0x08009ba3
 80099c0:	08009ba3 	.word	0x08009ba3
 80099c4:	08009ba3 	.word	0x08009ba3
 80099c8:	08009ba3 	.word	0x08009ba3
 80099cc:	08009ba3 	.word	0x08009ba3
 80099d0:	08009ba3 	.word	0x08009ba3
 80099d4:	08009ba3 	.word	0x08009ba3
 80099d8:	08009ba3 	.word	0x08009ba3
 80099dc:	08009ba3 	.word	0x08009ba3
 80099e0:	08009ba3 	.word	0x08009ba3
 80099e4:	08009ba3 	.word	0x08009ba3
 80099e8:	08009ba3 	.word	0x08009ba3
 80099ec:	08009ba3 	.word	0x08009ba3
 80099f0:	08009ba3 	.word	0x08009ba3
 80099f4:	08009ba3 	.word	0x08009ba3
 80099f8:	08009ba3 	.word	0x08009ba3
 80099fc:	08009ba3 	.word	0x08009ba3
 8009a00:	08009ba3 	.word	0x08009ba3
 8009a04:	08009ba3 	.word	0x08009ba3
 8009a08:	08009ba3 	.word	0x08009ba3
 8009a0c:	08009ba3 	.word	0x08009ba3
 8009a10:	08009a55 	.word	0x08009a55
 8009a14:	08009b31 	.word	0x08009b31
 8009a18:	08009a95 	.word	0x08009a95
 8009a1c:	08009b61 	.word	0x08009b61
 8009a20:	08009ba3 	.word	0x08009ba3
 8009a24:	08009ba3 	.word	0x08009ba3
 8009a28:	08009ba3 	.word	0x08009ba3
 8009a2c:	08009be7 	.word	0x08009be7
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8009a30:	f7fe ffc2 	bl	80089b8 <ESC_address>
         an = ESC_startmbx (ac);
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff f882 	bl	8008b40 <ESC_startmbx>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	71bb      	strb	r3, [r7, #6]
         break;
 8009a40:	e0d6      	b.n	8009bf0 <ESC_state+0x464>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8009a42:	f7fe ffb9 	bl	80089b8 <ESC_address>
         an = ESC_startmbxboot (ac);
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff f8bf 	bl	8008bcc <ESC_startmbxboot>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71bb      	strb	r3, [r7, #6]
         break;
 8009a52:	e0cd      	b.n	8009bf0 <ESC_state+0x464>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8009a54:	2311      	movs	r3, #17
 8009a56:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8009a58:	2011      	movs	r0, #17
 8009a5a:	f7fe fe67 	bl	800872c <ESC_ALerror>
         break;
 8009a5e:	e0c7      	b.n	8009bf0 <ESC_state+0x464>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8009a60:	f7ff fd6e 	bl	8009540 <ESC_stopoutput>
         ESC_stopinput ();
 8009a64:	f7ff fd26 	bl	80094b4 <ESC_stopinput>
         ESC_stopmbx ();
 8009a68:	f7ff f8f6 	bl	8008c58 <ESC_stopmbx>
         an = ESCinit;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	71bb      	strb	r3, [r7, #6]
         break;
 8009a70:	e0be      	b.n	8009bf0 <ESC_state+0x464>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8009a72:	f7ff fd1f 	bl	80094b4 <ESC_stopinput>
         ESC_stopmbx ();
 8009a76:	f7ff f8ef 	bl	8008c58 <ESC_stopmbx>
         an = ESCinit;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	71bb      	strb	r3, [r7, #6]
         break;
 8009a7e:	e0b7      	b.n	8009bf0 <ESC_state+0x464>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8009a80:	f7ff f8ea 	bl	8008c58 <ESC_stopmbx>
         an = ESCinit;
 8009a84:	2301      	movs	r3, #1
 8009a86:	71bb      	strb	r3, [r7, #6]
         break;
 8009a88:	e0b2      	b.n	8009bf0 <ESC_state+0x464>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8009a8a:	f7ff f8e5 	bl	8008c58 <ESC_stopmbx>
         an = ESCinit;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	71bb      	strb	r3, [r7, #6]
         break;
 8009a92:	e0ad      	b.n	8009bf0 <ESC_state+0x464>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8009a94:	2312      	movs	r3, #18
 8009a96:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8009a98:	2011      	movs	r0, #17
 8009a9a:	f7fe fe47 	bl	800872c <ESC_ALerror>
         break;
 8009a9e:	e0a7      	b.n	8009bf0 <ESC_state+0x464>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 8009aa0:	2307      	movs	r3, #7
 8009aa2:	4a18      	ldr	r2, [pc, #96]	; (8009b04 <ESC_state+0x378>)
 8009aa4:	4918      	ldr	r1, [pc, #96]	; (8009b08 <ESC_state+0x37c>)
 8009aa6:	f641 4012 	movw	r0, #7186	; 0x1c12
 8009aaa:	f7fc f9e7 	bl	8005e7c <sizeOfPDO>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b12      	ldr	r3, [pc, #72]	; (8009afc <ESC_state+0x370>)
 8009ab4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8009ab8:	4b10      	ldr	r3, [pc, #64]	; (8009afc <ESC_state+0x370>)
 8009aba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da05      	bge.n	8009ace <ESC_state+0x342>
         {
            an = ESCpreop | ESCerror;
 8009ac2:	2312      	movs	r3, #18
 8009ac4:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8009ac6:	201d      	movs	r0, #29
 8009ac8:	f7fe fe30 	bl	800872c <ESC_ALerror>
            break;
 8009acc:	e090      	b.n	8009bf0 <ESC_state+0x464>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 8009ace:	2307      	movs	r3, #7
 8009ad0:	4a0e      	ldr	r2, [pc, #56]	; (8009b0c <ESC_state+0x380>)
 8009ad2:	490f      	ldr	r1, [pc, #60]	; (8009b10 <ESC_state+0x384>)
 8009ad4:	f641 4013 	movw	r0, #7187	; 0x1c13
 8009ad8:	f7fc f9d0 	bl	8005e7c <sizeOfPDO>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <ESC_state+0x370>)
 8009ae2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <ESC_state+0x370>)
 8009ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da11      	bge.n	8009b14 <ESC_state+0x388>
         {
            an = ESCpreop | ESCerror;
 8009af0:	2312      	movs	r3, #18
 8009af2:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8009af4:	201e      	movs	r0, #30
 8009af6:	f7fe fe19 	bl	800872c <ESC_ALerror>
            break;
 8009afa:	e079      	b.n	8009bf0 <ESC_state+0x464>
 8009afc:	200008e8 	.word	0x200008e8
 8009b00:	2000096a 	.word	0x2000096a
 8009b04:	20000cd8 	.word	0x20000cd8
 8009b08:	20000994 	.word	0x20000994
 8009b0c:	20000d2c 	.word	0x20000d2c
 8009b10:	20000998 	.word	0x20000998
         }

         an = ESC_startinput (ac);
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fc50 	bl	80093bc <ESC_startinput>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8009b20:	79bb      	ldrb	r3, [r7, #6]
 8009b22:	79fa      	ldrb	r2, [r7, #7]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d160      	bne.n	8009bea <ESC_state+0x45e>
         {
            ESC_SMenable (2);
 8009b28:	2002      	movs	r0, #2
 8009b2a:	f7fe ff09 	bl	8008940 <ESC_SMenable>
         }
         break;
 8009b2e:	e05c      	b.n	8009bea <ESC_state+0x45e>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8009b30:	2312      	movs	r3, #18
 8009b32:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8009b34:	2011      	movs	r0, #17
 8009b36:	f7fe fdf9 	bl	800872c <ESC_ALerror>
         break;
 8009b3a:	e059      	b.n	8009bf0 <ESC_state+0x464>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8009b3c:	f7ff fd00 	bl	8009540 <ESC_stopoutput>
         ESC_stopinput ();
 8009b40:	f7ff fcb8 	bl	80094b4 <ESC_stopinput>
         an = ESCpreop;
 8009b44:	2302      	movs	r3, #2
 8009b46:	71bb      	strb	r3, [r7, #6]
         break;
 8009b48:	e052      	b.n	8009bf0 <ESC_state+0x464>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8009b4a:	f7ff fcb3 	bl	80094b4 <ESC_stopinput>
         an = ESCpreop;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	71bb      	strb	r3, [r7, #6]
         break;
 8009b52:	e04d      	b.n	8009bf0 <ESC_state+0x464>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8009b54:	2314      	movs	r3, #20
 8009b56:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8009b58:	2011      	movs	r0, #17
 8009b5a:	f7fe fde7 	bl	800872c <ESC_ALerror>
         break;
 8009b5e:	e047      	b.n	8009bf0 <ESC_state+0x464>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fcc8 	bl	80094f8 <ESC_startoutput>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	71bb      	strb	r3, [r7, #6]
         break;
 8009b6c:	e040      	b.n	8009bf0 <ESC_state+0x464>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8009b6e:	2314      	movs	r3, #20
 8009b70:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8009b72:	2011      	movs	r0, #17
 8009b74:	f7fe fdda 	bl	800872c <ESC_ALerror>
         ESC_stopoutput ();
 8009b78:	f7ff fce2 	bl	8009540 <ESC_stopoutput>
         /* If no outputs present, we need to flag error using SM3 */
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 8009b7c:	4b37      	ldr	r3, [pc, #220]	; (8009c5c <ESC_state+0x4d0>)
 8009b7e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d133      	bne.n	8009bee <ESC_state+0x462>
 8009b86:	4b35      	ldr	r3, [pc, #212]	; (8009c5c <ESC_state+0x4d0>)
 8009b88:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d02e      	beq.n	8009bee <ESC_state+0x462>
         {
            ESC_SMdisable (3);
 8009b90:	2003      	movs	r0, #3
 8009b92:	f7fe fef3 	bl	800897c <ESC_SMdisable>
         }
         break;
 8009b96:	e02a      	b.n	8009bee <ESC_state+0x462>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 8009b98:	2304      	movs	r3, #4
 8009b9a:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 8009b9c:	f7ff fcd0 	bl	8009540 <ESC_stopoutput>
         break;
 8009ba0:	e026      	b.n	8009bf0 <ESC_state+0x464>
      }
      default:
      {
         if (an == ESCop)
 8009ba2:	79bb      	ldrb	r3, [r7, #6]
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d110      	bne.n	8009bca <ESC_state+0x43e>
         {
            ESC_stopoutput ();
 8009ba8:	f7ff fcca 	bl	8009540 <ESC_stopoutput>
            /* If no outputs present, we need to flag error using SM3 */
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 8009bac:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <ESC_state+0x4d0>)
 8009bae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d107      	bne.n	8009bc6 <ESC_state+0x43a>
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <ESC_state+0x4d0>)
 8009bb8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <ESC_state+0x43a>
            {
               ESC_SMdisable (3);
 8009bc0:	2003      	movs	r0, #3
 8009bc2:	f7fe fedb 	bl	800897c <ESC_SMdisable>
            }
            an = ESCsafeop;
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8009bca:	797b      	ldrb	r3, [r7, #5]
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d101      	bne.n	8009bd4 <ESC_state+0x448>
         {
            ESC_stopinput ();
 8009bd0:	f7ff fc70 	bl	80094b4 <ESC_stopinput>
         }
         an |= ESCerror;
 8009bd4:	79bb      	ldrb	r3, [r7, #6]
 8009bd6:	f043 0310 	orr.w	r3, r3, #16
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8009bde:	2012      	movs	r0, #18
 8009be0:	f7fe fda4 	bl	800872c <ESC_ALerror>
         break;
 8009be4:	e004      	b.n	8009bf0 <ESC_state+0x464>
         break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <ESC_state+0x464>
         break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <ESC_state+0x464>
         break;
 8009bee:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <ESC_state+0x4d0>)
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <ESC_state+0x478>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8009bf8:	4b18      	ldr	r3, [pc, #96]	; (8009c5c <ESC_state+0x4d0>)
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	1db9      	adds	r1, r7, #6
 8009bfe:	1d7a      	adds	r2, r7, #5
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8009c04:	79bb      	ldrb	r3, [r7, #6]
 8009c06:	f003 0310 	and.w	r3, r3, #16
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d107      	bne.n	8009c1e <ESC_state+0x492>
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <ESC_state+0x4d0>)
 8009c10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <ESC_state+0x492>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7fe fd87 	bl	800872c <ESC_ALerror>
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <ESC_state+0x4d0>)
 8009c20:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8009c24:	1dba      	adds	r2, r7, #6
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff fd55 	bl	80096d8 <ESC_check_id_request>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <ESC_state+0x4b8>
   {
      an |= ESC_load_device_id ();
 8009c34:	f7ff fd82 	bl	800973c <ESC_load_device_id>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	79bb      	ldrb	r3, [r7, #6]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	71bb      	strb	r3, [r7, #6]
   }

   ESC_ALstatus (an);
 8009c44:	79bb      	ldrb	r3, [r7, #6]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fd8a 	bl	8008760 <ESC_ALstatus>
 8009c4c:	e002      	b.n	8009c54 <ESC_state+0x4c8>
      return;
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <ESC_state+0x4c8>
      return;
 8009c52:	bf00      	nop

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200008e8 	.word	0x200008e8

08009c60 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	4a36      	ldr	r2, [pc, #216]	; (8009d48 <ESC_config+0xe8>)
 8009c6e:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	4a34      	ldr	r2, [pc, #208]	; (8009d48 <ESC_config+0xe8>)
 8009c76:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 8009c7a:	4b33      	ldr	r3, [pc, #204]	; (8009d48 <ESC_config+0xe8>)
 8009c7c:	4a33      	ldr	r2, [pc, #204]	; (8009d4c <ESC_config+0xec>)
 8009c7e:	3304      	adds	r3, #4
 8009c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c84:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 8009c88:	4b2f      	ldr	r3, [pc, #188]	; (8009d48 <ESC_config+0xe8>)
 8009c8a:	4a31      	ldr	r2, [pc, #196]	; (8009d50 <ESC_config+0xf0>)
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c92:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 8009c96:	4b2c      	ldr	r3, [pc, #176]	; (8009d48 <ESC_config+0xe8>)
 8009c98:	4a2e      	ldr	r2, [pc, #184]	; (8009d54 <ESC_config+0xf4>)
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ca0:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 8009ca4:	4b28      	ldr	r3, [pc, #160]	; (8009d48 <ESC_config+0xe8>)
 8009ca6:	4a2c      	ldr	r2, [pc, #176]	; (8009d58 <ESC_config+0xf8>)
 8009ca8:	331c      	adds	r3, #28
 8009caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cae:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7b1a      	ldrb	r2, [r3, #12]
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <ESC_config+0xe8>)
 8009cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	4a21      	ldr	r2, [pc, #132]	; (8009d48 <ESC_config+0xe8>)
 8009cc2:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	4a1f      	ldr	r2, [pc, #124]	; (8009d48 <ESC_config+0xe8>)
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <ESC_config+0xe8>)
 8009cd2:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	4a1b      	ldr	r2, [pc, #108]	; (8009d48 <ESC_config+0xe8>)
 8009cda:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	4a19      	ldr	r2, [pc, #100]	; (8009d48 <ESC_config+0xe8>)
 8009ce2:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <ESC_config+0xe8>)
 8009cea:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <ESC_config+0xe8>)
 8009cf2:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <ESC_config+0xe8>)
 8009cfa:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d00:	4a11      	ldr	r2, [pc, #68]	; (8009d48 <ESC_config+0xe8>)
 8009d02:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	4a0f      	ldr	r2, [pc, #60]	; (8009d48 <ESC_config+0xe8>)
 8009d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	4a0d      	ldr	r2, [pc, #52]	; (8009d48 <ESC_config+0xe8>)
 8009d12:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d18:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <ESC_config+0xe8>)
 8009d1a:	6553      	str	r3, [r2, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <ESC_config+0xe8>)
 8009d22:	6593      	str	r3, [r2, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d28:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <ESC_config+0xe8>)
 8009d2a:	65d3      	str	r3, [r2, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d30:	4a05      	ldr	r2, [pc, #20]	; (8009d48 <ESC_config+0xe8>)
 8009d32:	6613      	str	r3, [r2, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d38:	4a03      	ldr	r2, [pc, #12]	; (8009d48 <ESC_config+0xe8>)
 8009d3a:	6653      	str	r3, [r2, #100]	; 0x64
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	200008e8 	.word	0x200008e8
 8009d4c:	20000070 	.word	0x20000070
 8009d50:	20000078 	.word	0x20000078
 8009d54:	20000080 	.word	0x20000080
 8009d58:	20000088 	.word	0x20000088

08009d5c <esc_address>:
#define GPIO_ECAT_RESET    1 /* specific function to hold ESC reset on startup
                              * when emulating EEPROM
                              */

static void esc_address (uint16_t address, uint8_t command)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	4603      	mov	r3, r0
 8009d64:	460a      	mov	r2, r1
 8009d66:	80fb      	strh	r3, [r7, #6]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	717b      	strb	r3, [r7, #5]
    * We use 2 bytes addressing.
    */
   uint8_t data[2];

   /* address 12:5 */
   data[0] = (address >> 5);
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	733b      	strb	r3, [r7, #12]
   /* address 4:0 and cmd 2:0 */
   data[1] = ((address & 0x1F) << 3) | command;
 8009d76:	88fb      	ldrh	r3, [r7, #6]
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	b25a      	sxtb	r2, r3
 8009d7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	b25b      	sxtb	r3, r3
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	737b      	strb	r3, [r7, #13]

   /* Write (and read AL interrupt register) */
   HAL_SPI_TransmitReceive(&hspi2, data, (uint8_t *) &ESCvar.ALevent, sizeof (data), Timeout);
 8009d88:	2364      	movs	r3, #100	; 0x64
 8009d8a:	f107 010c 	add.w	r1, r7, #12
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	2302      	movs	r3, #2
 8009d92:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <esc_address+0x58>)
 8009d94:	4808      	ldr	r0, [pc, #32]	; (8009db8 <esc_address+0x5c>)
 8009d96:	f7fa f9a1 	bl	80040dc <HAL_SPI_TransmitReceive>

   ESCvar.ALevent = etohs (ESCvar.ALevent);
 8009d9a:	4b08      	ldr	r3, [pc, #32]	; (8009dbc <esc_address+0x60>)
 8009d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	461a      	mov	r2, r3
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <esc_address+0x60>)
 8009da6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200009d0 	.word	0x200009d0
 8009db8:	20000410 	.word	0x20000410
 8009dbc:	200008e8 	.word	0x200008e8

08009dc0 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	80fb      	strh	r3, [r7, #6]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	80bb      	strh	r3, [r7, #4]
    if (len > MAX_READ_SIZE) { return; }
 8009dd0:	88bb      	ldrh	r3, [r7, #4]
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d817      	bhi.n	8009e06 <ESC_read+0x46>

   /* Select device. */
   SELECT_SPI;
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ddc:	480c      	ldr	r0, [pc, #48]	; (8009e10 <ESC_read+0x50>)
 8009dde:	f7f9 f8d5 	bl	8002f8c <HAL_GPIO_WritePin>

   /* Write address and command to device. */
   esc_address (address, ESC_CMD_READ);
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	2102      	movs	r1, #2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff ffb8 	bl	8009d5c <esc_address>

   /* Here we want to read data and keep MOSI low (0x00) during
    * all bytes except the last one where we want to pull it high (0xFF).
    * Read (and write termination bytes).
    */
   HAL_SPI_Receive(&hspi2,  buf, len, Timeout);
 8009dec:	2364      	movs	r3, #100	; 0x64
 8009dee:	88ba      	ldrh	r2, [r7, #4]
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	4808      	ldr	r0, [pc, #32]	; (8009e14 <ESC_read+0x54>)
 8009df4:	f7fa f861 	bl	8003eba <HAL_SPI_Receive>
//   HAL_SPI_TransmitReceive(&hspi2, read_termination + (MAX_READ_SIZE - len), buf, len, Timeout);

   /* Un-select device. */
   DESELECT_SPI;
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009dfe:	4804      	ldr	r0, [pc, #16]	; (8009e10 <ESC_read+0x50>)
 8009e00:	f7f9 f8c4 	bl	8002f8c <HAL_GPIO_WritePin>
 8009e04:	e000      	b.n	8009e08 <ESC_read+0x48>
    if (len > MAX_READ_SIZE) { return; }
 8009e06:	bf00      	nop
}
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40020400 	.word	0x40020400
 8009e14:	20000410 	.word	0x20000410

08009e18 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	80fb      	strh	r3, [r7, #6]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80bb      	strh	r3, [r7, #4]
   /* Select device. */
	SELECT_SPI;
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e2e:	480c      	ldr	r0, [pc, #48]	; (8009e60 <ESC_write+0x48>)
 8009e30:	f7f9 f8ac 	bl	8002f8c <HAL_GPIO_WritePin>
   /* Write address and command to device. */
   esc_address (address, ESC_CMD_WRITE);
 8009e34:	88fb      	ldrh	r3, [r7, #6]
 8009e36:	2104      	movs	r1, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff8f 	bl	8009d5c <esc_address>
   /* Write data. */
   HAL_SPI_Transmit(&hspi2, buf , len, Timeout);
 8009e3e:	2364      	movs	r3, #100	; 0x64
 8009e40:	88ba      	ldrh	r2, [r7, #4]
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	4807      	ldr	r0, [pc, #28]	; (8009e64 <ESC_write+0x4c>)
 8009e46:	f7f9 fefc 	bl	8003c42 <HAL_SPI_Transmit>
   /* Un-select device. */
   DESELECT_SPI;
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e50:	4803      	ldr	r0, [pc, #12]	; (8009e60 <ESC_write+0x48>)
 8009e52:	f7f9 f89b 	bl	8002f8c <HAL_GPIO_WritePin>
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	40020400 	.word	0x40020400
 8009e64:	20000410 	.word	0x20000410

08009e68 <ESC_init>:
//   }
//   DPRINT("esc_reset_ended\n");
}

void ESC_init (const esc_cfg_t * config)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
//   rst_high();
//   spi_setup();
//   et1100 = 1;


   read_termination[MAX_READ_SIZE - 1] = 0xFF;
 8009e70:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <ESC_init+0x1c>)
 8009e72:	22ff      	movs	r2, #255	; 0xff
 8009e74:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
   //       DPRINT("ESC init successful");
   //    }
   // }
   // task_delay(1000); // allow ESC to load EEPROM, or if EEP_DONE can be read
   // then wait while EEP_DONE is low.
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	2000018c 	.word	0x2000018c

08009e88 <ESC_interrupt_enable>:
/** ESC interrupt enable function by the Slave stack in IRQ mode.
 *
 * @param[in]   mask     = of interrupts to enable
 */
void ESC_interrupt_enable (uint32_t mask)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
   // PDI interrupt
//   EXTILine3_Config();


	if (ESCREG_ALEVENT_DC_SYNC0 & mask)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f003 0304 	and.w	r3, r3, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <ESC_interrupt_enable+0x1a>
	{
//      EXTILine1_Config();
		mask &= ~ESCREG_ALEVENT_DC_SYNC0;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f023 0304 	bic.w	r3, r3, #4
 8009ea0:	607b      	str	r3, [r7, #4]
	}
	if (ESCREG_ALEVENT_DC_SYNC1 & mask)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <ESC_interrupt_enable+0x2c>
	{
		mask &= ~ESCREG_ALEVENT_DC_SYNC1;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f023 0308 	bic.w	r3, r3, #8
 8009eb2:	607b      	str	r3, [r7, #4]
	if (ESCREG_ALEVENT_DC_LATCH & mask)
	{
	//  mask &= ~ESCREG_ALEVENT_DC_LATCH;
	}

	ESC_ALeventmaskwrite(ESC_ALeventmaskread() | mask);
 8009eb4:	f7fe fcde 	bl	8008874 <ESC_ALeventmaskread>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe fcc6 	bl	8008850 <ESC_ALeventmaskwrite>
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <ESC_interrupt_disable>:
/** ESC interrupt disable function by the Slave stack in IRQ mode.
 *
 * @param[in]   mask     = interrupts to disable
 */
void ESC_interrupt_disable (uint32_t mask)
{
 8009ecc:	b590      	push	{r4, r7, lr}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
//   EXTILine3_Disable();
   if (ESCREG_ALEVENT_DC_SYNC0 & mask)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f003 0304 	and.w	r3, r3, #4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <ESC_interrupt_disable+0x1a>
   {
//      EXTILine1_Disable();
      mask &= ~ESCREG_ALEVENT_DC_SYNC0;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f023 0304 	bic.w	r3, r3, #4
 8009ee4:	607b      	str	r3, [r7, #4]
   }
   if (ESCREG_ALEVENT_DC_SYNC1 & mask)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <ESC_interrupt_disable+0x2c>
   {
       mask &= ~ESCREG_ALEVENT_DC_SYNC1;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f023 0308 	bic.w	r3, r3, #8
 8009ef6:	607b      	str	r3, [r7, #4]
   if (ESCREG_ALEVENT_DC_LATCH & mask)
   {
   //    mask &= ~ESCREG_ALEVENT_DC_LATCH;
   }

   ESC_ALeventmaskwrite(~mask & ESC_ALeventmaskread());
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	43dc      	mvns	r4, r3
 8009efc:	f7fe fcba 	bl	8008874 <ESC_ALeventmaskread>
 8009f00:	4603      	mov	r3, r0
 8009f02:	4023      	ands	r3, r4
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fca3 	bl	8008850 <ESC_ALeventmaskwrite>
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd90      	pop	{r4, r7, pc}
	...

08009f14 <ESC_enable_DC>:
/** ESC enable Distributed Clocks (DC)
 *
 * @return  SYNC0 cycle time
 */
uint32_t ESC_enable_DC ()
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
   uint8_t data = 0x00;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]

   // check DC Sync Out bit: 0x140:10
   ESC_read (ESCREG_ESC_CONFIG, &data, sizeof(data));
 8009f1e:	f107 030f 	add.w	r3, r7, #15
 8009f22:	2201      	movs	r2, #1
 8009f24:	4619      	mov	r1, r3
 8009f26:	f240 1041 	movw	r0, #321	; 0x141
 8009f2a:	f7ff ff49 	bl	8009dc0 <ESC_read>
   if (!(data & DC_SYNC_OUT))
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <ESC_enable_DC+0x28>
   {
      return 0; // DC sync is not enabled in ESI
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e055      	b.n	8009fe8 <ESC_enable_DC+0xd4>
   }

   // read set SYNC0 Cycle Time from 0x09A0
   uint32_t setsync0cycleTime = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60bb      	str	r3, [r7, #8]
   ESC_read (ESCREG_SYNC0_CYCLE_TIME, &setsync0cycleTime, sizeof(uint32_t));
 8009f40:	f107 0308 	add.w	r3, r7, #8
 8009f44:	2204      	movs	r2, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	f44f 601a 	mov.w	r0, #2464	; 0x9a0
 8009f4c:	f7ff ff38 	bl	8009dc0 <ESC_read>
   setsync0cycleTime = etohl (setsync0cycleTime);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	60bb      	str	r3, [r7, #8]

   // check Sync Unit assign 0x0980:0 ( 0 for ECAT, 1 for PDI )
   ESC_read (ESCREG_CYCLIC_UNIT_CONTROL, &data, sizeof(data));
 8009f54:	f107 030f 	add.w	r3, r7, #15
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8009f60:	f7ff ff2e 	bl	8009dc0 <ESC_read>
   if (data == SYNC_OUT_PDI_CONTROL) {
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d13d      	bne.n	8009fe6 <ESC_enable_DC+0xd2>
      // Sync Unit assigned to PDI, configuration needs to be finished by slave

      // set sync start time: read system time, add offset for writing start time and activation
      ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	4920      	ldr	r1, [pc, #128]	; (8009ff0 <ESC_enable_DC+0xdc>)
 8009f6e:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8009f72:	f7ff ff25 	bl	8009dc0 <ESC_read>
      ESCvar.Time = etohl (ESCvar.Time);
 8009f76:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <ESC_enable_DC+0xe0>)
 8009f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <ESC_enable_DC+0xe0>)
 8009f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
      uint32_t startTime = ESCvar.Time + SYNC_START_OFFSET;
 8009f82:	4b1c      	ldr	r3, [pc, #112]	; (8009ff4 <ESC_enable_DC+0xe0>)
 8009f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009f88:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <ESC_enable_DC+0xe4>)
 8009f8a:	4413      	add	r3, r2
 8009f8c:	607b      	str	r3, [r7, #4]

      ESC_write (ESCREG_SYNC_START_TIME, &startTime, sizeof(startTime));
 8009f8e:	1d3b      	adds	r3, r7, #4
 8009f90:	2204      	movs	r2, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	f44f 6019 	mov.w	r0, #2448	; 0x990
 8009f98:	f7ff ff3e 	bl	8009e18 <ESC_write>

      // activate cyclic operation and SYNC0
      ESC_read (ESCREG_SYNC_ACT, &data, sizeof(data));
 8009f9c:	f107 030f 	add.w	r3, r7, #15
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f640 1081 	movw	r0, #2433	; 0x981
 8009fa8:	f7ff ff0a 	bl	8009dc0 <ESC_read>
      data = data | ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_SYNC0_EN;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	f043 0303 	orr.w	r3, r3, #3
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	73fb      	strb	r3, [r7, #15]
      ESC_write (ESCREG_SYNC_ACT, &data, sizeof(data));
 8009fb6:	f107 030f 	add.w	r3, r7, #15
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	f640 1081 	movw	r0, #2433	; 0x981
 8009fc2:	f7ff ff29 	bl	8009e18 <ESC_write>
      data = 0x00;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
      while (! (data & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_SYNC0_EN))) {
 8009fca:	e007      	b.n	8009fdc <ESC_enable_DC+0xc8>
         ESC_read (ESCREG_SYNC_ACT, &data, sizeof(data));
 8009fcc:	f107 030f 	add.w	r3, r7, #15
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f640 1081 	movw	r0, #2433	; 0x981
 8009fd8:	f7ff fef2 	bl	8009dc0 <ESC_read>
      while (! (data & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_SYNC0_EN))) {
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0f2      	beq.n	8009fcc <ESC_enable_DC+0xb8>
      }
   }

   return setsync0cycleTime;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	200009c8 	.word	0x200009c8
 8009ff4:	200008e8 	.word	0x200008e8
 8009ff8:	0023bfb8 	.word	0x0023bfb8

08009ffc <__NVIC_EnableIRQ>:
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	db0b      	blt.n	800a026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	f003 021f 	and.w	r2, r3, #31
 800a014:	4907      	ldr	r1, [pc, #28]	; (800a034 <__NVIC_EnableIRQ+0x38>)
 800a016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	2001      	movs	r0, #1
 800a01e:	fa00 f202 	lsl.w	r2, r0, r2
 800a022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	e000e100 	.word	0xe000e100

0800a038 <__NVIC_DisableIRQ>:
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a046:	2b00      	cmp	r3, #0
 800a048:	db12      	blt.n	800a070 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a04a:	79fb      	ldrb	r3, [r7, #7]
 800a04c:	f003 021f 	and.w	r2, r3, #31
 800a050:	490a      	ldr	r1, [pc, #40]	; (800a07c <__NVIC_DisableIRQ+0x44>)
 800a052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	2001      	movs	r0, #1
 800a05a:	fa00 f202 	lsl.w	r2, r0, r2
 800a05e:	3320      	adds	r3, #32
 800a060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a064:	f3bf 8f4f 	dsb	sy
}
 800a068:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a06a:	f3bf 8f6f 	isb	sy
}
 800a06e:	bf00      	nop
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	e000e100 	.word	0xe000e100

0800a080 <TIM2_IRQHandler>:
#endif

#if _STM32_IO8 && ECAT_TIMER_INT
// Timer 2 ISR (0.1ms)
void TimerIsr(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
	DISABLE_ESC_INT();
 800a084:	2017      	movs	r0, #23
 800a086:	f7ff ffd7 	bl	800a038 <__NVIC_DisableIRQ>

	ECAT_CheckTimer();
 800a08a:	f000 f80d 	bl	800a0a8 <ECAT_CheckTimer>

	ECAT_TIMER_ACK_INT;
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <TIM2_IRQHandler+0x24>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f06f 0201 	mvn.w	r2, #1
 800a096:	611a      	str	r2, [r3, #16]

	ENABLE_ESC_INT();
 800a098:	2017      	movs	r0, #23
 800a09a:	f7ff ffaf 	bl	8009ffc <__NVIC_EnableIRQ>
}
 800a09e:	bf00      	nop
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	200006bc 	.word	0x200006bc

0800a0a8 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <ECAT_CheckTimer+0x44>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d105      	bne.n	800a0c0 <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <ECAT_CheckTimer+0x48>)
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <ECAT_CheckTimer+0x48>)
 800a0be:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <ECAT_CheckTimer+0x4c>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00d      	beq.n	800a0e4 <ECAT_CheckTimer+0x3c>
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <ECAT_CheckTimer+0x50>)
 800a0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dd08      	ble.n	800a0e4 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 800a0d2:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <ECAT_CheckTimer+0x50>)
 800a0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	b21a      	sxth	r2, r3
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <ECAT_CheckTimer+0x50>)
 800a0e2:	801a      	strh	r2, [r3, #0]
    }



     DC_CheckWatchdog();
 800a0e4:	f000 f80a 	bl	800a0fc <DC_CheckWatchdog>
}
 800a0e8:	bf00      	nop
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20000ebc 	.word	0x20000ebc
 800a0f0:	20000e2c 	.word	0x20000e2c
 800a0f4:	20000e5a 	.word	0x20000e5a
 800a0f8:	20000e64 	.word	0x20000e64

0800a0fc <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
    if(bDcSyncActive)
 800a100:	4b3a      	ldr	r3, [pc, #232]	; (800a1ec <DC_CheckWatchdog+0xf0>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d06b      	beq.n	800a1e0 <DC_CheckWatchdog+0xe4>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 800a108:	4b39      	ldr	r3, [pc, #228]	; (800a1f0 <DC_CheckWatchdog+0xf4>)
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d009      	beq.n	800a124 <DC_CheckWatchdog+0x28>
 800a110:	4b38      	ldr	r3, [pc, #224]	; (800a1f4 <DC_CheckWatchdog+0xf8>)
 800a112:	881a      	ldrh	r2, [r3, #0]
 800a114:	4b36      	ldr	r3, [pc, #216]	; (800a1f0 <DC_CheckWatchdog+0xf4>)
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d303      	bcc.n	800a124 <DC_CheckWatchdog+0x28>
        {
                /*Sync0 watchdog expired*/

					bDcRunning = FALSE;        
 800a11c:	4b36      	ldr	r3, [pc, #216]	; (800a1f8 <DC_CheckWatchdog+0xfc>)
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	e00e      	b.n	800a142 <DC_CheckWatchdog+0x46>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 800a124:	4b33      	ldr	r3, [pc, #204]	; (800a1f4 <DC_CheckWatchdog+0xf8>)
 800a126:	881a      	ldrh	r2, [r3, #0]
 800a128:	4b31      	ldr	r3, [pc, #196]	; (800a1f0 <DC_CheckWatchdog+0xf4>)
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d205      	bcs.n	800a13c <DC_CheckWatchdog+0x40>
            {
                Sync0WdCounter ++;
 800a130:	4b30      	ldr	r3, [pc, #192]	; (800a1f4 <DC_CheckWatchdog+0xf8>)
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <DC_CheckWatchdog+0xf8>)
 800a13a:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 800a13c:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <DC_CheckWatchdog+0xfc>)
 800a13e:	2201      	movs	r2, #1
 800a140:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 800a142:	4b2d      	ldr	r3, [pc, #180]	; (800a1f8 <DC_CheckWatchdog+0xfc>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d013      	beq.n	800a172 <DC_CheckWatchdog+0x76>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 800a14a:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <DC_CheckWatchdog+0x100>)
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <DC_CheckWatchdog+0x76>
            {
                if(Sync1WdCounter < Sync1WdValue)
 800a152:	4b2b      	ldr	r3, [pc, #172]	; (800a200 <DC_CheckWatchdog+0x104>)
 800a154:	881a      	ldrh	r2, [r3, #0]
 800a156:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <DC_CheckWatchdog+0x100>)
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d206      	bcs.n	800a16c <DC_CheckWatchdog+0x70>
                {
                    Sync1WdCounter ++;
 800a15e:	4b28      	ldr	r3, [pc, #160]	; (800a200 <DC_CheckWatchdog+0x104>)
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	4b26      	ldr	r3, [pc, #152]	; (800a200 <DC_CheckWatchdog+0x104>)
 800a168:	801a      	strh	r2, [r3, #0]
 800a16a:	e002      	b.n	800a172 <DC_CheckWatchdog+0x76>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 800a16c:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <DC_CheckWatchdog+0xfc>)
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 800a172:	4b21      	ldr	r3, [pc, #132]	; (800a1f8 <DC_CheckWatchdog+0xfc>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d02b      	beq.n	800a1d2 <DC_CheckWatchdog+0xd6>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 800a17a:	4b22      	ldr	r3, [pc, #136]	; (800a204 <DC_CheckWatchdog+0x108>)
 800a17c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a17e:	4b22      	ldr	r3, [pc, #136]	; (800a208 <DC_CheckWatchdog+0x10c>)
 800a180:	891b      	ldrh	r3, [r3, #8]
 800a182:	429a      	cmp	r2, r3
 800a184:	d211      	bcs.n	800a1aa <DC_CheckWatchdog+0xae>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 800a186:	4b21      	ldr	r3, [pc, #132]	; (800a20c <DC_CheckWatchdog+0x110>)
 800a188:	2201      	movs	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 800a18c:	4b20      	ldr	r3, [pc, #128]	; (800a210 <DC_CheckWatchdog+0x114>)
 800a18e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dd24      	ble.n	800a1e0 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt++;
 800a196:	4b1f      	ldr	r3, [pc, #124]	; (800a214 <DC_CheckWatchdog+0x118>)
 800a198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	b21a      	sxth	r2, r3
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <DC_CheckWatchdog+0x118>)
 800a1a6:	801a      	strh	r2, [r3, #0]
        {
            bSmSyncSequenceValid = FALSE;
        }

    }
}
 800a1a8:	e01a      	b.n	800a1e0 <DC_CheckWatchdog+0xe4>
            else if(bSmSyncSequenceValid)
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <DC_CheckWatchdog+0x110>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d016      	beq.n	800a1e0 <DC_CheckWatchdog+0xe4>
                bSmSyncSequenceValid = FALSE;
 800a1b2:	4b16      	ldr	r3, [pc, #88]	; (800a20c <DC_CheckWatchdog+0x110>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 800a1b8:	4b12      	ldr	r3, [pc, #72]	; (800a204 <DC_CheckWatchdog+0x108>)
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                if(i16WaitForPllRunningTimeout > 0)
 800a1c0:	4b13      	ldr	r3, [pc, #76]	; (800a210 <DC_CheckWatchdog+0x114>)
 800a1c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	dd0a      	ble.n	800a1e0 <DC_CheckWatchdog+0xe4>
                    i16WaitForPllRunningCnt = 0;
 800a1ca:	4b12      	ldr	r3, [pc, #72]	; (800a214 <DC_CheckWatchdog+0x118>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	801a      	strh	r2, [r3, #0]
}
 800a1d0:	e006      	b.n	800a1e0 <DC_CheckWatchdog+0xe4>
        else if(bSmSyncSequenceValid)
 800a1d2:	4b0e      	ldr	r3, [pc, #56]	; (800a20c <DC_CheckWatchdog+0x110>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <DC_CheckWatchdog+0xe4>
            bSmSyncSequenceValid = FALSE;
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <DC_CheckWatchdog+0x110>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000e66 	.word	0x20000e66
 800a1f0:	20000e46 	.word	0x20000e46
 800a1f4:	20000e3a 	.word	0x20000e3a
 800a1f8:	20000e4e 	.word	0x20000e4e
 800a1fc:	20000e4a 	.word	0x20000e4a
 800a200:	20000e68 	.word	0x20000e68
 800a204:	20000ebc 	.word	0x20000ebc
 800a208:	20000090 	.word	0x20000090
 800a20c:	20000e63 	.word	0x20000e63
 800a210:	20000e48 	.word	0x20000e48
 800a214:	20000e42 	.word	0x20000e42

0800a218 <_ZN4Port4EXIT10EnableExitEv>:
			~EXIT(){}

			inline void ClearPendingBits() 	{__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin_);	}
			inline void ClearPendingFlags() {__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_Pin_);	}
			inline void DisableExit() 		{HAL_NVIC_DisableIRQ(EXTIx_IRQn_);		}
			inline void EnableExit()  		{HAL_NVIC_EnableIRQ(EXTIx_IRQn_);		}
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a226:	4618      	mov	r0, r3
 800a228:	f7f8 f919 	bl	800245e <HAL_NVIC_EnableIRQ>
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <_ZN6ET1100C1ERN4Port7SPICommERNS0_2CSERNS0_4EXITES6_S6_RNS0_3TIMERNS0_4GPIOE>:

#include <drivers/et1100.h>

ET1100::ET1100(
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
  cs_(cs),
  spiIrq_(spiIrq),
  sync0_(sync0),
  sync1_(sync1),
  tim_(tim),
  eepromLoaded_(eepromLoaded)
 800a242:	4a14      	ldr	r2, [pc, #80]	; (800a294 <_ZN6ET1100C1ERN4Port7SPICommERNS0_2CSERNS0_4EXITES6_S6_RNS0_3TIMERNS0_4GPIOE+0x60>)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	605a      	str	r2, [r3, #4]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	609a      	str	r2, [r3, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	60da      	str	r2, [r3, #12]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	611a      	str	r2, [r3, #16]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	615a      	str	r2, [r3, #20]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a3a      	ldr	r2, [r7, #32]
 800a26a:	619a      	str	r2, [r3, #24]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	61da      	str	r2, [r3, #28]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3322      	adds	r3, #34	; 0x22
 800a276:	2280      	movs	r2, #128	; 0x80
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fc2a 	bl	800aad4 <memset>
{
	read_termination_[MAX_READ_SIZE - 1] = 0xFF;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	22ff      	movs	r2, #255	; 0xff
 800a284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	0800c830 	.word	0x0800c830

0800a298 <_ZN6ET1100D1Ev>:

ET1100::~ET1100(){}
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <_ZN6ET1100D1Ev+0x1c>)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	0800c830 	.word	0x0800c830

0800a2b8 <_ZN6ET1100D0Ev>:
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff ffe9 	bl	800a298 <_ZN6ET1100D1Ev>
 800a2c6:	21a4      	movs	r1, #164	; 0xa4
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fb61 	bl	800a990 <_ZdlPvj>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <MainCpp>:
extern ADC_HandleTypeDef hadc2;
extern DAC_HandleTypeDef hdac;


void MainCpp()
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start_IT(&htim2);	// 2000 Hz

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1Data, 1);
 800a2dc:	2201      	movs	r2, #1
 800a2de:	490b      	ldr	r1, [pc, #44]	; (800a30c <MainCpp+0x34>)
 800a2e0:	480b      	ldr	r0, [pc, #44]	; (800a310 <MainCpp+0x38>)
 800a2e2:	f7f7 fafb 	bl	80018dc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc2Data, 1);
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	490a      	ldr	r1, [pc, #40]	; (800a314 <MainCpp+0x3c>)
 800a2ea:	480b      	ldr	r0, [pc, #44]	; (800a318 <MainCpp+0x40>)
 800a2ec:	f7f7 faf6 	bl	80018dc <HAL_ADC_Start_DMA>
//	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &dacData[0], 1, DAC_ALIGN_12B_R);
//	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, &dacData[1], 1, DAC_ALIGN_12B_R);

//	MainEtherCAT();

	ecatapp_init();
 800a2f0:	f7fa ff12 	bl	8005118 <ecatapp_init>

	sync0_exitGpio.EnableExit();
 800a2f4:	4809      	ldr	r0, [pc, #36]	; (800a31c <MainCpp+0x44>)
 800a2f6:	f7ff ff8f 	bl	800a218 <_ZN4Port4EXIT10EnableExitEv>
	sync1_exitGpio.EnableExit();
 800a2fa:	4809      	ldr	r0, [pc, #36]	; (800a320 <MainCpp+0x48>)
 800a2fc:	f7ff ff8c 	bl	800a218 <_ZN4Port4EXIT10EnableExitEv>
	spi2_irq.EnableExit();
 800a300:	4808      	ldr	r0, [pc, #32]	; (800a324 <MainCpp+0x4c>)
 800a302:	f7ff ff89 	bl	800a218 <_ZN4Port4EXIT10EnableExitEv>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);

	for(;;)
	{

		ecatapp_loop();
 800a306:	f7fa fff5 	bl	80052f4 <ecatapp_loop>
 800a30a:	e7fc      	b.n	800a306 <MainCpp+0x2e>
 800a30c:	2000020c 	.word	0x2000020c
 800a310:	20000564 	.word	0x20000564
 800a314:	20000210 	.word	0x20000210
 800a318:	20000468 	.word	0x20000468
 800a31c:	20000280 	.word	0x20000280
 800a320:	20000288 	.word	0x20000288
 800a324:	20000278 	.word	0x20000278

0800a328 <_ZN4Port3TIMC1EP17TIM_HandleTypeDef>:
			TIM(TIM_HandleTypeDef *htim):htim_(htim){}
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	4a06      	ldr	r2, [pc, #24]	; (800a34c <_ZN4Port3TIMC1EP17TIM_HandleTypeDef+0x24>)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	0800c850 	.word	0x0800c850

0800a350 <_ZN4Port3TIMD1Ev>:
			~TIM(){}
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	4a04      	ldr	r2, [pc, #16]	; (800a36c <_ZN4Port3TIMD1Ev+0x1c>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	0800c850 	.word	0x0800c850

0800a370 <_ZN4Port3TIM5StartEv>:
			virtual inline void Start() 		{HAL_TIM_Base_Start(htim_);}
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fa f9cf 	bl	8004720 <HAL_TIM_Base_Start>
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>:
			SPIComm(SPI_HandleTypeDef *hspi):hspi_(hspi){}
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2264      	movs	r2, #100	; 0x64
 800a39e:	605a      	str	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <_ZN4Port7SPICommD1Ev>:
			~SPIComm(){}
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>:
			GPIO(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin):GPIOx_(GPIOx),GPIO_Pin_(GPIO_Pin){}
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80fb      	strh	r3, [r7, #6]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	88fa      	ldrh	r2, [r7, #6]
 800a3dc:	809a      	strh	r2, [r3, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <_ZN4Port4GPIOD1Ev>:
			~GPIO(){}
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>:
			EXIT(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, IRQn_Type EXTIx_IRQn)
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	4611      	mov	r1, r2
 800a40e:	461a      	mov	r2, r3
 800a410:	460b      	mov	r3, r1
 800a412:	80fb      	strh	r3, [r7, #6]
 800a414:	4613      	mov	r3, r2
 800a416:	717b      	strb	r3, [r7, #5]
			:GPIO::GPIO(GPIOx,GPIO_Pin),EXTIx_IRQn_(EXTIx_IRQn){}
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff ffd0 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	797a      	ldrb	r2, [r7, #5]
 800a428:	719a      	strb	r2, [r3, #6]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_ZN4Port4EXITD1Ev>:
			~EXIT(){}
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff ffd4 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <_ZN4Port2CSC1EP12GPIO_TypeDefth>:
	};

	class CS:GPIO
	{
		public:
			CS(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,uint8_t polarity):GPIO(GPIOx,GPIO_Pin),polarity_(polarity){}
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	4611      	mov	r1, r2
 800a45a:	461a      	mov	r2, r3
 800a45c:	460b      	mov	r3, r1
 800a45e:	80fb      	strh	r3, [r7, #6]
 800a460:	4613      	mov	r3, r2
 800a462:	717b      	strb	r3, [r7, #5]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff ffaa 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	797a      	ldrb	r2, [r7, #5]
 800a474:	719a      	strb	r2, [r3, #6]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <_ZN4Port2CSD1Ev>:
			~CS(){}
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff ffae 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>:
	#define TX_CQUEUE_BUFFER_LENGTH 64

	class UartCom
	{
		public:
			UartCom(UART_HandleTypeDef *huart,
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
 800a4a6:	603b      	str	r3, [r7, #0]
		)
			:huart_(huart),
			 txBufLen_(txBufLen),
			 rxBufLen_(rxBufLen),
			 txCQueue_(txCQueueBufLen),
			 rxCQueue_(rxCQueueBufLen)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	605a      	str	r2, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	609a      	str	r2, [r3, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3314      	adds	r3, #20
 800a4be:	2200      	movs	r2, #0
 800a4c0:	69b9      	ldr	r1, [r7, #24]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 f9f0 	bl	800a8a8 <_ZN8CQueueNS6CQueueC1EmPh>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3330      	adds	r3, #48	; 0x30
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	69f9      	ldr	r1, [r7, #28]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f9e9 	bl	800a8a8 <_ZN8CQueueNS6CQueueC1EmPh>
			{
				pTxBuf_ 		= new uint8_t [txBufLen_];
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fa5c 	bl	800a998 <_Znaj>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	60da      	str	r2, [r3, #12]
				pRxBuf_ 		= new uint8_t [rxBufLen_];
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fa53 	bl	800a998 <_Znaj>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	611a      	str	r2, [r3, #16]

			}
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <_ZN4Port7UartComD1Ev>:
			~UartCom()
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
			{
				delete [] pTxBuf_;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <_ZN4Port7UartComD1Ev+0x1a>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fa3b 	bl	800a994 <_ZdaPv>
				delete [] pRxBuf_;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <_ZN4Port7UartComD1Ev+0x2c>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fa32 	bl	800a994 <_ZdaPv>
			{
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3330      	adds	r3, #48	; 0x30
 800a534:	4618      	mov	r0, r3
 800a536:	f000 f9ff 	bl	800a938 <_ZN8CQueueNS6CQueueD1Ev>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3314      	adds	r3, #20
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f9fa 	bl	800a938 <_ZN8CQueueNS6CQueueD1Ev>
			}
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>:
	 * PB8,  PB9 	---> 	CAN1, FIFO1
	 */
	class CANComm
	{
		public:
			CANComm(CAN_HandleTypeDef *hcan, uint32_t rxFifo):hcan_(hcan),rxFifo_(rxFifo){}
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	4a07      	ldr	r2, [pc, #28]	; (800a57c <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm+0x2c>)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	0800c840 	.word	0x0800c840

0800a580 <_ZN4Port7CANCommD1Ev>:
			virtual ~CANComm(){}
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	4a04      	ldr	r2, [pc, #16]	; (800a59c <_ZN4Port7CANCommD1Ev+0x1c>)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	0800c840 	.word	0x0800c840

0800a5a0 <_ZN4Port7CANCommD0Ev>:
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff ffe9 	bl	800a580 <_ZN4Port7CANCommD1Ev>
 800a5ae:	2140      	movs	r1, #64	; 0x40
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f9ed 	bl	800a990 <_ZdlPvj>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <_Z41__static_initialization_and_destruction_0ii>:
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);



ET1100 et1100(et1100_spi, et1100_cs, spi2_irq, sync0_exitGpio, sync1_exitGpio, ethercat_tim, eeprom_loaded_gpio);
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af04      	add	r7, sp, #16
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	f040 80aa 	bne.w	800a726 <_Z41__static_initialization_and_destruction_0ii+0x166>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	f040 80a4 	bne.w	800a726 <_Z41__static_initialization_and_destruction_0ii+0x166>
Port::UartCom		uart2rs485(H_UART_RS485);
 800a5de:	2340      	movs	r3, #64	; 0x40
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	2340      	movs	r3, #64	; 0x40
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	2311      	movs	r3, #17
 800a5e8:	2211      	movs	r2, #17
 800a5ea:	497d      	ldr	r1, [pc, #500]	; (800a7e0 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800a5ec:	487d      	ldr	r0, [pc, #500]	; (800a7e4 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800a5ee:	f7ff ff54 	bl	800a49a <_ZN4Port7UartComC1EP20__UART_HandleTypeDefmmmm>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800a5f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a5f6:	497c      	ldr	r1, [pc, #496]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a5f8:	487c      	ldr	r0, [pc, #496]	; (800a7ec <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800a5fa:	f7ff fee3 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800a5fe:	497c      	ldr	r1, [pc, #496]	; (800a7f0 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800a600:	487c      	ldr	r0, [pc, #496]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800a602:	f7ff fec2 	bl	800a38a <_ZN4Port7SPICommC1EP19__SPI_HandleTypeDef>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800a606:	2300      	movs	r3, #0
 800a608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a60c:	497a      	ldr	r1, [pc, #488]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a60e:	487b      	ldr	r0, [pc, #492]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800a610:	f7ff ff1d 	bl	800a44e <_ZN4Port2CSC1EP12GPIO_TypeDefth>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800a614:	2317      	movs	r3, #23
 800a616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a61a:	4979      	ldr	r1, [pc, #484]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800a61c:	4879      	ldr	r0, [pc, #484]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a61e:	f7ff fef0 	bl	800a402 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800a622:	2306      	movs	r3, #6
 800a624:	2201      	movs	r2, #1
 800a626:	4976      	ldr	r1, [pc, #472]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800a628:	4877      	ldr	r0, [pc, #476]	; (800a808 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a62a:	f7ff feea 	bl	800a402 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800a62e:	2307      	movs	r3, #7
 800a630:	2202      	movs	r2, #2
 800a632:	4973      	ldr	r1, [pc, #460]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800a634:	4875      	ldr	r0, [pc, #468]	; (800a80c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a636:	f7ff fee4 	bl	800a402 <_ZN4Port4EXITC1EP12GPIO_TypeDeft9IRQn_Type>
Port::TIM			ethercat_tim(H_TIM2);
 800a63a:	4975      	ldr	r1, [pc, #468]	; (800a810 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a63c:	4875      	ldr	r0, [pc, #468]	; (800a814 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a63e:	f7ff fe73 	bl	800a328 <_ZN4Port3TIMC1EP17TIM_HandleTypeDef>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800a642:	2204      	movs	r2, #4
 800a644:	4974      	ldr	r1, [pc, #464]	; (800a818 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a646:	4875      	ldr	r0, [pc, #468]	; (800a81c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800a648:	f7ff febc 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800a64c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a650:	4969      	ldr	r1, [pc, #420]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a652:	4873      	ldr	r0, [pc, #460]	; (800a820 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800a654:	f7ff feb6 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800a658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a65c:	4966      	ldr	r1, [pc, #408]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a65e:	4871      	ldr	r0, [pc, #452]	; (800a824 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800a660:	f7ff feb0 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800a664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a668:	4963      	ldr	r1, [pc, #396]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a66a:	486f      	ldr	r0, [pc, #444]	; (800a828 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800a66c:	f7ff feaa 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800a670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a674:	4960      	ldr	r1, [pc, #384]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a676:	486d      	ldr	r0, [pc, #436]	; (800a82c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800a678:	f7ff fea4 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800a67c:	2202      	movs	r2, #2
 800a67e:	495e      	ldr	r1, [pc, #376]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a680:	486b      	ldr	r0, [pc, #428]	; (800a830 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 800a682:	f7ff fe9f 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800a686:	2201      	movs	r2, #1
 800a688:	495b      	ldr	r1, [pc, #364]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a68a:	486a      	ldr	r0, [pc, #424]	; (800a834 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800a68c:	f7ff fe9a 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800a690:	2220      	movs	r2, #32
 800a692:	4955      	ldr	r1, [pc, #340]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a694:	4868      	ldr	r0, [pc, #416]	; (800a838 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800a696:	f7ff fe95 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800a69a:	2210      	movs	r2, #16
 800a69c:	4952      	ldr	r1, [pc, #328]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a69e:	4867      	ldr	r0, [pc, #412]	; (800a83c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800a6a0:	f7ff fe90 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	4966      	ldr	r1, [pc, #408]	; (800a840 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800a6a8:	4866      	ldr	r0, [pc, #408]	; (800a844 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800a6aa:	f7ff ff51 	bl	800a550 <_ZN4Port7CANCommC1EP19__CAN_HandleTypeDefm>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800a6ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6b2:	494d      	ldr	r1, [pc, #308]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6b4:	4864      	ldr	r0, [pc, #400]	; (800a848 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 800a6b6:	f7ff fe85 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800a6ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6be:	494a      	ldr	r1, [pc, #296]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6c0:	4862      	ldr	r0, [pc, #392]	; (800a84c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800a6c2:	f7ff fe7f 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800a6c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6ca:	4947      	ldr	r1, [pc, #284]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6cc:	4860      	ldr	r0, [pc, #384]	; (800a850 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 800a6ce:	f7ff fe79 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800a6d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6d6:	4944      	ldr	r1, [pc, #272]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6d8:	485e      	ldr	r0, [pc, #376]	; (800a854 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 800a6da:	f7ff fe73 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800a6de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6e2:	4941      	ldr	r1, [pc, #260]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6e4:	485c      	ldr	r0, [pc, #368]	; (800a858 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800a6e6:	f7ff fe6d 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800a6ea:	2280      	movs	r2, #128	; 0x80
 800a6ec:	493e      	ldr	r1, [pc, #248]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6ee:	485b      	ldr	r0, [pc, #364]	; (800a85c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800a6f0:	f7ff fe68 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800a6f4:	2240      	movs	r2, #64	; 0x40
 800a6f6:	493c      	ldr	r1, [pc, #240]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800a6f8:	4859      	ldr	r0, [pc, #356]	; (800a860 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800a6fa:	f7ff fe63 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800a6fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a702:	493d      	ldr	r1, [pc, #244]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800a704:	4857      	ldr	r0, [pc, #348]	; (800a864 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800a706:	f7ff fe5d 	bl	800a3c4 <_ZN4Port4GPIOC1EP12GPIO_TypeDeft>
ET1100 et1100(et1100_spi, et1100_cs, spi2_irq, sync0_exitGpio, sync1_exitGpio, ethercat_tim, eeprom_loaded_gpio);
 800a70a:	4b44      	ldr	r3, [pc, #272]	; (800a81c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	4b41      	ldr	r3, [pc, #260]	; (800a814 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a710:	9302      	str	r3, [sp, #8]
 800a712:	4b3e      	ldr	r3, [pc, #248]	; (800a80c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	4b3c      	ldr	r3, [pc, #240]	; (800a808 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a71c:	4a37      	ldr	r2, [pc, #220]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800a71e:	4935      	ldr	r1, [pc, #212]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800a720:	4851      	ldr	r0, [pc, #324]	; (800a868 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800a722:	f7ff fd87 	bl	800a234 <_ZN6ET1100C1ERN4Port7SPICommERNS0_2CSERNS0_4EXITES6_S6_RNS0_3TIMERNS0_4GPIOE>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d155      	bne.n	800a7d8 <_Z41__static_initialization_and_destruction_0ii+0x218>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a732:	4293      	cmp	r3, r2
 800a734:	d150      	bne.n	800a7d8 <_Z41__static_initialization_and_destruction_0ii+0x218>
 800a736:	484c      	ldr	r0, [pc, #304]	; (800a868 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800a738:	f7ff fdae 	bl	800a298 <_ZN6ET1100D1Ev>
Port::GPIO			in7_gpio(H_GPIOx_IN7, H_GPIO_PIN_IN7);
 800a73c:	4849      	ldr	r0, [pc, #292]	; (800a864 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800a73e:	f7ff fe55 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in6_gpio(H_GPIOx_IN6, H_GPIO_PIN_IN6);
 800a742:	4847      	ldr	r0, [pc, #284]	; (800a860 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800a744:	f7ff fe52 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in5_gpio(H_GPIOx_IN5, H_GPIO_PIN_IN5);
 800a748:	4844      	ldr	r0, [pc, #272]	; (800a85c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800a74a:	f7ff fe4f 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in4_gpio(H_GPIOx_IN4, H_GPIO_PIN_IN4);
 800a74e:	4842      	ldr	r0, [pc, #264]	; (800a858 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800a750:	f7ff fe4c 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in3_gpio(H_GPIOx_IN3, H_GPIO_PIN_IN3);
 800a754:	483f      	ldr	r0, [pc, #252]	; (800a854 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 800a756:	f7ff fe49 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in2_gpio(H_GPIOx_IN2, H_GPIO_PIN_IN2);
 800a75a:	483d      	ldr	r0, [pc, #244]	; (800a850 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 800a75c:	f7ff fe46 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in1_gpio(H_GPIOx_IN1, H_GPIO_PIN_IN1);
 800a760:	483a      	ldr	r0, [pc, #232]	; (800a84c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800a762:	f7ff fe43 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			in0_gpio(H_GPIOx_IN0, H_GPIO_PIN_IN0);
 800a766:	4838      	ldr	r0, [pc, #224]	; (800a848 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 800a768:	f7ff fe40 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::CANComm		can2PC(H_CAN_Com2PC, CAN_RX_FIFO1);
 800a76c:	4835      	ldr	r0, [pc, #212]	; (800a844 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800a76e:	f7ff ff07 	bl	800a580 <_ZN4Port7CANCommD1Ev>
Port::GPIO			led7_gpio(H_GPIOx_LED7, H_GPIO_PIN_LED7);
 800a772:	4832      	ldr	r0, [pc, #200]	; (800a83c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800a774:	f7ff fe3a 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led6_gpio(H_GPIOx_LED6, H_GPIO_PIN_LED6);
 800a778:	482f      	ldr	r0, [pc, #188]	; (800a838 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800a77a:	f7ff fe37 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led5_gpio(H_GPIOx_LED5, H_GPIO_PIN_LED5);
 800a77e:	482d      	ldr	r0, [pc, #180]	; (800a834 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800a780:	f7ff fe34 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led4_gpio(H_GPIOx_LED4, H_GPIO_PIN_LED4);
 800a784:	482a      	ldr	r0, [pc, #168]	; (800a830 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 800a786:	f7ff fe31 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led3_gpio(H_GPIOx_LED3, H_GPIO_PIN_LED3);
 800a78a:	4828      	ldr	r0, [pc, #160]	; (800a82c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800a78c:	f7ff fe2e 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led2_gpio(H_GPIOx_LED2, H_GPIO_PIN_LED2);
 800a790:	4825      	ldr	r0, [pc, #148]	; (800a828 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800a792:	f7ff fe2b 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led1_gpio(H_GPIOx_LED1, H_GPIO_PIN_LED1);
 800a796:	4823      	ldr	r0, [pc, #140]	; (800a824 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800a798:	f7ff fe28 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			led0_gpio(H_GPIOx_LED0, H_GPIO_PIN_LED0);
 800a79c:	4820      	ldr	r0, [pc, #128]	; (800a820 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800a79e:	f7ff fe25 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::GPIO			eeprom_loaded_gpio(H_GPIOx_EEPROM_LOADED, H_GPIO_PIN_EEPROM_LOADED);
 800a7a2:	481e      	ldr	r0, [pc, #120]	; (800a81c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800a7a4:	f7ff fe22 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::TIM			ethercat_tim(H_TIM2);
 800a7a8:	481a      	ldr	r0, [pc, #104]	; (800a814 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a7aa:	f7ff fdd1 	bl	800a350 <_ZN4Port3TIMD1Ev>
Port::EXIT			sync1_exitGpio(H_GPIOx_SYNC1, H_GPIO_PIN_SYNC1, EXTI1_IRQn);
 800a7ae:	4817      	ldr	r0, [pc, #92]	; (800a80c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a7b0:	f7ff fe40 	bl	800a434 <_ZN4Port4EXITD1Ev>
Port::EXIT			sync0_exitGpio(H_GPIOx_SYNC0, H_GPIO_PIN_SYNC0, EXTI0_IRQn);
 800a7b4:	4814      	ldr	r0, [pc, #80]	; (800a808 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a7b6:	f7ff fe3d 	bl	800a434 <_ZN4Port4EXITD1Ev>
Port::EXIT			spi2_irq(H_GPIOx_SPI2_IRQ, H_GPIO_PIN_SPI2_IRQ, EXTI9_5_IRQn);
 800a7ba:	4812      	ldr	r0, [pc, #72]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a7bc:	f7ff fe3a 	bl	800a434 <_ZN4Port4EXITD1Ev>
Port::CS			et1100_cs(H_GPIOx_ET1100_SPI_NSS, H_GPIO_PIN_ET1100_SPI_NSS, 0);
 800a7c0:	480e      	ldr	r0, [pc, #56]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800a7c2:	f7ff fe5d 	bl	800a480 <_ZN4Port2CSD1Ev>
Port::SPIComm		et1100_spi(H_SPI_ET1100);
 800a7c6:	480b      	ldr	r0, [pc, #44]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800a7c8:	f7ff fdf1 	bl	800a3ae <_ZN4Port7SPICommD1Ev>
Port::GPIO			rs485_dir_gpio(H_GPIOx_RS485_DIR, H_GPIO_PIN_RS485_DIR);
 800a7cc:	4807      	ldr	r0, [pc, #28]	; (800a7ec <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800a7ce:	f7ff fe0d 	bl	800a3ec <_ZN4Port4GPIOD1Ev>
Port::UartCom		uart2rs485(H_UART_RS485);
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800a7d4:	f7ff fe96 	bl	800a504 <_ZN4Port7UartComD1Ev>
ET1100 et1100(et1100_spi, et1100_cs, spi2_irq, sync0_exitGpio, sync1_exitGpio, ethercat_tim, eeprom_loaded_gpio);
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	200005ac 	.word	0x200005ac
 800a7e4:	20000214 	.word	0x20000214
 800a7e8:	40020800 	.word	0x40020800
 800a7ec:	20000260 	.word	0x20000260
 800a7f0:	20000410 	.word	0x20000410
 800a7f4:	20000268 	.word	0x20000268
 800a7f8:	40020400 	.word	0x40020400
 800a7fc:	20000270 	.word	0x20000270
 800a800:	40020000 	.word	0x40020000
 800a804:	20000278 	.word	0x20000278
 800a808:	20000280 	.word	0x20000280
 800a80c:	20000288 	.word	0x20000288
 800a810:	200006bc 	.word	0x200006bc
 800a814:	20000290 	.word	0x20000290
 800a818:	40020c00 	.word	0x40020c00
 800a81c:	20000298 	.word	0x20000298
 800a820:	200002a0 	.word	0x200002a0
 800a824:	200002a8 	.word	0x200002a8
 800a828:	200002b0 	.word	0x200002b0
 800a82c:	200002b8 	.word	0x200002b8
 800a830:	200002c0 	.word	0x200002c0
 800a834:	200002c8 	.word	0x200002c8
 800a838:	200002d0 	.word	0x200002d0
 800a83c:	200002d8 	.word	0x200002d8
 800a840:	200007a8 	.word	0x200007a8
 800a844:	200002e0 	.word	0x200002e0
 800a848:	20000320 	.word	0x20000320
 800a84c:	20000328 	.word	0x20000328
 800a850:	20000330 	.word	0x20000330
 800a854:	20000338 	.word	0x20000338
 800a858:	20000340 	.word	0x20000340
 800a85c:	20000348 	.word	0x20000348
 800a860:	20000350 	.word	0x20000350
 800a864:	20000358 	.word	0x20000358
 800a868:	20000360 	.word	0x20000360

0800a86c <_GLOBAL__sub_I_uart2rs485>:
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
 800a870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a874:	2001      	movs	r0, #1
 800a876:	f7ff fea3 	bl	800a5c0 <_Z41__static_initialization_and_destruction_0ii>
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <_GLOBAL__sub_D_uart2rs485>:
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
 800a880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a884:	2000      	movs	r0, #0
 800a886:	f7ff fe9b 	bl	800a5c0 <_Z41__static_initialization_and_destruction_0ii>
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <_ZL15IsNotPowerOfTwom>:
 */

#include "utils/cqueue.h"

static inline uint32_t IsNotPowerOfTwo(uint32_t number)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	return (number & (number-1));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	1e5a      	subs	r2, r3, #1
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4013      	ands	r3, r2
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <_ZN8CQueueNS6CQueueC1EmPh>:

CQueueNS::CQueue::CQueue(uint32_t totalLen, uint8_t *pBuffer_)
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
:InitResult(ERROR),readIdx(0),writeIdx(0),mask(0),pBuffer(NULL),IsDeleteNeeded(0),ndtrLast(totalLen)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	605a      	str	r2, [r3, #4]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	609a      	str	r2, [r3, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	60da      	str	r2, [r3, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	611a      	str	r2, [r3, #16]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	751a      	strb	r2, [r3, #20]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	619a      	str	r2, [r3, #24]
{
	if(IsNotPowerOfTwo(totalLen))
 800a8de:	68b8      	ldr	r0, [r7, #8]
 800a8e0:	f7ff ffd4 	bl	800a88c <_ZL15IsNotPowerOfTwom>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bf14      	ite	ne
 800a8ea:	2301      	movne	r3, #1
 800a8ec:	2300      	moveq	r3, #0
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11c      	bne.n	800a92e <_ZN8CQueueNS6CQueueC1EmPh+0x86>
	{}
	else
	{
		if(pBuffer_ == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <_ZN8CQueueNS6CQueueC1EmPh+0x6a>
		{
			pBuffer = new uint8_t [totalLen];
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 f84b 	bl	800a998 <_Znaj>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	611a      	str	r2, [r3, #16]
			IsDeleteNeeded = 1;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	751a      	strb	r2, [r3, #20]
 800a910:	e002      	b.n	800a918 <_ZN8CQueueNS6CQueueC1EmPh+0x70>
		}
		else
		{
			pBuffer = pBuffer_;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	611a      	str	r2, [r3, #16]
		}
		if(pBuffer != NULL)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <_ZN8CQueueNS6CQueueC1EmPh+0x86>
		{
			mask = totalLen - 1;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	1e5a      	subs	r2, r3, #1
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	60da      	str	r2, [r3, #12]
			InitResult = SUCCESS;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <_ZN8CQueueNS6CQueueD1Ev>:


CQueueNS::CQueue::~CQueue()
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
{
	Reset();
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f815 	bl	800a970 <_ZN8CQueueNS6CQueue5ResetEv>
	if(IsDeleteNeeded)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	7d1b      	ldrb	r3, [r3, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d008      	beq.n	800a960 <_ZN8CQueueNS6CQueueD1Ev+0x28>
	{
		delete []pBuffer;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <_ZN8CQueueNS6CQueueD1Ev+0x28>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f81a 	bl	800a994 <_ZdaPv>
	}
	pBuffer = NULL;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	611a      	str	r2, [r3, #16]
}
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_ZN8CQueueNS6CQueue5ResetEv>:

void CQueueNS::CQueue::Reset()
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	readIdx = 0;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	605a      	str	r2, [r3, #4]
	writeIdx = 0;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	609a      	str	r2, [r3, #8]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <_ZdlPvj>:
 800a990:	f000 b804 	b.w	800a99c <_ZdlPv>

0800a994 <_ZdaPv>:
 800a994:	f000 b802 	b.w	800a99c <_ZdlPv>

0800a998 <_Znaj>:
 800a998:	f000 b802 	b.w	800a9a0 <_Znwj>

0800a99c <_ZdlPv>:
 800a99c:	f000 b884 	b.w	800aaa8 <free>

0800a9a0 <_Znwj>:
 800a9a0:	2801      	cmp	r0, #1
 800a9a2:	bf38      	it	cc
 800a9a4:	2001      	movcc	r0, #1
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f874 	bl	800aa98 <malloc>
 800a9b0:	b930      	cbnz	r0, 800a9c0 <_Znwj+0x20>
 800a9b2:	f000 f807 	bl	800a9c4 <_ZSt15get_new_handlerv>
 800a9b6:	b908      	cbnz	r0, 800a9bc <_Znwj+0x1c>
 800a9b8:	f000 f80c 	bl	800a9d4 <abort>
 800a9bc:	4780      	blx	r0
 800a9be:	e7f4      	b.n	800a9aa <_Znwj+0xa>
 800a9c0:	bd10      	pop	{r4, pc}
	...

0800a9c4 <_ZSt15get_new_handlerv>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <_ZSt15get_new_handlerv+0xc>)
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	f3bf 8f5b 	dmb	ish
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	20000404 	.word	0x20000404

0800a9d4 <abort>:
 800a9d4:	b508      	push	{r3, lr}
 800a9d6:	2006      	movs	r0, #6
 800a9d8:	f000 fc54 	bl	800b284 <raise>
 800a9dc:	2001      	movs	r0, #1
 800a9de:	f7f6 fddd 	bl	800159c <_exit>
	...

0800a9e4 <__assert_func>:
 800a9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <__assert_func+0x2c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	68d8      	ldr	r0, [r3, #12]
 800a9f2:	b14c      	cbz	r4, 800aa08 <__assert_func+0x24>
 800a9f4:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <__assert_func+0x30>)
 800a9f6:	9100      	str	r1, [sp, #0]
 800a9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9fc:	4906      	ldr	r1, [pc, #24]	; (800aa18 <__assert_func+0x34>)
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f000 f814 	bl	800aa2c <fiprintf>
 800aa04:	f7ff ffe6 	bl	800a9d4 <abort>
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <__assert_func+0x38>)
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	e7f3      	b.n	800a9f6 <__assert_func+0x12>
 800aa0e:	bf00      	nop
 800aa10:	2000009c 	.word	0x2000009c
 800aa14:	0800c854 	.word	0x0800c854
 800aa18:	0800c861 	.word	0x0800c861
 800aa1c:	0800c88f 	.word	0x0800c88f

0800aa20 <__errno>:
 800aa20:	4b01      	ldr	r3, [pc, #4]	; (800aa28 <__errno+0x8>)
 800aa22:	6818      	ldr	r0, [r3, #0]
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	2000009c 	.word	0x2000009c

0800aa2c <fiprintf>:
 800aa2c:	b40e      	push	{r1, r2, r3}
 800aa2e:	b503      	push	{r0, r1, lr}
 800aa30:	4601      	mov	r1, r0
 800aa32:	ab03      	add	r3, sp, #12
 800aa34:	4805      	ldr	r0, [pc, #20]	; (800aa4c <fiprintf+0x20>)
 800aa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	f000 f925 	bl	800ac8c <_vfiprintf_r>
 800aa42:	b002      	add	sp, #8
 800aa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa48:	b003      	add	sp, #12
 800aa4a:	4770      	bx	lr
 800aa4c:	2000009c 	.word	0x2000009c

0800aa50 <__libc_init_array>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	4d0d      	ldr	r5, [pc, #52]	; (800aa88 <__libc_init_array+0x38>)
 800aa54:	4c0d      	ldr	r4, [pc, #52]	; (800aa8c <__libc_init_array+0x3c>)
 800aa56:	1b64      	subs	r4, r4, r5
 800aa58:	10a4      	asrs	r4, r4, #2
 800aa5a:	2600      	movs	r6, #0
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	d109      	bne.n	800aa74 <__libc_init_array+0x24>
 800aa60:	4d0b      	ldr	r5, [pc, #44]	; (800aa90 <__libc_init_array+0x40>)
 800aa62:	4c0c      	ldr	r4, [pc, #48]	; (800aa94 <__libc_init_array+0x44>)
 800aa64:	f000 ffc0 	bl	800b9e8 <_init>
 800aa68:	1b64      	subs	r4, r4, r5
 800aa6a:	10a4      	asrs	r4, r4, #2
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	42a6      	cmp	r6, r4
 800aa70:	d105      	bne.n	800aa7e <__libc_init_array+0x2e>
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa78:	4798      	blx	r3
 800aa7a:	3601      	adds	r6, #1
 800aa7c:	e7ee      	b.n	800aa5c <__libc_init_array+0xc>
 800aa7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa82:	4798      	blx	r3
 800aa84:	3601      	adds	r6, #1
 800aa86:	e7f2      	b.n	800aa6e <__libc_init_array+0x1e>
 800aa88:	0800c930 	.word	0x0800c930
 800aa8c:	0800c930 	.word	0x0800c930
 800aa90:	0800c930 	.word	0x0800c930
 800aa94:	0800c938 	.word	0x0800c938

0800aa98 <malloc>:
 800aa98:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <malloc+0xc>)
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f000 b871 	b.w	800ab84 <_malloc_r>
 800aaa2:	bf00      	nop
 800aaa4:	2000009c 	.word	0x2000009c

0800aaa8 <free>:
 800aaa8:	4b02      	ldr	r3, [pc, #8]	; (800aab4 <free+0xc>)
 800aaaa:	4601      	mov	r1, r0
 800aaac:	6818      	ldr	r0, [r3, #0]
 800aaae:	f000 b819 	b.w	800aae4 <_free_r>
 800aab2:	bf00      	nop
 800aab4:	2000009c 	.word	0x2000009c

0800aab8 <memcpy>:
 800aab8:	440a      	add	r2, r1
 800aaba:	4291      	cmp	r1, r2
 800aabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aac0:	d100      	bne.n	800aac4 <memcpy+0xc>
 800aac2:	4770      	bx	lr
 800aac4:	b510      	push	{r4, lr}
 800aac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aace:	4291      	cmp	r1, r2
 800aad0:	d1f9      	bne.n	800aac6 <memcpy+0xe>
 800aad2:	bd10      	pop	{r4, pc}

0800aad4 <memset>:
 800aad4:	4402      	add	r2, r0
 800aad6:	4603      	mov	r3, r0
 800aad8:	4293      	cmp	r3, r2
 800aada:	d100      	bne.n	800aade <memset+0xa>
 800aadc:	4770      	bx	lr
 800aade:	f803 1b01 	strb.w	r1, [r3], #1
 800aae2:	e7f9      	b.n	800aad8 <memset+0x4>

0800aae4 <_free_r>:
 800aae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d048      	beq.n	800ab7c <_free_r+0x98>
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	9001      	str	r0, [sp, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f1a1 0404 	sub.w	r4, r1, #4
 800aaf6:	bfb8      	it	lt
 800aaf8:	18e4      	addlt	r4, r4, r3
 800aafa:	f000 febd 	bl	800b878 <__malloc_lock>
 800aafe:	4a20      	ldr	r2, [pc, #128]	; (800ab80 <_free_r+0x9c>)
 800ab00:	9801      	ldr	r0, [sp, #4]
 800ab02:	6813      	ldr	r3, [r2, #0]
 800ab04:	4615      	mov	r5, r2
 800ab06:	b933      	cbnz	r3, 800ab16 <_free_r+0x32>
 800ab08:	6063      	str	r3, [r4, #4]
 800ab0a:	6014      	str	r4, [r2, #0]
 800ab0c:	b003      	add	sp, #12
 800ab0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab12:	f000 beb7 	b.w	800b884 <__malloc_unlock>
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	d90b      	bls.n	800ab32 <_free_r+0x4e>
 800ab1a:	6821      	ldr	r1, [r4, #0]
 800ab1c:	1862      	adds	r2, r4, r1
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	bf04      	itt	eq
 800ab22:	681a      	ldreq	r2, [r3, #0]
 800ab24:	685b      	ldreq	r3, [r3, #4]
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	bf04      	itt	eq
 800ab2a:	1852      	addeq	r2, r2, r1
 800ab2c:	6022      	streq	r2, [r4, #0]
 800ab2e:	602c      	str	r4, [r5, #0]
 800ab30:	e7ec      	b.n	800ab0c <_free_r+0x28>
 800ab32:	461a      	mov	r2, r3
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	b10b      	cbz	r3, 800ab3c <_free_r+0x58>
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	d9fa      	bls.n	800ab32 <_free_r+0x4e>
 800ab3c:	6811      	ldr	r1, [r2, #0]
 800ab3e:	1855      	adds	r5, r2, r1
 800ab40:	42a5      	cmp	r5, r4
 800ab42:	d10b      	bne.n	800ab5c <_free_r+0x78>
 800ab44:	6824      	ldr	r4, [r4, #0]
 800ab46:	4421      	add	r1, r4
 800ab48:	1854      	adds	r4, r2, r1
 800ab4a:	42a3      	cmp	r3, r4
 800ab4c:	6011      	str	r1, [r2, #0]
 800ab4e:	d1dd      	bne.n	800ab0c <_free_r+0x28>
 800ab50:	681c      	ldr	r4, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	6053      	str	r3, [r2, #4]
 800ab56:	4421      	add	r1, r4
 800ab58:	6011      	str	r1, [r2, #0]
 800ab5a:	e7d7      	b.n	800ab0c <_free_r+0x28>
 800ab5c:	d902      	bls.n	800ab64 <_free_r+0x80>
 800ab5e:	230c      	movs	r3, #12
 800ab60:	6003      	str	r3, [r0, #0]
 800ab62:	e7d3      	b.n	800ab0c <_free_r+0x28>
 800ab64:	6825      	ldr	r5, [r4, #0]
 800ab66:	1961      	adds	r1, r4, r5
 800ab68:	428b      	cmp	r3, r1
 800ab6a:	bf04      	itt	eq
 800ab6c:	6819      	ldreq	r1, [r3, #0]
 800ab6e:	685b      	ldreq	r3, [r3, #4]
 800ab70:	6063      	str	r3, [r4, #4]
 800ab72:	bf04      	itt	eq
 800ab74:	1949      	addeq	r1, r1, r5
 800ab76:	6021      	streq	r1, [r4, #0]
 800ab78:	6054      	str	r4, [r2, #4]
 800ab7a:	e7c7      	b.n	800ab0c <_free_r+0x28>
 800ab7c:	b003      	add	sp, #12
 800ab7e:	bd30      	pop	{r4, r5, pc}
 800ab80:	20000408 	.word	0x20000408

0800ab84 <_malloc_r>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	1ccd      	adds	r5, r1, #3
 800ab88:	f025 0503 	bic.w	r5, r5, #3
 800ab8c:	3508      	adds	r5, #8
 800ab8e:	2d0c      	cmp	r5, #12
 800ab90:	bf38      	it	cc
 800ab92:	250c      	movcc	r5, #12
 800ab94:	2d00      	cmp	r5, #0
 800ab96:	4606      	mov	r6, r0
 800ab98:	db01      	blt.n	800ab9e <_malloc_r+0x1a>
 800ab9a:	42a9      	cmp	r1, r5
 800ab9c:	d903      	bls.n	800aba6 <_malloc_r+0x22>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	2000      	movs	r0, #0
 800aba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba6:	f000 fe67 	bl	800b878 <__malloc_lock>
 800abaa:	4921      	ldr	r1, [pc, #132]	; (800ac30 <_malloc_r+0xac>)
 800abac:	680a      	ldr	r2, [r1, #0]
 800abae:	4614      	mov	r4, r2
 800abb0:	b99c      	cbnz	r4, 800abda <_malloc_r+0x56>
 800abb2:	4f20      	ldr	r7, [pc, #128]	; (800ac34 <_malloc_r+0xb0>)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	b923      	cbnz	r3, 800abc2 <_malloc_r+0x3e>
 800abb8:	4621      	mov	r1, r4
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 fb2a 	bl	800b214 <_sbrk_r>
 800abc0:	6038      	str	r0, [r7, #0]
 800abc2:	4629      	mov	r1, r5
 800abc4:	4630      	mov	r0, r6
 800abc6:	f000 fb25 	bl	800b214 <_sbrk_r>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	d123      	bne.n	800ac16 <_malloc_r+0x92>
 800abce:	230c      	movs	r3, #12
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	4630      	mov	r0, r6
 800abd4:	f000 fe56 	bl	800b884 <__malloc_unlock>
 800abd8:	e7e3      	b.n	800aba2 <_malloc_r+0x1e>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	1b5b      	subs	r3, r3, r5
 800abde:	d417      	bmi.n	800ac10 <_malloc_r+0x8c>
 800abe0:	2b0b      	cmp	r3, #11
 800abe2:	d903      	bls.n	800abec <_malloc_r+0x68>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	441c      	add	r4, r3
 800abe8:	6025      	str	r5, [r4, #0]
 800abea:	e004      	b.n	800abf6 <_malloc_r+0x72>
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	42a2      	cmp	r2, r4
 800abf0:	bf0c      	ite	eq
 800abf2:	600b      	streq	r3, [r1, #0]
 800abf4:	6053      	strne	r3, [r2, #4]
 800abf6:	4630      	mov	r0, r6
 800abf8:	f000 fe44 	bl	800b884 <__malloc_unlock>
 800abfc:	f104 000b 	add.w	r0, r4, #11
 800ac00:	1d23      	adds	r3, r4, #4
 800ac02:	f020 0007 	bic.w	r0, r0, #7
 800ac06:	1ac2      	subs	r2, r0, r3
 800ac08:	d0cc      	beq.n	800aba4 <_malloc_r+0x20>
 800ac0a:	1a1b      	subs	r3, r3, r0
 800ac0c:	50a3      	str	r3, [r4, r2]
 800ac0e:	e7c9      	b.n	800aba4 <_malloc_r+0x20>
 800ac10:	4622      	mov	r2, r4
 800ac12:	6864      	ldr	r4, [r4, #4]
 800ac14:	e7cc      	b.n	800abb0 <_malloc_r+0x2c>
 800ac16:	1cc4      	adds	r4, r0, #3
 800ac18:	f024 0403 	bic.w	r4, r4, #3
 800ac1c:	42a0      	cmp	r0, r4
 800ac1e:	d0e3      	beq.n	800abe8 <_malloc_r+0x64>
 800ac20:	1a21      	subs	r1, r4, r0
 800ac22:	4630      	mov	r0, r6
 800ac24:	f000 faf6 	bl	800b214 <_sbrk_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d1dd      	bne.n	800abe8 <_malloc_r+0x64>
 800ac2c:	e7cf      	b.n	800abce <_malloc_r+0x4a>
 800ac2e:	bf00      	nop
 800ac30:	20000408 	.word	0x20000408
 800ac34:	2000040c 	.word	0x2000040c

0800ac38 <__sfputc_r>:
 800ac38:	6893      	ldr	r3, [r2, #8]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	b410      	push	{r4}
 800ac40:	6093      	str	r3, [r2, #8]
 800ac42:	da08      	bge.n	800ac56 <__sfputc_r+0x1e>
 800ac44:	6994      	ldr	r4, [r2, #24]
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	db01      	blt.n	800ac4e <__sfputc_r+0x16>
 800ac4a:	290a      	cmp	r1, #10
 800ac4c:	d103      	bne.n	800ac56 <__sfputc_r+0x1e>
 800ac4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac52:	f000 bb33 	b.w	800b2bc <__swbuf_r>
 800ac56:	6813      	ldr	r3, [r2, #0]
 800ac58:	1c58      	adds	r0, r3, #1
 800ac5a:	6010      	str	r0, [r2, #0]
 800ac5c:	7019      	strb	r1, [r3, #0]
 800ac5e:	4608      	mov	r0, r1
 800ac60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <__sfputs_r>:
 800ac66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac68:	4606      	mov	r6, r0
 800ac6a:	460f      	mov	r7, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	18d5      	adds	r5, r2, r3
 800ac70:	42ac      	cmp	r4, r5
 800ac72:	d101      	bne.n	800ac78 <__sfputs_r+0x12>
 800ac74:	2000      	movs	r0, #0
 800ac76:	e007      	b.n	800ac88 <__sfputs_r+0x22>
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	463a      	mov	r2, r7
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7ff ffda 	bl	800ac38 <__sfputc_r>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	d1f3      	bne.n	800ac70 <__sfputs_r+0xa>
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac8c <_vfiprintf_r>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	460d      	mov	r5, r1
 800ac92:	b09d      	sub	sp, #116	; 0x74
 800ac94:	4614      	mov	r4, r2
 800ac96:	4698      	mov	r8, r3
 800ac98:	4606      	mov	r6, r0
 800ac9a:	b118      	cbz	r0, 800aca4 <_vfiprintf_r+0x18>
 800ac9c:	6983      	ldr	r3, [r0, #24]
 800ac9e:	b90b      	cbnz	r3, 800aca4 <_vfiprintf_r+0x18>
 800aca0:	f000 fce6 	bl	800b670 <__sinit>
 800aca4:	4b89      	ldr	r3, [pc, #548]	; (800aecc <_vfiprintf_r+0x240>)
 800aca6:	429d      	cmp	r5, r3
 800aca8:	d11b      	bne.n	800ace2 <_vfiprintf_r+0x56>
 800acaa:	6875      	ldr	r5, [r6, #4]
 800acac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acae:	07d9      	lsls	r1, r3, #31
 800acb0:	d405      	bmi.n	800acbe <_vfiprintf_r+0x32>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	059a      	lsls	r2, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_vfiprintf_r+0x32>
 800acb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acba:	f000 fd77 	bl	800b7ac <__retarget_lock_acquire_recursive>
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	071b      	lsls	r3, r3, #28
 800acc2:	d501      	bpl.n	800acc8 <_vfiprintf_r+0x3c>
 800acc4:	692b      	ldr	r3, [r5, #16]
 800acc6:	b9eb      	cbnz	r3, 800ad04 <_vfiprintf_r+0x78>
 800acc8:	4629      	mov	r1, r5
 800acca:	4630      	mov	r0, r6
 800accc:	f000 fb48 	bl	800b360 <__swsetup_r>
 800acd0:	b1c0      	cbz	r0, 800ad04 <_vfiprintf_r+0x78>
 800acd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd4:	07dc      	lsls	r4, r3, #31
 800acd6:	d50e      	bpl.n	800acf6 <_vfiprintf_r+0x6a>
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	b01d      	add	sp, #116	; 0x74
 800acde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace2:	4b7b      	ldr	r3, [pc, #492]	; (800aed0 <_vfiprintf_r+0x244>)
 800ace4:	429d      	cmp	r5, r3
 800ace6:	d101      	bne.n	800acec <_vfiprintf_r+0x60>
 800ace8:	68b5      	ldr	r5, [r6, #8]
 800acea:	e7df      	b.n	800acac <_vfiprintf_r+0x20>
 800acec:	4b79      	ldr	r3, [pc, #484]	; (800aed4 <_vfiprintf_r+0x248>)
 800acee:	429d      	cmp	r5, r3
 800acf0:	bf08      	it	eq
 800acf2:	68f5      	ldreq	r5, [r6, #12]
 800acf4:	e7da      	b.n	800acac <_vfiprintf_r+0x20>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	0598      	lsls	r0, r3, #22
 800acfa:	d4ed      	bmi.n	800acd8 <_vfiprintf_r+0x4c>
 800acfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acfe:	f000 fd56 	bl	800b7ae <__retarget_lock_release_recursive>
 800ad02:	e7e9      	b.n	800acd8 <_vfiprintf_r+0x4c>
 800ad04:	2300      	movs	r3, #0
 800ad06:	9309      	str	r3, [sp, #36]	; 0x24
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad12:	2330      	movs	r3, #48	; 0x30
 800ad14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aed8 <_vfiprintf_r+0x24c>
 800ad18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad1c:	f04f 0901 	mov.w	r9, #1
 800ad20:	4623      	mov	r3, r4
 800ad22:	469a      	mov	sl, r3
 800ad24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad28:	b10a      	cbz	r2, 800ad2e <_vfiprintf_r+0xa2>
 800ad2a:	2a25      	cmp	r2, #37	; 0x25
 800ad2c:	d1f9      	bne.n	800ad22 <_vfiprintf_r+0x96>
 800ad2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad32:	d00b      	beq.n	800ad4c <_vfiprintf_r+0xc0>
 800ad34:	465b      	mov	r3, fp
 800ad36:	4622      	mov	r2, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ff93 	bl	800ac66 <__sfputs_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	f000 80aa 	beq.w	800ae9a <_vfiprintf_r+0x20e>
 800ad46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad48:	445a      	add	r2, fp
 800ad4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80a2 	beq.w	800ae9a <_vfiprintf_r+0x20e>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad60:	f10a 0a01 	add.w	sl, sl, #1
 800ad64:	9304      	str	r3, [sp, #16]
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad6e:	4654      	mov	r4, sl
 800ad70:	2205      	movs	r2, #5
 800ad72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad76:	4858      	ldr	r0, [pc, #352]	; (800aed8 <_vfiprintf_r+0x24c>)
 800ad78:	f7f5 fa2a 	bl	80001d0 <memchr>
 800ad7c:	9a04      	ldr	r2, [sp, #16]
 800ad7e:	b9d8      	cbnz	r0, 800adb8 <_vfiprintf_r+0x12c>
 800ad80:	06d1      	lsls	r1, r2, #27
 800ad82:	bf44      	itt	mi
 800ad84:	2320      	movmi	r3, #32
 800ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8a:	0713      	lsls	r3, r2, #28
 800ad8c:	bf44      	itt	mi
 800ad8e:	232b      	movmi	r3, #43	; 0x2b
 800ad90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad94:	f89a 3000 	ldrb.w	r3, [sl]
 800ad98:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9a:	d015      	beq.n	800adc8 <_vfiprintf_r+0x13c>
 800ad9c:	9a07      	ldr	r2, [sp, #28]
 800ad9e:	4654      	mov	r4, sl
 800ada0:	2000      	movs	r0, #0
 800ada2:	f04f 0c0a 	mov.w	ip, #10
 800ada6:	4621      	mov	r1, r4
 800ada8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adac:	3b30      	subs	r3, #48	; 0x30
 800adae:	2b09      	cmp	r3, #9
 800adb0:	d94e      	bls.n	800ae50 <_vfiprintf_r+0x1c4>
 800adb2:	b1b0      	cbz	r0, 800ade2 <_vfiprintf_r+0x156>
 800adb4:	9207      	str	r2, [sp, #28]
 800adb6:	e014      	b.n	800ade2 <_vfiprintf_r+0x156>
 800adb8:	eba0 0308 	sub.w	r3, r0, r8
 800adbc:	fa09 f303 	lsl.w	r3, r9, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	46a2      	mov	sl, r4
 800adc6:	e7d2      	b.n	800ad6e <_vfiprintf_r+0xe2>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	1d19      	adds	r1, r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	9103      	str	r1, [sp, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfbb      	ittet	lt
 800add4:	425b      	neglt	r3, r3
 800add6:	f042 0202 	orrlt.w	r2, r2, #2
 800adda:	9307      	strge	r3, [sp, #28]
 800addc:	9307      	strlt	r3, [sp, #28]
 800adde:	bfb8      	it	lt
 800ade0:	9204      	strlt	r2, [sp, #16]
 800ade2:	7823      	ldrb	r3, [r4, #0]
 800ade4:	2b2e      	cmp	r3, #46	; 0x2e
 800ade6:	d10c      	bne.n	800ae02 <_vfiprintf_r+0x176>
 800ade8:	7863      	ldrb	r3, [r4, #1]
 800adea:	2b2a      	cmp	r3, #42	; 0x2a
 800adec:	d135      	bne.n	800ae5a <_vfiprintf_r+0x1ce>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	1d1a      	adds	r2, r3, #4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	9203      	str	r2, [sp, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfb8      	it	lt
 800adfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800adfe:	3402      	adds	r4, #2
 800ae00:	9305      	str	r3, [sp, #20]
 800ae02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aee8 <_vfiprintf_r+0x25c>
 800ae06:	7821      	ldrb	r1, [r4, #0]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	f7f5 f9e0 	bl	80001d0 <memchr>
 800ae10:	b140      	cbz	r0, 800ae24 <_vfiprintf_r+0x198>
 800ae12:	2340      	movs	r3, #64	; 0x40
 800ae14:	eba0 000a 	sub.w	r0, r0, sl
 800ae18:	fa03 f000 	lsl.w	r0, r3, r0
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	4303      	orrs	r3, r0
 800ae20:	3401      	adds	r4, #1
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae28:	482c      	ldr	r0, [pc, #176]	; (800aedc <_vfiprintf_r+0x250>)
 800ae2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae2e:	2206      	movs	r2, #6
 800ae30:	f7f5 f9ce 	bl	80001d0 <memchr>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d03f      	beq.n	800aeb8 <_vfiprintf_r+0x22c>
 800ae38:	4b29      	ldr	r3, [pc, #164]	; (800aee0 <_vfiprintf_r+0x254>)
 800ae3a:	bb1b      	cbnz	r3, 800ae84 <_vfiprintf_r+0x1f8>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	3307      	adds	r3, #7
 800ae40:	f023 0307 	bic.w	r3, r3, #7
 800ae44:	3308      	adds	r3, #8
 800ae46:	9303      	str	r3, [sp, #12]
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	443b      	add	r3, r7
 800ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4e:	e767      	b.n	800ad20 <_vfiprintf_r+0x94>
 800ae50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae54:	460c      	mov	r4, r1
 800ae56:	2001      	movs	r0, #1
 800ae58:	e7a5      	b.n	800ada6 <_vfiprintf_r+0x11a>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	3401      	adds	r4, #1
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	4619      	mov	r1, r3
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	4620      	mov	r0, r4
 800ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6c:	3a30      	subs	r2, #48	; 0x30
 800ae6e:	2a09      	cmp	r2, #9
 800ae70:	d903      	bls.n	800ae7a <_vfiprintf_r+0x1ee>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0c5      	beq.n	800ae02 <_vfiprintf_r+0x176>
 800ae76:	9105      	str	r1, [sp, #20]
 800ae78:	e7c3      	b.n	800ae02 <_vfiprintf_r+0x176>
 800ae7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae7e:	4604      	mov	r4, r0
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7f0      	b.n	800ae66 <_vfiprintf_r+0x1da>
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <_vfiprintf_r+0x258>)
 800ae8c:	a904      	add	r1, sp, #16
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f3af 8000 	nop.w
 800ae94:	4607      	mov	r7, r0
 800ae96:	1c78      	adds	r0, r7, #1
 800ae98:	d1d6      	bne.n	800ae48 <_vfiprintf_r+0x1bc>
 800ae9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae9c:	07d9      	lsls	r1, r3, #31
 800ae9e:	d405      	bmi.n	800aeac <_vfiprintf_r+0x220>
 800aea0:	89ab      	ldrh	r3, [r5, #12]
 800aea2:	059a      	lsls	r2, r3, #22
 800aea4:	d402      	bmi.n	800aeac <_vfiprintf_r+0x220>
 800aea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aea8:	f000 fc81 	bl	800b7ae <__retarget_lock_release_recursive>
 800aeac:	89ab      	ldrh	r3, [r5, #12]
 800aeae:	065b      	lsls	r3, r3, #25
 800aeb0:	f53f af12 	bmi.w	800acd8 <_vfiprintf_r+0x4c>
 800aeb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb6:	e711      	b.n	800acdc <_vfiprintf_r+0x50>
 800aeb8:	ab03      	add	r3, sp, #12
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	462a      	mov	r2, r5
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <_vfiprintf_r+0x258>)
 800aec0:	a904      	add	r1, sp, #16
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 f880 	bl	800afc8 <_printf_i>
 800aec8:	e7e4      	b.n	800ae94 <_vfiprintf_r+0x208>
 800aeca:	bf00      	nop
 800aecc:	0800c8e8 	.word	0x0800c8e8
 800aed0:	0800c908 	.word	0x0800c908
 800aed4:	0800c8c8 	.word	0x0800c8c8
 800aed8:	0800c894 	.word	0x0800c894
 800aedc:	0800c89e 	.word	0x0800c89e
 800aee0:	00000000 	.word	0x00000000
 800aee4:	0800ac67 	.word	0x0800ac67
 800aee8:	0800c89a 	.word	0x0800c89a

0800aeec <_printf_common>:
 800aeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef0:	4616      	mov	r6, r2
 800aef2:	4699      	mov	r9, r3
 800aef4:	688a      	ldr	r2, [r1, #8]
 800aef6:	690b      	ldr	r3, [r1, #16]
 800aef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aefc:	4293      	cmp	r3, r2
 800aefe:	bfb8      	it	lt
 800af00:	4613      	movlt	r3, r2
 800af02:	6033      	str	r3, [r6, #0]
 800af04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af08:	4607      	mov	r7, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	b10a      	cbz	r2, 800af12 <_printf_common+0x26>
 800af0e:	3301      	adds	r3, #1
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	0699      	lsls	r1, r3, #26
 800af16:	bf42      	ittt	mi
 800af18:	6833      	ldrmi	r3, [r6, #0]
 800af1a:	3302      	addmi	r3, #2
 800af1c:	6033      	strmi	r3, [r6, #0]
 800af1e:	6825      	ldr	r5, [r4, #0]
 800af20:	f015 0506 	ands.w	r5, r5, #6
 800af24:	d106      	bne.n	800af34 <_printf_common+0x48>
 800af26:	f104 0a19 	add.w	sl, r4, #25
 800af2a:	68e3      	ldr	r3, [r4, #12]
 800af2c:	6832      	ldr	r2, [r6, #0]
 800af2e:	1a9b      	subs	r3, r3, r2
 800af30:	42ab      	cmp	r3, r5
 800af32:	dc26      	bgt.n	800af82 <_printf_common+0x96>
 800af34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af38:	1e13      	subs	r3, r2, #0
 800af3a:	6822      	ldr	r2, [r4, #0]
 800af3c:	bf18      	it	ne
 800af3e:	2301      	movne	r3, #1
 800af40:	0692      	lsls	r2, r2, #26
 800af42:	d42b      	bmi.n	800af9c <_printf_common+0xb0>
 800af44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af48:	4649      	mov	r1, r9
 800af4a:	4638      	mov	r0, r7
 800af4c:	47c0      	blx	r8
 800af4e:	3001      	adds	r0, #1
 800af50:	d01e      	beq.n	800af90 <_printf_common+0xa4>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	68e5      	ldr	r5, [r4, #12]
 800af56:	6832      	ldr	r2, [r6, #0]
 800af58:	f003 0306 	and.w	r3, r3, #6
 800af5c:	2b04      	cmp	r3, #4
 800af5e:	bf08      	it	eq
 800af60:	1aad      	subeq	r5, r5, r2
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	bf0c      	ite	eq
 800af68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af6c:	2500      	movne	r5, #0
 800af6e:	4293      	cmp	r3, r2
 800af70:	bfc4      	itt	gt
 800af72:	1a9b      	subgt	r3, r3, r2
 800af74:	18ed      	addgt	r5, r5, r3
 800af76:	2600      	movs	r6, #0
 800af78:	341a      	adds	r4, #26
 800af7a:	42b5      	cmp	r5, r6
 800af7c:	d11a      	bne.n	800afb4 <_printf_common+0xc8>
 800af7e:	2000      	movs	r0, #0
 800af80:	e008      	b.n	800af94 <_printf_common+0xa8>
 800af82:	2301      	movs	r3, #1
 800af84:	4652      	mov	r2, sl
 800af86:	4649      	mov	r1, r9
 800af88:	4638      	mov	r0, r7
 800af8a:	47c0      	blx	r8
 800af8c:	3001      	adds	r0, #1
 800af8e:	d103      	bne.n	800af98 <_printf_common+0xac>
 800af90:	f04f 30ff 	mov.w	r0, #4294967295
 800af94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af98:	3501      	adds	r5, #1
 800af9a:	e7c6      	b.n	800af2a <_printf_common+0x3e>
 800af9c:	18e1      	adds	r1, r4, r3
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	2030      	movs	r0, #48	; 0x30
 800afa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afa6:	4422      	add	r2, r4
 800afa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afb0:	3302      	adds	r3, #2
 800afb2:	e7c7      	b.n	800af44 <_printf_common+0x58>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4622      	mov	r2, r4
 800afb8:	4649      	mov	r1, r9
 800afba:	4638      	mov	r0, r7
 800afbc:	47c0      	blx	r8
 800afbe:	3001      	adds	r0, #1
 800afc0:	d0e6      	beq.n	800af90 <_printf_common+0xa4>
 800afc2:	3601      	adds	r6, #1
 800afc4:	e7d9      	b.n	800af7a <_printf_common+0x8e>
	...

0800afc8 <_printf_i>:
 800afc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	4691      	mov	r9, r2
 800afd0:	7e27      	ldrb	r7, [r4, #24]
 800afd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afd4:	2f78      	cmp	r7, #120	; 0x78
 800afd6:	4680      	mov	r8, r0
 800afd8:	469a      	mov	sl, r3
 800afda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afde:	d807      	bhi.n	800aff0 <_printf_i+0x28>
 800afe0:	2f62      	cmp	r7, #98	; 0x62
 800afe2:	d80a      	bhi.n	800affa <_printf_i+0x32>
 800afe4:	2f00      	cmp	r7, #0
 800afe6:	f000 80d8 	beq.w	800b19a <_printf_i+0x1d2>
 800afea:	2f58      	cmp	r7, #88	; 0x58
 800afec:	f000 80a3 	beq.w	800b136 <_printf_i+0x16e>
 800aff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aff8:	e03a      	b.n	800b070 <_printf_i+0xa8>
 800affa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800affe:	2b15      	cmp	r3, #21
 800b000:	d8f6      	bhi.n	800aff0 <_printf_i+0x28>
 800b002:	a001      	add	r0, pc, #4	; (adr r0, 800b008 <_printf_i+0x40>)
 800b004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b008:	0800b061 	.word	0x0800b061
 800b00c:	0800b075 	.word	0x0800b075
 800b010:	0800aff1 	.word	0x0800aff1
 800b014:	0800aff1 	.word	0x0800aff1
 800b018:	0800aff1 	.word	0x0800aff1
 800b01c:	0800aff1 	.word	0x0800aff1
 800b020:	0800b075 	.word	0x0800b075
 800b024:	0800aff1 	.word	0x0800aff1
 800b028:	0800aff1 	.word	0x0800aff1
 800b02c:	0800aff1 	.word	0x0800aff1
 800b030:	0800aff1 	.word	0x0800aff1
 800b034:	0800b181 	.word	0x0800b181
 800b038:	0800b0a5 	.word	0x0800b0a5
 800b03c:	0800b163 	.word	0x0800b163
 800b040:	0800aff1 	.word	0x0800aff1
 800b044:	0800aff1 	.word	0x0800aff1
 800b048:	0800b1a3 	.word	0x0800b1a3
 800b04c:	0800aff1 	.word	0x0800aff1
 800b050:	0800b0a5 	.word	0x0800b0a5
 800b054:	0800aff1 	.word	0x0800aff1
 800b058:	0800aff1 	.word	0x0800aff1
 800b05c:	0800b16b 	.word	0x0800b16b
 800b060:	680b      	ldr	r3, [r1, #0]
 800b062:	1d1a      	adds	r2, r3, #4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	600a      	str	r2, [r1, #0]
 800b068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b070:	2301      	movs	r3, #1
 800b072:	e0a3      	b.n	800b1bc <_printf_i+0x1f4>
 800b074:	6825      	ldr	r5, [r4, #0]
 800b076:	6808      	ldr	r0, [r1, #0]
 800b078:	062e      	lsls	r6, r5, #24
 800b07a:	f100 0304 	add.w	r3, r0, #4
 800b07e:	d50a      	bpl.n	800b096 <_printf_i+0xce>
 800b080:	6805      	ldr	r5, [r0, #0]
 800b082:	600b      	str	r3, [r1, #0]
 800b084:	2d00      	cmp	r5, #0
 800b086:	da03      	bge.n	800b090 <_printf_i+0xc8>
 800b088:	232d      	movs	r3, #45	; 0x2d
 800b08a:	426d      	negs	r5, r5
 800b08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b090:	485e      	ldr	r0, [pc, #376]	; (800b20c <_printf_i+0x244>)
 800b092:	230a      	movs	r3, #10
 800b094:	e019      	b.n	800b0ca <_printf_i+0x102>
 800b096:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b09a:	6805      	ldr	r5, [r0, #0]
 800b09c:	600b      	str	r3, [r1, #0]
 800b09e:	bf18      	it	ne
 800b0a0:	b22d      	sxthne	r5, r5
 800b0a2:	e7ef      	b.n	800b084 <_printf_i+0xbc>
 800b0a4:	680b      	ldr	r3, [r1, #0]
 800b0a6:	6825      	ldr	r5, [r4, #0]
 800b0a8:	1d18      	adds	r0, r3, #4
 800b0aa:	6008      	str	r0, [r1, #0]
 800b0ac:	0628      	lsls	r0, r5, #24
 800b0ae:	d501      	bpl.n	800b0b4 <_printf_i+0xec>
 800b0b0:	681d      	ldr	r5, [r3, #0]
 800b0b2:	e002      	b.n	800b0ba <_printf_i+0xf2>
 800b0b4:	0669      	lsls	r1, r5, #25
 800b0b6:	d5fb      	bpl.n	800b0b0 <_printf_i+0xe8>
 800b0b8:	881d      	ldrh	r5, [r3, #0]
 800b0ba:	4854      	ldr	r0, [pc, #336]	; (800b20c <_printf_i+0x244>)
 800b0bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b0be:	bf0c      	ite	eq
 800b0c0:	2308      	moveq	r3, #8
 800b0c2:	230a      	movne	r3, #10
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ca:	6866      	ldr	r6, [r4, #4]
 800b0cc:	60a6      	str	r6, [r4, #8]
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	bfa2      	ittt	ge
 800b0d2:	6821      	ldrge	r1, [r4, #0]
 800b0d4:	f021 0104 	bicge.w	r1, r1, #4
 800b0d8:	6021      	strge	r1, [r4, #0]
 800b0da:	b90d      	cbnz	r5, 800b0e0 <_printf_i+0x118>
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	d04d      	beq.n	800b17c <_printf_i+0x1b4>
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0e6:	fb03 5711 	mls	r7, r3, r1, r5
 800b0ea:	5dc7      	ldrb	r7, [r0, r7]
 800b0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0f0:	462f      	mov	r7, r5
 800b0f2:	42bb      	cmp	r3, r7
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	d9f4      	bls.n	800b0e2 <_printf_i+0x11a>
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d10b      	bne.n	800b114 <_printf_i+0x14c>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	07df      	lsls	r7, r3, #31
 800b100:	d508      	bpl.n	800b114 <_printf_i+0x14c>
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	6861      	ldr	r1, [r4, #4]
 800b106:	4299      	cmp	r1, r3
 800b108:	bfde      	ittt	le
 800b10a:	2330      	movle	r3, #48	; 0x30
 800b10c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b110:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b114:	1b92      	subs	r2, r2, r6
 800b116:	6122      	str	r2, [r4, #16]
 800b118:	f8cd a000 	str.w	sl, [sp]
 800b11c:	464b      	mov	r3, r9
 800b11e:	aa03      	add	r2, sp, #12
 800b120:	4621      	mov	r1, r4
 800b122:	4640      	mov	r0, r8
 800b124:	f7ff fee2 	bl	800aeec <_printf_common>
 800b128:	3001      	adds	r0, #1
 800b12a:	d14c      	bne.n	800b1c6 <_printf_i+0x1fe>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	b004      	add	sp, #16
 800b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b136:	4835      	ldr	r0, [pc, #212]	; (800b20c <_printf_i+0x244>)
 800b138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	061f      	lsls	r7, r3, #24
 800b142:	f856 5b04 	ldr.w	r5, [r6], #4
 800b146:	600e      	str	r6, [r1, #0]
 800b148:	d514      	bpl.n	800b174 <_printf_i+0x1ac>
 800b14a:	07d9      	lsls	r1, r3, #31
 800b14c:	bf44      	itt	mi
 800b14e:	f043 0320 	orrmi.w	r3, r3, #32
 800b152:	6023      	strmi	r3, [r4, #0]
 800b154:	b91d      	cbnz	r5, 800b15e <_printf_i+0x196>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	f023 0320 	bic.w	r3, r3, #32
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	2310      	movs	r3, #16
 800b160:	e7b0      	b.n	800b0c4 <_printf_i+0xfc>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	f043 0320 	orr.w	r3, r3, #32
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	2378      	movs	r3, #120	; 0x78
 800b16c:	4828      	ldr	r0, [pc, #160]	; (800b210 <_printf_i+0x248>)
 800b16e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b172:	e7e3      	b.n	800b13c <_printf_i+0x174>
 800b174:	065e      	lsls	r6, r3, #25
 800b176:	bf48      	it	mi
 800b178:	b2ad      	uxthmi	r5, r5
 800b17a:	e7e6      	b.n	800b14a <_printf_i+0x182>
 800b17c:	4616      	mov	r6, r2
 800b17e:	e7bb      	b.n	800b0f8 <_printf_i+0x130>
 800b180:	680b      	ldr	r3, [r1, #0]
 800b182:	6826      	ldr	r6, [r4, #0]
 800b184:	6960      	ldr	r0, [r4, #20]
 800b186:	1d1d      	adds	r5, r3, #4
 800b188:	600d      	str	r5, [r1, #0]
 800b18a:	0635      	lsls	r5, r6, #24
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	d501      	bpl.n	800b194 <_printf_i+0x1cc>
 800b190:	6018      	str	r0, [r3, #0]
 800b192:	e002      	b.n	800b19a <_printf_i+0x1d2>
 800b194:	0671      	lsls	r1, r6, #25
 800b196:	d5fb      	bpl.n	800b190 <_printf_i+0x1c8>
 800b198:	8018      	strh	r0, [r3, #0]
 800b19a:	2300      	movs	r3, #0
 800b19c:	6123      	str	r3, [r4, #16]
 800b19e:	4616      	mov	r6, r2
 800b1a0:	e7ba      	b.n	800b118 <_printf_i+0x150>
 800b1a2:	680b      	ldr	r3, [r1, #0]
 800b1a4:	1d1a      	adds	r2, r3, #4
 800b1a6:	600a      	str	r2, [r1, #0]
 800b1a8:	681e      	ldr	r6, [r3, #0]
 800b1aa:	6862      	ldr	r2, [r4, #4]
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7f5 f80e 	bl	80001d0 <memchr>
 800b1b4:	b108      	cbz	r0, 800b1ba <_printf_i+0x1f2>
 800b1b6:	1b80      	subs	r0, r0, r6
 800b1b8:	6060      	str	r0, [r4, #4]
 800b1ba:	6863      	ldr	r3, [r4, #4]
 800b1bc:	6123      	str	r3, [r4, #16]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c4:	e7a8      	b.n	800b118 <_printf_i+0x150>
 800b1c6:	6923      	ldr	r3, [r4, #16]
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	4640      	mov	r0, r8
 800b1ce:	47d0      	blx	sl
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d0ab      	beq.n	800b12c <_printf_i+0x164>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	079b      	lsls	r3, r3, #30
 800b1d8:	d413      	bmi.n	800b202 <_printf_i+0x23a>
 800b1da:	68e0      	ldr	r0, [r4, #12]
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	4298      	cmp	r0, r3
 800b1e0:	bfb8      	it	lt
 800b1e2:	4618      	movlt	r0, r3
 800b1e4:	e7a4      	b.n	800b130 <_printf_i+0x168>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4632      	mov	r2, r6
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	47d0      	blx	sl
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d09b      	beq.n	800b12c <_printf_i+0x164>
 800b1f4:	3501      	adds	r5, #1
 800b1f6:	68e3      	ldr	r3, [r4, #12]
 800b1f8:	9903      	ldr	r1, [sp, #12]
 800b1fa:	1a5b      	subs	r3, r3, r1
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	dcf2      	bgt.n	800b1e6 <_printf_i+0x21e>
 800b200:	e7eb      	b.n	800b1da <_printf_i+0x212>
 800b202:	2500      	movs	r5, #0
 800b204:	f104 0619 	add.w	r6, r4, #25
 800b208:	e7f5      	b.n	800b1f6 <_printf_i+0x22e>
 800b20a:	bf00      	nop
 800b20c:	0800c8a5 	.word	0x0800c8a5
 800b210:	0800c8b6 	.word	0x0800c8b6

0800b214 <_sbrk_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_sbrk_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7f6 fa34 	bl	800168c <_sbrk>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_sbrk_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_sbrk_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20000f10 	.word	0x20000f10

0800b234 <_raise_r>:
 800b234:	291f      	cmp	r1, #31
 800b236:	b538      	push	{r3, r4, r5, lr}
 800b238:	4604      	mov	r4, r0
 800b23a:	460d      	mov	r5, r1
 800b23c:	d904      	bls.n	800b248 <_raise_r+0x14>
 800b23e:	2316      	movs	r3, #22
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	f04f 30ff 	mov.w	r0, #4294967295
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b24a:	b112      	cbz	r2, 800b252 <_raise_r+0x1e>
 800b24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b250:	b94b      	cbnz	r3, 800b266 <_raise_r+0x32>
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f830 	bl	800b2b8 <_getpid_r>
 800b258:	462a      	mov	r2, r5
 800b25a:	4601      	mov	r1, r0
 800b25c:	4620      	mov	r0, r4
 800b25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b262:	f000 b817 	b.w	800b294 <_kill_r>
 800b266:	2b01      	cmp	r3, #1
 800b268:	d00a      	beq.n	800b280 <_raise_r+0x4c>
 800b26a:	1c59      	adds	r1, r3, #1
 800b26c:	d103      	bne.n	800b276 <_raise_r+0x42>
 800b26e:	2316      	movs	r3, #22
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	2001      	movs	r0, #1
 800b274:	e7e7      	b.n	800b246 <_raise_r+0x12>
 800b276:	2400      	movs	r4, #0
 800b278:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b27c:	4628      	mov	r0, r5
 800b27e:	4798      	blx	r3
 800b280:	2000      	movs	r0, #0
 800b282:	e7e0      	b.n	800b246 <_raise_r+0x12>

0800b284 <raise>:
 800b284:	4b02      	ldr	r3, [pc, #8]	; (800b290 <raise+0xc>)
 800b286:	4601      	mov	r1, r0
 800b288:	6818      	ldr	r0, [r3, #0]
 800b28a:	f7ff bfd3 	b.w	800b234 <_raise_r>
 800b28e:	bf00      	nop
 800b290:	2000009c 	.word	0x2000009c

0800b294 <_kill_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	; (800b2b4 <_kill_r+0x20>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	4611      	mov	r1, r2
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	f7f6 f96b 	bl	800157c <_kill>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	d102      	bne.n	800b2b0 <_kill_r+0x1c>
 800b2aa:	682b      	ldr	r3, [r5, #0]
 800b2ac:	b103      	cbz	r3, 800b2b0 <_kill_r+0x1c>
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	bd38      	pop	{r3, r4, r5, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000f10 	.word	0x20000f10

0800b2b8 <_getpid_r>:
 800b2b8:	f7f6 b958 	b.w	800156c <_getpid>

0800b2bc <__swbuf_r>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	460e      	mov	r6, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	b118      	cbz	r0, 800b2ce <__swbuf_r+0x12>
 800b2c6:	6983      	ldr	r3, [r0, #24]
 800b2c8:	b90b      	cbnz	r3, 800b2ce <__swbuf_r+0x12>
 800b2ca:	f000 f9d1 	bl	800b670 <__sinit>
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <__swbuf_r+0x98>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	d12b      	bne.n	800b32c <__swbuf_r+0x70>
 800b2d4:	686c      	ldr	r4, [r5, #4]
 800b2d6:	69a3      	ldr	r3, [r4, #24]
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	071a      	lsls	r2, r3, #28
 800b2de:	d52f      	bpl.n	800b340 <__swbuf_r+0x84>
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	b36b      	cbz	r3, 800b340 <__swbuf_r+0x84>
 800b2e4:	6923      	ldr	r3, [r4, #16]
 800b2e6:	6820      	ldr	r0, [r4, #0]
 800b2e8:	1ac0      	subs	r0, r0, r3
 800b2ea:	6963      	ldr	r3, [r4, #20]
 800b2ec:	b2f6      	uxtb	r6, r6
 800b2ee:	4283      	cmp	r3, r0
 800b2f0:	4637      	mov	r7, r6
 800b2f2:	dc04      	bgt.n	800b2fe <__swbuf_r+0x42>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f926 	bl	800b548 <_fflush_r>
 800b2fc:	bb30      	cbnz	r0, 800b34c <__swbuf_r+0x90>
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	3b01      	subs	r3, #1
 800b302:	60a3      	str	r3, [r4, #8]
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	6022      	str	r2, [r4, #0]
 800b30a:	701e      	strb	r6, [r3, #0]
 800b30c:	6963      	ldr	r3, [r4, #20]
 800b30e:	3001      	adds	r0, #1
 800b310:	4283      	cmp	r3, r0
 800b312:	d004      	beq.n	800b31e <__swbuf_r+0x62>
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	07db      	lsls	r3, r3, #31
 800b318:	d506      	bpl.n	800b328 <__swbuf_r+0x6c>
 800b31a:	2e0a      	cmp	r6, #10
 800b31c:	d104      	bne.n	800b328 <__swbuf_r+0x6c>
 800b31e:	4621      	mov	r1, r4
 800b320:	4628      	mov	r0, r5
 800b322:	f000 f911 	bl	800b548 <_fflush_r>
 800b326:	b988      	cbnz	r0, 800b34c <__swbuf_r+0x90>
 800b328:	4638      	mov	r0, r7
 800b32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b32c:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <__swbuf_r+0x9c>)
 800b32e:	429c      	cmp	r4, r3
 800b330:	d101      	bne.n	800b336 <__swbuf_r+0x7a>
 800b332:	68ac      	ldr	r4, [r5, #8]
 800b334:	e7cf      	b.n	800b2d6 <__swbuf_r+0x1a>
 800b336:	4b09      	ldr	r3, [pc, #36]	; (800b35c <__swbuf_r+0xa0>)
 800b338:	429c      	cmp	r4, r3
 800b33a:	bf08      	it	eq
 800b33c:	68ec      	ldreq	r4, [r5, #12]
 800b33e:	e7ca      	b.n	800b2d6 <__swbuf_r+0x1a>
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f000 f80c 	bl	800b360 <__swsetup_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0cb      	beq.n	800b2e4 <__swbuf_r+0x28>
 800b34c:	f04f 37ff 	mov.w	r7, #4294967295
 800b350:	e7ea      	b.n	800b328 <__swbuf_r+0x6c>
 800b352:	bf00      	nop
 800b354:	0800c8e8 	.word	0x0800c8e8
 800b358:	0800c908 	.word	0x0800c908
 800b35c:	0800c8c8 	.word	0x0800c8c8

0800b360 <__swsetup_r>:
 800b360:	4b32      	ldr	r3, [pc, #200]	; (800b42c <__swsetup_r+0xcc>)
 800b362:	b570      	push	{r4, r5, r6, lr}
 800b364:	681d      	ldr	r5, [r3, #0]
 800b366:	4606      	mov	r6, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	b125      	cbz	r5, 800b376 <__swsetup_r+0x16>
 800b36c:	69ab      	ldr	r3, [r5, #24]
 800b36e:	b913      	cbnz	r3, 800b376 <__swsetup_r+0x16>
 800b370:	4628      	mov	r0, r5
 800b372:	f000 f97d 	bl	800b670 <__sinit>
 800b376:	4b2e      	ldr	r3, [pc, #184]	; (800b430 <__swsetup_r+0xd0>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	d10f      	bne.n	800b39c <__swsetup_r+0x3c>
 800b37c:	686c      	ldr	r4, [r5, #4]
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b384:	0719      	lsls	r1, r3, #28
 800b386:	d42c      	bmi.n	800b3e2 <__swsetup_r+0x82>
 800b388:	06dd      	lsls	r5, r3, #27
 800b38a:	d411      	bmi.n	800b3b0 <__swsetup_r+0x50>
 800b38c:	2309      	movs	r3, #9
 800b38e:	6033      	str	r3, [r6, #0]
 800b390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	f04f 30ff 	mov.w	r0, #4294967295
 800b39a:	e03e      	b.n	800b41a <__swsetup_r+0xba>
 800b39c:	4b25      	ldr	r3, [pc, #148]	; (800b434 <__swsetup_r+0xd4>)
 800b39e:	429c      	cmp	r4, r3
 800b3a0:	d101      	bne.n	800b3a6 <__swsetup_r+0x46>
 800b3a2:	68ac      	ldr	r4, [r5, #8]
 800b3a4:	e7eb      	b.n	800b37e <__swsetup_r+0x1e>
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <__swsetup_r+0xd8>)
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	bf08      	it	eq
 800b3ac:	68ec      	ldreq	r4, [r5, #12]
 800b3ae:	e7e6      	b.n	800b37e <__swsetup_r+0x1e>
 800b3b0:	0758      	lsls	r0, r3, #29
 800b3b2:	d512      	bpl.n	800b3da <__swsetup_r+0x7a>
 800b3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b6:	b141      	cbz	r1, 800b3ca <__swsetup_r+0x6a>
 800b3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3bc:	4299      	cmp	r1, r3
 800b3be:	d002      	beq.n	800b3c6 <__swsetup_r+0x66>
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff fb8f 	bl	800aae4 <_free_r>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	6063      	str	r3, [r4, #4]
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	f043 0308 	orr.w	r3, r3, #8
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	b94b      	cbnz	r3, 800b3fa <__swsetup_r+0x9a>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f0:	d003      	beq.n	800b3fa <__swsetup_r+0x9a>
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f000 f9ff 	bl	800b7f8 <__smakebuf_r>
 800b3fa:	89a0      	ldrh	r0, [r4, #12]
 800b3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b400:	f010 0301 	ands.w	r3, r0, #1
 800b404:	d00a      	beq.n	800b41c <__swsetup_r+0xbc>
 800b406:	2300      	movs	r3, #0
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	6963      	ldr	r3, [r4, #20]
 800b40c:	425b      	negs	r3, r3
 800b40e:	61a3      	str	r3, [r4, #24]
 800b410:	6923      	ldr	r3, [r4, #16]
 800b412:	b943      	cbnz	r3, 800b426 <__swsetup_r+0xc6>
 800b414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b418:	d1ba      	bne.n	800b390 <__swsetup_r+0x30>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	0781      	lsls	r1, r0, #30
 800b41e:	bf58      	it	pl
 800b420:	6963      	ldrpl	r3, [r4, #20]
 800b422:	60a3      	str	r3, [r4, #8]
 800b424:	e7f4      	b.n	800b410 <__swsetup_r+0xb0>
 800b426:	2000      	movs	r0, #0
 800b428:	e7f7      	b.n	800b41a <__swsetup_r+0xba>
 800b42a:	bf00      	nop
 800b42c:	2000009c 	.word	0x2000009c
 800b430:	0800c8e8 	.word	0x0800c8e8
 800b434:	0800c908 	.word	0x0800c908
 800b438:	0800c8c8 	.word	0x0800c8c8

0800b43c <__sflush_r>:
 800b43c:	898a      	ldrh	r2, [r1, #12]
 800b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	4605      	mov	r5, r0
 800b444:	0710      	lsls	r0, r2, #28
 800b446:	460c      	mov	r4, r1
 800b448:	d458      	bmi.n	800b4fc <__sflush_r+0xc0>
 800b44a:	684b      	ldr	r3, [r1, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dc05      	bgt.n	800b45c <__sflush_r+0x20>
 800b450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	dc02      	bgt.n	800b45c <__sflush_r+0x20>
 800b456:	2000      	movs	r0, #0
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b45e:	2e00      	cmp	r6, #0
 800b460:	d0f9      	beq.n	800b456 <__sflush_r+0x1a>
 800b462:	2300      	movs	r3, #0
 800b464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b468:	682f      	ldr	r7, [r5, #0]
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	d032      	beq.n	800b4d4 <__sflush_r+0x98>
 800b46e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	075a      	lsls	r2, r3, #29
 800b474:	d505      	bpl.n	800b482 <__sflush_r+0x46>
 800b476:	6863      	ldr	r3, [r4, #4]
 800b478:	1ac0      	subs	r0, r0, r3
 800b47a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b47c:	b10b      	cbz	r3, 800b482 <__sflush_r+0x46>
 800b47e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b480:	1ac0      	subs	r0, r0, r3
 800b482:	2300      	movs	r3, #0
 800b484:	4602      	mov	r2, r0
 800b486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b488:	6a21      	ldr	r1, [r4, #32]
 800b48a:	4628      	mov	r0, r5
 800b48c:	47b0      	blx	r6
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	d106      	bne.n	800b4a2 <__sflush_r+0x66>
 800b494:	6829      	ldr	r1, [r5, #0]
 800b496:	291d      	cmp	r1, #29
 800b498:	d82c      	bhi.n	800b4f4 <__sflush_r+0xb8>
 800b49a:	4a2a      	ldr	r2, [pc, #168]	; (800b544 <__sflush_r+0x108>)
 800b49c:	40ca      	lsrs	r2, r1
 800b49e:	07d6      	lsls	r6, r2, #31
 800b4a0:	d528      	bpl.n	800b4f4 <__sflush_r+0xb8>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	6062      	str	r2, [r4, #4]
 800b4a6:	04d9      	lsls	r1, r3, #19
 800b4a8:	6922      	ldr	r2, [r4, #16]
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	d504      	bpl.n	800b4b8 <__sflush_r+0x7c>
 800b4ae:	1c42      	adds	r2, r0, #1
 800b4b0:	d101      	bne.n	800b4b6 <__sflush_r+0x7a>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b903      	cbnz	r3, 800b4b8 <__sflush_r+0x7c>
 800b4b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ba:	602f      	str	r7, [r5, #0]
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d0ca      	beq.n	800b456 <__sflush_r+0x1a>
 800b4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	d002      	beq.n	800b4ce <__sflush_r+0x92>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7ff fb0b 	bl	800aae4 <_free_r>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b4d2:	e7c1      	b.n	800b458 <__sflush_r+0x1c>
 800b4d4:	6a21      	ldr	r1, [r4, #32]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b0      	blx	r6
 800b4dc:	1c41      	adds	r1, r0, #1
 800b4de:	d1c7      	bne.n	800b470 <__sflush_r+0x34>
 800b4e0:	682b      	ldr	r3, [r5, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0c4      	beq.n	800b470 <__sflush_r+0x34>
 800b4e6:	2b1d      	cmp	r3, #29
 800b4e8:	d001      	beq.n	800b4ee <__sflush_r+0xb2>
 800b4ea:	2b16      	cmp	r3, #22
 800b4ec:	d101      	bne.n	800b4f2 <__sflush_r+0xb6>
 800b4ee:	602f      	str	r7, [r5, #0]
 800b4f0:	e7b1      	b.n	800b456 <__sflush_r+0x1a>
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	e7ad      	b.n	800b458 <__sflush_r+0x1c>
 800b4fc:	690f      	ldr	r7, [r1, #16]
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d0a9      	beq.n	800b456 <__sflush_r+0x1a>
 800b502:	0793      	lsls	r3, r2, #30
 800b504:	680e      	ldr	r6, [r1, #0]
 800b506:	bf08      	it	eq
 800b508:	694b      	ldreq	r3, [r1, #20]
 800b50a:	600f      	str	r7, [r1, #0]
 800b50c:	bf18      	it	ne
 800b50e:	2300      	movne	r3, #0
 800b510:	eba6 0807 	sub.w	r8, r6, r7
 800b514:	608b      	str	r3, [r1, #8]
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	dd9c      	ble.n	800b456 <__sflush_r+0x1a>
 800b51c:	6a21      	ldr	r1, [r4, #32]
 800b51e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b520:	4643      	mov	r3, r8
 800b522:	463a      	mov	r2, r7
 800b524:	4628      	mov	r0, r5
 800b526:	47b0      	blx	r6
 800b528:	2800      	cmp	r0, #0
 800b52a:	dc06      	bgt.n	800b53a <__sflush_r+0xfe>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b532:	81a3      	strh	r3, [r4, #12]
 800b534:	f04f 30ff 	mov.w	r0, #4294967295
 800b538:	e78e      	b.n	800b458 <__sflush_r+0x1c>
 800b53a:	4407      	add	r7, r0
 800b53c:	eba8 0800 	sub.w	r8, r8, r0
 800b540:	e7e9      	b.n	800b516 <__sflush_r+0xda>
 800b542:	bf00      	nop
 800b544:	20400001 	.word	0x20400001

0800b548 <_fflush_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	690b      	ldr	r3, [r1, #16]
 800b54c:	4605      	mov	r5, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	b913      	cbnz	r3, 800b558 <_fflush_r+0x10>
 800b552:	2500      	movs	r5, #0
 800b554:	4628      	mov	r0, r5
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	b118      	cbz	r0, 800b562 <_fflush_r+0x1a>
 800b55a:	6983      	ldr	r3, [r0, #24]
 800b55c:	b90b      	cbnz	r3, 800b562 <_fflush_r+0x1a>
 800b55e:	f000 f887 	bl	800b670 <__sinit>
 800b562:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <_fflush_r+0x6c>)
 800b564:	429c      	cmp	r4, r3
 800b566:	d11b      	bne.n	800b5a0 <_fflush_r+0x58>
 800b568:	686c      	ldr	r4, [r5, #4]
 800b56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0ef      	beq.n	800b552 <_fflush_r+0xa>
 800b572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b574:	07d0      	lsls	r0, r2, #31
 800b576:	d404      	bmi.n	800b582 <_fflush_r+0x3a>
 800b578:	0599      	lsls	r1, r3, #22
 800b57a:	d402      	bmi.n	800b582 <_fflush_r+0x3a>
 800b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57e:	f000 f915 	bl	800b7ac <__retarget_lock_acquire_recursive>
 800b582:	4628      	mov	r0, r5
 800b584:	4621      	mov	r1, r4
 800b586:	f7ff ff59 	bl	800b43c <__sflush_r>
 800b58a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b58c:	07da      	lsls	r2, r3, #31
 800b58e:	4605      	mov	r5, r0
 800b590:	d4e0      	bmi.n	800b554 <_fflush_r+0xc>
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	059b      	lsls	r3, r3, #22
 800b596:	d4dd      	bmi.n	800b554 <_fflush_r+0xc>
 800b598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59a:	f000 f908 	bl	800b7ae <__retarget_lock_release_recursive>
 800b59e:	e7d9      	b.n	800b554 <_fflush_r+0xc>
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <_fflush_r+0x70>)
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	d101      	bne.n	800b5aa <_fflush_r+0x62>
 800b5a6:	68ac      	ldr	r4, [r5, #8]
 800b5a8:	e7df      	b.n	800b56a <_fflush_r+0x22>
 800b5aa:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <_fflush_r+0x74>)
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	bf08      	it	eq
 800b5b0:	68ec      	ldreq	r4, [r5, #12]
 800b5b2:	e7da      	b.n	800b56a <_fflush_r+0x22>
 800b5b4:	0800c8e8 	.word	0x0800c8e8
 800b5b8:	0800c908 	.word	0x0800c908
 800b5bc:	0800c8c8 	.word	0x0800c8c8

0800b5c0 <std>:
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ce:	6083      	str	r3, [r0, #8]
 800b5d0:	8181      	strh	r1, [r0, #12]
 800b5d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b5d4:	81c2      	strh	r2, [r0, #14]
 800b5d6:	6183      	str	r3, [r0, #24]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	2208      	movs	r2, #8
 800b5dc:	305c      	adds	r0, #92	; 0x5c
 800b5de:	f7ff fa79 	bl	800aad4 <memset>
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <std+0x38>)
 800b5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5e6:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <std+0x3c>)
 800b5e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5ea:	4b05      	ldr	r3, [pc, #20]	; (800b600 <std+0x40>)
 800b5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <std+0x44>)
 800b5f0:	6224      	str	r4, [r4, #32]
 800b5f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0800b891 	.word	0x0800b891
 800b5fc:	0800b8b3 	.word	0x0800b8b3
 800b600:	0800b8eb 	.word	0x0800b8eb
 800b604:	0800b90f 	.word	0x0800b90f

0800b608 <_cleanup_r>:
 800b608:	4901      	ldr	r1, [pc, #4]	; (800b610 <_cleanup_r+0x8>)
 800b60a:	f000 b8af 	b.w	800b76c <_fwalk_reent>
 800b60e:	bf00      	nop
 800b610:	0800b549 	.word	0x0800b549

0800b614 <__sfmoreglue>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	1e4a      	subs	r2, r1, #1
 800b618:	2568      	movs	r5, #104	; 0x68
 800b61a:	4355      	muls	r5, r2
 800b61c:	460e      	mov	r6, r1
 800b61e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b622:	f7ff faaf 	bl	800ab84 <_malloc_r>
 800b626:	4604      	mov	r4, r0
 800b628:	b140      	cbz	r0, 800b63c <__sfmoreglue+0x28>
 800b62a:	2100      	movs	r1, #0
 800b62c:	e9c0 1600 	strd	r1, r6, [r0]
 800b630:	300c      	adds	r0, #12
 800b632:	60a0      	str	r0, [r4, #8]
 800b634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b638:	f7ff fa4c 	bl	800aad4 <memset>
 800b63c:	4620      	mov	r0, r4
 800b63e:	bd70      	pop	{r4, r5, r6, pc}

0800b640 <__sfp_lock_acquire>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__sfp_lock_acquire+0x8>)
 800b642:	f000 b8b3 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800b646:	bf00      	nop
 800b648:	20000f0e 	.word	0x20000f0e

0800b64c <__sfp_lock_release>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__sfp_lock_release+0x8>)
 800b64e:	f000 b8ae 	b.w	800b7ae <__retarget_lock_release_recursive>
 800b652:	bf00      	nop
 800b654:	20000f0e 	.word	0x20000f0e

0800b658 <__sinit_lock_acquire>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sinit_lock_acquire+0x8>)
 800b65a:	f000 b8a7 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	20000f09 	.word	0x20000f09

0800b664 <__sinit_lock_release>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sinit_lock_release+0x8>)
 800b666:	f000 b8a2 	b.w	800b7ae <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	20000f09 	.word	0x20000f09

0800b670 <__sinit>:
 800b670:	b510      	push	{r4, lr}
 800b672:	4604      	mov	r4, r0
 800b674:	f7ff fff0 	bl	800b658 <__sinit_lock_acquire>
 800b678:	69a3      	ldr	r3, [r4, #24]
 800b67a:	b11b      	cbz	r3, 800b684 <__sinit+0x14>
 800b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b680:	f7ff bff0 	b.w	800b664 <__sinit_lock_release>
 800b684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b688:	6523      	str	r3, [r4, #80]	; 0x50
 800b68a:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <__sinit+0x68>)
 800b68c:	4a13      	ldr	r2, [pc, #76]	; (800b6dc <__sinit+0x6c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	62a2      	str	r2, [r4, #40]	; 0x28
 800b692:	42a3      	cmp	r3, r4
 800b694:	bf04      	itt	eq
 800b696:	2301      	moveq	r3, #1
 800b698:	61a3      	streq	r3, [r4, #24]
 800b69a:	4620      	mov	r0, r4
 800b69c:	f000 f820 	bl	800b6e0 <__sfp>
 800b6a0:	6060      	str	r0, [r4, #4]
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 f81c 	bl	800b6e0 <__sfp>
 800b6a8:	60a0      	str	r0, [r4, #8]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 f818 	bl	800b6e0 <__sfp>
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	60e0      	str	r0, [r4, #12]
 800b6b4:	2104      	movs	r1, #4
 800b6b6:	6860      	ldr	r0, [r4, #4]
 800b6b8:	f7ff ff82 	bl	800b5c0 <std>
 800b6bc:	68a0      	ldr	r0, [r4, #8]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	2109      	movs	r1, #9
 800b6c2:	f7ff ff7d 	bl	800b5c0 <std>
 800b6c6:	68e0      	ldr	r0, [r4, #12]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	2112      	movs	r1, #18
 800b6cc:	f7ff ff78 	bl	800b5c0 <std>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	61a3      	str	r3, [r4, #24]
 800b6d4:	e7d2      	b.n	800b67c <__sinit+0xc>
 800b6d6:	bf00      	nop
 800b6d8:	0800c890 	.word	0x0800c890
 800b6dc:	0800b609 	.word	0x0800b609

0800b6e0 <__sfp>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	f7ff ffac 	bl	800b640 <__sfp_lock_acquire>
 800b6e8:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <__sfp+0x84>)
 800b6ea:	681e      	ldr	r6, [r3, #0]
 800b6ec:	69b3      	ldr	r3, [r6, #24]
 800b6ee:	b913      	cbnz	r3, 800b6f6 <__sfp+0x16>
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff ffbd 	bl	800b670 <__sinit>
 800b6f6:	3648      	adds	r6, #72	; 0x48
 800b6f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	d503      	bpl.n	800b708 <__sfp+0x28>
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	b30b      	cbz	r3, 800b748 <__sfp+0x68>
 800b704:	6836      	ldr	r6, [r6, #0]
 800b706:	e7f7      	b.n	800b6f8 <__sfp+0x18>
 800b708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b70c:	b9d5      	cbnz	r5, 800b744 <__sfp+0x64>
 800b70e:	4b16      	ldr	r3, [pc, #88]	; (800b768 <__sfp+0x88>)
 800b710:	60e3      	str	r3, [r4, #12]
 800b712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b716:	6665      	str	r5, [r4, #100]	; 0x64
 800b718:	f000 f847 	bl	800b7aa <__retarget_lock_init_recursive>
 800b71c:	f7ff ff96 	bl	800b64c <__sfp_lock_release>
 800b720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b728:	6025      	str	r5, [r4, #0]
 800b72a:	61a5      	str	r5, [r4, #24]
 800b72c:	2208      	movs	r2, #8
 800b72e:	4629      	mov	r1, r5
 800b730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b734:	f7ff f9ce 	bl	800aad4 <memset>
 800b738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b73c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b740:	4620      	mov	r0, r4
 800b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b744:	3468      	adds	r4, #104	; 0x68
 800b746:	e7d9      	b.n	800b6fc <__sfp+0x1c>
 800b748:	2104      	movs	r1, #4
 800b74a:	4638      	mov	r0, r7
 800b74c:	f7ff ff62 	bl	800b614 <__sfmoreglue>
 800b750:	4604      	mov	r4, r0
 800b752:	6030      	str	r0, [r6, #0]
 800b754:	2800      	cmp	r0, #0
 800b756:	d1d5      	bne.n	800b704 <__sfp+0x24>
 800b758:	f7ff ff78 	bl	800b64c <__sfp_lock_release>
 800b75c:	230c      	movs	r3, #12
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	e7ee      	b.n	800b740 <__sfp+0x60>
 800b762:	bf00      	nop
 800b764:	0800c890 	.word	0x0800c890
 800b768:	ffff0001 	.word	0xffff0001

0800b76c <_fwalk_reent>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4606      	mov	r6, r0
 800b772:	4688      	mov	r8, r1
 800b774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b778:	2700      	movs	r7, #0
 800b77a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b77e:	f1b9 0901 	subs.w	r9, r9, #1
 800b782:	d505      	bpl.n	800b790 <_fwalk_reent+0x24>
 800b784:	6824      	ldr	r4, [r4, #0]
 800b786:	2c00      	cmp	r4, #0
 800b788:	d1f7      	bne.n	800b77a <_fwalk_reent+0xe>
 800b78a:	4638      	mov	r0, r7
 800b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b790:	89ab      	ldrh	r3, [r5, #12]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d907      	bls.n	800b7a6 <_fwalk_reent+0x3a>
 800b796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b79a:	3301      	adds	r3, #1
 800b79c:	d003      	beq.n	800b7a6 <_fwalk_reent+0x3a>
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	47c0      	blx	r8
 800b7a4:	4307      	orrs	r7, r0
 800b7a6:	3568      	adds	r5, #104	; 0x68
 800b7a8:	e7e9      	b.n	800b77e <_fwalk_reent+0x12>

0800b7aa <__retarget_lock_init_recursive>:
 800b7aa:	4770      	bx	lr

0800b7ac <__retarget_lock_acquire_recursive>:
 800b7ac:	4770      	bx	lr

0800b7ae <__retarget_lock_release_recursive>:
 800b7ae:	4770      	bx	lr

0800b7b0 <__swhatbuf_r>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	460e      	mov	r6, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	2900      	cmp	r1, #0
 800b7ba:	b096      	sub	sp, #88	; 0x58
 800b7bc:	4614      	mov	r4, r2
 800b7be:	461d      	mov	r5, r3
 800b7c0:	da07      	bge.n	800b7d2 <__swhatbuf_r+0x22>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	89b3      	ldrh	r3, [r6, #12]
 800b7c8:	061a      	lsls	r2, r3, #24
 800b7ca:	d410      	bmi.n	800b7ee <__swhatbuf_r+0x3e>
 800b7cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d0:	e00e      	b.n	800b7f0 <__swhatbuf_r+0x40>
 800b7d2:	466a      	mov	r2, sp
 800b7d4:	f000 f8c2 	bl	800b95c <_fstat_r>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	dbf2      	blt.n	800b7c2 <__swhatbuf_r+0x12>
 800b7dc:	9a01      	ldr	r2, [sp, #4]
 800b7de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7e6:	425a      	negs	r2, r3
 800b7e8:	415a      	adcs	r2, r3
 800b7ea:	602a      	str	r2, [r5, #0]
 800b7ec:	e7ee      	b.n	800b7cc <__swhatbuf_r+0x1c>
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	b016      	add	sp, #88	; 0x58
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}

0800b7f8 <__smakebuf_r>:
 800b7f8:	898b      	ldrh	r3, [r1, #12]
 800b7fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7fc:	079d      	lsls	r5, r3, #30
 800b7fe:	4606      	mov	r6, r0
 800b800:	460c      	mov	r4, r1
 800b802:	d507      	bpl.n	800b814 <__smakebuf_r+0x1c>
 800b804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	2301      	movs	r3, #1
 800b80e:	6163      	str	r3, [r4, #20]
 800b810:	b002      	add	sp, #8
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	ab01      	add	r3, sp, #4
 800b816:	466a      	mov	r2, sp
 800b818:	f7ff ffca 	bl	800b7b0 <__swhatbuf_r>
 800b81c:	9900      	ldr	r1, [sp, #0]
 800b81e:	4605      	mov	r5, r0
 800b820:	4630      	mov	r0, r6
 800b822:	f7ff f9af 	bl	800ab84 <_malloc_r>
 800b826:	b948      	cbnz	r0, 800b83c <__smakebuf_r+0x44>
 800b828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82c:	059a      	lsls	r2, r3, #22
 800b82e:	d4ef      	bmi.n	800b810 <__smakebuf_r+0x18>
 800b830:	f023 0303 	bic.w	r3, r3, #3
 800b834:	f043 0302 	orr.w	r3, r3, #2
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	e7e3      	b.n	800b804 <__smakebuf_r+0xc>
 800b83c:	4b0d      	ldr	r3, [pc, #52]	; (800b874 <__smakebuf_r+0x7c>)
 800b83e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	9b00      	ldr	r3, [sp, #0]
 800b84c:	6163      	str	r3, [r4, #20]
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	6120      	str	r0, [r4, #16]
 800b852:	b15b      	cbz	r3, 800b86c <__smakebuf_r+0x74>
 800b854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b858:	4630      	mov	r0, r6
 800b85a:	f000 f891 	bl	800b980 <_isatty_r>
 800b85e:	b128      	cbz	r0, 800b86c <__smakebuf_r+0x74>
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	f023 0303 	bic.w	r3, r3, #3
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	89a0      	ldrh	r0, [r4, #12]
 800b86e:	4305      	orrs	r5, r0
 800b870:	81a5      	strh	r5, [r4, #12]
 800b872:	e7cd      	b.n	800b810 <__smakebuf_r+0x18>
 800b874:	0800b609 	.word	0x0800b609

0800b878 <__malloc_lock>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__malloc_lock+0x8>)
 800b87a:	f7ff bf97 	b.w	800b7ac <__retarget_lock_acquire_recursive>
 800b87e:	bf00      	nop
 800b880:	20000f0a 	.word	0x20000f0a

0800b884 <__malloc_unlock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_unlock+0x8>)
 800b886:	f7ff bf92 	b.w	800b7ae <__retarget_lock_release_recursive>
 800b88a:	bf00      	nop
 800b88c:	20000f0a 	.word	0x20000f0a

0800b890 <__sread>:
 800b890:	b510      	push	{r4, lr}
 800b892:	460c      	mov	r4, r1
 800b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b898:	f000 f894 	bl	800b9c4 <_read_r>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	bfab      	itete	ge
 800b8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8a4:	181b      	addge	r3, r3, r0
 800b8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8aa:	bfac      	ite	ge
 800b8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ae:	81a3      	strhlt	r3, [r4, #12]
 800b8b0:	bd10      	pop	{r4, pc}

0800b8b2 <__swrite>:
 800b8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b6:	461f      	mov	r7, r3
 800b8b8:	898b      	ldrh	r3, [r1, #12]
 800b8ba:	05db      	lsls	r3, r3, #23
 800b8bc:	4605      	mov	r5, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	4616      	mov	r6, r2
 800b8c2:	d505      	bpl.n	800b8d0 <__swrite+0x1e>
 800b8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f000 f868 	bl	800b9a0 <_lseek_r>
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	463b      	mov	r3, r7
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	f000 b817 	b.w	800b918 <_write_r>

0800b8ea <__sseek>:
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f2:	f000 f855 	bl	800b9a0 <_lseek_r>
 800b8f6:	1c43      	adds	r3, r0, #1
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	bf15      	itete	ne
 800b8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b906:	81a3      	strheq	r3, [r4, #12]
 800b908:	bf18      	it	ne
 800b90a:	81a3      	strhne	r3, [r4, #12]
 800b90c:	bd10      	pop	{r4, pc}

0800b90e <__sclose>:
 800b90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b912:	f000 b813 	b.w	800b93c <_close_r>
	...

0800b918 <_write_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d07      	ldr	r5, [pc, #28]	; (800b938 <_write_r+0x20>)
 800b91c:	4604      	mov	r4, r0
 800b91e:	4608      	mov	r0, r1
 800b920:	4611      	mov	r1, r2
 800b922:	2200      	movs	r2, #0
 800b924:	602a      	str	r2, [r5, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	f7f5 fe5f 	bl	80015ea <_write>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_write_r+0x1e>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_write_r+0x1e>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	20000f10 	.word	0x20000f10

0800b93c <_close_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d06      	ldr	r5, [pc, #24]	; (800b958 <_close_r+0x1c>)
 800b940:	2300      	movs	r3, #0
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f5 fe6b 	bl	8001622 <_close>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_close_r+0x1a>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_close_r+0x1a>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20000f10 	.word	0x20000f10

0800b95c <_fstat_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	; (800b97c <_fstat_r+0x20>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	f7f5 fe66 	bl	800163a <_fstat>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d102      	bne.n	800b978 <_fstat_r+0x1c>
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	b103      	cbz	r3, 800b978 <_fstat_r+0x1c>
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	20000f10 	.word	0x20000f10

0800b980 <_isatty_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_isatty_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f5 fe65 	bl	800165a <_isatty>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_isatty_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_isatty_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000f10 	.word	0x20000f10

0800b9a0 <_lseek_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	; (800b9c0 <_lseek_r+0x20>)
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	602a      	str	r2, [r5, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f7f5 fe5e 	bl	8001670 <_lseek>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_lseek_r+0x1e>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_lseek_r+0x1e>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20000f10 	.word	0x20000f10

0800b9c4 <_read_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	; (800b9e4 <_read_r+0x20>)
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	602a      	str	r2, [r5, #0]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f7f5 fdec 	bl	80015b0 <_read>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_read_r+0x1e>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_read_r+0x1e>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20000f10 	.word	0x20000f10

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
